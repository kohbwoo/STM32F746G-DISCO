
STM32F746G-DISCO_UART6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a24  08004a24  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a2c  08004a2c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000005c  08004a90  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004a90  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea33  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb3  00000000  00000000  0002eabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00031718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002515a  00000000  00000000  00032400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1d7  00000000  00000000  0005755a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb7eb  00000000  00000000  00066731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151f1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003930  00000000  00000000  00151f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080049e8 	.word	0x080049e8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	080049e8 	.word	0x080049e8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <Line_Change>:
unsigned char addr[4] = { 0, 0, 0, 0 };
void UART_Start();
unsigned char UART_Print();


void Line_Change(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, &Enter[0], 1, 10);
 80005d8:	230a      	movs	r3, #10
 80005da:	2201      	movs	r2, #1
 80005dc:	490b      	ldr	r1, [pc, #44]	; (800060c <Line_Change+0x38>)
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <Line_Change+0x3c>)
 80005e0:	f003 f98c 	bl	80038fc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &Enter[1], 1, 10);
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	490a      	ldr	r1, [pc, #40]	; (8000614 <Line_Change+0x40>)
 80005ea:	4809      	ldr	r0, [pc, #36]	; (8000610 <Line_Change+0x3c>)
 80005ec:	f003 f986 	bl	80038fc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, &Enter[0], 1, 10);
 80005f0:	230a      	movs	r3, #10
 80005f2:	2201      	movs	r2, #1
 80005f4:	4905      	ldr	r1, [pc, #20]	; (800060c <Line_Change+0x38>)
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <Line_Change+0x44>)
 80005f8:	f003 f980 	bl	80038fc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, &Enter[1], 1, 10);
 80005fc:	230a      	movs	r3, #10
 80005fe:	2201      	movs	r2, #1
 8000600:	4904      	ldr	r1, [pc, #16]	; (8000614 <Line_Change+0x40>)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <Line_Change+0x44>)
 8000604:	f003 f97a 	bl	80038fc <HAL_UART_Transmit>

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000004c 	.word	0x2000004c
 8000610:	200000d4 	.word	0x200000d4
 8000614:	2000004d 	.word	0x2000004d
 8000618:	2000015c 	.word	0x2000015c

0800061c <UART_Start>:


void UART_Start(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	for (int i = 0; i <59; i++) {
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e00a      	b.n	800063e <UART_Start+0x22>
		HAL_UART_Transmit(&huart1, &UART_Text_Start[i], 1, 10);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a0c      	ldr	r2, [pc, #48]	; (800065c <UART_Start+0x40>)
 800062c:	1899      	adds	r1, r3, r2
 800062e:	230a      	movs	r3, #10
 8000630:	2201      	movs	r2, #1
 8000632:	480b      	ldr	r0, [pc, #44]	; (8000660 <UART_Start+0x44>)
 8000634:	f003 f962 	bl	80038fc <HAL_UART_Transmit>
	for (int i = 0; i <59; i++) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b3a      	cmp	r3, #58	; 0x3a
 8000642:	ddf1      	ble.n	8000628 <UART_Start+0xc>
	}
	HAL_UART_Transmit(&huart1, &rx1_data, 1, 10);
 8000644:	230a      	movs	r3, #10
 8000646:	2201      	movs	r2, #1
 8000648:	4906      	ldr	r1, [pc, #24]	; (8000664 <UART_Start+0x48>)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <UART_Start+0x44>)
 800064c:	f003 f956 	bl	80038fc <HAL_UART_Transmit>
	Line_Change();
 8000650:	f7ff ffc0 	bl	80005d4 <Line_Change>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000010 	.word	0x20000010
 8000660:	200000d4 	.word	0x200000d4
 8000664:	20000159 	.word	0x20000159

08000668 <UART_Print>:

unsigned char UART_Print() {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
	if (rx1_data == 84 || rx1_data == 116) { //UART 입력이 T 또는 t인경우 실행
 800066e:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <UART_Print+0x100>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b54      	cmp	r3, #84	; 0x54
 8000674:	d003      	beq.n	800067e <UART_Print+0x16>
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <UART_Print+0x100>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b74      	cmp	r3, #116	; 0x74
 800067c:	d148      	bne.n	8000710 <UART_Print+0xa8>
		for (int i = 0; i < 7; i++) {
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	e00a      	b.n	800069a <UART_Print+0x32>
			HAL_UART_Transmit(&huart1, &UART_Text_Input[i], 1, 10);
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4a39      	ldr	r2, [pc, #228]	; (800076c <UART_Print+0x104>)
 8000688:	1899      	adds	r1, r3, r2
 800068a:	230a      	movs	r3, #10
 800068c:	2201      	movs	r2, #1
 800068e:	4838      	ldr	r0, [pc, #224]	; (8000770 <UART_Print+0x108>)
 8000690:	f003 f934 	bl	80038fc <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2b06      	cmp	r3, #6
 800069e:	ddf1      	ble.n	8000684 <UART_Print+0x1c>
		}
		HAL_UART_Transmit(&huart1, &rx1_data, 1, 10);
 80006a0:	230a      	movs	r3, #10
 80006a2:	2201      	movs	r2, #1
 80006a4:	4930      	ldr	r1, [pc, #192]	; (8000768 <UART_Print+0x100>)
 80006a6:	4832      	ldr	r0, [pc, #200]	; (8000770 <UART_Print+0x108>)
 80006a8:	f003 f928 	bl	80038fc <HAL_UART_Transmit>
		Line_Change();
 80006ac:	f7ff ff92 	bl	80005d4 <Line_Change>

		for (int i = 0; i < 7; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	e00a      	b.n	80006cc <UART_Print+0x64>
			HAL_UART_Transmit(&huart1, &UART_Text_Time[i], 1, 10);
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	4a2e      	ldr	r2, [pc, #184]	; (8000774 <UART_Print+0x10c>)
 80006ba:	1899      	adds	r1, r3, r2
 80006bc:	230a      	movs	r3, #10
 80006be:	2201      	movs	r2, #1
 80006c0:	482b      	ldr	r0, [pc, #172]	; (8000770 <UART_Print+0x108>)
 80006c2:	f003 f91b 	bl	80038fc <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	3301      	adds	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	ddf1      	ble.n	80006b6 <UART_Print+0x4e>
		}

		unsigned char tmplist[4];

		for (int i = 0; i < 4; i++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e015      	b.n	8000704 <UART_Print+0x9c>
			tmplist[i] = addr[i] + 48;
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <UART_Print+0x110>)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	3330      	adds	r3, #48	; 0x30
 80006e2:	b2d9      	uxtb	r1, r3
 80006e4:	1d3a      	adds	r2, r7, #4
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	460a      	mov	r2, r1
 80006ec:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &tmplist[i], 1, 10);
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	18d1      	adds	r1, r2, r3
 80006f4:	230a      	movs	r3, #10
 80006f6:	2201      	movs	r2, #1
 80006f8:	481d      	ldr	r0, [pc, #116]	; (8000770 <UART_Print+0x108>)
 80006fa:	f003 f8ff 	bl	80038fc <HAL_UART_Transmit>
		for (int i = 0; i < 4; i++) {
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b03      	cmp	r3, #3
 8000708:	dde6      	ble.n	80006d8 <UART_Print+0x70>
		}
		Line_Change();
 800070a:	f7ff ff63 	bl	80005d4 <Line_Change>
	if (rx1_data == 84 || rx1_data == 116) { //UART 입력이 T 또는 t인경우 실행
 800070e:	e026      	b.n	800075e <UART_Print+0xf6>

	} else {
		for (int i = 0; i < 7; i++) {
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	e012      	b.n	800073c <UART_Print+0xd4>
			HAL_UART_Transmit(&huart1, &UART_Text_Input[i], 1, 10);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4a14      	ldr	r2, [pc, #80]	; (800076c <UART_Print+0x104>)
 800071a:	1899      	adds	r1, r3, r2
 800071c:	230a      	movs	r3, #10
 800071e:	2201      	movs	r2, #1
 8000720:	4813      	ldr	r0, [pc, #76]	; (8000770 <UART_Print+0x108>)
 8000722:	f003 f8eb 	bl	80038fc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart6, &UART_Text_Input[i], 1, 10);
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	4a10      	ldr	r2, [pc, #64]	; (800076c <UART_Print+0x104>)
 800072a:	1899      	adds	r1, r3, r2
 800072c:	230a      	movs	r3, #10
 800072e:	2201      	movs	r2, #1
 8000730:	4812      	ldr	r0, [pc, #72]	; (800077c <UART_Print+0x114>)
 8000732:	f003 f8e3 	bl	80038fc <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	3301      	adds	r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b06      	cmp	r3, #6
 8000740:	dde9      	ble.n	8000716 <UART_Print+0xae>
		}
		HAL_UART_Transmit(&huart1, &rx1_data, 1, 10);
 8000742:	230a      	movs	r3, #10
 8000744:	2201      	movs	r2, #1
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <UART_Print+0x100>)
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <UART_Print+0x108>)
 800074a:	f003 f8d7 	bl	80038fc <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart6, &rx6_data, 1, 10);
 800074e:	230a      	movs	r3, #10
 8000750:	2201      	movs	r2, #1
 8000752:	490b      	ldr	r1, [pc, #44]	; (8000780 <UART_Print+0x118>)
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <UART_Print+0x114>)
 8000756:	f003 f8d1 	bl	80038fc <HAL_UART_Transmit>
		Line_Change();
 800075a:	f7ff ff3b 	bl	80005d4 <Line_Change>
	}
	return 0;
 800075e:	2300      	movs	r3, #0

}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000159 	.word	0x20000159
 800076c:	20000000 	.word	0x20000000
 8000770:	200000d4 	.word	0x200000d4
 8000774:	20000008 	.word	0x20000008
 8000778:	20000080 	.word	0x20000080
 800077c:	2000015c 	.word	0x2000015c
 8000780:	20000158 	.word	0x20000158

08000784 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <HAL_UART_RxCpltCallback+0x44>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d107      	bne.n	80007a6 <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8000796:	2201      	movs	r2, #1
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <HAL_UART_RxCpltCallback+0x48>)
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <HAL_UART_RxCpltCallback+0x4c>)
 800079c:	f003 f941 	bl	8003a22 <HAL_UART_Receive_IT>
		UART_Input = 1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_UART_RxCpltCallback+0x50>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	701a      	strb	r2, [r3, #0]

	}
	if (huart->Instance == USART1) {
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_UART_RxCpltCallback+0x44>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d107      	bne.n	80007c0 <HAL_UART_RxCpltCallback+0x3c>
		HAL_UART_Receive_IT(&huart6, &rx6_data, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <HAL_UART_RxCpltCallback+0x54>)
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <HAL_UART_RxCpltCallback+0x58>)
 80007b6:	f003 f934 	bl	8003a22 <HAL_UART_Receive_IT>
		UART_Input = 1;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_UART_RxCpltCallback+0x50>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]

	}
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40011000 	.word	0x40011000
 80007cc:	20000159 	.word	0x20000159
 80007d0:	200000d4 	.word	0x200000d4
 80007d4:	2000007c 	.word	0x2000007c
 80007d8:	20000158 	.word	0x20000158
 80007dc:	2000015c 	.word	0x2000015c

080007e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //타이머 인터럽트 코드
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d109      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x26>

		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80007f2:	2102      	movs	r1, #2
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007f6:	f001 fa76 	bl	8001ce6 <HAL_GPIO_TogglePin>
		input = input + 1;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000804:	801a      	strh	r2, [r3, #0]
	}
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40000400 	.word	0x40000400
 8000814:	40022000 	.word	0x40022000
 8000818:	2000007e 	.word	0x2000007e

0800081c <Num_Select>:

unsigned char Num_Select(unsigned char PrintNumx16) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	if (PrintNumx16 & 0x40) {
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082c:	2b00      	cmp	r3, #0
 800082e:	d005      	beq.n	800083c <Num_Select+0x20>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, 1);
 8000830:	2201      	movs	r2, #1
 8000832:	2104      	movs	r1, #4
 8000834:	4836      	ldr	r0, [pc, #216]	; (8000910 <Num_Select+0xf4>)
 8000836:	f001 fa3d 	bl	8001cb4 <HAL_GPIO_WritePin>
 800083a:	e004      	b.n	8000846 <Num_Select+0x2a>
	} else {
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2104      	movs	r1, #4
 8000840:	4833      	ldr	r0, [pc, #204]	; (8000910 <Num_Select+0xf4>)
 8000842:	f001 fa37 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x20) {
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	2b00      	cmp	r3, #0
 800084e:	d005      	beq.n	800085c <Num_Select+0x40>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, 1);
 8000850:	2201      	movs	r2, #1
 8000852:	2108      	movs	r1, #8
 8000854:	482e      	ldr	r0, [pc, #184]	; (8000910 <Num_Select+0xf4>)
 8000856:	f001 fa2d 	bl	8001cb4 <HAL_GPIO_WritePin>
 800085a:	e004      	b.n	8000866 <Num_Select+0x4a>
	} else {
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2108      	movs	r1, #8
 8000860:	482b      	ldr	r0, [pc, #172]	; (8000910 <Num_Select+0xf4>)
 8000862:	f001 fa27 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x10) {
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 0310 	and.w	r3, r3, #16
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <Num_Select+0x60>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, 1);
 8000870:	2201      	movs	r2, #1
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	4827      	ldr	r0, [pc, #156]	; (8000914 <Num_Select+0xf8>)
 8000876:	f001 fa1d 	bl	8001cb4 <HAL_GPIO_WritePin>
 800087a:	e004      	b.n	8000886 <Num_Select+0x6a>
	} else {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2140      	movs	r1, #64	; 0x40
 8000880:	4824      	ldr	r0, [pc, #144]	; (8000914 <Num_Select+0xf8>)
 8000882:	f001 fa17 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x08) {
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 0308 	and.w	r3, r3, #8
 800088c:	2b00      	cmp	r3, #0
 800088e:	d005      	beq.n	800089c <Num_Select+0x80>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, 1);
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	481e      	ldr	r0, [pc, #120]	; (8000910 <Num_Select+0xf4>)
 8000896:	f001 fa0d 	bl	8001cb4 <HAL_GPIO_WritePin>
 800089a:	e004      	b.n	80008a6 <Num_Select+0x8a>
	} else {
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	481b      	ldr	r0, [pc, #108]	; (8000910 <Num_Select+0xf4>)
 80008a2:	f001 fa07 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x04) {
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d005      	beq.n	80008bc <Num_Select+0xa0>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2180      	movs	r1, #128	; 0x80
 80008b4:	4818      	ldr	r0, [pc, #96]	; (8000918 <Num_Select+0xfc>)
 80008b6:	f001 f9fd 	bl	8001cb4 <HAL_GPIO_WritePin>
 80008ba:	e004      	b.n	80008c6 <Num_Select+0xaa>
	} else {
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	4815      	ldr	r0, [pc, #84]	; (8000918 <Num_Select+0xfc>)
 80008c2:	f001 f9f7 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x02) {
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d005      	beq.n	80008dc <Num_Select+0xc0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <Num_Select+0x100>)
 80008d6:	f001 f9ed 	bl	8001cb4 <HAL_GPIO_WritePin>
 80008da:	e004      	b.n	80008e6 <Num_Select+0xca>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <Num_Select+0x100>)
 80008e2:	f001 f9e7 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x01) {
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d005      	beq.n	80008fc <Num_Select+0xe0>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <Num_Select+0xfc>)
 80008f6:	f001 f9dd 	bl	8001cb4 <HAL_GPIO_WritePin>
 80008fa:	e004      	b.n	8000906 <Num_Select+0xea>
	} else {
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <Num_Select+0xfc>)
 8000902:	f001 f9d7 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40022000 	.word	0x40022000
 8000914:	40021c00 	.word	0x40021c00
 8000918:	40021800 	.word	0x40021800
 800091c:	40020400 	.word	0x40020400

08000920 <Segment_Select>:

unsigned char Segment_Select(unsigned char SegmentNumx16,
		unsigned char PrintNumx16) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	460a      	mov	r2, r1
 800092a:	71fb      	strb	r3, [r7, #7]
 800092c:	4613      	mov	r3, r2
 800092e:	71bb      	strb	r3, [r7, #6]
	//출력할 세그먼트 결정

	if (SegmentNumx16 & 0x08) {
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <Segment_Select+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000940:	4824      	ldr	r0, [pc, #144]	; (80009d4 <Segment_Select+0xb4>)
 8000942:	f001 f9b7 	bl	8001cb4 <HAL_GPIO_WritePin>
 8000946:	e005      	b.n	8000954 <Segment_Select+0x34>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094e:	4821      	ldr	r0, [pc, #132]	; (80009d4 <Segment_Select+0xb4>)
 8000950:	f001 f9b0 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (SegmentNumx16 & 0x04) {
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	2b00      	cmp	r3, #0
 800095c:	d006      	beq.n	800096c <Segment_Select+0x4c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000964:	481b      	ldr	r0, [pc, #108]	; (80009d4 <Segment_Select+0xb4>)
 8000966:	f001 f9a5 	bl	8001cb4 <HAL_GPIO_WritePin>
 800096a:	e005      	b.n	8000978 <Segment_Select+0x58>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000972:	4818      	ldr	r0, [pc, #96]	; (80009d4 <Segment_Select+0xb4>)
 8000974:	f001 f99e 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (SegmentNumx16 & 0x02) {
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d006      	beq.n	8000990 <Segment_Select+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000982:	2201      	movs	r2, #1
 8000984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <Segment_Select+0xb8>)
 800098a:	f001 f993 	bl	8001cb4 <HAL_GPIO_WritePin>
 800098e:	e005      	b.n	800099c <Segment_Select+0x7c>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4810      	ldr	r0, [pc, #64]	; (80009d8 <Segment_Select+0xb8>)
 8000998:	f001 f98c 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	if (SegmentNumx16 & 0x01) {
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d006      	beq.n	80009b4 <Segment_Select+0x94>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ac:	480a      	ldr	r0, [pc, #40]	; (80009d8 <Segment_Select+0xb8>)
 80009ae:	f001 f981 	bl	8001cb4 <HAL_GPIO_WritePin>
 80009b2:	e005      	b.n	80009c0 <Segment_Select+0xa0>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ba:	4807      	ldr	r0, [pc, #28]	; (80009d8 <Segment_Select+0xb8>)
 80009bc:	f001 f97a 	bl	8001cb4 <HAL_GPIO_WritePin>
	}
	Num_Select(PrintNumx16);
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff2a 	bl	800081c <Num_Select>
	return 0;
 80009c8:	2300      	movs	r3, #0

}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40020000 	.word	0x40020000

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80009e2:	f7ff fd8d 	bl	8000500 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80009e6:	f7ff fdb1 	bl	800054c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ea:	f000 fd7a 	bl	80014e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ee:	f000 f8ef 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f000 fa2f 	bl	8000e54 <MX_GPIO_Init>
  MX_TIM3_Init();
 80009f6:	f000 f97d 	bl	8000cf4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80009fa:	f000 f9cb 	bl	8000d94 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009fe:	f000 f9f9 	bl	8000df4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3); // 타이머 인터럽트 시작 디버그 할경우 주석처리 해야함
 8000a02:	4865      	ldr	r0, [pc, #404]	; (8000b98 <main+0x1bc>)
 8000a04:	f002 fac0 	bl	8002f88 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart1, &rx1_data, 1); // UART인터럽트 한바이트 들어오면 시작
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4964      	ldr	r1, [pc, #400]	; (8000b9c <main+0x1c0>)
 8000a0c:	4864      	ldr	r0, [pc, #400]	; (8000ba0 <main+0x1c4>)
 8000a0e:	f003 f808 	bl	8003a22 <HAL_UART_Receive_IT>
  	HAL_UART_Receive_IT(&huart6, &rx6_data, 1); // UART인터럽트 한바이트 들어오면 시작
 8000a12:	2201      	movs	r2, #1
 8000a14:	4963      	ldr	r1, [pc, #396]	; (8000ba4 <main+0x1c8>)
 8000a16:	4864      	ldr	r0, [pc, #400]	; (8000ba8 <main+0x1cc>)
 8000a18:	f003 f803 	bl	8003a22 <HAL_UART_Receive_IT>
  	unsigned char List_Of_Segments[4] = { 0x01, 0x02, 0x04, 0x08 };
 8000a1c:	4b63      	ldr	r3, [pc, #396]	; (8000bac <main+0x1d0>)
 8000a1e:	613b      	str	r3, [r7, #16]
  	unsigned char List_Of_Segment_Info[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99,
 8000a20:	4a63      	ldr	r2, [pc, #396]	; (8000bb0 <main+0x1d4>)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a26:	c303      	stmia	r3!, {r0, r1}
 8000a28:	801a      	strh	r2, [r3, #0]
  			0x92, 0x82, 0xD8, 0x80, 0x98 };
  	unsigned short delaytime = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	82fb      	strh	r3, [r7, #22]
  	UART_Start();
 8000a2e:	f7ff fdf5 	bl	800061c <UART_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Loop_Count++;
 8000a32:	4b60      	ldr	r3, [pc, #384]	; (8000bb4 <main+0x1d8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	4a5e      	ldr	r2, [pc, #376]	; (8000bb4 <main+0x1d8>)
 8000a3a:	6013      	str	r3, [r2, #0]
	  		if (input % 100 == 60) {
 8000a3c:	4b5e      	ldr	r3, [pc, #376]	; (8000bb8 <main+0x1dc>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	4a5e      	ldr	r2, [pc, #376]	; (8000bbc <main+0x1e0>)
 8000a42:	fba2 1203 	umull	r1, r2, r2, r3
 8000a46:	0952      	lsrs	r2, r2, #5
 8000a48:	2164      	movs	r1, #100	; 0x64
 8000a4a:	fb01 f202 	mul.w	r2, r1, r2
 8000a4e:	1a9b      	subs	r3, r3, r2
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	2b3c      	cmp	r3, #60	; 0x3c
 8000a54:	d10b      	bne.n	8000a6e <main+0x92>
	  			input += 100;
 8000a56:	4b58      	ldr	r3, [pc, #352]	; (8000bb8 <main+0x1dc>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	3364      	adds	r3, #100	; 0x64
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b56      	ldr	r3, [pc, #344]	; (8000bb8 <main+0x1dc>)
 8000a60:	801a      	strh	r2, [r3, #0]
	  			input -= 60;
 8000a62:	4b55      	ldr	r3, [pc, #340]	; (8000bb8 <main+0x1dc>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	3b3c      	subs	r3, #60	; 0x3c
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b53      	ldr	r3, [pc, #332]	; (8000bb8 <main+0x1dc>)
 8000a6c:	801a      	strh	r2, [r3, #0]
	  		}
	  		if (input > 2359) {
 8000a6e:	4b52      	ldr	r3, [pc, #328]	; (8000bb8 <main+0x1dc>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	f640 1237 	movw	r2, #2359	; 0x937
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d902      	bls.n	8000a80 <main+0xa4>
	  			input = 0;
 8000a7a:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <main+0x1dc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	801a      	strh	r2, [r3, #0]
	  		}

	  		addr[0] = input / 1000;
 8000a80:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <main+0x1dc>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	4a4e      	ldr	r2, [pc, #312]	; (8000bc0 <main+0x1e4>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	099b      	lsrs	r3, r3, #6
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <main+0x1e8>)
 8000a92:	701a      	strb	r2, [r3, #0]
	  		addr[1] = input % 1000 / 100;
 8000a94:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <main+0x1dc>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	4a49      	ldr	r2, [pc, #292]	; (8000bc0 <main+0x1e4>)
 8000a9a:	fba2 1203 	umull	r1, r2, r2, r3
 8000a9e:	0992      	lsrs	r2, r2, #6
 8000aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa4:	fb01 f202 	mul.w	r2, r1, r2
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4a43      	ldr	r2, [pc, #268]	; (8000bbc <main+0x1e0>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b42      	ldr	r3, [pc, #264]	; (8000bc4 <main+0x1e8>)
 8000aba:	705a      	strb	r2, [r3, #1]
	  		addr[2] = input % 100 / 10;
 8000abc:	4b3e      	ldr	r3, [pc, #248]	; (8000bb8 <main+0x1dc>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	4a3e      	ldr	r2, [pc, #248]	; (8000bbc <main+0x1e0>)
 8000ac2:	fba2 1203 	umull	r1, r2, r2, r3
 8000ac6:	0952      	lsrs	r2, r2, #5
 8000ac8:	2164      	movs	r1, #100	; 0x64
 8000aca:	fb01 f202 	mul.w	r2, r1, r2
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <main+0x1ec>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b39      	ldr	r3, [pc, #228]	; (8000bc4 <main+0x1e8>)
 8000ae0:	709a      	strb	r2, [r3, #2]
	  		addr[3] = input % 10;
 8000ae2:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <main+0x1dc>)
 8000ae4:	881a      	ldrh	r2, [r3, #0]
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <main+0x1ec>)
 8000ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8000aec:	08d9      	lsrs	r1, r3, #3
 8000aee:	460b      	mov	r3, r1
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	440b      	add	r3, r1
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <main+0x1e8>)
 8000afe:	70da      	strb	r2, [r3, #3]
	  		Segment_Select(List_Of_Segments[0], List_Of_Segment_Info[addr[0]]);
 8000b00:	7c3a      	ldrb	r2, [r7, #16]
 8000b02:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <main+0x1e8>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	f107 0118 	add.w	r1, r7, #24
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b10:	4619      	mov	r1, r3
 8000b12:	4610      	mov	r0, r2
 8000b14:	f7ff ff04 	bl	8000920 <Segment_Select>
	  		HAL_Delay(delaytime);
 8000b18:	8afb      	ldrh	r3, [r7, #22]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fd3e 	bl	800159c <HAL_Delay>
	  		Segment_Select(List_Of_Segments[1], List_Of_Segment_Info[addr[1]]);
 8000b20:	7c7a      	ldrb	r2, [r7, #17]
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <main+0x1e8>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	f107 0118 	add.w	r1, r7, #24
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b30:	4619      	mov	r1, r3
 8000b32:	4610      	mov	r0, r2
 8000b34:	f7ff fef4 	bl	8000920 <Segment_Select>
	  		HAL_Delay(delaytime);
 8000b38:	8afb      	ldrh	r3, [r7, #22]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fd2e 	bl	800159c <HAL_Delay>
	  		Segment_Select(List_Of_Segments[2], List_Of_Segment_Info[addr[2]]);
 8000b40:	7cba      	ldrb	r2, [r7, #18]
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <main+0x1e8>)
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	f107 0118 	add.w	r1, r7, #24
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b50:	4619      	mov	r1, r3
 8000b52:	4610      	mov	r0, r2
 8000b54:	f7ff fee4 	bl	8000920 <Segment_Select>
	  		HAL_Delay(delaytime);
 8000b58:	8afb      	ldrh	r3, [r7, #22]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fd1e 	bl	800159c <HAL_Delay>
	  		Segment_Select(List_Of_Segments[3], List_Of_Segment_Info[addr[3]]);
 8000b60:	7cfa      	ldrb	r2, [r7, #19]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <main+0x1e8>)
 8000b64:	78db      	ldrb	r3, [r3, #3]
 8000b66:	f107 0118 	add.w	r1, r7, #24
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b70:	4619      	mov	r1, r3
 8000b72:	4610      	mov	r0, r2
 8000b74:	f7ff fed4 	bl	8000920 <Segment_Select>
	  		HAL_Delay(delaytime);
 8000b78:	8afb      	ldrh	r3, [r7, #22]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fd0e 	bl	800159c <HAL_Delay>

	  		if (UART_Input == 1) {
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <main+0x1f0>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	f47f af54 	bne.w	8000a32 <main+0x56>
	  			UART_Print();
 8000b8a:	f7ff fd6d 	bl	8000668 <UART_Print>
	  			UART_Input = 0;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <main+0x1f0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	  Loop_Count++;
 8000b94:	e74d      	b.n	8000a32 <main+0x56>
 8000b96:	bf00      	nop
 8000b98:	20000088 	.word	0x20000088
 8000b9c:	20000159 	.word	0x20000159
 8000ba0:	200000d4 	.word	0x200000d4
 8000ba4:	20000158 	.word	0x20000158
 8000ba8:	2000015c 	.word	0x2000015c
 8000bac:	08040201 	.word	0x08040201
 8000bb0:	08004a00 	.word	0x08004a00
 8000bb4:	20000078 	.word	0x20000078
 8000bb8:	2000007e 	.word	0x2000007e
 8000bbc:	51eb851f 	.word	0x51eb851f
 8000bc0:	10624dd3 	.word	0x10624dd3
 8000bc4:	20000080 	.word	0x20000080
 8000bc8:	cccccccd 	.word	0xcccccccd
 8000bcc:	2000007c 	.word	0x2000007c

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0b4      	sub	sp, #208	; 0xd0
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bda:	2230      	movs	r2, #48	; 0x30
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fefa 	bl	80049d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	2284      	movs	r2, #132	; 0x84
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f003 feeb 	bl	80049d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <SystemClock_Config+0x11c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a39      	ldr	r2, [pc, #228]	; (8000cec <SystemClock_Config+0x11c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b37      	ldr	r3, [pc, #220]	; (8000cec <SystemClock_Config+0x11c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c1a:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <SystemClock_Config+0x120>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a34      	ldr	r2, [pc, #208]	; (8000cf0 <SystemClock_Config+0x120>)
 8000c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <SystemClock_Config+0x120>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c4e:	2319      	movs	r3, #25
 8000c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c54:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c62:	2309      	movs	r3, #9
 8000c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 f8c9 	bl	8001e04 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c78:	f000 f9f4 	bl	8001064 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c7c:	f001 f872 	bl	8001d64 <HAL_PWREx_EnableOverDrive>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c86:	f000 f9ed 	bl	8001064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cb0:	2106      	movs	r1, #6
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fb4a 	bl	800234c <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cbe:	f000 f9d1 	bl	8001064 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6;
 8000cc2:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000cc6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fd0f 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000ce0:	f000 f9c0 	bl	8001064 <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	37d0      	adds	r7, #208	; 0xd0
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d14:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <MX_TIM3_Init+0x9c>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d28:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d3c:	f002 f8cc 	bl	8002ed8 <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000d46:	f000 f98d 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d58:	f002 faae 	bl	80032b8 <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000d62:	f000 f97f 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d74:	f002 fcc8 	bl	8003708 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d7e:	f000 f971 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000088 	.word	0x20000088
 8000d90:	40000400 	.word	0x40000400

08000d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <MX_USART1_UART_Init+0x5c>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART1_UART_Init+0x58>)
 8000dd8:	f002 fd42 	bl	8003860 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000de2:	f000 f93f 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000d4 	.word	0x200000d4
 8000df0:	40011000 	.word	0x40011000

08000df4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <MX_USART6_UART_Init+0x5c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART6_UART_Init+0x58>)
 8000e38:	f002 fd12 	bl	8003860 <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000e42:	f000 f90f 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000015c 	.word	0x2000015c
 8000e50:	40011400 	.word	0x40011400

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b76      	ldr	r3, [pc, #472]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a75      	ldr	r2, [pc, #468]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b73      	ldr	r3, [pc, #460]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b70      	ldr	r3, [pc, #448]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a6f      	ldr	r2, [pc, #444]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e9a:	4b6a      	ldr	r3, [pc, #424]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a69      	ldr	r2, [pc, #420]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b67      	ldr	r3, [pc, #412]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb2:	4b64      	ldr	r3, [pc, #400]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a63      	ldr	r2, [pc, #396]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b61      	ldr	r3, [pc, #388]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b5e      	ldr	r3, [pc, #376]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a5d      	ldr	r2, [pc, #372]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee2:	4b58      	ldr	r3, [pc, #352]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a57      	ldr	r2, [pc, #348]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b55      	ldr	r3, [pc, #340]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	4b52      	ldr	r3, [pc, #328]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a51      	ldr	r2, [pc, #324]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000f00:	f043 0320 	orr.w	r3, r3, #32
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <MX_GPIO_Init+0x1f0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f24c 0110 	movw	r1, #49168	; 0xc010
 8000f18:	484b      	ldr	r0, [pc, #300]	; (8001048 <MX_GPIO_Init+0x1f4>)
 8000f1a:	f000 fecb 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000f24:	4849      	ldr	r0, [pc, #292]	; (800104c <MX_GPIO_Init+0x1f8>)
 8000f26:	f000 fec5 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	4848      	ldr	r0, [pc, #288]	; (8001050 <MX_GPIO_Init+0x1fc>)
 8000f30:	f000 fec0 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	21c0      	movs	r1, #192	; 0xc0
 8000f38:	4846      	ldr	r0, [pc, #280]	; (8001054 <MX_GPIO_Init+0x200>)
 8000f3a:	f000 febb 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2140      	movs	r1, #64	; 0x40
 8000f42:	4845      	ldr	r0, [pc, #276]	; (8001058 <MX_GPIO_Init+0x204>)
 8000f44:	f000 feb6 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_15;
 8000f48:	f24c 0310 	movw	r3, #49168	; 0xc010
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4839      	ldr	r0, [pc, #228]	; (8001048 <MX_GPIO_Init+0x1f4>)
 8000f62:	f000 fce3 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 8000f66:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4833      	ldr	r0, [pc, #204]	; (800104c <MX_GPIO_Init+0x1f8>)
 8000f80:	f000 fcd4 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8000f84:	230f      	movs	r3, #15
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482d      	ldr	r0, [pc, #180]	; (8001050 <MX_GPIO_Init+0x1fc>)
 8000f9c:	f000 fcc6 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fa0:	23c0      	movs	r3, #192	; 0xc0
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4827      	ldr	r0, [pc, #156]	; (8001054 <MX_GPIO_Init+0x200>)
 8000fb8:	f000 fcb8 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF10 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000fbc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_GPIO_Init+0x208>)
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4823      	ldr	r0, [pc, #140]	; (8001060 <MX_GPIO_Init+0x20c>)
 8000fd2:	f000 fcab 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <MX_GPIO_Init+0x208>)
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4818      	ldr	r0, [pc, #96]	; (800104c <MX_GPIO_Init+0x1f8>)
 8000fea:	f000 fc9f 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fee:	2340      	movs	r3, #64	; 0x40
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_GPIO_Init+0x204>)
 8001006:	f000 fc91 	bl	800192c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2006      	movs	r0, #6
 8001010:	f000 fbc3 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001014:	2006      	movs	r0, #6
 8001016:	f000 fbdc 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	2017      	movs	r0, #23
 8001020:	f000 fbbb 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001024:	2017      	movs	r0, #23
 8001026:	f000 fbd4 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2028      	movs	r0, #40	; 0x28
 8001030:	f000 fbb3 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001034:	2028      	movs	r0, #40	; 0x28
 8001036:	f000 fbcc 	bl	80017d2 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3730      	adds	r7, #48	; 0x30
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400
 800104c:	40020000 	.word	0x40020000
 8001050:	40022000 	.word	0x40022000
 8001054:	40021800 	.word	0x40021800
 8001058:	40021c00 	.word	0x40021c00
 800105c:	10110000 	.word	0x10110000
 8001060:	40021400 	.word	0x40021400

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_MspInit+0x50>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_MspInit+0x50>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_MspInit+0x50>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_MspInit+0x50>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <HAL_MspInit+0x50>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x50>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2005      	movs	r0, #5
 80010ac:	f000 fb75 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80010b0:	2005      	movs	r0, #5
 80010b2:	f000 fb8e 	bl	80017d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_TIM_Base_MspInit+0x44>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d113      	bne.n	80010fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_TIM_Base_MspInit+0x48>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_TIM_Base_MspInit+0x48>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_TIM_Base_MspInit+0x48>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	201d      	movs	r0, #29
 80010f4:	f000 fb51 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010f8:	201d      	movs	r0, #29
 80010fa:	f000 fb6a 	bl	80017d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40000400 	.word	0x40000400
 800110c:	40023800 	.word	0x40023800

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a44      	ldr	r2, [pc, #272]	; (8001240 <HAL_UART_MspInit+0x130>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d14d      	bne.n	80011ce <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001132:	4b44      	ldr	r3, [pc, #272]	; (8001244 <HAL_UART_MspInit+0x134>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a43      	ldr	r2, [pc, #268]	; (8001244 <HAL_UART_MspInit+0x134>)
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <HAL_UART_MspInit+0x134>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b3e      	ldr	r3, [pc, #248]	; (8001244 <HAL_UART_MspInit+0x134>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a3d      	ldr	r2, [pc, #244]	; (8001244 <HAL_UART_MspInit+0x134>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_UART_MspInit+0x134>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b38      	ldr	r3, [pc, #224]	; (8001244 <HAL_UART_MspInit+0x134>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a37      	ldr	r2, [pc, #220]	; (8001244 <HAL_UART_MspInit+0x134>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_UART_MspInit+0x134>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800118a:	2307      	movs	r3, #7
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	482c      	ldr	r0, [pc, #176]	; (8001248 <HAL_UART_MspInit+0x138>)
 8001196:	f000 fbc9 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800119a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ac:	2307      	movs	r3, #7
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4825      	ldr	r0, [pc, #148]	; (800124c <HAL_UART_MspInit+0x13c>)
 80011b8:	f000 fbb8 	bl	800192c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2025      	movs	r0, #37	; 0x25
 80011c2:	f000 faea 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011c6:	2025      	movs	r0, #37	; 0x25
 80011c8:	f000 fb03 	bl	80017d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011cc:	e034      	b.n	8001238 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART6)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_UART_MspInit+0x140>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d12f      	bne.n	8001238 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_UART_MspInit+0x134>)
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_UART_MspInit+0x134>)
 80011de:	f043 0320 	orr.w	r3, r3, #32
 80011e2:	6453      	str	r3, [r2, #68]	; 0x44
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x134>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_UART_MspInit+0x134>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HAL_UART_MspInit+0x134>)
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_UART_MspInit+0x134>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001218:	2308      	movs	r3, #8
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <HAL_UART_MspInit+0x144>)
 8001224:	f000 fb82 	bl	800192c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2047      	movs	r0, #71	; 0x47
 800122e:	f000 fab4 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001232:	2047      	movs	r0, #71	; 0x47
 8001234:	f000 facd 	bl	80017d2 <HAL_NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40011000 	.word	0x40011000
 8001244:	40023800 	.word	0x40023800
 8001248:	40020400 	.word	0x40020400
 800124c:	40020000 	.word	0x40020000
 8001250:	40011400 	.word	0x40011400
 8001254:	40020800 	.word	0x40020800

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a4:	f000 f95a 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <EXTI0_IRQHandler+0x6c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <EXTI0_IRQHandler+0x70>)
 80012c8:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d205      	bcs.n	80012da <EXTI0_IRQHandler+0x1e>
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <EXTI0_IRQHandler+0x70>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <EXTI0_IRQHandler+0x6c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	e004      	b.n	80012e4 <EXTI0_IRQHandler+0x28>
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <EXTI0_IRQHandler+0x6c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <EXTI0_IRQHandler+0x70>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	1ad3      	subs	r3, r2, r3
	int gap =
 80012e4:	607b      	str	r3, [r7, #4]

		if (gap > 30) {
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b1e      	cmp	r3, #30
 80012ea:	dd15      	ble.n	8001318 <EXTI0_IRQHandler+0x5c>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 80012ec:	2101      	movs	r1, #1
 80012ee:	4810      	ldr	r0, [pc, #64]	; (8001330 <EXTI0_IRQHandler+0x74>)
 80012f0:	f000 fcc8 	bl	8001c84 <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d10a      	bne.n	8001310 <EXTI0_IRQHandler+0x54>
				input = input + 100;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <EXTI0_IRQHandler+0x78>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	3364      	adds	r3, #100	; 0x64
 8001300:	b29a      	uxth	r2, r3
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <EXTI0_IRQHandler+0x78>)
 8001304:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <EXTI0_IRQHandler+0x6c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <EXTI0_IRQHandler+0x70>)
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e003      	b.n	8001318 <EXTI0_IRQHandler+0x5c>
			} else {
				Old_Loop_Count = Loop_Count;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <EXTI0_IRQHandler+0x6c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a05      	ldr	r2, [pc, #20]	; (800132c <EXTI0_IRQHandler+0x70>)
 8001316:	6013      	str	r3, [r2, #0]
			}
		}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001318:	2001      	movs	r0, #1
 800131a:	f000 fcff 	bl	8001d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000078 	.word	0x20000078
 800132c:	20000084 	.word	0x20000084
 8001330:	40020000 	.word	0x40020000
 8001334:	2000007e 	.word	0x2000007e

08001338 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <EXTI9_5_IRQHandler+0x68>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <EXTI9_5_IRQHandler+0x6c>)
 8001344:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 8001346:	429a      	cmp	r2, r3
 8001348:	d205      	bcs.n	8001356 <EXTI9_5_IRQHandler+0x1e>
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <EXTI9_5_IRQHandler+0x6c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <EXTI9_5_IRQHandler+0x68>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	e004      	b.n	8001360 <EXTI9_5_IRQHandler+0x28>
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <EXTI9_5_IRQHandler+0x68>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <EXTI9_5_IRQHandler+0x6c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	1ad3      	subs	r3, r2, r3
	int gap =
 8001360:	607b      	str	r3, [r7, #4]

		if (gap > 10) {
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0a      	cmp	r3, #10
 8001366:	dd13      	ble.n	8001390 <EXTI9_5_IRQHandler+0x58>
			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == 1) {
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <EXTI9_5_IRQHandler+0x70>)
 800136e:	f000 fc89 	bl	8001c84 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d107      	bne.n	8001388 <EXTI9_5_IRQHandler+0x50>
				input = 0;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <EXTI9_5_IRQHandler+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <EXTI9_5_IRQHandler+0x68>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <EXTI9_5_IRQHandler+0x6c>)
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e003      	b.n	8001390 <EXTI9_5_IRQHandler+0x58>
			} else {
				Old_Loop_Count = Loop_Count;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <EXTI9_5_IRQHandler+0x68>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <EXTI9_5_IRQHandler+0x6c>)
 800138e:	6013      	str	r3, [r2, #0]
			}
		}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001390:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001394:	f000 fcc2 	bl	8001d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000078 	.word	0x20000078
 80013a4:	20000084 	.word	0x20000084
 80013a8:	40021400 	.word	0x40021400
 80013ac:	2000007e 	.word	0x2000007e

080013b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM3_IRQHandler+0x10>)
 80013b6:	f001 fe5f 	bl	8003078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000088 	.word	0x20000088

080013c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <USART1_IRQHandler+0x10>)
 80013ca:	f002 fb67 	bl	8003a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000d4 	.word	0x200000d4

080013d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <EXTI15_10_IRQHandler+0x70>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <EXTI15_10_IRQHandler+0x74>)
 80013e4:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d205      	bcs.n	80013f6 <EXTI15_10_IRQHandler+0x1e>
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <EXTI15_10_IRQHandler+0x74>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <EXTI15_10_IRQHandler+0x70>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	e004      	b.n	8001400 <EXTI15_10_IRQHandler+0x28>
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <EXTI15_10_IRQHandler+0x70>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <EXTI15_10_IRQHandler+0x74>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1ad3      	subs	r3, r2, r3
	int gap =
 8001400:	607b      	str	r3, [r7, #4]

		if (gap > 30) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b1e      	cmp	r3, #30
 8001406:	dd16      	ble.n	8001436 <EXTI15_10_IRQHandler+0x5e>
			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10) == 1) {
 8001408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140c:	4810      	ldr	r0, [pc, #64]	; (8001450 <EXTI15_10_IRQHandler+0x78>)
 800140e:	f000 fc39 	bl	8001c84 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10a      	bne.n	800142e <EXTI15_10_IRQHandler+0x56>
				input += 1;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <EXTI15_10_IRQHandler+0x7c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <EXTI15_10_IRQHandler+0x7c>)
 8001422:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <EXTI15_10_IRQHandler+0x70>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a08      	ldr	r2, [pc, #32]	; (800144c <EXTI15_10_IRQHandler+0x74>)
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e003      	b.n	8001436 <EXTI15_10_IRQHandler+0x5e>
			} else {
				Old_Loop_Count = Loop_Count;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <EXTI15_10_IRQHandler+0x70>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a06      	ldr	r2, [pc, #24]	; (800144c <EXTI15_10_IRQHandler+0x74>)
 8001434:	6013      	str	r3, [r2, #0]
			}

		}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001436:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800143a:	f000 fc6f 	bl	8001d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000078 	.word	0x20000078
 800144c:	20000084 	.word	0x20000084
 8001450:	40021400 	.word	0x40021400
 8001454:	2000007e 	.word	0x2000007e

08001458 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <USART6_IRQHandler+0x10>)
 800145e:	f002 fb1d 	bl	8003a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000015c 	.word	0x2000015c

0800146c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001496:	490e      	ldr	r1, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014ac:	4c0b      	ldr	r4, [pc, #44]	; (80014dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ba:	f7ff ffd7 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f003 fa67 	bl	8004990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c2:	f7ff fa8b 	bl	80009dc <main>
  bx  lr    
 80014c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014d4:	08004a34 	.word	0x08004a34
  ldr r2, =_sbss
 80014d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014dc:	200001e4 	.word	0x200001e4

080014e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC_IRQHandler>

080014e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 f94c 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ec:	200f      	movs	r0, #15
 80014ee:	f000 f805 	bl	80014fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014f2:	f7ff fdbd 	bl	8001070 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f967 	bl	80017ee <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001538:	f000 f92f 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000050 	.word	0x20000050
 8001554:	20000058 	.word	0x20000058
 8001558:	20000054 	.word	0x20000054

0800155c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x20>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x24>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_IncTick+0x24>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	20000058 	.word	0x20000058
 8001580:	200001e0 	.word	0x200001e0

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200001e0 	.word	0x200001e0

0800159c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a4:	f7ff ffee 	bl	8001584 <HAL_GetTick>
 80015a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b4:	d005      	beq.n	80015c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <HAL_Delay+0x44>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4413      	add	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c2:	bf00      	nop
 80015c4:	f7ff ffde 	bl	8001584 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d8f7      	bhi.n	80015c4 <HAL_Delay+0x28>
  {
  }
}
 80015d4:	bf00      	nop
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000058 	.word	0x20000058

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	4313      	orrs	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	05fa0000 	.word	0x05fa0000

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <__NVIC_EnableIRQ+0x38>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff29 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff3e 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff8e 	bl	80016d8 <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5d 	bl	8001684 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff31 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffa2 	bl	8001740 <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff feb6 	bl	8001584 <HAL_GetTick>
 8001818:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d008      	beq.n	8001838 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e052      	b.n	80018de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0216 	bic.w	r2, r2, #22
 8001846:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001856:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	2b00      	cmp	r3, #0
 800185e:	d103      	bne.n	8001868 <HAL_DMA_Abort+0x62>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0208 	bic.w	r2, r2, #8
 8001876:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0201 	bic.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001888:	e013      	b.n	80018b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800188a:	f7ff fe7b 	bl	8001584 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b05      	cmp	r3, #5
 8001896:	d90c      	bls.n	80018b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2220      	movs	r2, #32
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e015      	b.n	80018de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1e4      	bne.n	800188a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	223f      	movs	r2, #63	; 0x3f
 80018c6:	409a      	lsls	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d004      	beq.n	8001904 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e00c      	b.n	800191e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2205      	movs	r2, #5
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e175      	b.n	8001c38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 8164 	bne.w	8001c32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d00b      	beq.n	800198a <HAL_GPIO_Init+0x5e>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d007      	beq.n	800198a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197e:	2b11      	cmp	r3, #17
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b12      	cmp	r3, #18
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x100>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b12      	cmp	r3, #18
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80be 	beq.w	8001c32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_GPIO_Init+0x324>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <HAL_GPIO_Init+0x324>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_GPIO_Init+0x324>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ace:	4a61      	ldr	r2, [pc, #388]	; (8001c54 <HAL_GPIO_Init+0x328>)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_GPIO_Init+0x32c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d037      	beq.n	8001b6a <HAL_GPIO_Init+0x23e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a57      	ldr	r2, [pc, #348]	; (8001c5c <HAL_GPIO_Init+0x330>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d031      	beq.n	8001b66 <HAL_GPIO_Init+0x23a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a56      	ldr	r2, [pc, #344]	; (8001c60 <HAL_GPIO_Init+0x334>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d02b      	beq.n	8001b62 <HAL_GPIO_Init+0x236>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a55      	ldr	r2, [pc, #340]	; (8001c64 <HAL_GPIO_Init+0x338>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d025      	beq.n	8001b5e <HAL_GPIO_Init+0x232>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a54      	ldr	r2, [pc, #336]	; (8001c68 <HAL_GPIO_Init+0x33c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01f      	beq.n	8001b5a <HAL_GPIO_Init+0x22e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a53      	ldr	r2, [pc, #332]	; (8001c6c <HAL_GPIO_Init+0x340>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_GPIO_Init+0x22a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_GPIO_Init+0x344>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x226>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a51      	ldr	r2, [pc, #324]	; (8001c74 <HAL_GPIO_Init+0x348>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x222>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a50      	ldr	r2, [pc, #320]	; (8001c78 <HAL_GPIO_Init+0x34c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x21e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4f      	ldr	r2, [pc, #316]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x21a>
 8001b42:	2309      	movs	r3, #9
 8001b44:	e012      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b46:	230a      	movs	r3, #10
 8001b48:	e010      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	e00e      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e00c      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b52:	2306      	movs	r3, #6
 8001b54:	e00a      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b56:	2305      	movs	r3, #5
 8001b58:	e008      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b7c:	4935      	ldr	r1, [pc, #212]	; (8001c54 <HAL_GPIO_Init+0x328>)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bae:	4a34      	ldr	r2, [pc, #208]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd8:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	f67f ae86 	bls.w	800194c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40021400 	.word	0x40021400
 8001c70:	40021800 	.word	0x40021800
 8001c74:	40021c00 	.word	0x40021c00
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40022400 	.word	0x40022400
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cd0:	e003      	b.n	8001cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf8:	887a      	ldrh	r2, [r7, #2]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	400b      	ands	r3, r1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	619a      	str	r2, [r3, #24]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f806 	bl	8001d4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_PWREx_EnableOverDrive+0x98>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d92:	f7ff fbf7 	bl	8001584 <HAL_GetTick>
 8001d96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d98:	e009      	b.n	8001dae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d9a:	f7ff fbf3 	bl	8001584 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da8:	d901      	bls.n	8001dae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e022      	b.n	8001df4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d1ee      	bne.n	8001d9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc8:	f7ff fbdc 	bl	8001584 <HAL_GetTick>
 8001dcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dce:	e009      	b.n	8001de4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dd0:	f7ff fbd8 	bl	8001584 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dde:	d901      	bls.n	8001de4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e007      	b.n	8001df4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001df0:	d1ee      	bne.n	8001dd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000

08001e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e291      	b.n	800233e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8087 	beq.w	8001f36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e28:	4b96      	ldr	r3, [pc, #600]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d00c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e34:	4b93      	ldr	r3, [pc, #588]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d112      	bne.n	8001e66 <HAL_RCC_OscConfig+0x62>
 8001e40:	4b90      	ldr	r3, [pc, #576]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4c:	d10b      	bne.n	8001e66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4e:	4b8d      	ldr	r3, [pc, #564]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d06c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x130>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d168      	bne.n	8001f34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e26b      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x7a>
 8001e70:	4b84      	ldr	r3, [pc, #528]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a83      	ldr	r2, [pc, #524]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	e02e      	b.n	8001edc <HAL_RCC_OscConfig+0xd8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x9c>
 8001e86:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a7e      	ldr	r2, [pc, #504]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b7c      	ldr	r3, [pc, #496]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a7b      	ldr	r2, [pc, #492]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e01d      	b.n	8001edc <HAL_RCC_OscConfig+0xd8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xc0>
 8001eaa:	4b76      	ldr	r3, [pc, #472]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a75      	ldr	r2, [pc, #468]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a72      	ldr	r2, [pc, #456]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0xd8>
 8001ec4:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a6e      	ldr	r2, [pc, #440]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6b      	ldr	r2, [pc, #428]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d013      	beq.n	8001f0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fb4e 	bl	8001584 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff fb4a 	bl	8001584 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e21f      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b61      	ldr	r3, [pc, #388]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0xe8>
 8001f0a:	e014      	b.n	8001f36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fb3a 	bl	8001584 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff fb36 	bl	8001584 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e20b      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x110>
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d069      	beq.n	8002016 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f42:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00b      	beq.n	8001f66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b4d      	ldr	r3, [pc, #308]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d11c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x190>
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d116      	bne.n	8001f94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x17a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e1df      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	4b41      	ldr	r3, [pc, #260]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	493d      	ldr	r1, [pc, #244]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	e040      	b.n	8002016 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d023      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9c:	4b39      	ldr	r3, [pc, #228]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a38      	ldr	r2, [pc, #224]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff faec 	bl	8001584 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fae8 	bl	8001584 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1bd      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	4b30      	ldr	r3, [pc, #192]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4929      	ldr	r1, [pc, #164]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
 8001fe2:	e018      	b.n	8002016 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fac8 	bl	8001584 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fac4 	bl	8001584 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e199      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d038      	beq.n	8002094 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 800202c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7ff faa5 	bl	8001584 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203e:	f7ff faa1 	bl	8001584 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e176      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x23a>
 800205c:	e01a      	b.n	8002094 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8002060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_RCC_OscConfig+0x280>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7ff fa8b 	bl	8001584 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7ff fa87 	bl	8001584 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d903      	bls.n	8002088 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e15c      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
 8002084:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b91      	ldr	r3, [pc, #580]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ee      	bne.n	8002072 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a4 	beq.w	80021ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a2:	4b8b      	ldr	r3, [pc, #556]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a87      	ldr	r2, [pc, #540]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80020b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b85      	ldr	r3, [pc, #532]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c6:	2301      	movs	r3, #1
 80020c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ca:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d118      	bne.n	8002108 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x4d0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7e      	ldr	r2, [pc, #504]	; (80022d4 <HAL_RCC_OscConfig+0x4d0>)
 80020dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e2:	f7ff fa4f 	bl	8001584 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ea:	f7ff fa4b 	bl	8001584 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b64      	cmp	r3, #100	; 0x64
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e120      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fc:	4b75      	ldr	r3, [pc, #468]	; (80022d4 <HAL_RCC_OscConfig+0x4d0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x31a>
 8002110:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a6e      	ldr	r2, [pc, #440]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	e02d      	b.n	800217a <HAL_RCC_OscConfig+0x376>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x33c>
 8002126:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a69      	ldr	r2, [pc, #420]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
 8002132:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a66      	ldr	r2, [pc, #408]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
 800213e:	e01c      	b.n	800217a <HAL_RCC_OscConfig+0x376>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d10c      	bne.n	8002162 <HAL_RCC_OscConfig+0x35e>
 8002148:	4b61      	ldr	r3, [pc, #388]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	4a60      	ldr	r2, [pc, #384]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	6713      	str	r3, [r2, #112]	; 0x70
 8002154:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	e00b      	b.n	800217a <HAL_RCC_OscConfig+0x376>
 8002162:	4b5b      	ldr	r3, [pc, #364]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a5a      	ldr	r2, [pc, #360]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002174:	f023 0304 	bic.w	r3, r3, #4
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d015      	beq.n	80021ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff f9ff 	bl	8001584 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff f9fb 	bl	8001584 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0ce      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a0:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ee      	beq.n	800218a <HAL_RCC_OscConfig+0x386>
 80021ac:	e014      	b.n	80021d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7ff f9e9 	bl	8001584 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7ff f9e5 	bl	8001584 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0b8      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021cc:	4b40      	ldr	r3, [pc, #256]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1ee      	bne.n	80021b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a3b      	ldr	r2, [pc, #236]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80a4 	beq.w	800233c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f4:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d06b      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d149      	bne.n	800229c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800220e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7ff f9b6 	bl	8001584 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221c:	f7ff f9b2 	bl	8001584 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e087      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	019b      	lsls	r3, r3, #6
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	3b01      	subs	r3, #1
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	4313      	orrs	r3, r2
 8002260:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002266:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f986 	bl	8001584 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f982 	bl	8001584 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e057      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x478>
 800229a:	e04f      	b.n	800233c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff f96c 	bl	8001584 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f968 	bl	8001584 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e03d      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <HAL_RCC_OscConfig+0x4cc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4ac>
 80022ce:	e035      	b.n	800233c <HAL_RCC_OscConfig+0x538>
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x544>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d028      	beq.n	8002338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d121      	bne.n	8002338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d11a      	bne.n	8002338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800230e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002310:	4293      	cmp	r3, r2
 8002312:	d111      	bne.n	8002338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	3b01      	subs	r3, #1
 8002322:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d107      	bne.n	8002338 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d0      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 020f 	bic.w	r2, r3, #15
 800237a:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e073      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4936      	ldr	r1, [pc, #216]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002440:	f7ff f8a0 	bl	8001584 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7ff f89c 	bl	8001584 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e053      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 020f 	bic.w	r2, r3, #15
 8002486:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1cc>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1d0>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fffc 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00
 8002514:	40023800 	.word	0x40023800
 8002518:	08004a0c 	.word	0x08004a0c
 800251c:	20000050 	.word	0x20000050
 8002520:	20000054 	.word	0x20000054

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800252a:	2100      	movs	r1, #0
 800252c:	6079      	str	r1, [r7, #4]
 800252e:	2100      	movs	r1, #0
 8002530:	60f9      	str	r1, [r7, #12]
 8002532:	2100      	movs	r1, #0
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002536:	2100      	movs	r1, #0
 8002538:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253a:	4952      	ldr	r1, [pc, #328]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 800253c:	6889      	ldr	r1, [r1, #8]
 800253e:	f001 010c 	and.w	r1, r1, #12
 8002542:	2908      	cmp	r1, #8
 8002544:	d00d      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x3e>
 8002546:	2908      	cmp	r1, #8
 8002548:	f200 8094 	bhi.w	8002674 <HAL_RCC_GetSysClockFreq+0x150>
 800254c:	2900      	cmp	r1, #0
 800254e:	d002      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x32>
 8002550:	2904      	cmp	r1, #4
 8002552:	d003      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x38>
 8002554:	e08e      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002556:	4b4c      	ldr	r3, [pc, #304]	; (8002688 <HAL_RCC_GetSysClockFreq+0x164>)
 8002558:	60bb      	str	r3, [r7, #8]
      break;
 800255a:	e08e      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <HAL_RCC_GetSysClockFreq+0x168>)
 800255e:	60bb      	str	r3, [r7, #8]
      break;
 8002560:	e08b      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002562:	4948      	ldr	r1, [pc, #288]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 8002564:	6849      	ldr	r1, [r1, #4]
 8002566:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800256a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800256c:	4945      	ldr	r1, [pc, #276]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 800256e:	6849      	ldr	r1, [r1, #4]
 8002570:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002574:	2900      	cmp	r1, #0
 8002576:	d024      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002578:	4942      	ldr	r1, [pc, #264]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 800257a:	6849      	ldr	r1, [r1, #4]
 800257c:	0989      	lsrs	r1, r1, #6
 800257e:	4608      	mov	r0, r1
 8002580:	f04f 0100 	mov.w	r1, #0
 8002584:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002588:	f04f 0500 	mov.w	r5, #0
 800258c:	ea00 0204 	and.w	r2, r0, r4
 8002590:	ea01 0305 	and.w	r3, r1, r5
 8002594:	493d      	ldr	r1, [pc, #244]	; (800268c <HAL_RCC_GetSysClockFreq+0x168>)
 8002596:	fb01 f003 	mul.w	r0, r1, r3
 800259a:	2100      	movs	r1, #0
 800259c:	fb01 f102 	mul.w	r1, r1, r2
 80025a0:	1844      	adds	r4, r0, r1
 80025a2:	493a      	ldr	r1, [pc, #232]	; (800268c <HAL_RCC_GetSysClockFreq+0x168>)
 80025a4:	fba2 0101 	umull	r0, r1, r2, r1
 80025a8:	1863      	adds	r3, r4, r1
 80025aa:	4619      	mov	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	f7fd fe28 	bl	8000208 <__aeabi_uldivmod>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4613      	mov	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e04a      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	099b      	lsrs	r3, r3, #6
 80025c8:	461a      	mov	r2, r3
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	ea02 0400 	and.w	r4, r2, r0
 80025da:	ea03 0501 	and.w	r5, r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	014b      	lsls	r3, r1, #5
 80025ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025f0:	0142      	lsls	r2, r0, #5
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	1b00      	subs	r0, r0, r4
 80025f8:	eb61 0105 	sbc.w	r1, r1, r5
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	018b      	lsls	r3, r1, #6
 8002606:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800260a:	0182      	lsls	r2, r0, #6
 800260c:	1a12      	subs	r2, r2, r0
 800260e:	eb63 0301 	sbc.w	r3, r3, r1
 8002612:	f04f 0000 	mov.w	r0, #0
 8002616:	f04f 0100 	mov.w	r1, #0
 800261a:	00d9      	lsls	r1, r3, #3
 800261c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002620:	00d0      	lsls	r0, r2, #3
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	1912      	adds	r2, r2, r4
 8002628:	eb45 0303 	adc.w	r3, r5, r3
 800262c:	f04f 0000 	mov.w	r0, #0
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	0299      	lsls	r1, r3, #10
 8002636:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800263a:	0290      	lsls	r0, r2, #10
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	461a      	mov	r2, r3
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	f7fd fddc 	bl	8000208 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	60bb      	str	r3, [r7, #8]
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCC_GetSysClockFreq+0x164>)
 8002676:	60bb      	str	r3, [r7, #8]
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	68bb      	ldr	r3, [r7, #8]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bdb0      	pop	{r4, r5, r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	00f42400 	.word	0x00f42400
 800268c:	017d7840 	.word	0x017d7840

08002690 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000050 	.word	0x20000050

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ac:	f7ff fff0 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0a9b      	lsrs	r3, r3, #10
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08004a1c 	.word	0x08004a1c

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffdc 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0b5b      	lsrs	r3, r3, #13
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08004a1c 	.word	0x08004a1c

080026f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002720:	4b69      	ldr	r3, [pc, #420]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a68      	ldr	r2, [pc, #416]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800272a:	6093      	str	r3, [r2, #8]
 800272c:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	4964      	ldr	r1, [pc, #400]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002742:	2301      	movs	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002752:	4b5d      	ldr	r3, [pc, #372]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	4959      	ldr	r1, [pc, #356]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002770:	d101      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800277e:	2301      	movs	r3, #1
 8002780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d017      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800278e:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002794:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	494a      	ldr	r1, [pc, #296]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ac:	d101      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 808b 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	4b3a      	ldr	r3, [pc, #232]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e6:	6413      	str	r3, [r2, #64]	; 0x40
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a34      	ldr	r2, [pc, #208]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fe fec0 	bl	8001584 <HAL_GetTick>
 8002804:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fe febc 	bl	8001584 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e357      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002826:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d035      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d02e      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002844:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002864:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002866:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d114      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fe84 	bl	8001584 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fe80 	bl	8001584 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e319      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ae:	d111      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028be:	400b      	ands	r3, r1
 80028c0:	4901      	ldr	r1, [pc, #4]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000
 80028d0:	0ffffcff 	.word	0x0ffffcff
 80028d4:	4bb1      	ldr	r3, [pc, #708]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4ab0      	ldr	r2, [pc, #704]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028de:	6093      	str	r3, [r2, #8]
 80028e0:	4bae      	ldr	r3, [pc, #696]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	49ab      	ldr	r1, [pc, #684]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028fe:	4ba7      	ldr	r3, [pc, #668]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002904:	4aa5      	ldr	r2, [pc, #660]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800290e:	4ba3      	ldr	r3, [pc, #652]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002910:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	49a0      	ldr	r1, [pc, #640]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800292c:	4b9b      	ldr	r3, [pc, #620]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800293a:	4998      	ldr	r1, [pc, #608]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800294e:	4b93      	ldr	r3, [pc, #588]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295c:	498f      	ldr	r1, [pc, #572]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002970:	4b8a      	ldr	r3, [pc, #552]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297e:	4987      	ldr	r1, [pc, #540]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002992:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	497e      	ldr	r1, [pc, #504]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029b4:	4b79      	ldr	r3, [pc, #484]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4976      	ldr	r1, [pc, #472]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029d6:	4b71      	ldr	r3, [pc, #452]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f023 020c 	bic.w	r2, r3, #12
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	496d      	ldr	r1, [pc, #436]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	4965      	ldr	r1, [pc, #404]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a1a:	4b60      	ldr	r3, [pc, #384]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	495c      	ldr	r1, [pc, #368]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a3c:	4b57      	ldr	r3, [pc, #348]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	4954      	ldr	r1, [pc, #336]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a5e:	4b4f      	ldr	r3, [pc, #316]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6c:	494b      	ldr	r1, [pc, #300]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a80:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	4943      	ldr	r1, [pc, #268]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002aa2:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab0:	493a      	ldr	r1, [pc, #232]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ac4:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad2:	4932      	ldr	r1, [pc, #200]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d011      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af4:	4929      	ldr	r1, [pc, #164]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b04:	d101      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b34:	4919      	ldr	r1, [pc, #100]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b58:	4910      	ldr	r1, [pc, #64]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d006      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80d9 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fe fd00 	bl	8001584 <HAL_GetTick>
 8002b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b88:	f7fe fcfc 	bl	8001584 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d904      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e197      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ba0:	4b6c      	ldr	r3, [pc, #432]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ed      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d021      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d11d      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bc0:	4b64      	ldr	r3, [pc, #400]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc6:	0c1b      	lsrs	r3, r3, #16
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bce:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd4:	0e1b      	lsrs	r3, r3, #24
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	019a      	lsls	r2, r3, #6
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	071b      	lsls	r3, r3, #28
 8002bf4:	4957      	ldr	r1, [pc, #348]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d02e      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c26:	d129      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c28:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3c:	0f1b      	lsrs	r3, r3, #28
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	019a      	lsls	r2, r3, #6
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	071b      	lsls	r3, r3, #28
 8002c5c:	493d      	ldr	r1, [pc, #244]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6a:	f023 021f 	bic.w	r2, r3, #31
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	3b01      	subs	r3, #1
 8002c74:	4937      	ldr	r1, [pc, #220]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01d      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c88:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8e:	0e1b      	lsrs	r3, r3, #24
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9c:	0f1b      	lsrs	r3, r3, #28
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	019a      	lsls	r2, r3, #6
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	071b      	lsls	r3, r3, #28
 8002cbc:	4925      	ldr	r1, [pc, #148]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d011      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	019a      	lsls	r2, r3, #6
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	071b      	lsls	r3, r3, #28
 8002cec:	4919      	ldr	r1, [pc, #100]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cf4:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d00:	f7fe fc40 	bl	8001584 <HAL_GetTick>
 8002d04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d08:	f7fe fc3c 	bl	8001584 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0d7      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 80cd 	bne.w	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3a:	f7fe fc23 	bl	8001584 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d42:	f7fe fc1f 	bl	8001584 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b64      	cmp	r3, #100	; 0x64
 8002d4e:	d903      	bls.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0ba      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d64:	d0ed      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02e      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d12a      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d8e:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	0f1b      	lsrs	r3, r3, #28
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	019a      	lsls	r2, r3, #6
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	061b      	lsls	r3, r3, #24
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	071b      	lsls	r3, r3, #28
 8002dc2:	4944      	ldr	r1, [pc, #272]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dca:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	493d      	ldr	r1, [pc, #244]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d022      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df8:	d11d      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e00:	0e1b      	lsrs	r3, r3, #24
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e08:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	0f1b      	lsrs	r3, r3, #28
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	019a      	lsls	r2, r3, #6
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	061b      	lsls	r3, r3, #24
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	071b      	lsls	r3, r3, #28
 8002e2e:	4929      	ldr	r1, [pc, #164]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d028      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e42:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	0e1b      	lsrs	r3, r3, #24
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	0c1b      	lsrs	r3, r3, #16
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	019a      	lsls	r2, r3, #6
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	071b      	lsls	r3, r3, #28
 8002e76:	4917      	ldr	r1, [pc, #92]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	4911      	ldr	r1, [pc, #68]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e94:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fb70 	bl	8001584 <HAL_GetTick>
 8002ea4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ea8:	f7fe fb6c 	bl	8001584 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e007      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec6:	d1ef      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e049      	b.n	8002f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f8e0 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 fabc 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d001      	beq.n	8002fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e054      	b.n	800304a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a26      	ldr	r2, [pc, #152]	; (8003058 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d022      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d01d      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <HAL_TIM_Base_Start_IT+0xd4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d018      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	; (8003060 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00e      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d009      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_TIM_Base_Start_IT+0xe4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d004      	beq.n	8003008 <HAL_TIM_Base_Start_IT+0x80>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_TIM_Base_Start_IT+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d115      	bne.n	8003034 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_TIM_Base_Start_IT+0xec>)
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b06      	cmp	r3, #6
 8003018:	d015      	beq.n	8003046 <HAL_TIM_Base_Start_IT+0xbe>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d011      	beq.n	8003046 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003032:	e008      	b.n	8003046 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e000      	b.n	8003048 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40010400 	.word	0x40010400
 800306c:	40014000 	.word	0x40014000
 8003070:	40001800 	.word	0x40001800
 8003074:	00010007 	.word	0x00010007

08003078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b02      	cmp	r3, #2
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0202 	mvn.w	r2, #2
 80030a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9cc 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f9be 	bl	8003444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f9cf 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d122      	bne.n	8003128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d11b      	bne.n	8003128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0204 	mvn.w	r2, #4
 80030f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9a2 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f994 	bl	8003444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f9a5 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d122      	bne.n	800317c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b08      	cmp	r3, #8
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0208 	mvn.w	r2, #8
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2204      	movs	r2, #4
 8003152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f978 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f96a 	bl	8003444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f97b 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b10      	cmp	r3, #16
 8003188:	d122      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b10      	cmp	r3, #16
 8003196:	d11b      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0210 	mvn.w	r2, #16
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2208      	movs	r2, #8
 80031a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f94e 	bl	8003458 <HAL_TIM_IC_CaptureCallback>
 80031bc:	e005      	b.n	80031ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f940 	bl	8003444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f951 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d10e      	bne.n	80031fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0201 	mvn.w	r2, #1
 80031f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd faf2 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	2b80      	cmp	r3, #128	; 0x80
 8003208:	d10e      	bne.n	8003228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b80      	cmp	r3, #128	; 0x80
 8003216:	d107      	bne.n	8003228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fb08 	bl	8003838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003236:	d10e      	bne.n	8003256 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d107      	bne.n	8003256 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800324e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fafb 	bl	800384c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d10e      	bne.n	8003282 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d107      	bne.n	8003282 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800327a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f8ff 	bl	8003480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b20      	cmp	r3, #32
 800328e:	d10e      	bne.n	80032ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d107      	bne.n	80032ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f06f 0220 	mvn.w	r2, #32
 80032a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fabb 	bl	8003824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_ConfigClockSource+0x18>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e0b3      	b.n	8003438 <HAL_TIM_ConfigClockSource+0x180>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4b55      	ldr	r3, [pc, #340]	; (8003440 <HAL_TIM_ConfigClockSource+0x188>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003308:	d03e      	beq.n	8003388 <HAL_TIM_ConfigClockSource+0xd0>
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330e:	f200 8087 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x168>
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003316:	f000 8085 	beq.w	8003424 <HAL_TIM_ConfigClockSource+0x16c>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331e:	d87f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x168>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d01a      	beq.n	800335a <HAL_TIM_ConfigClockSource+0xa2>
 8003324:	2b70      	cmp	r3, #112	; 0x70
 8003326:	d87b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x168>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d050      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x116>
 800332c:	2b60      	cmp	r3, #96	; 0x60
 800332e:	d877      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x168>
 8003330:	2b50      	cmp	r3, #80	; 0x50
 8003332:	d03c      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0xf6>
 8003334:	2b50      	cmp	r3, #80	; 0x50
 8003336:	d873      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x168>
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d058      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x136>
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d86f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x168>
 8003340:	2b30      	cmp	r3, #48	; 0x30
 8003342:	d064      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x156>
 8003344:	2b30      	cmp	r3, #48	; 0x30
 8003346:	d86b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x168>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d060      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x156>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d867      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x168>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x156>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d05a      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003358:	e062      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f000 f9ad 	bl	80036c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800337c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	609a      	str	r2, [r3, #8]
      break;
 8003386:	e04e      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f000 f996 	bl	80036c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033aa:	609a      	str	r2, [r3, #8]
      break;
 80033ac:	e03b      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 f90a 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2150      	movs	r1, #80	; 0x50
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f963 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e02b      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 f929 	bl	8003632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2160      	movs	r1, #96	; 0x60
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f953 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e01b      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 f8ea 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f943 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 800340c:	e00b      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f000 f93a 	bl	8003692 <TIM_ITRx_SetConfig>
        break;
 800341e:	e002      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003420:	bf00      	nop
 8003422:	e000      	b.n	8003426 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003424:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	fffeff88 	.word	0xfffeff88

08003444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a3d      	ldr	r2, [pc, #244]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a2f      	ldr	r2, [pc, #188]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d02b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d027      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <TIM_Base_SetConfig+0x118>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d023      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <TIM_Base_SetConfig+0x11c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <TIM_Base_SetConfig+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d017      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a28      	ldr	r2, [pc, #160]	; (80035bc <TIM_Base_SetConfig+0x128>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <TIM_Base_SetConfig+0x12c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00f      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <TIM_Base_SetConfig+0x130>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0x134>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <TIM_Base_SetConfig+0x138>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <TIM_Base_SetConfig+0x13c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <TIM_Base_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0xf8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <TIM_Base_SetConfig+0x124>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d103      	bne.n	8003594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	615a      	str	r2, [r3, #20]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40010400 	.word	0x40010400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40014400 	.word	0x40014400
 80035c4:	40014800 	.word	0x40014800
 80035c8:	40001800 	.word	0x40001800
 80035cc:	40001c00 	.word	0x40001c00
 80035d0:	40002000 	.word	0x40002000

080035d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 030a 	bic.w	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0210 	bic.w	r2, r3, #16
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800365c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800366e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f043 0307 	orr.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800371c:	2302      	movs	r3, #2
 800371e:	e06d      	b.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a30      	ldr	r2, [pc, #192]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2f      	ldr	r2, [pc, #188]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d108      	bne.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800375a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a20      	ldr	r2, [pc, #128]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003792:	d01d      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1a      	ldr	r2, [pc, #104]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a15      	ldr	r2, [pc, #84]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a16      	ldr	r2, [pc, #88]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a15      	ldr	r2, [pc, #84]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10c      	bne.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40010000 	.word	0x40010000
 800380c:	40010400 	.word	0x40010400
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40014000 	.word	0x40014000
 8003820:	40001800 	.word	0x40001800

08003824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e040      	b.n	80038f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fc44 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fb08 	bl	8003eb4 <UART_SetConfig>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e022      	b.n	80038f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fd5e 	bl	8004378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fde5 	bl	80044bc <UART_CheckIdleState>
 80038f2:	4603      	mov	r3, r0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003910:	2b20      	cmp	r3, #32
 8003912:	f040 8081 	bne.w	8003a18 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Transmit+0x26>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e079      	b.n	8003a1a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_UART_Transmit+0x38>
 8003930:	2302      	movs	r3, #2
 8003932:	e072      	b.n	8003a1a <HAL_UART_Transmit+0x11e>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2221      	movs	r2, #33	; 0x21
 8003948:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394a:	f7fd fe1b 	bl	8001584 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003968:	d108      	bne.n	800397c <HAL_UART_Transmit+0x80>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	e003      	b.n	8003984 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800398c:	e02c      	b.n	80039e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	; 0x80
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fdc2 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e038      	b.n	8003a1a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10b      	bne.n	80039c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	3302      	adds	r3, #2
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	e007      	b.n	80039d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1cc      	bne.n	800398e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2200      	movs	r2, #0
 80039fc:	2140      	movs	r1, #64	; 0x40
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 fd8f 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e005      	b.n	8003a1a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d12c      	bne.n	8003a92 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Receive_IT+0x22>
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e025      	b.n	8003a94 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_UART_Receive_IT+0x34>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e01e      	b.n	8003a94 <HAL_UART_Receive_IT+0x72>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a80:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a82:	88fb      	ldrh	r3, [r7, #6]
 8003a84:	461a      	mov	r2, r3
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fdc7 	bl	800461c <UART_Start_Receive_IT>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	e000      	b.n	8003a94 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d113      	bne.n	8003af4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00e      	beq.n	8003af4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 81b9 	beq.w	8003e5c <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
      }
      return;
 8003af2:	e1b3      	b.n	8003e5c <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80e3 	beq.w	8003cc2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4ba5      	ldr	r3, [pc, #660]	; (8003da0 <HAL_UART_IRQHandler+0x304>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80d8 	beq.w	8003cc2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d010      	beq.n	8003b3e <HAL_UART_IRQHandler+0xa2>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_UART_IRQHandler+0xce>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2202      	movs	r2, #2
 8003b58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b60:	f043 0204 	orr.w	r2, r3, #4
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d010      	beq.n	8003b96 <HAL_UART_IRQHandler+0xfa>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2204      	movs	r2, #4
 8003b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8c:	f043 0202 	orr.w	r2, r3, #2
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc2:	f043 0208 	orr.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d011      	beq.n	8003bfa <HAL_UART_IRQHandler+0x15e>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00c      	beq.n	8003bfa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf0:	f043 0220 	orr.w	r2, r3, #32
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 812d 	beq.w	8003e60 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d004      	beq.n	8003c4a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d031      	beq.n	8003cae <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fd6e 	bl	800472c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d123      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d013      	beq.n	8003c9e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <HAL_UART_IRQHandler+0x308>)
 8003c7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fe2f 	bl	80018e6 <HAL_DMA_Abort_IT>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d017      	beq.n	8003cbe <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e00f      	b.n	8003cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8f2 	bl	8003e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca4:	e00b      	b.n	8003cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f8ee 	bl	8003e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e007      	b.n	8003cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f8ea 	bl	8003e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003cbc:	e0d0      	b.n	8003e60 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbe:	bf00      	nop
    return;
 8003cc0:	e0ce      	b.n	8003e60 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	f040 80a7 	bne.w	8003e1a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80a1 	beq.w	8003e1a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 809b 	beq.w	8003e1a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d156      	bne.n	8003da8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80ac 	beq.w	8003e64 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d12:	893a      	ldrh	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	f080 80a5 	bcs.w	8003e64 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	893a      	ldrh	r2, [r7, #8]
 8003d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2c:	d02a      	beq.n	8003d84 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0210 	bic.w	r2, r2, #16
 8003d78:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd fd41 	bl	8001806 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	4619      	mov	r1, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f87f 	bl	8003e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d9e:	e061      	b.n	8003e64 <HAL_UART_IRQHandler+0x3c8>
 8003da0:	04000120 	.word	0x04000120
 8003da4:	0800478b 	.word	0x0800478b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d050      	beq.n	8003e68 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d04d      	beq.n	8003e68 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dda:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0210 	bic.w	r2, r2, #16
 8003e0c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f842 	bl	8003e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e18:	e026      	b.n	8003e68 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01a      	beq.n	8003e6c <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
    }
    return;
 8003e3e:	e015      	b.n	8003e6c <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <HAL_UART_IRQHandler+0x3d2>
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00c      	beq.n	8003e6e <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fcae 	bl	80047b6 <UART_EndTransmit_IT>
    return;
 8003e5a:	e008      	b.n	8003e6e <HAL_UART_IRQHandler+0x3d2>
      return;
 8003e5c:	bf00      	nop
 8003e5e:	e006      	b.n	8003e6e <HAL_UART_IRQHandler+0x3d2>
    return;
 8003e60:	bf00      	nop
 8003e62:	e004      	b.n	8003e6e <HAL_UART_IRQHandler+0x3d2>
      return;
 8003e64:	bf00      	nop
 8003e66:	e002      	b.n	8003e6e <HAL_UART_IRQHandler+0x3d2>
      return;
 8003e68:	bf00      	nop
 8003e6a:	e000      	b.n	8003e6e <HAL_UART_IRQHandler+0x3d2>
    return;
 8003e6c:	bf00      	nop
  }

}
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4ba7      	ldr	r3, [pc, #668]	; (800417c <UART_SetConfig+0x2c8>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	6979      	ldr	r1, [r7, #20]
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a95      	ldr	r2, [pc, #596]	; (8004180 <UART_SetConfig+0x2cc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d120      	bne.n	8003f72 <UART_SetConfig+0xbe>
 8003f30:	4b94      	ldr	r3, [pc, #592]	; (8004184 <UART_SetConfig+0x2d0>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d816      	bhi.n	8003f6c <UART_SetConfig+0xb8>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0x90>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f55 	.word	0x08003f55
 8003f48:	08003f61 	.word	0x08003f61
 8003f4c:	08003f5b 	.word	0x08003f5b
 8003f50:	08003f67 	.word	0x08003f67
 8003f54:	2301      	movs	r3, #1
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e14f      	b.n	80041fa <UART_SetConfig+0x346>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e14c      	b.n	80041fa <UART_SetConfig+0x346>
 8003f60:	2304      	movs	r3, #4
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e149      	b.n	80041fa <UART_SetConfig+0x346>
 8003f66:	2308      	movs	r3, #8
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e146      	b.n	80041fa <UART_SetConfig+0x346>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e143      	b.n	80041fa <UART_SetConfig+0x346>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a84      	ldr	r2, [pc, #528]	; (8004188 <UART_SetConfig+0x2d4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d132      	bne.n	8003fe2 <UART_SetConfig+0x12e>
 8003f7c:	4b81      	ldr	r3, [pc, #516]	; (8004184 <UART_SetConfig+0x2d0>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d828      	bhi.n	8003fdc <UART_SetConfig+0x128>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0xdc>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fc5 	.word	0x08003fc5
 8003f94:	08003fdd 	.word	0x08003fdd
 8003f98:	08003fdd 	.word	0x08003fdd
 8003f9c:	08003fdd 	.word	0x08003fdd
 8003fa0:	08003fd1 	.word	0x08003fd1
 8003fa4:	08003fdd 	.word	0x08003fdd
 8003fa8:	08003fdd 	.word	0x08003fdd
 8003fac:	08003fdd 	.word	0x08003fdd
 8003fb0:	08003fcb 	.word	0x08003fcb
 8003fb4:	08003fdd 	.word	0x08003fdd
 8003fb8:	08003fdd 	.word	0x08003fdd
 8003fbc:	08003fdd 	.word	0x08003fdd
 8003fc0:	08003fd7 	.word	0x08003fd7
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e117      	b.n	80041fa <UART_SetConfig+0x346>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e114      	b.n	80041fa <UART_SetConfig+0x346>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e111      	b.n	80041fa <UART_SetConfig+0x346>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e10e      	b.n	80041fa <UART_SetConfig+0x346>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e10b      	b.n	80041fa <UART_SetConfig+0x346>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a69      	ldr	r2, [pc, #420]	; (800418c <UART_SetConfig+0x2d8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d120      	bne.n	800402e <UART_SetConfig+0x17a>
 8003fec:	4b65      	ldr	r3, [pc, #404]	; (8004184 <UART_SetConfig+0x2d0>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ff6:	2b30      	cmp	r3, #48	; 0x30
 8003ff8:	d013      	beq.n	8004022 <UART_SetConfig+0x16e>
 8003ffa:	2b30      	cmp	r3, #48	; 0x30
 8003ffc:	d814      	bhi.n	8004028 <UART_SetConfig+0x174>
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d009      	beq.n	8004016 <UART_SetConfig+0x162>
 8004002:	2b20      	cmp	r3, #32
 8004004:	d810      	bhi.n	8004028 <UART_SetConfig+0x174>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <UART_SetConfig+0x15c>
 800400a:	2b10      	cmp	r3, #16
 800400c:	d006      	beq.n	800401c <UART_SetConfig+0x168>
 800400e:	e00b      	b.n	8004028 <UART_SetConfig+0x174>
 8004010:	2300      	movs	r3, #0
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e0f1      	b.n	80041fa <UART_SetConfig+0x346>
 8004016:	2302      	movs	r3, #2
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e0ee      	b.n	80041fa <UART_SetConfig+0x346>
 800401c:	2304      	movs	r3, #4
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e0eb      	b.n	80041fa <UART_SetConfig+0x346>
 8004022:	2308      	movs	r3, #8
 8004024:	77fb      	strb	r3, [r7, #31]
 8004026:	e0e8      	b.n	80041fa <UART_SetConfig+0x346>
 8004028:	2310      	movs	r3, #16
 800402a:	77fb      	strb	r3, [r7, #31]
 800402c:	e0e5      	b.n	80041fa <UART_SetConfig+0x346>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a57      	ldr	r2, [pc, #348]	; (8004190 <UART_SetConfig+0x2dc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d120      	bne.n	800407a <UART_SetConfig+0x1c6>
 8004038:	4b52      	ldr	r3, [pc, #328]	; (8004184 <UART_SetConfig+0x2d0>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004042:	2bc0      	cmp	r3, #192	; 0xc0
 8004044:	d013      	beq.n	800406e <UART_SetConfig+0x1ba>
 8004046:	2bc0      	cmp	r3, #192	; 0xc0
 8004048:	d814      	bhi.n	8004074 <UART_SetConfig+0x1c0>
 800404a:	2b80      	cmp	r3, #128	; 0x80
 800404c:	d009      	beq.n	8004062 <UART_SetConfig+0x1ae>
 800404e:	2b80      	cmp	r3, #128	; 0x80
 8004050:	d810      	bhi.n	8004074 <UART_SetConfig+0x1c0>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <UART_SetConfig+0x1a8>
 8004056:	2b40      	cmp	r3, #64	; 0x40
 8004058:	d006      	beq.n	8004068 <UART_SetConfig+0x1b4>
 800405a:	e00b      	b.n	8004074 <UART_SetConfig+0x1c0>
 800405c:	2300      	movs	r3, #0
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e0cb      	b.n	80041fa <UART_SetConfig+0x346>
 8004062:	2302      	movs	r3, #2
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e0c8      	b.n	80041fa <UART_SetConfig+0x346>
 8004068:	2304      	movs	r3, #4
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e0c5      	b.n	80041fa <UART_SetConfig+0x346>
 800406e:	2308      	movs	r3, #8
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e0c2      	b.n	80041fa <UART_SetConfig+0x346>
 8004074:	2310      	movs	r3, #16
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e0bf      	b.n	80041fa <UART_SetConfig+0x346>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a45      	ldr	r2, [pc, #276]	; (8004194 <UART_SetConfig+0x2e0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d125      	bne.n	80040d0 <UART_SetConfig+0x21c>
 8004084:	4b3f      	ldr	r3, [pc, #252]	; (8004184 <UART_SetConfig+0x2d0>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004092:	d017      	beq.n	80040c4 <UART_SetConfig+0x210>
 8004094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004098:	d817      	bhi.n	80040ca <UART_SetConfig+0x216>
 800409a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409e:	d00b      	beq.n	80040b8 <UART_SetConfig+0x204>
 80040a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a4:	d811      	bhi.n	80040ca <UART_SetConfig+0x216>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <UART_SetConfig+0x1fe>
 80040aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ae:	d006      	beq.n	80040be <UART_SetConfig+0x20a>
 80040b0:	e00b      	b.n	80040ca <UART_SetConfig+0x216>
 80040b2:	2300      	movs	r3, #0
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e0a0      	b.n	80041fa <UART_SetConfig+0x346>
 80040b8:	2302      	movs	r3, #2
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e09d      	b.n	80041fa <UART_SetConfig+0x346>
 80040be:	2304      	movs	r3, #4
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e09a      	b.n	80041fa <UART_SetConfig+0x346>
 80040c4:	2308      	movs	r3, #8
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e097      	b.n	80041fa <UART_SetConfig+0x346>
 80040ca:	2310      	movs	r3, #16
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	e094      	b.n	80041fa <UART_SetConfig+0x346>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a30      	ldr	r2, [pc, #192]	; (8004198 <UART_SetConfig+0x2e4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d125      	bne.n	8004126 <UART_SetConfig+0x272>
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <UART_SetConfig+0x2d0>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e8:	d017      	beq.n	800411a <UART_SetConfig+0x266>
 80040ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ee:	d817      	bhi.n	8004120 <UART_SetConfig+0x26c>
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d00b      	beq.n	800410e <UART_SetConfig+0x25a>
 80040f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fa:	d811      	bhi.n	8004120 <UART_SetConfig+0x26c>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <UART_SetConfig+0x254>
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004104:	d006      	beq.n	8004114 <UART_SetConfig+0x260>
 8004106:	e00b      	b.n	8004120 <UART_SetConfig+0x26c>
 8004108:	2301      	movs	r3, #1
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e075      	b.n	80041fa <UART_SetConfig+0x346>
 800410e:	2302      	movs	r3, #2
 8004110:	77fb      	strb	r3, [r7, #31]
 8004112:	e072      	b.n	80041fa <UART_SetConfig+0x346>
 8004114:	2304      	movs	r3, #4
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e06f      	b.n	80041fa <UART_SetConfig+0x346>
 800411a:	2308      	movs	r3, #8
 800411c:	77fb      	strb	r3, [r7, #31]
 800411e:	e06c      	b.n	80041fa <UART_SetConfig+0x346>
 8004120:	2310      	movs	r3, #16
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e069      	b.n	80041fa <UART_SetConfig+0x346>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1c      	ldr	r2, [pc, #112]	; (800419c <UART_SetConfig+0x2e8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d137      	bne.n	80041a0 <UART_SetConfig+0x2ec>
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <UART_SetConfig+0x2d0>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800413a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800413e:	d017      	beq.n	8004170 <UART_SetConfig+0x2bc>
 8004140:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004144:	d817      	bhi.n	8004176 <UART_SetConfig+0x2c2>
 8004146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414a:	d00b      	beq.n	8004164 <UART_SetConfig+0x2b0>
 800414c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004150:	d811      	bhi.n	8004176 <UART_SetConfig+0x2c2>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <UART_SetConfig+0x2aa>
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415a:	d006      	beq.n	800416a <UART_SetConfig+0x2b6>
 800415c:	e00b      	b.n	8004176 <UART_SetConfig+0x2c2>
 800415e:	2300      	movs	r3, #0
 8004160:	77fb      	strb	r3, [r7, #31]
 8004162:	e04a      	b.n	80041fa <UART_SetConfig+0x346>
 8004164:	2302      	movs	r3, #2
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e047      	b.n	80041fa <UART_SetConfig+0x346>
 800416a:	2304      	movs	r3, #4
 800416c:	77fb      	strb	r3, [r7, #31]
 800416e:	e044      	b.n	80041fa <UART_SetConfig+0x346>
 8004170:	2308      	movs	r3, #8
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e041      	b.n	80041fa <UART_SetConfig+0x346>
 8004176:	2310      	movs	r3, #16
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e03e      	b.n	80041fa <UART_SetConfig+0x346>
 800417c:	efff69f3 	.word	0xefff69f3
 8004180:	40011000 	.word	0x40011000
 8004184:	40023800 	.word	0x40023800
 8004188:	40004400 	.word	0x40004400
 800418c:	40004800 	.word	0x40004800
 8004190:	40004c00 	.word	0x40004c00
 8004194:	40005000 	.word	0x40005000
 8004198:	40011400 	.word	0x40011400
 800419c:	40007800 	.word	0x40007800
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a71      	ldr	r2, [pc, #452]	; (800436c <UART_SetConfig+0x4b8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d125      	bne.n	80041f6 <UART_SetConfig+0x342>
 80041aa:	4b71      	ldr	r3, [pc, #452]	; (8004370 <UART_SetConfig+0x4bc>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041b8:	d017      	beq.n	80041ea <UART_SetConfig+0x336>
 80041ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041be:	d817      	bhi.n	80041f0 <UART_SetConfig+0x33c>
 80041c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c4:	d00b      	beq.n	80041de <UART_SetConfig+0x32a>
 80041c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ca:	d811      	bhi.n	80041f0 <UART_SetConfig+0x33c>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <UART_SetConfig+0x324>
 80041d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d4:	d006      	beq.n	80041e4 <UART_SetConfig+0x330>
 80041d6:	e00b      	b.n	80041f0 <UART_SetConfig+0x33c>
 80041d8:	2300      	movs	r3, #0
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e00d      	b.n	80041fa <UART_SetConfig+0x346>
 80041de:	2302      	movs	r3, #2
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e00a      	b.n	80041fa <UART_SetConfig+0x346>
 80041e4:	2304      	movs	r3, #4
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e007      	b.n	80041fa <UART_SetConfig+0x346>
 80041ea:	2308      	movs	r3, #8
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e004      	b.n	80041fa <UART_SetConfig+0x346>
 80041f0:	2310      	movs	r3, #16
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e001      	b.n	80041fa <UART_SetConfig+0x346>
 80041f6:	2310      	movs	r3, #16
 80041f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004202:	d15b      	bne.n	80042bc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004204:	7ffb      	ldrb	r3, [r7, #31]
 8004206:	2b08      	cmp	r3, #8
 8004208:	d827      	bhi.n	800425a <UART_SetConfig+0x3a6>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <UART_SetConfig+0x35c>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004235 	.word	0x08004235
 8004214:	0800423d 	.word	0x0800423d
 8004218:	08004245 	.word	0x08004245
 800421c:	0800425b 	.word	0x0800425b
 8004220:	0800424b 	.word	0x0800424b
 8004224:	0800425b 	.word	0x0800425b
 8004228:	0800425b 	.word	0x0800425b
 800422c:	0800425b 	.word	0x0800425b
 8004230:	08004253 	.word	0x08004253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004234:	f7fe fa38 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8004238:	61b8      	str	r0, [r7, #24]
        break;
 800423a:	e013      	b.n	8004264 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800423c:	f7fe fa48 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8004240:	61b8      	str	r0, [r7, #24]
        break;
 8004242:	e00f      	b.n	8004264 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004244:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <UART_SetConfig+0x4c0>)
 8004246:	61bb      	str	r3, [r7, #24]
        break;
 8004248:	e00c      	b.n	8004264 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424a:	f7fe f96b 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 800424e:	61b8      	str	r0, [r7, #24]
        break;
 8004250:	e008      	b.n	8004264 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004256:	61bb      	str	r3, [r7, #24]
        break;
 8004258:	e004      	b.n	8004264 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	77bb      	strb	r3, [r7, #30]
        break;
 8004262:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d074      	beq.n	8004354 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	005a      	lsls	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	441a      	add	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	b29b      	uxth	r3, r3
 8004280:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b0f      	cmp	r3, #15
 8004286:	d916      	bls.n	80042b6 <UART_SetConfig+0x402>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428e:	d212      	bcs.n	80042b6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f023 030f 	bic.w	r3, r3, #15
 8004298:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	89fb      	ldrh	r3, [r7, #14]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	89fa      	ldrh	r2, [r7, #14]
 80042b2:	60da      	str	r2, [r3, #12]
 80042b4:	e04e      	b.n	8004354 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	77bb      	strb	r3, [r7, #30]
 80042ba:	e04b      	b.n	8004354 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042bc:	7ffb      	ldrb	r3, [r7, #31]
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d827      	bhi.n	8004312 <UART_SetConfig+0x45e>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <UART_SetConfig+0x414>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	080042f5 	.word	0x080042f5
 80042d0:	080042fd 	.word	0x080042fd
 80042d4:	08004313 	.word	0x08004313
 80042d8:	08004303 	.word	0x08004303
 80042dc:	08004313 	.word	0x08004313
 80042e0:	08004313 	.word	0x08004313
 80042e4:	08004313 	.word	0x08004313
 80042e8:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7fe f9dc 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 80042f0:	61b8      	str	r0, [r7, #24]
        break;
 80042f2:	e013      	b.n	800431c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7fe f9ec 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 80042f8:	61b8      	str	r0, [r7, #24]
        break;
 80042fa:	e00f      	b.n	800431c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <UART_SetConfig+0x4c0>)
 80042fe:	61bb      	str	r3, [r7, #24]
        break;
 8004300:	e00c      	b.n	800431c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7fe f90f 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 8004306:	61b8      	str	r0, [r7, #24]
        break;
 8004308:	e008      	b.n	800431c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430e:	61bb      	str	r3, [r7, #24]
        break;
 8004310:	e004      	b.n	800431c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	77bb      	strb	r3, [r7, #30]
        break;
 800431a:	bf00      	nop
    }

    if (pclk != 0U)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d018      	beq.n	8004354 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	085a      	lsrs	r2, r3, #1
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	441a      	add	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	d908      	bls.n	8004350 <UART_SetConfig+0x49c>
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d204      	bcs.n	8004350 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	e001      	b.n	8004354 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004360:	7fbb      	ldrb	r3, [r7, #30]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40007c00 	.word	0x40007c00
 8004370:	40023800 	.word	0x40023800
 8004374:	00f42400 	.word	0x00f42400

08004378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f003 0310 	and.w	r3, r3, #16
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01a      	beq.n	800448e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004476:	d10a      	bne.n	800448e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	605a      	str	r2, [r3, #4]
  }
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044cc:	f7fd f85a 	bl	8001584 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d10e      	bne.n	80044fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f817 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e00d      	b.n	800451a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004532:	e05e      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800453a:	d05a      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453c:	f7fd f822 	bl	8001584 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <UART_WaitOnFlagUntilTimeout+0x30>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d11b      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004560:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e043      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d02c      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d124      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e00f      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4013      	ands	r3, r2
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	429a      	cmp	r2, r3
 800460e:	d091      	beq.n	8004534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464e:	d10e      	bne.n	800466e <UART_Start_Receive_IT+0x52>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <UART_Start_Receive_IT+0x48>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800465e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004662:	e02d      	b.n	80046c0 <UART_Start_Receive_IT+0xa4>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	22ff      	movs	r2, #255	; 0xff
 8004668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800466c:	e028      	b.n	80046c0 <UART_Start_Receive_IT+0xa4>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10d      	bne.n	8004692 <UART_Start_Receive_IT+0x76>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <UART_Start_Receive_IT+0x6c>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	22ff      	movs	r2, #255	; 0xff
 8004682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004686:	e01b      	b.n	80046c0 <UART_Start_Receive_IT+0xa4>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	227f      	movs	r2, #127	; 0x7f
 800468c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004690:	e016      	b.n	80046c0 <UART_Start_Receive_IT+0xa4>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800469a:	d10d      	bne.n	80046b8 <UART_Start_Receive_IT+0x9c>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d104      	bne.n	80046ae <UART_Start_Receive_IT+0x92>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	227f      	movs	r2, #127	; 0x7f
 80046a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046ac:	e008      	b.n	80046c0 <UART_Start_Receive_IT+0xa4>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	223f      	movs	r2, #63	; 0x3f
 80046b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b6:	e003      	b.n	80046c0 <UART_Start_Receive_IT+0xa4>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2222      	movs	r2, #34	; 0x22
 80046cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e6:	d107      	bne.n	80046f8 <UART_Start_Receive_IT+0xdc>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <UART_Start_Receive_IT+0x108>)
 80046f4:	665a      	str	r2, [r3, #100]	; 0x64
 80046f6:	e002      	b.n	80046fe <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <UART_Start_Receive_IT+0x10c>)
 80046fc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004714:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	080048bd 	.word	0x080048bd
 8004728:	080047e9 	.word	0x080047e9

0800472c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004742:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004758:	2b01      	cmp	r3, #1
 800475a:	d107      	bne.n	800476c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0210 	bic.w	r2, r2, #16
 800476a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff fb6d 	bl	8003e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fb4a 	bl	8003e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fc:	2b22      	cmp	r3, #34	; 0x22
 80047fe:	d151      	bne.n	80048a4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004808:	89bb      	ldrh	r3, [r7, #12]
 800480a:	b2d9      	uxtb	r1, r3
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	400a      	ands	r2, r1
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d138      	bne.n	80048b4 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004850:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10f      	bne.n	8004896 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0210 	bic.w	r2, r2, #16
 8004884:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff fb04 	bl	8003e9c <HAL_UARTEx_RxEventCallback>
 8004894:	e002      	b.n	800489c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fb ff74 	bl	8000784 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048a2:	e007      	b.n	80048b4 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0208 	orr.w	r2, r2, #8
 80048b2:	619a      	str	r2, [r3, #24]
}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048ca:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d0:	2b22      	cmp	r3, #34	; 0x22
 80048d2:	d151      	bne.n	8004978 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80048e2:	89ba      	ldrh	r2, [r7, #12]
 80048e4:	89fb      	ldrh	r3, [r7, #14]
 80048e6:	4013      	ands	r3, r2
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	1c9a      	adds	r2, r3, #2
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d138      	bne.n	8004988 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004924:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0201 	bic.w	r2, r2, #1
 8004934:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004946:	2b01      	cmp	r3, #1
 8004948:	d10f      	bne.n	800496a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0210 	bic.w	r2, r2, #16
 8004958:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fa9a 	bl	8003e9c <HAL_UARTEx_RxEventCallback>
 8004968:	e002      	b.n	8004970 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fb ff0a 	bl	8000784 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004976:	e007      	b.n	8004988 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699a      	ldr	r2, [r3, #24]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0208 	orr.w	r2, r2, #8
 8004986:	619a      	str	r2, [r3, #24]
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4d0d      	ldr	r5, [pc, #52]	; (80049c8 <__libc_init_array+0x38>)
 8004994:	4c0d      	ldr	r4, [pc, #52]	; (80049cc <__libc_init_array+0x3c>)
 8004996:	1b64      	subs	r4, r4, r5
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	2600      	movs	r6, #0
 800499c:	42a6      	cmp	r6, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	4d0b      	ldr	r5, [pc, #44]	; (80049d0 <__libc_init_array+0x40>)
 80049a2:	4c0c      	ldr	r4, [pc, #48]	; (80049d4 <__libc_init_array+0x44>)
 80049a4:	f000 f820 	bl	80049e8 <_init>
 80049a8:	1b64      	subs	r4, r4, r5
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	2600      	movs	r6, #0
 80049ae:	42a6      	cmp	r6, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b8:	4798      	blx	r3
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c2:	4798      	blx	r3
 80049c4:	3601      	adds	r6, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08004a2c 	.word	0x08004a2c
 80049cc:	08004a2c 	.word	0x08004a2c
 80049d0:	08004a2c 	.word	0x08004a2c
 80049d4:	08004a30 	.word	0x08004a30

080049d8 <memset>:
 80049d8:	4402      	add	r2, r0
 80049da:	4603      	mov	r3, r0
 80049dc:	4293      	cmp	r3, r2
 80049de:	d100      	bne.n	80049e2 <memset+0xa>
 80049e0:	4770      	bx	lr
 80049e2:	f803 1b01 	strb.w	r1, [r3], #1
 80049e6:	e7f9      	b.n	80049dc <memset+0x4>

080049e8 <_init>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr

080049f4 <_fini>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr
