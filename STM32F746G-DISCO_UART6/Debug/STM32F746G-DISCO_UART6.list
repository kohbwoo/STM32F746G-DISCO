
STM32F746G-DISCO_UART6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049cc  080049cc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  200000a0  08004a74  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004a74  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f425  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f59  00000000  00000000  0002f4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00031450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00032218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d46  00000000  00000000  00032f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4f4  00000000  00000000  00058c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef898  00000000  00000000  00068162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001579fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e8  00000000  00000000  00157a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a0 	.word	0x200000a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004978 	.word	0x08004978

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a4 	.word	0x200000a4
 8000204:	08004978 	.word	0x08004978

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <Line_Change1>:
unsigned char UART6_Input = 0; // 인터럽트 입력 여부 구별
unsigned short input = 0; //인풋///////////////////////////////////////////////////////////////////
unsigned char addr[4] = { 0, 0, 0, 0 };


void Line_Change1(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e00a      	b.n	80005f6 <Line_Change1+0x22>
		HAL_UART_Transmit(&huart1, &Enter[i], 1, 10);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <Line_Change1+0x34>)
 80005e4:	1899      	adds	r1, r3, r2
 80005e6:	230a      	movs	r3, #10
 80005e8:	2201      	movs	r2, #1
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <Line_Change1+0x38>)
 80005ec:	f003 f94e 	bl	800388c <HAL_UART_Transmit>
	for(int i = 0; i<3; i++){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3301      	adds	r3, #1
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	ddf1      	ble.n	80005e0 <Line_Change1+0xc>
	}

}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000090 	.word	0x20000090
 800060c:	2000011c 	.word	0x2000011c

08000610 <Line_Change6>:

void Line_Change6(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e00a      	b.n	8000632 <Line_Change6+0x22>
		HAL_UART_Transmit(&huart6, &Enter[i], 1, 10);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <Line_Change6+0x34>)
 8000620:	1899      	adds	r1, r3, r2
 8000622:	230a      	movs	r3, #10
 8000624:	2201      	movs	r2, #1
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <Line_Change6+0x38>)
 8000628:	f003 f930 	bl	800388c <HAL_UART_Transmit>
	for(int i = 0; i<3; i++){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b02      	cmp	r3, #2
 8000636:	ddf1      	ble.n	800061c <Line_Change6+0xc>
	}

}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000090 	.word	0x20000090
 8000648:	200001ac 	.word	0x200001ac

0800064c <UART6_Start>:


void UART6_Start(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	for (int i = 0; i <16; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e00a      	b.n	800066e <UART6_Start+0x22>
		HAL_UART_Transmit(&huart6, &UART6_Text_Start[i], 1, 10);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <UART6_Start+0x34>)
 800065c:	1899      	adds	r1, r3, r2
 800065e:	230a      	movs	r3, #10
 8000660:	2201      	movs	r2, #1
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <UART6_Start+0x38>)
 8000664:	f003 f912 	bl	800388c <HAL_UART_Transmit>
	for (int i = 0; i <16; i++) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	ddf1      	ble.n	8000658 <UART6_Start+0xc>
	}
	Line_Change6();
 8000674:	f7ff ffcc 	bl	8000610 <Line_Change6>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000054 	.word	0x20000054
 8000684:	200001ac 	.word	0x200001ac

08000688 <UART1_Start>:
void UART1_Start(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	for (int i = 0; i <16; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	e00a      	b.n	80006aa <UART1_Start+0x22>
		HAL_UART_Transmit(&huart1, &UART1_Text_Start[i], 1, 10);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <UART1_Start+0x34>)
 8000698:	1899      	adds	r1, r3, r2
 800069a:	230a      	movs	r3, #10
 800069c:	2201      	movs	r2, #1
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <UART1_Start+0x38>)
 80006a0:	f003 f8f4 	bl	800388c <HAL_UART_Transmit>
	for (int i = 0; i <16; i++) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	ddf1      	ble.n	8000694 <UART1_Start+0xc>
	}
	Line_Change1();
 80006b0:	f7ff ff90 	bl	80005d4 <Line_Change1>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000018 	.word	0x20000018
 80006c0:	2000011c 	.word	0x2000011c

080006c4 <UART6_Print>:

void UART6_Print() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart6, &rx6_data, 1, 10);
	Line_Change6();
*/


	for (int i = 0; i < 8; i++) {//uart6 입력 uart1 에 출력
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e00a      	b.n	80006e6 <UART6_Print+0x22>
		HAL_UART_Transmit(&huart1, &UART6_Text_Input[i], 1, 10);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <UART6_Print+0x40>)
 80006d4:	1899      	adds	r1, r3, r2
 80006d6:	230a      	movs	r3, #10
 80006d8:	2201      	movs	r2, #1
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <UART6_Print+0x44>)
 80006dc:	f003 f8d6 	bl	800388c <HAL_UART_Transmit>
	for (int i = 0; i < 8; i++) {//uart6 입력 uart1 에 출력
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b07      	cmp	r3, #7
 80006ea:	ddf1      	ble.n	80006d0 <UART6_Print+0xc>
	}
	HAL_UART_Transmit(&huart1, &rx6_data, 1, 10);
 80006ec:	230a      	movs	r3, #10
 80006ee:	2201      	movs	r2, #1
 80006f0:	4906      	ldr	r1, [pc, #24]	; (800070c <UART6_Print+0x48>)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <UART6_Print+0x44>)
 80006f4:	f003 f8ca 	bl	800388c <HAL_UART_Transmit>
	Line_Change1();
 80006f8:	f7ff ff6c 	bl	80005d4 <Line_Change1>


}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000008 	.word	0x20000008
 8000708:	2000011c 	.word	0x2000011c
 800070c:	200001a0 	.word	0x200001a0

08000710 <UART1_Print>:



void UART1_Print() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
	if (rx1_data == 84 || rx1_data == 116) { //UART 입력이 T 또는 t인경우 실행
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <UART1_Print+0xe4>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b54      	cmp	r3, #84	; 0x54
 800071c:	d003      	beq.n	8000726 <UART1_Print+0x16>
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <UART1_Print+0xe4>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b74      	cmp	r3, #116	; 0x74
 8000724:	d148      	bne.n	80007b8 <UART1_Print+0xa8>
		for (int i = 0; i < 7; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e00a      	b.n	8000742 <UART1_Print+0x32>
			HAL_UART_Transmit(&huart1, &UART_Text_Input[i], 1, 10);
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	4a32      	ldr	r2, [pc, #200]	; (80007f8 <UART1_Print+0xe8>)
 8000730:	1899      	adds	r1, r3, r2
 8000732:	230a      	movs	r3, #10
 8000734:	2201      	movs	r2, #1
 8000736:	4831      	ldr	r0, [pc, #196]	; (80007fc <UART1_Print+0xec>)
 8000738:	f003 f8a8 	bl	800388c <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	3301      	adds	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	2b06      	cmp	r3, #6
 8000746:	ddf1      	ble.n	800072c <UART1_Print+0x1c>
		}
		HAL_UART_Transmit(&huart1, &rx1_data, 1, 10);
 8000748:	230a      	movs	r3, #10
 800074a:	2201      	movs	r2, #1
 800074c:	4929      	ldr	r1, [pc, #164]	; (80007f4 <UART1_Print+0xe4>)
 800074e:	482b      	ldr	r0, [pc, #172]	; (80007fc <UART1_Print+0xec>)
 8000750:	f003 f89c 	bl	800388c <HAL_UART_Transmit>
		Line_Change1();
 8000754:	f7ff ff3e 	bl	80005d4 <Line_Change1>

		for (int i = 0; i < 7; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	e00a      	b.n	8000774 <UART1_Print+0x64>
			HAL_UART_Transmit(&huart1, &UART_Text_Time[i], 1, 10);
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <UART1_Print+0xf0>)
 8000762:	1899      	adds	r1, r3, r2
 8000764:	230a      	movs	r3, #10
 8000766:	2201      	movs	r2, #1
 8000768:	4824      	ldr	r0, [pc, #144]	; (80007fc <UART1_Print+0xec>)
 800076a:	f003 f88f 	bl	800388c <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	3301      	adds	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	2b06      	cmp	r3, #6
 8000778:	ddf1      	ble.n	800075e <UART1_Print+0x4e>
		}

		unsigned char tmplist[4];

		for (int i = 0; i < 4; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e015      	b.n	80007ac <UART1_Print+0x9c>
			tmplist[i] = addr[i] + 48;
 8000780:	4a20      	ldr	r2, [pc, #128]	; (8000804 <UART1_Print+0xf4>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3330      	adds	r3, #48	; 0x30
 800078a:	b2d9      	uxtb	r1, r3
 800078c:	1d3a      	adds	r2, r7, #4
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4413      	add	r3, r2
 8000792:	460a      	mov	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &tmplist[i], 1, 10);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	18d1      	adds	r1, r2, r3
 800079c:	230a      	movs	r3, #10
 800079e:	2201      	movs	r2, #1
 80007a0:	4816      	ldr	r0, [pc, #88]	; (80007fc <UART1_Print+0xec>)
 80007a2:	f003 f873 	bl	800388c <HAL_UART_Transmit>
		for (int i = 0; i < 4; i++) {
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	dde6      	ble.n	8000780 <UART1_Print+0x70>
		}
		Line_Change1();
 80007b2:	f7ff ff0f 	bl	80005d4 <Line_Change1>
	if (rx1_data == 84 || rx1_data == 116) { //UART 입력이 T 또는 t인경우 실행
 80007b6:	e019      	b.n	80007ec <UART1_Print+0xdc>

	} else {
		for (int i = 0; i < 7; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	e00a      	b.n	80007d4 <UART1_Print+0xc4>
			HAL_UART_Transmit(&huart1, &UART_Text_Input[i], 1, 10);
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <UART1_Print+0xe8>)
 80007c2:	1899      	adds	r1, r3, r2
 80007c4:	230a      	movs	r3, #10
 80007c6:	2201      	movs	r2, #1
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <UART1_Print+0xec>)
 80007ca:	f003 f85f 	bl	800388c <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	ddf1      	ble.n	80007be <UART1_Print+0xae>
		}
		HAL_UART_Transmit(&huart1, &rx1_data, 1, 10);
 80007da:	230a      	movs	r3, #10
 80007dc:	2201      	movs	r2, #1
 80007de:	4905      	ldr	r1, [pc, #20]	; (80007f4 <UART1_Print+0xe4>)
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <UART1_Print+0xec>)
 80007e2:	f003 f853 	bl	800388c <HAL_UART_Transmit>
		Line_Change1();
 80007e6:	f7ff fef5 	bl	80005d4 <Line_Change1>
	}


}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200001a8 	.word	0x200001a8
 80007f8:	20000000 	.word	0x20000000
 80007fc:	2000011c 	.word	0x2000011c
 8000800:	20000010 	.word	0x20000010
 8000804:	200000c8 	.word	0x200000c8

08000808 <UART6_Call_Arduino>:


void UART6_Call_Arduino() {
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0


	if (Arduino_Time_Count == 10){
 800080c:	4b3d      	ldr	r3, [pc, #244]	; (8000904 <UART6_Call_Arduino+0xfc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b0a      	cmp	r3, #10
 8000812:	d11a      	bne.n	800084a <UART6_Call_Arduino+0x42>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	2102      	movs	r1, #2
 8000818:	483b      	ldr	r0, [pc, #236]	; (8000908 <UART6_Call_Arduino+0x100>)
 800081a:	f001 fa2d 	bl	8001c78 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart6, &"h", 1, 10);
 800081e:	230a      	movs	r3, #10
 8000820:	2201      	movs	r2, #1
 8000822:	493a      	ldr	r1, [pc, #232]	; (800090c <UART6_Call_Arduino+0x104>)
 8000824:	483a      	ldr	r0, [pc, #232]	; (8000910 <UART6_Call_Arduino+0x108>)
 8000826:	f003 f831 	bl	800388c <HAL_UART_Transmit>
		Line_Change6();
 800082a:	f7ff fef1 	bl	8000610 <Line_Change6>
		HAL_Delay(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f000 fe96 	bl	8001560 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2102      	movs	r1, #2
 8000838:	4833      	ldr	r0, [pc, #204]	; (8000908 <UART6_Call_Arduino+0x100>)
 800083a:	f001 fa1d 	bl	8001c78 <HAL_GPIO_WritePin>
		Arduino_Time_Count = Arduino_Time_Count + 1;
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <UART6_Call_Arduino+0xfc>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <UART6_Call_Arduino+0xfc>)
 8000848:	701a      	strb	r2, [r3, #0]
	}

	if (Arduino_Time_Count == 20){
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <UART6_Call_Arduino+0xfc>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b14      	cmp	r3, #20
 8000850:	d11a      	bne.n	8000888 <UART6_Call_Arduino+0x80>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	482c      	ldr	r0, [pc, #176]	; (8000908 <UART6_Call_Arduino+0x100>)
 8000858:	f001 fa0e 	bl	8001c78 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart6, &"d", 1, 10);
 800085c:	230a      	movs	r3, #10
 800085e:	2201      	movs	r2, #1
 8000860:	492c      	ldr	r1, [pc, #176]	; (8000914 <UART6_Call_Arduino+0x10c>)
 8000862:	482b      	ldr	r0, [pc, #172]	; (8000910 <UART6_Call_Arduino+0x108>)
 8000864:	f003 f812 	bl	800388c <HAL_UART_Transmit>
		Line_Change6();
 8000868:	f7ff fed2 	bl	8000610 <Line_Change6>
		HAL_Delay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f000 fe77 	bl	8001560 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	4824      	ldr	r0, [pc, #144]	; (8000908 <UART6_Call_Arduino+0x100>)
 8000878:	f001 f9fe 	bl	8001c78 <HAL_GPIO_WritePin>
		Arduino_Time_Count = Arduino_Time_Count + 1;
 800087c:	4b21      	ldr	r3, [pc, #132]	; (8000904 <UART6_Call_Arduino+0xfc>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <UART6_Call_Arduino+0xfc>)
 8000886:	701a      	strb	r2, [r3, #0]
	}



	if (Arduino_Time_Count == 30){
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <UART6_Call_Arduino+0xfc>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b1e      	cmp	r3, #30
 800088e:	d11a      	bne.n	80008c6 <UART6_Call_Arduino+0xbe>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 1);
 8000890:	2201      	movs	r2, #1
 8000892:	2102      	movs	r1, #2
 8000894:	481c      	ldr	r0, [pc, #112]	; (8000908 <UART6_Call_Arduino+0x100>)
 8000896:	f001 f9ef 	bl	8001c78 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart6, &"t", 1, 10);
 800089a:	230a      	movs	r3, #10
 800089c:	2201      	movs	r2, #1
 800089e:	491e      	ldr	r1, [pc, #120]	; (8000918 <UART6_Call_Arduino+0x110>)
 80008a0:	481b      	ldr	r0, [pc, #108]	; (8000910 <UART6_Call_Arduino+0x108>)
 80008a2:	f002 fff3 	bl	800388c <HAL_UART_Transmit>
		Line_Change6();
 80008a6:	f7ff feb3 	bl	8000610 <Line_Change6>
		HAL_Delay(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fe58 	bl	8001560 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2102      	movs	r1, #2
 80008b4:	4814      	ldr	r0, [pc, #80]	; (8000908 <UART6_Call_Arduino+0x100>)
 80008b6:	f001 f9df 	bl	8001c78 <HAL_GPIO_WritePin>
		Arduino_Time_Count = Arduino_Time_Count + 1;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <UART6_Call_Arduino+0xfc>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <UART6_Call_Arduino+0xfc>)
 80008c4:	701a      	strb	r2, [r3, #0]
	}



	if (Arduino_Time_Count == 40){
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <UART6_Call_Arduino+0xfc>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b28      	cmp	r3, #40	; 0x28
 80008cc:	d117      	bne.n	80008fe <UART6_Call_Arduino+0xf6>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 1);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2102      	movs	r1, #2
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <UART6_Call_Arduino+0x100>)
 80008d4:	f001 f9d0 	bl	8001c78 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart6, &"c", 1, 10);
 80008d8:	230a      	movs	r3, #10
 80008da:	2201      	movs	r2, #1
 80008dc:	490f      	ldr	r1, [pc, #60]	; (800091c <UART6_Call_Arduino+0x114>)
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <UART6_Call_Arduino+0x108>)
 80008e0:	f002 ffd4 	bl	800388c <HAL_UART_Transmit>
		Line_Change6();
 80008e4:	f7ff fe94 	bl	8000610 <Line_Change6>
		HAL_Delay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 fe39 	bl	8001560 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2102      	movs	r1, #2
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <UART6_Call_Arduino+0x100>)
 80008f4:	f001 f9c0 	bl	8001c78 <HAL_GPIO_WritePin>
		Arduino_Time_Count = 0;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <UART6_Call_Arduino+0xfc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	}

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000c0 	.word	0x200000c0
 8000908:	40022000 	.word	0x40022000
 800090c:	08004990 	.word	0x08004990
 8000910:	200001ac 	.word	0x200001ac
 8000914:	08004994 	.word	0x08004994
 8000918:	08004998 	.word	0x08004998
 800091c:	0800499c 	.word	0x0800499c

08000920 <HAL_UART_RxCpltCallback>:

int rcnt;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_UART_RxCpltCallback+0x50>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d107      	bne.n	8000942 <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	490f      	ldr	r1, [pc, #60]	; (8000974 <HAL_UART_RxCpltCallback+0x54>)
 8000936:	4810      	ldr	r0, [pc, #64]	; (8000978 <HAL_UART_RxCpltCallback+0x58>)
 8000938:	f003 f83b 	bl	80039b2 <HAL_UART_Receive_IT>
		UART1_Input = 1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_UART_RxCpltCallback+0x5c>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART6) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_UART_RxCpltCallback+0x60>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d10c      	bne.n	8000966 <HAL_UART_RxCpltCallback+0x46>
		HAL_UART_Receive_IT(&huart6, &rx6_data, 1);
 800094c:	2201      	movs	r2, #1
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <HAL_UART_RxCpltCallback+0x64>)
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <HAL_UART_RxCpltCallback+0x68>)
 8000952:	f003 f82e 	bl	80039b2 <HAL_UART_Receive_IT>
		//HAL_UART_Transmit(&huart1, &rx6_data, 1, 10);
		UART6_Input = 1;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_UART_RxCpltCallback+0x6c>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
		rcnt++;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_UART_RxCpltCallback+0x70>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <HAL_UART_RxCpltCallback+0x70>)
 8000964:	6013      	str	r3, [r2, #0]
	}

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40011000 	.word	0x40011000
 8000974:	200001a8 	.word	0x200001a8
 8000978:	2000011c 	.word	0x2000011c
 800097c:	200000c1 	.word	0x200000c1
 8000980:	40011400 	.word	0x40011400
 8000984:	200001a0 	.word	0x200001a0
 8000988:	200001ac 	.word	0x200001ac
 800098c:	200000c2 	.word	0x200000c2
 8000990:	200001a4 	.word	0x200001a4

08000994 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //타이머 인터럽트 코드
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d10b      	bne.n	80009be <HAL_TIM_PeriodElapsedCallback+0x2a>


		input = input + 1;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009b0:	801a      	strh	r2, [r3, #0]
		Arduino_Time_Count = Arduino_Time_Count + 1;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009bc:	701a      	strb	r2, [r3, #0]
	}
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40000400 	.word	0x40000400
 80009d0:	200000c4 	.word	0x200000c4
 80009d4:	200000c0 	.word	0x200000c0

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80009de:	f7ff fd8f 	bl	8000500 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80009e2:	f7ff fdb3 	bl	800054c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f000 fd5e 	bl	80014a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f8d3 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f000 fa13 	bl	8000e18 <MX_GPIO_Init>
  MX_TIM3_Init();
 80009f2:	f000 f961 	bl	8000cb8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80009f6:	f000 f9af 	bl	8000d58 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009fa:	f000 f9dd 	bl	8000db8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3); // 타이머 인터럽트 시작 디버그 할경우 주석처리 해야함
 80009fe:	4854      	ldr	r0, [pc, #336]	; (8000b50 <main+0x178>)
 8000a00:	f002 fa8a 	bl	8002f18 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart6, &rx6_data, 1); // UART인터럽트 한바이트 들어오면 시작
 8000a04:	2201      	movs	r2, #1
 8000a06:	4953      	ldr	r1, [pc, #332]	; (8000b54 <main+0x17c>)
 8000a08:	4853      	ldr	r0, [pc, #332]	; (8000b58 <main+0x180>)
 8000a0a:	f002 ffd2 	bl	80039b2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx1_data, 1); // UART인터럽트 한바이트 들어오면 시작
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4952      	ldr	r1, [pc, #328]	; (8000b5c <main+0x184>)
 8000a12:	4853      	ldr	r0, [pc, #332]	; (8000b60 <main+0x188>)
 8000a14:	f002 ffcd 	bl	80039b2 <HAL_UART_Receive_IT>
  unsigned char List_Of_Segments[4] = { 0x01, 0x02, 0x04, 0x08 };
 8000a18:	4b52      	ldr	r3, [pc, #328]	; (8000b64 <main+0x18c>)
 8000a1a:	613b      	str	r3, [r7, #16]
  unsigned char List_Of_Segment_Info[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99,
 8000a1c:	4a52      	ldr	r2, [pc, #328]	; (8000b68 <main+0x190>)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a22:	c303      	stmia	r3!, {r0, r1}
 8000a24:	801a      	strh	r2, [r3, #0]
		  0x92, 0x82, 0xD8, 0x80, 0x98 };
  unsigned short delaytime = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	82fb      	strh	r3, [r7, #22]
  UART1_Start();
 8000a2a:	f7ff fe2d 	bl	8000688 <UART1_Start>
  UART6_Start();
 8000a2e:	f7ff fe0d 	bl	800064c <UART6_Start>
  while (1)
  {



	  Loop_Count++;
 8000a32:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <main+0x194>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	4a4c      	ldr	r2, [pc, #304]	; (8000b6c <main+0x194>)
 8000a3a:	6013      	str	r3, [r2, #0]

	  if (input % 100 == 60) {
 8000a3c:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <main+0x198>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	4a4c      	ldr	r2, [pc, #304]	; (8000b74 <main+0x19c>)
 8000a42:	fba2 1203 	umull	r1, r2, r2, r3
 8000a46:	0952      	lsrs	r2, r2, #5
 8000a48:	2164      	movs	r1, #100	; 0x64
 8000a4a:	fb01 f202 	mul.w	r2, r1, r2
 8000a4e:	1a9b      	subs	r3, r3, r2
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	2b3c      	cmp	r3, #60	; 0x3c
 8000a54:	d10b      	bne.n	8000a6e <main+0x96>
		input += 100;
 8000a56:	4b46      	ldr	r3, [pc, #280]	; (8000b70 <main+0x198>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	3364      	adds	r3, #100	; 0x64
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b44      	ldr	r3, [pc, #272]	; (8000b70 <main+0x198>)
 8000a60:	801a      	strh	r2, [r3, #0]
		input -= 60;
 8000a62:	4b43      	ldr	r3, [pc, #268]	; (8000b70 <main+0x198>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	3b3c      	subs	r3, #60	; 0x3c
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <main+0x198>)
 8000a6c:	801a      	strh	r2, [r3, #0]
	  }

	  if (input > 2359) {
 8000a6e:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <main+0x198>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	f640 1237 	movw	r2, #2359	; 0x937
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d902      	bls.n	8000a80 <main+0xa8>
		input = 0;
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <main+0x198>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	801a      	strh	r2, [r3, #0]
	  }

	  addr[0] = input / 1000;
 8000a80:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <main+0x198>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	4a3c      	ldr	r2, [pc, #240]	; (8000b78 <main+0x1a0>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	099b      	lsrs	r3, r3, #6
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <main+0x1a4>)
 8000a92:	701a      	strb	r2, [r3, #0]
	  addr[1] = input % 1000 / 100;
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <main+0x198>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	4a37      	ldr	r2, [pc, #220]	; (8000b78 <main+0x1a0>)
 8000a9a:	fba2 1203 	umull	r1, r2, r2, r3
 8000a9e:	0992      	lsrs	r2, r2, #6
 8000aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa4:	fb01 f202 	mul.w	r2, r1, r2
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4a31      	ldr	r2, [pc, #196]	; (8000b74 <main+0x19c>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <main+0x1a4>)
 8000aba:	705a      	strb	r2, [r3, #1]
	  addr[2] = input % 100 / 10;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <main+0x198>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	4a2c      	ldr	r2, [pc, #176]	; (8000b74 <main+0x19c>)
 8000ac2:	fba2 1203 	umull	r1, r2, r2, r3
 8000ac6:	0952      	lsrs	r2, r2, #5
 8000ac8:	2164      	movs	r1, #100	; 0x64
 8000aca:	fb01 f202 	mul.w	r2, r1, r2
 8000ace:	1a9b      	subs	r3, r3, r2
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <main+0x1a8>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <main+0x1a4>)
 8000ae0:	709a      	strb	r2, [r3, #2]
	  addr[3] = input % 10;
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <main+0x198>)
 8000ae4:	881a      	ldrh	r2, [r3, #0]
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <main+0x1a8>)
 8000ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8000aec:	08d9      	lsrs	r1, r3, #3
 8000aee:	460b      	mov	r3, r1
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	440b      	add	r3, r1
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <main+0x1a4>)
 8000afe:	70da      	strb	r2, [r3, #3]
	  }
*/



	  if (UART6_Input == 1) {
 8000b00:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <main+0x1ac>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d107      	bne.n	8000b18 <main+0x140>
		UART6_Print();
 8000b08:	f7ff fddc 	bl	80006c4 <UART6_Print>
		UART6_Input = 0;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <main+0x1ac>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
		rcnt=0;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <main+0x1b0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
	  }


	  if (Arduino_Time_Count % 10 == 0){
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <main+0x1b4>)
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <main+0x1a8>)
 8000b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b22:	08d9      	lsrs	r1, r3, #3
 8000b24:	460b      	mov	r3, r1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	440b      	add	r3, r1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <main+0x160>
		UART6_Call_Arduino();
 8000b34:	f7ff fe68 	bl	8000808 <UART6_Call_Arduino>
	  }

	  if (UART1_Input == 1) {
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <main+0x1b8>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	f47f af78 	bne.w	8000a32 <main+0x5a>
		UART1_Print();
 8000b42:	f7ff fde5 	bl	8000710 <UART1_Print>
		UART1_Input = 0;
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <main+0x1b8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
	  Loop_Count++;
 8000b4c:	e771      	b.n	8000a32 <main+0x5a>
 8000b4e:	bf00      	nop
 8000b50:	200000d0 	.word	0x200000d0
 8000b54:	200001a0 	.word	0x200001a0
 8000b58:	200001ac 	.word	0x200001ac
 8000b5c:	200001a8 	.word	0x200001a8
 8000b60:	2000011c 	.word	0x2000011c
 8000b64:	08040201 	.word	0x08040201
 8000b68:	080049a0 	.word	0x080049a0
 8000b6c:	200000bc 	.word	0x200000bc
 8000b70:	200000c4 	.word	0x200000c4
 8000b74:	51eb851f 	.word	0x51eb851f
 8000b78:	10624dd3 	.word	0x10624dd3
 8000b7c:	200000c8 	.word	0x200000c8
 8000b80:	cccccccd 	.word	0xcccccccd
 8000b84:	200000c2 	.word	0x200000c2
 8000b88:	200001a4 	.word	0x200001a4
 8000b8c:	200000c0 	.word	0x200000c0
 8000b90:	200000c1 	.word	0x200000c1

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0b4      	sub	sp, #208	; 0xd0
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b9e:	2230      	movs	r2, #48	; 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 fee0 	bl	8004968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2284      	movs	r2, #132	; 0x84
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 fed1 	bl	8004968 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <SystemClock_Config+0x11c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a39      	ldr	r2, [pc, #228]	; (8000cb0 <SystemClock_Config+0x11c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <SystemClock_Config+0x11c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bde:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <SystemClock_Config+0x120>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a34      	ldr	r2, [pc, #208]	; (8000cb4 <SystemClock_Config+0x120>)
 8000be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <SystemClock_Config+0x120>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c04:	2302      	movs	r3, #2
 8000c06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c12:	2319      	movs	r3, #25
 8000c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c18:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c26:	2309      	movs	r3, #9
 8000c28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 f8af 	bl	8001d94 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c3c:	f000 f9f4 	bl	8001028 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c40:	f001 f858 	bl	8001cf4 <HAL_PWREx_EnableOverDrive>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c4a:	f000 f9ed 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000c70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c74:	2106      	movs	r1, #6
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fb30 	bl	80022dc <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000c82:	f000 f9d1 	bl	8001028 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6;
 8000c86:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000c8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c90:	2300      	movs	r3, #0
 8000c92:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fcf5 	bl	8002688 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000ca4:	f000 f9c0 	bl	8001028 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	37d0      	adds	r7, #208	; 0xd0
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000cd8:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <MX_TIM3_Init+0x9c>)
 8000cda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000cde:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ce2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000cec:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cfe:	4814      	ldr	r0, [pc, #80]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000d00:	f002 f8b2 	bl	8002e68 <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000d0a:	f000 f98d 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000d1c:	f002 fa94 	bl	8003248 <HAL_TIM_ConfigClockSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000d26:	f000 f97f 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_TIM3_Init+0x98>)
 8000d38:	f002 fcae 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d42:	f000 f971 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000d0 	.word	0x200000d0
 8000d54:	40000400 	.word	0x40000400

08000d58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <MX_USART1_UART_Init+0x5c>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART1_UART_Init+0x58>)
 8000d9c:	f002 fd28 	bl	80037f0 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000da6:	f000 f93f 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000011c 	.word	0x2000011c
 8000db4:	40011000 	.word	0x40011000

08000db8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <MX_USART6_UART_Init+0x5c>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000dc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_USART6_UART_Init+0x58>)
 8000dfc:	f002 fcf8 	bl	80037f0 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000e06:	f000 f90f 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200001ac 	.word	0x200001ac
 8000e14:	40011400 	.word	0x40011400

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	; 0x30
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b76      	ldr	r3, [pc, #472]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a75      	ldr	r2, [pc, #468]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b73      	ldr	r3, [pc, #460]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
 8000e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b70      	ldr	r3, [pc, #448]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a6f      	ldr	r2, [pc, #444]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b6d      	ldr	r3, [pc, #436]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e5e:	4b6a      	ldr	r3, [pc, #424]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a69      	ldr	r2, [pc, #420]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b67      	ldr	r3, [pc, #412]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e76:	4b64      	ldr	r3, [pc, #400]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a63      	ldr	r2, [pc, #396]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b61      	ldr	r3, [pc, #388]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a5d      	ldr	r2, [pc, #372]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea6:	4b58      	ldr	r3, [pc, #352]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a57      	ldr	r2, [pc, #348]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b55      	ldr	r3, [pc, #340]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b52      	ldr	r3, [pc, #328]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a51      	ldr	r2, [pc, #324]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <MX_GPIO_Init+0x1f0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f24c 0110 	movw	r1, #49168	; 0xc010
 8000edc:	484b      	ldr	r0, [pc, #300]	; (800100c <MX_GPIO_Init+0x1f4>)
 8000ede:	f000 fecb 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000ee8:	4849      	ldr	r0, [pc, #292]	; (8001010 <MX_GPIO_Init+0x1f8>)
 8000eea:	f000 fec5 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	4848      	ldr	r0, [pc, #288]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000ef4:	f000 fec0 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	21c0      	movs	r1, #192	; 0xc0
 8000efc:	4846      	ldr	r0, [pc, #280]	; (8001018 <MX_GPIO_Init+0x200>)
 8000efe:	f000 febb 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	4845      	ldr	r0, [pc, #276]	; (800101c <MX_GPIO_Init+0x204>)
 8000f08:	f000 feb6 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_15;
 8000f0c:	f24c 0310 	movw	r3, #49168	; 0xc010
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4839      	ldr	r0, [pc, #228]	; (800100c <MX_GPIO_Init+0x1f4>)
 8000f26:	f000 fce3 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 8000f2a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4833      	ldr	r0, [pc, #204]	; (8001010 <MX_GPIO_Init+0x1f8>)
 8000f44:	f000 fcd4 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	482d      	ldr	r0, [pc, #180]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000f60:	f000 fcc6 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000f64:	23c0      	movs	r3, #192	; 0xc0
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4827      	ldr	r0, [pc, #156]	; (8001018 <MX_GPIO_Init+0x200>)
 8000f7c:	f000 fcb8 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF10 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000f80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f86:	4b26      	ldr	r3, [pc, #152]	; (8001020 <MX_GPIO_Init+0x208>)
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4823      	ldr	r0, [pc, #140]	; (8001024 <MX_GPIO_Init+0x20c>)
 8000f96:	f000 fcab 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_GPIO_Init+0x208>)
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4818      	ldr	r0, [pc, #96]	; (8001010 <MX_GPIO_Init+0x1f8>)
 8000fae:	f000 fc9f 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fb2:	2340      	movs	r3, #64	; 0x40
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4814      	ldr	r0, [pc, #80]	; (800101c <MX_GPIO_Init+0x204>)
 8000fca:	f000 fc91 	bl	80018f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f000 fbc3 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fd8:	2006      	movs	r0, #6
 8000fda:	f000 fbdc 	bl	8001796 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2017      	movs	r0, #23
 8000fe4:	f000 fbbb 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fe8:	2017      	movs	r0, #23
 8000fea:	f000 fbd4 	bl	8001796 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2028      	movs	r0, #40	; 0x28
 8000ff4:	f000 fbb3 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff8:	2028      	movs	r0, #40	; 0x28
 8000ffa:	f000 fbcc 	bl	8001796 <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3730      	adds	r7, #48	; 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40020400 	.word	0x40020400
 8001010:	40020000 	.word	0x40020000
 8001014:	40022000 	.word	0x40022000
 8001018:	40021800 	.word	0x40021800
 800101c:	40021c00 	.word	0x40021c00
 8001020:	10110000 	.word	0x10110000
 8001024:	40021400 	.word	0x40021400

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_MspInit+0x50>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a11      	ldr	r2, [pc, #68]	; (8001084 <HAL_MspInit+0x50>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_MspInit+0x50>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_MspInit+0x50>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_MspInit+0x50>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_MspInit+0x50>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2005      	movs	r0, #5
 8001070:	f000 fb75 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001074:	2005      	movs	r0, #5
 8001076:	f000 fb8e 	bl	8001796 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x44>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d113      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_TIM_Base_MspInit+0x48>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_TIM_Base_MspInit+0x48>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_TIM_Base_MspInit+0x48>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	201d      	movs	r0, #29
 80010b8:	f000 fb51 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010bc:	201d      	movs	r0, #29
 80010be:	f000 fb6a 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40000400 	.word	0x40000400
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a44      	ldr	r2, [pc, #272]	; (8001204 <HAL_UART_MspInit+0x130>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d14d      	bne.n	8001192 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f6:	4b44      	ldr	r3, [pc, #272]	; (8001208 <HAL_UART_MspInit+0x134>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a43      	ldr	r2, [pc, #268]	; (8001208 <HAL_UART_MspInit+0x134>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_UART_MspInit+0x134>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	61bb      	str	r3, [r7, #24]
 800110c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_UART_MspInit+0x134>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a3d      	ldr	r2, [pc, #244]	; (8001208 <HAL_UART_MspInit+0x134>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_UART_MspInit+0x134>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_UART_MspInit+0x134>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a37      	ldr	r2, [pc, #220]	; (8001208 <HAL_UART_MspInit+0x134>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <HAL_UART_MspInit+0x134>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800114e:	2307      	movs	r3, #7
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	482c      	ldr	r0, [pc, #176]	; (800120c <HAL_UART_MspInit+0x138>)
 800115a:	f000 fbc9 	bl	80018f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800115e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001170:	2307      	movs	r3, #7
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <HAL_UART_MspInit+0x13c>)
 800117c:	f000 fbb8 	bl	80018f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2025      	movs	r0, #37	; 0x25
 8001186:	f000 faea 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800118a:	2025      	movs	r0, #37	; 0x25
 800118c:	f000 fb03 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001190:	e034      	b.n	80011fc <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART6)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <HAL_UART_MspInit+0x140>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d12f      	bne.n	80011fc <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART6_CLK_ENABLE();
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_UART_MspInit+0x134>)
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <HAL_UART_MspInit+0x134>)
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	6453      	str	r3, [r2, #68]	; 0x44
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_UART_MspInit+0x134>)
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	f003 0320 	and.w	r3, r3, #32
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_UART_MspInit+0x134>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_UART_MspInit+0x134>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_UART_MspInit+0x134>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80011cc:	23c0      	movs	r3, #192	; 0xc0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011dc:	2308      	movs	r3, #8
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <HAL_UART_MspInit+0x144>)
 80011e8:	f000 fb82 	bl	80018f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2100      	movs	r1, #0
 80011f0:	2047      	movs	r0, #71	; 0x47
 80011f2:	f000 fab4 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011f6:	2047      	movs	r0, #71	; 0x47
 80011f8:	f000 facd 	bl	8001796 <HAL_NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40011000 	.word	0x40011000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400
 8001210:	40020000 	.word	0x40020000
 8001214:	40011400 	.word	0x40011400
 8001218:	40020800 	.word	0x40020800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f95a 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <EXTI0_IRQHandler+0x6c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <EXTI0_IRQHandler+0x70>)
 800128c:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 800128e:	429a      	cmp	r2, r3
 8001290:	d205      	bcs.n	800129e <EXTI0_IRQHandler+0x1e>
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <EXTI0_IRQHandler+0x70>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <EXTI0_IRQHandler+0x6c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	e004      	b.n	80012a8 <EXTI0_IRQHandler+0x28>
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <EXTI0_IRQHandler+0x6c>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <EXTI0_IRQHandler+0x70>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad3      	subs	r3, r2, r3
	int gap =
 80012a8:	607b      	str	r3, [r7, #4]

		if (gap > 30) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b1e      	cmp	r3, #30
 80012ae:	dd15      	ble.n	80012dc <EXTI0_IRQHandler+0x5c>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 80012b0:	2101      	movs	r1, #1
 80012b2:	4810      	ldr	r0, [pc, #64]	; (80012f4 <EXTI0_IRQHandler+0x74>)
 80012b4:	f000 fcc8 	bl	8001c48 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10a      	bne.n	80012d4 <EXTI0_IRQHandler+0x54>
				input = input + 100;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <EXTI0_IRQHandler+0x78>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	3364      	adds	r3, #100	; 0x64
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <EXTI0_IRQHandler+0x78>)
 80012c8:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <EXTI0_IRQHandler+0x6c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <EXTI0_IRQHandler+0x70>)
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e003      	b.n	80012dc <EXTI0_IRQHandler+0x5c>
			} else {
				Old_Loop_Count = Loop_Count;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <EXTI0_IRQHandler+0x6c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <EXTI0_IRQHandler+0x70>)
 80012da:	6013      	str	r3, [r2, #0]
			}
		}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012dc:	2001      	movs	r0, #1
 80012de:	f000 fce5 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000bc 	.word	0x200000bc
 80012f0:	200000cc 	.word	0x200000cc
 80012f4:	40020000 	.word	0x40020000
 80012f8:	200000c4 	.word	0x200000c4

080012fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <EXTI9_5_IRQHandler+0x68>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <EXTI9_5_IRQHandler+0x6c>)
 8001308:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 800130a:	429a      	cmp	r2, r3
 800130c:	d205      	bcs.n	800131a <EXTI9_5_IRQHandler+0x1e>
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <EXTI9_5_IRQHandler+0x6c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <EXTI9_5_IRQHandler+0x68>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	e004      	b.n	8001324 <EXTI9_5_IRQHandler+0x28>
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <EXTI9_5_IRQHandler+0x68>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <EXTI9_5_IRQHandler+0x6c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
	int gap =
 8001324:	607b      	str	r3, [r7, #4]

		if (gap > 10) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0a      	cmp	r3, #10
 800132a:	dd13      	ble.n	8001354 <EXTI9_5_IRQHandler+0x58>
			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == 1) {
 800132c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <EXTI9_5_IRQHandler+0x70>)
 8001332:	f000 fc89 	bl	8001c48 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d107      	bne.n	800134c <EXTI9_5_IRQHandler+0x50>
				input = 0;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <EXTI9_5_IRQHandler+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <EXTI9_5_IRQHandler+0x68>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <EXTI9_5_IRQHandler+0x6c>)
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e003      	b.n	8001354 <EXTI9_5_IRQHandler+0x58>
			} else {
				Old_Loop_Count = Loop_Count;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <EXTI9_5_IRQHandler+0x68>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a05      	ldr	r2, [pc, #20]	; (8001368 <EXTI9_5_IRQHandler+0x6c>)
 8001352:	6013      	str	r3, [r2, #0]
			}
		}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001354:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001358:	f000 fca8 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200000bc 	.word	0x200000bc
 8001368:	200000cc 	.word	0x200000cc
 800136c:	40021400 	.word	0x40021400
 8001370:	200000c4 	.word	0x200000c4

08001374 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <TIM3_IRQHandler+0x10>)
 800137a:	f001 fe45 	bl	8003008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200000d0 	.word	0x200000d0

08001388 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <USART1_IRQHandler+0x10>)
 800138e:	f002 fb4d 	bl	8003a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000011c 	.word	0x2000011c

0800139c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <EXTI15_10_IRQHandler+0x70>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <EXTI15_10_IRQHandler+0x74>)
 80013a8:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d205      	bcs.n	80013ba <EXTI15_10_IRQHandler+0x1e>
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <EXTI15_10_IRQHandler+0x74>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <EXTI15_10_IRQHandler+0x70>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	e004      	b.n	80013c4 <EXTI15_10_IRQHandler+0x28>
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <EXTI15_10_IRQHandler+0x70>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <EXTI15_10_IRQHandler+0x74>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	1ad3      	subs	r3, r2, r3
	int gap =
 80013c4:	607b      	str	r3, [r7, #4]

		if (gap > 30) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b1e      	cmp	r3, #30
 80013ca:	dd16      	ble.n	80013fa <EXTI15_10_IRQHandler+0x5e>
			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10) == 1) {
 80013cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d0:	4810      	ldr	r0, [pc, #64]	; (8001414 <EXTI15_10_IRQHandler+0x78>)
 80013d2:	f000 fc39 	bl	8001c48 <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d10a      	bne.n	80013f2 <EXTI15_10_IRQHandler+0x56>
				input += 1;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <EXTI15_10_IRQHandler+0x7c>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <EXTI15_10_IRQHandler+0x7c>)
 80013e6:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <EXTI15_10_IRQHandler+0x70>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a08      	ldr	r2, [pc, #32]	; (8001410 <EXTI15_10_IRQHandler+0x74>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e003      	b.n	80013fa <EXTI15_10_IRQHandler+0x5e>
			} else {
				Old_Loop_Count = Loop_Count;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <EXTI15_10_IRQHandler+0x70>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a06      	ldr	r2, [pc, #24]	; (8001410 <EXTI15_10_IRQHandler+0x74>)
 80013f8:	6013      	str	r3, [r2, #0]
			}

		}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013fe:	f000 fc55 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000bc 	.word	0x200000bc
 8001410:	200000cc 	.word	0x200000cc
 8001414:	40021400 	.word	0x40021400
 8001418:	200000c4 	.word	0x200000c4

0800141c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <USART6_IRQHandler+0x10>)
 8001422:	f002 fb03 	bl	8003a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001ac 	.word	0x200001ac

08001430 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800148c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800145a:	490e      	ldr	r1, [pc, #56]	; (8001494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001470:	4c0b      	ldr	r4, [pc, #44]	; (80014a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800147e:	f7ff ffd7 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001482:	f003 fa4d 	bl	8004920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001486:	f7ff faa7 	bl	80009d8 <main>
  bx  lr    
 800148a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001494:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001498:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 800149c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80014a0:	20000234 	.word	0x20000234

080014a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC_IRQHandler>

080014a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014aa:	2003      	movs	r0, #3
 80014ac:	f000 f94c 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b0:	200f      	movs	r0, #15
 80014b2:	f000 f805 	bl	80014c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014b6:	f7ff fdbd 	bl	8001034 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f967 	bl	80017b2 <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014fc:	f000 f92f 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000094 	.word	0x20000094
 8001518:	2000009c 	.word	0x2000009c
 800151c:	20000098 	.word	0x20000098

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2000009c 	.word	0x2000009c
 8001544:	20000230 	.word	0x20000230

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000230 	.word	0x20000230

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000009c 	.word	0x2000009c

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <__NVIC_SetPriorityGrouping+0x40>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <__NVIC_SetPriorityGrouping+0x40>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	05fa0000 	.word	0x05fa0000

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	; (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001728:	f7ff ff8e 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff29 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff3e 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff8e 	bl	800169c <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5d 	bl	8001648 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff31 	bl	800160c <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa2 	bl	8001704 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff feb6 	bl	8001548 <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d008      	beq.n	80017fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e052      	b.n	80018a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0216 	bic.w	r2, r2, #22
 800180a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800181a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d103      	bne.n	800182c <HAL_DMA_Abort+0x62>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001828:	2b00      	cmp	r3, #0
 800182a:	d007      	beq.n	800183c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0208 	bic.w	r2, r2, #8
 800183a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184c:	e013      	b.n	8001876 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800184e:	f7ff fe7b 	bl	8001548 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b05      	cmp	r3, #5
 800185a:	d90c      	bls.n	8001876 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2220      	movs	r2, #32
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2203      	movs	r2, #3
 800186e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e015      	b.n	80018a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e4      	bne.n	800184e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	223f      	movs	r2, #63	; 0x3f
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e00c      	b.n	80018e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2205      	movs	r2, #5
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e175      	b.n	8001bfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8164 	bne.w	8001bf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d00b      	beq.n	800194e <HAL_GPIO_Init+0x5e>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001942:	2b11      	cmp	r3, #17
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b12      	cmp	r3, #18
 800194c:	d130      	bne.n	80019b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 0201 	and.w	r2, r3, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x100>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80be 	beq.w	8001bf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_GPIO_Init+0x324>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a92:	4a61      	ldr	r2, [pc, #388]	; (8001c18 <HAL_GPIO_Init+0x328>)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_GPIO_Init+0x32c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d037      	beq.n	8001b2e <HAL_GPIO_Init+0x23e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <HAL_GPIO_Init+0x330>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d031      	beq.n	8001b2a <HAL_GPIO_Init+0x23a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_GPIO_Init+0x334>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d02b      	beq.n	8001b26 <HAL_GPIO_Init+0x236>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a55      	ldr	r2, [pc, #340]	; (8001c28 <HAL_GPIO_Init+0x338>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d025      	beq.n	8001b22 <HAL_GPIO_Init+0x232>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a54      	ldr	r2, [pc, #336]	; (8001c2c <HAL_GPIO_Init+0x33c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01f      	beq.n	8001b1e <HAL_GPIO_Init+0x22e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <HAL_GPIO_Init+0x340>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0x22a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_GPIO_Init+0x344>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d013      	beq.n	8001b16 <HAL_GPIO_Init+0x226>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a51      	ldr	r2, [pc, #324]	; (8001c38 <HAL_GPIO_Init+0x348>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00d      	beq.n	8001b12 <HAL_GPIO_Init+0x222>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a50      	ldr	r2, [pc, #320]	; (8001c3c <HAL_GPIO_Init+0x34c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d007      	beq.n	8001b0e <HAL_GPIO_Init+0x21e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4f      	ldr	r2, [pc, #316]	; (8001c40 <HAL_GPIO_Init+0x350>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_GPIO_Init+0x21a>
 8001b06:	2309      	movs	r3, #9
 8001b08:	e012      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b0a:	230a      	movs	r3, #10
 8001b0c:	e010      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b0e:	2308      	movs	r3, #8
 8001b10:	e00e      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b12:	2307      	movs	r3, #7
 8001b14:	e00c      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b16:	2306      	movs	r3, #6
 8001b18:	e00a      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e008      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b1e:	2304      	movs	r3, #4
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x240>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f002 0203 	and.w	r2, r2, #3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b40:	4935      	ldr	r1, [pc, #212]	; (8001c18 <HAL_GPIO_Init+0x328>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4e:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b72:	4a34      	ldr	r2, [pc, #208]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9c:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_GPIO_Init+0x354>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f ae86 	bls.w	8001910 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40021800 	.word	0x40021800
 8001c38:	40021c00 	.word	0x40021c00
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40022400 	.word	0x40022400
 8001c44:	40013c00 	.word	0x40013c00

08001c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	e001      	b.n	8001c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c94:	e003      	b.n	8001c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	619a      	str	r2, [r3, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f806 	bl	8001cdc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d22:	f7ff fc11 	bl	8001548 <HAL_GetTick>
 8001d26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d28:	e009      	b.n	8001d3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d2a:	f7ff fc0d 	bl	8001548 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d38:	d901      	bls.n	8001d3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e022      	b.n	8001d84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d58:	f7ff fbf6 	bl	8001548 <HAL_GetTick>
 8001d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d5e:	e009      	b.n	8001d74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d60:	f7ff fbf2 	bl	8001548 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6e:	d901      	bls.n	8001d74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e007      	b.n	8001d84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d80:	d1ee      	bne.n	8001d60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40007000 	.word	0x40007000

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e291      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8087 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db8:	4b96      	ldr	r3, [pc, #600]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d00c      	beq.n	8001dde <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc4:	4b93      	ldr	r3, [pc, #588]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d112      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62>
 8001dd0:	4b90      	ldr	r3, [pc, #576]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ddc:	d10b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dde:	4b8d      	ldr	r3, [pc, #564]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d06c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x130>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d168      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e26b      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x7a>
 8001e00:	4b84      	ldr	r3, [pc, #528]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a83      	ldr	r2, [pc, #524]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e02e      	b.n	8001e6c <HAL_RCC_OscConfig+0xd8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x9c>
 8001e16:	4b7f      	ldr	r3, [pc, #508]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7e      	ldr	r2, [pc, #504]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7b      	ldr	r2, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0xd8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0xc0>
 8001e3a:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a75      	ldr	r2, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a72      	ldr	r2, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0xd8>
 8001e54:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b6c      	ldr	r3, [pc, #432]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a6b      	ldr	r2, [pc, #428]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fb68 	bl	8001548 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff fb64 	bl	8001548 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e21f      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe8>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fb54 	bl	8001548 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fb50 	bl	8001548 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e20b      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x110>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d069      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed2:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ede:	4b4d      	ldr	r3, [pc, #308]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d11c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x190>
 8001eea:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x17a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e1df      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b41      	ldr	r3, [pc, #260]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	493d      	ldr	r1, [pc, #244]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e040      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d023      	beq.n	8001f74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b39      	ldr	r3, [pc, #228]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a38      	ldr	r2, [pc, #224]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fb06 	bl	8001548 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff fb02 	bl	8001548 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1bd      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4929      	ldr	r1, [pc, #164]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
 8001f72:	e018      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff fae2 	bl	8001548 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff fade 	bl	8001548 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e199      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d038      	beq.n	8002024 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d019      	beq.n	8001fee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fabf 	bl	8001548 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff fabb 	bl	8001548 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e176      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x23a>
 8001fec:	e01a      	b.n	8002024 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7ff faa5 	bl	8001548 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff faa1 	bl	8001548 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d903      	bls.n	8002018 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e15c      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
 8002014:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b91      	ldr	r3, [pc, #580]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80a4 	beq.w	800217a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b8b      	ldr	r3, [pc, #556]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a87      	ldr	r2, [pc, #540]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b85      	ldr	r3, [pc, #532]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205a:	4b82      	ldr	r3, [pc, #520]	; (8002264 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002066:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x4d0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7e      	ldr	r2, [pc, #504]	; (8002264 <HAL_RCC_OscConfig+0x4d0>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7ff fa69 	bl	8001548 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff fa65 	bl	8001548 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	; 0x64
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e120      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208c:	4b75      	ldr	r3, [pc, #468]	; (8002264 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x31a>
 80020a0:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a6e      	ldr	r2, [pc, #440]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	e02d      	b.n	800210a <HAL_RCC_OscConfig+0x376>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x33c>
 80020b6:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	4a69      	ldr	r2, [pc, #420]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	4a66      	ldr	r2, [pc, #408]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
 80020ce:	e01c      	b.n	800210a <HAL_RCC_OscConfig+0x376>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x35e>
 80020d8:	4b61      	ldr	r3, [pc, #388]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a60      	ldr	r2, [pc, #384]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	4b5e      	ldr	r3, [pc, #376]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a5d      	ldr	r2, [pc, #372]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0x376>
 80020f2:	4b5b      	ldr	r3, [pc, #364]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a5a      	ldr	r2, [pc, #360]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	4b58      	ldr	r3, [pc, #352]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a57      	ldr	r2, [pc, #348]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d015      	beq.n	800213e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002112:	f7ff fa19 	bl	8001548 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7ff fa15 	bl	8001548 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0ce      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ee      	beq.n	800211a <HAL_RCC_OscConfig+0x386>
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7ff fa03 	bl	8001548 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff f9ff 	bl	8001548 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0b8      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a3b      	ldr	r2, [pc, #236]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80a4 	beq.w	80022cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d06b      	beq.n	8002268 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d149      	bne.n	800222c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a30      	ldr	r2, [pc, #192]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 800219e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff f9d0 	bl	8001548 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7ff f9cc 	bl	8001548 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e087      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	019b      	lsls	r3, r3, #6
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	3b01      	subs	r3, #1
 80021e4:	041b      	lsls	r3, r3, #16
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	4313      	orrs	r3, r2
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff f9a0 	bl	8001548 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f99c 	bl	8001548 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e057      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x478>
 800222a:	e04f      	b.n	80022cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff f986 	bl	8001548 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff f982 	bl	8001548 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e03d      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_OscConfig+0x4cc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x4ac>
 800225e:	e035      	b.n	80022cc <HAL_RCC_OscConfig+0x538>
 8002260:	40023800 	.word	0x40023800
 8002264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x544>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d028      	beq.n	80022c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d121      	bne.n	80022c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d11a      	bne.n	80022c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800229e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d111      	bne.n	80022c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	3b01      	subs	r3, #1
 80022b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800

080022dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0d0      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d910      	bls.n	8002324 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b67      	ldr	r3, [pc, #412]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 020f 	bic.w	r2, r3, #15
 800230a:	4965      	ldr	r1, [pc, #404]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0b8      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800233c:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002346:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 800235a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800235e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	494d      	ldr	r1, [pc, #308]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d040      	beq.n	8002400 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d115      	bne.n	80023be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e07f      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e073      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e06b      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4936      	ldr	r1, [pc, #216]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7ff f8ba 	bl	8001548 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7ff f8b6 	bl	8001548 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e053      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d210      	bcs.n	8002430 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 020f 	bic.w	r2, r3, #15
 8002416:	4922      	ldr	r1, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e032      	b.n	8002496 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4916      	ldr	r1, [pc, #88]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246e:	f000 f821 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002472:	4602      	mov	r2, r0
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	490a      	ldr	r1, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002480:	5ccb      	ldrb	r3, [r1, r3]
 8002482:	fa22 f303 	lsr.w	r3, r2, r3
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1d0>)
 8002488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1d4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f816 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00
 80024a4:	40023800 	.word	0x40023800
 80024a8:	080049ac 	.word	0x080049ac
 80024ac:	20000094 	.word	0x20000094
 80024b0:	20000098 	.word	0x20000098

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b5b0      	push	{r4, r5, r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024ba:	2100      	movs	r1, #0
 80024bc:	6079      	str	r1, [r7, #4]
 80024be:	2100      	movs	r1, #0
 80024c0:	60f9      	str	r1, [r7, #12]
 80024c2:	2100      	movs	r1, #0
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80024c6:	2100      	movs	r1, #0
 80024c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ca:	4952      	ldr	r1, [pc, #328]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 80024cc:	6889      	ldr	r1, [r1, #8]
 80024ce:	f001 010c 	and.w	r1, r1, #12
 80024d2:	2908      	cmp	r1, #8
 80024d4:	d00d      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80024d6:	2908      	cmp	r1, #8
 80024d8:	f200 8094 	bhi.w	8002604 <HAL_RCC_GetSysClockFreq+0x150>
 80024dc:	2900      	cmp	r1, #0
 80024de:	d002      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x32>
 80024e0:	2904      	cmp	r1, #4
 80024e2:	d003      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x38>
 80024e4:	e08e      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e6:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_GetSysClockFreq+0x164>)
 80024e8:	60bb      	str	r3, [r7, #8]
      break;
 80024ea:	e08e      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_RCC_GetSysClockFreq+0x168>)
 80024ee:	60bb      	str	r3, [r7, #8]
      break;
 80024f0:	e08b      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f2:	4948      	ldr	r1, [pc, #288]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 80024f4:	6849      	ldr	r1, [r1, #4]
 80024f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024fa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024fc:	4945      	ldr	r1, [pc, #276]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 80024fe:	6849      	ldr	r1, [r1, #4]
 8002500:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002504:	2900      	cmp	r1, #0
 8002506:	d024      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4942      	ldr	r1, [pc, #264]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 800250a:	6849      	ldr	r1, [r1, #4]
 800250c:	0989      	lsrs	r1, r1, #6
 800250e:	4608      	mov	r0, r1
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002518:	f04f 0500 	mov.w	r5, #0
 800251c:	ea00 0204 	and.w	r2, r0, r4
 8002520:	ea01 0305 	and.w	r3, r1, r5
 8002524:	493d      	ldr	r1, [pc, #244]	; (800261c <HAL_RCC_GetSysClockFreq+0x168>)
 8002526:	fb01 f003 	mul.w	r0, r1, r3
 800252a:	2100      	movs	r1, #0
 800252c:	fb01 f102 	mul.w	r1, r1, r2
 8002530:	1844      	adds	r4, r0, r1
 8002532:	493a      	ldr	r1, [pc, #232]	; (800261c <HAL_RCC_GetSysClockFreq+0x168>)
 8002534:	fba2 0101 	umull	r0, r1, r2, r1
 8002538:	1863      	adds	r3, r4, r1
 800253a:	4619      	mov	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	f7fd fe60 	bl	8000208 <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4613      	mov	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e04a      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	461a      	mov	r2, r3
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	ea02 0400 	and.w	r4, r2, r0
 800256a:	ea03 0501 	and.w	r5, r3, r1
 800256e:	4620      	mov	r0, r4
 8002570:	4629      	mov	r1, r5
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	014b      	lsls	r3, r1, #5
 800257c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002580:	0142      	lsls	r2, r0, #5
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	1b00      	subs	r0, r0, r4
 8002588:	eb61 0105 	sbc.w	r1, r1, r5
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	018b      	lsls	r3, r1, #6
 8002596:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800259a:	0182      	lsls	r2, r0, #6
 800259c:	1a12      	subs	r2, r2, r0
 800259e:	eb63 0301 	sbc.w	r3, r3, r1
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	00d9      	lsls	r1, r3, #3
 80025ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025b0:	00d0      	lsls	r0, r2, #3
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	1912      	adds	r2, r2, r4
 80025b8:	eb45 0303 	adc.w	r3, r5, r3
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	0299      	lsls	r1, r3, #10
 80025c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025ca:	0290      	lsls	r0, r2, #10
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f7fd fe14 	bl	8000208 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_RCC_GetSysClockFreq+0x160>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	60bb      	str	r3, [r7, #8]
      break;
 8002602:	e002      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_RCC_GetSysClockFreq+0x164>)
 8002606:	60bb      	str	r3, [r7, #8]
      break;
 8002608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260a:	68bb      	ldr	r3, [r7, #8]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bdb0      	pop	{r4, r5, r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400
 800261c:	017d7840 	.word	0x017d7840

08002620 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_GetHCLKFreq+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000094 	.word	0x20000094

08002638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800263c:	f7ff fff0 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	; (800265c <HAL_RCC_GetPCLK1Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	080049bc 	.word	0x080049bc

08002660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002664:	f7ff ffdc 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0b5b      	lsrs	r3, r3, #13
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	080049bc 	.word	0x080049bc

08002688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026b0:	4b69      	ldr	r3, [pc, #420]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a68      	ldr	r2, [pc, #416]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026ba:	6093      	str	r3, [r2, #8]
 80026bc:	4b66      	ldr	r3, [pc, #408]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	4964      	ldr	r1, [pc, #400]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d017      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e2:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	4959      	ldr	r1, [pc, #356]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800270e:	2301      	movs	r3, #1
 8002710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d017      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800271e:	4b4e      	ldr	r3, [pc, #312]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	494a      	ldr	r1, [pc, #296]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273c:	d101      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0320 	and.w	r3, r3, #32
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 808b 	beq.w	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a39      	ldr	r2, [pc, #228]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
 8002778:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a34      	ldr	r2, [pc, #208]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800278a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002790:	f7fe feda 	bl	8001548 <HAL_GetTick>
 8002794:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002798:	f7fe fed6 	bl	8001548 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e357      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027b6:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d035      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d02e      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d114      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fe9e 	bl	8001548 <HAL_GetTick>
 800280c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fe9a 	bl	8001548 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e319      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0ee      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800283e:	d111      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800284e:	400b      	ands	r3, r1
 8002850:	4901      	ldr	r1, [pc, #4]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
 8002856:	e00b      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002858:	40023800 	.word	0x40023800
 800285c:	40007000 	.word	0x40007000
 8002860:	0ffffcff 	.word	0x0ffffcff
 8002864:	4bb1      	ldr	r3, [pc, #708]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4ab0      	ldr	r2, [pc, #704]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800286a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800286e:	6093      	str	r3, [r2, #8]
 8002870:	4bae      	ldr	r3, [pc, #696]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	49ab      	ldr	r1, [pc, #684]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d010      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800288e:	4ba7      	ldr	r3, [pc, #668]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002894:	4aa5      	ldr	r2, [pc, #660]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800289e:	4ba3      	ldr	r3, [pc, #652]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	49a0      	ldr	r1, [pc, #640]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028bc:	4b9b      	ldr	r3, [pc, #620]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ca:	4998      	ldr	r1, [pc, #608]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028de:	4b93      	ldr	r3, [pc, #588]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ec:	498f      	ldr	r1, [pc, #572]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002900:	4b8a      	ldr	r3, [pc, #552]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800290e:	4987      	ldr	r1, [pc, #540]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002922:	4b82      	ldr	r3, [pc, #520]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	497e      	ldr	r1, [pc, #504]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002944:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	4976      	ldr	r1, [pc, #472]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002966:	4b71      	ldr	r3, [pc, #452]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f023 020c 	bic.w	r2, r3, #12
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	496d      	ldr	r1, [pc, #436]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002988:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	4965      	ldr	r1, [pc, #404]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029aa:	4b60      	ldr	r3, [pc, #384]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	495c      	ldr	r1, [pc, #368]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029cc:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	4954      	ldr	r1, [pc, #336]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029ee:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	494b      	ldr	r1, [pc, #300]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a10:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	4943      	ldr	r1, [pc, #268]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a32:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	493a      	ldr	r1, [pc, #232]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a54:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a62:	4932      	ldr	r1, [pc, #200]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d011      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a84:	4929      	ldr	r1, [pc, #164]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a94:	d101      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac4:	4919      	ldr	r1, [pc, #100]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad8:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae8:	4910      	ldr	r1, [pc, #64]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d006      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80d9 	beq.w	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b10:	f7fe fd1a 	bl	8001548 <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b16:	e00b      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b18:	f7fe fd16 	bl	8001548 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d904      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e197      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ed      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d021      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d11d      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b50:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b5e:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	019a      	lsls	r2, r3, #6
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	071b      	lsls	r3, r3, #28
 8002b84:	4957      	ldr	r1, [pc, #348]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02e      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb6:	d129      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bc6:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bcc:	0f1b      	lsrs	r3, r3, #28
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	019a      	lsls	r2, r3, #6
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	071b      	lsls	r3, r3, #28
 8002bec:	493d      	ldr	r1, [pc, #244]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bf4:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bfa:	f023 021f 	bic.w	r2, r3, #31
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	3b01      	subs	r3, #1
 8002c04:	4937      	ldr	r1, [pc, #220]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01d      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1e:	0e1b      	lsrs	r3, r3, #24
 8002c20:	f003 030f 	and.w	r3, r3, #15
 8002c24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2c:	0f1b      	lsrs	r3, r3, #28
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	019a      	lsls	r2, r3, #6
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	431a      	orrs	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	071b      	lsls	r3, r3, #28
 8002c4c:	4925      	ldr	r1, [pc, #148]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d011      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	019a      	lsls	r2, r3, #6
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	061b      	lsls	r3, r3, #24
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	071b      	lsls	r3, r3, #28
 8002c7c:	4919      	ldr	r1, [pc, #100]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe fc5a 	bl	8001548 <HAL_GetTick>
 8002c94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c98:	f7fe fc56 	bl	8001548 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0d7      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 80cd 	bne.w	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cca:	f7fe fc3d 	bl	8001548 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cd2:	f7fe fc39 	bl	8001548 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	; 0x64
 8002cde:	d903      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0ba      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ce4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d0ed      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02e      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d12a      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	0f1b      	lsrs	r3, r3, #28
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	019a      	lsls	r2, r3, #6
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	071b      	lsls	r3, r3, #28
 8002d52:	4944      	ldr	r1, [pc, #272]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d5a:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	493d      	ldr	r1, [pc, #244]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d88:	d11d      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	0e1b      	lsrs	r3, r3, #24
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	0f1b      	lsrs	r3, r3, #28
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	071b      	lsls	r3, r3, #28
 8002dbe:	4929      	ldr	r1, [pc, #164]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	0e1b      	lsrs	r3, r3, #24
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	019a      	lsls	r2, r3, #6
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	071b      	lsls	r3, r3, #28
 8002e06:	4917      	ldr	r1, [pc, #92]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	4911      	ldr	r1, [pc, #68]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe fb8a 	bl	8001548 <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e38:	f7fe fb86 	bl	8001548 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e007      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e56:	d1ef      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e049      	b.n	8002f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe f8fa 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f000 fabc 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d001      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e054      	b.n	8002fda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d022      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d01d      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <HAL_TIM_Base_Start_IT+0xd4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d018      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d013      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00e      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	; (8002ff8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	; (8002ffc <HAL_TIM_Base_Start_IT+0xe4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d004      	beq.n	8002f98 <HAL_TIM_Base_Start_IT+0x80>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <HAL_TIM_Base_Start_IT+0xe8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d115      	bne.n	8002fc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_TIM_Base_Start_IT+0xec>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d015      	beq.n	8002fd6 <HAL_TIM_Base_Start_IT+0xbe>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d011      	beq.n	8002fd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc2:	e008      	b.n	8002fd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e000      	b.n	8002fd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40010400 	.word	0x40010400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40001800 	.word	0x40001800
 8003004:	00010007 	.word	0x00010007

08003008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d122      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b02      	cmp	r3, #2
 800302a:	d11b      	bne.n	8003064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0202 	mvn.w	r2, #2
 8003034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f9cc 	bl	80033e8 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9be 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f9cf 	bl	80033fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d122      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b04      	cmp	r3, #4
 800307e:	d11b      	bne.n	80030b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0204 	mvn.w	r2, #4
 8003088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9a2 	bl	80033e8 <HAL_TIM_IC_CaptureCallback>
 80030a4:	e005      	b.n	80030b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f994 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f9a5 	bl	80033fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d122      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d11b      	bne.n	800310c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0208 	mvn.w	r2, #8
 80030dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f978 	bl	80033e8 <HAL_TIM_IC_CaptureCallback>
 80030f8:	e005      	b.n	8003106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f96a 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f97b 	bl	80033fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b10      	cmp	r3, #16
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2208      	movs	r2, #8
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f94e 	bl	80033e8 <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f940 	bl	80033d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f951 	bl	80033fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0201 	mvn.w	r2, #1
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fc04 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d10e      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d107      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fb08 	bl	80037c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c6:	d10e      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d107      	bne.n	80031e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fafb 	bl	80037dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d10e      	bne.n	8003212 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d107      	bne.n	8003212 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800320a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8ff 	bl	8003410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b20      	cmp	r3, #32
 800321e:	d10e      	bne.n	800323e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b20      	cmp	r3, #32
 800322c:	d107      	bne.n	800323e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0220 	mvn.w	r2, #32
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fabb 	bl	80037b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_TIM_ConfigClockSource+0x18>
 800325c:	2302      	movs	r3, #2
 800325e:	e0b3      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0x180>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <HAL_TIM_ConfigClockSource+0x188>)
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003286:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003298:	d03e      	beq.n	8003318 <HAL_TIM_ConfigClockSource+0xd0>
 800329a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329e:	f200 8087 	bhi.w	80033b0 <HAL_TIM_ConfigClockSource+0x168>
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	f000 8085 	beq.w	80033b4 <HAL_TIM_ConfigClockSource+0x16c>
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ae:	d87f      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x168>
 80032b0:	2b70      	cmp	r3, #112	; 0x70
 80032b2:	d01a      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0xa2>
 80032b4:	2b70      	cmp	r3, #112	; 0x70
 80032b6:	d87b      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x168>
 80032b8:	2b60      	cmp	r3, #96	; 0x60
 80032ba:	d050      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x116>
 80032bc:	2b60      	cmp	r3, #96	; 0x60
 80032be:	d877      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x168>
 80032c0:	2b50      	cmp	r3, #80	; 0x50
 80032c2:	d03c      	beq.n	800333e <HAL_TIM_ConfigClockSource+0xf6>
 80032c4:	2b50      	cmp	r3, #80	; 0x50
 80032c6:	d873      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x168>
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d058      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x136>
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d86f      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x168>
 80032d0:	2b30      	cmp	r3, #48	; 0x30
 80032d2:	d064      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x156>
 80032d4:	2b30      	cmp	r3, #48	; 0x30
 80032d6:	d86b      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x168>
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d060      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x156>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d867      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x168>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05c      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x156>
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d05a      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80032e8:	e062      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f000 f9ad 	bl	8003658 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800330c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	609a      	str	r2, [r3, #8]
      break;
 8003316:	e04e      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6899      	ldr	r1, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f000 f996 	bl	8003658 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333a:	609a      	str	r2, [r3, #8]
      break;
 800333c:	e03b      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	f000 f90a 	bl	8003564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2150      	movs	r1, #80	; 0x50
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f963 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 800335c:	e02b      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	461a      	mov	r2, r3
 800336c:	f000 f929 	bl	80035c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2160      	movs	r1, #96	; 0x60
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f953 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 800337c:	e01b      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	461a      	mov	r2, r3
 800338c:	f000 f8ea 	bl	8003564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f943 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 800339c:	e00b      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f000 f93a 	bl	8003622 <TIM_ITRx_SetConfig>
        break;
 80033ae:	e002      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033b0:	bf00      	nop
 80033b2:	e000      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80033b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	fffeff88 	.word	0xfffeff88

080033d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a40      	ldr	r2, [pc, #256]	; (8003538 <TIM_Base_SetConfig+0x114>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003442:	d00f      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3d      	ldr	r2, [pc, #244]	; (800353c <TIM_Base_SetConfig+0x118>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3c      	ldr	r2, [pc, #240]	; (8003540 <TIM_Base_SetConfig+0x11c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <TIM_Base_SetConfig+0x120>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3a      	ldr	r2, [pc, #232]	; (8003548 <TIM_Base_SetConfig+0x124>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d108      	bne.n	8003476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2f      	ldr	r2, [pc, #188]	; (8003538 <TIM_Base_SetConfig+0x114>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02b      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d027      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2c      	ldr	r2, [pc, #176]	; (800353c <TIM_Base_SetConfig+0x118>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d023      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2b      	ldr	r2, [pc, #172]	; (8003540 <TIM_Base_SetConfig+0x11c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01f      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2a      	ldr	r2, [pc, #168]	; (8003544 <TIM_Base_SetConfig+0x120>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01b      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a29      	ldr	r2, [pc, #164]	; (8003548 <TIM_Base_SetConfig+0x124>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d017      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <TIM_Base_SetConfig+0x128>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a27      	ldr	r2, [pc, #156]	; (8003550 <TIM_Base_SetConfig+0x12c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00f      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <TIM_Base_SetConfig+0x130>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <TIM_Base_SetConfig+0x134>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a24      	ldr	r2, [pc, #144]	; (800355c <TIM_Base_SetConfig+0x138>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <TIM_Base_SetConfig+0x13c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d108      	bne.n	80034e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <TIM_Base_SetConfig+0x114>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0xf8>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <TIM_Base_SetConfig+0x124>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d103      	bne.n	8003524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	615a      	str	r2, [r3, #20]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40010400 	.word	0x40010400
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800
 8003558:	40001800 	.word	0x40001800
 800355c:	40001c00 	.word	0x40001c00
 8003560:	40002000 	.word	0x40002000

08003564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800358e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 030a 	bic.w	r3, r3, #10
 80035a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b087      	sub	sp, #28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 0210 	bic.w	r2, r3, #16
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	031b      	lsls	r3, r3, #12
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	f043 0307 	orr.w	r3, r3, #7
 8003644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	021a      	lsls	r2, r3, #8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	431a      	orrs	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e06d      	b.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a30      	ldr	r2, [pc, #192]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2f      	ldr	r2, [pc, #188]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d108      	bne.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a20      	ldr	r2, [pc, #128]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d022      	beq.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d01d      	beq.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d018      	beq.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d013      	beq.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00e      	beq.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a15      	ldr	r2, [pc, #84]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10c      	bne.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003766:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	4313      	orrs	r3, r2
 8003770:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40010000 	.word	0x40010000
 800379c:	40010400 	.word	0x40010400
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40000800 	.word	0x40000800
 80037a8:	40000c00 	.word	0x40000c00
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40001800 	.word	0x40001800

080037b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e040      	b.n	8003884 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fc5e 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	; 0x24
 800381c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb08 	bl	8003e44 <UART_SetConfig>
 8003834:	4603      	mov	r3, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e022      	b.n	8003884 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fd5e 	bl	8004308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800385a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800386a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fde5 	bl	800444c <UART_CheckIdleState>
 8003882:	4603      	mov	r3, r0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	4613      	mov	r3, r2
 800389a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	f040 8081 	bne.w	80039a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_UART_Transmit+0x26>
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e079      	b.n	80039aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_UART_Transmit+0x38>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e072      	b.n	80039aa <HAL_UART_Transmit+0x11e>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2221      	movs	r2, #33	; 0x21
 80038d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038da:	f7fd fe35 	bl	8001548 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	88fa      	ldrh	r2, [r7, #6]
 80038e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f8:	d108      	bne.n	800390c <HAL_UART_Transmit+0x80>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d104      	bne.n	800390c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	e003      	b.n	8003914 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800391c:	e02c      	b.n	8003978 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	2180      	movs	r1, #128	; 0x80
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fdc2 	bl	80044b2 <UART_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e038      	b.n	80039aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3302      	adds	r3, #2
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	e007      	b.n	8003966 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3301      	adds	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1cc      	bne.n	800391e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	2140      	movs	r1, #64	; 0x40
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fd8f 	bl	80044b2 <UART_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e005      	b.n	80039aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	4613      	mov	r3, r2
 80039be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d12c      	bne.n	8003a22 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Receive_IT+0x22>
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e025      	b.n	8003a24 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Receive_IT+0x34>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e01e      	b.n	8003a24 <HAL_UART_Receive_IT+0x72>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a10:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	461a      	mov	r2, r3
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fdc7 	bl	80045ac <UART_Start_Receive_IT>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	e000      	b.n	8003a24 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d113      	bne.n	8003a84 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00e      	beq.n	8003a84 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 81b9 	beq.w	8003dec <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
      }
      return;
 8003a82:	e1b3      	b.n	8003dec <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80e3 	beq.w	8003c52 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d105      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4ba5      	ldr	r3, [pc, #660]	; (8003d30 <HAL_UART_IRQHandler+0x304>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80d8 	beq.w	8003c52 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d010      	beq.n	8003ace <HAL_UART_IRQHandler+0xa2>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac4:	f043 0201 	orr.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_UART_IRQHandler+0xce>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af0:	f043 0204 	orr.w	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d010      	beq.n	8003b26 <HAL_UART_IRQHandler+0xfa>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2204      	movs	r2, #4
 8003b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b1c:	f043 0202 	orr.w	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d015      	beq.n	8003b5c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b52:	f043 0208 	orr.w	r2, r3, #8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d011      	beq.n	8003b8a <HAL_UART_IRQHandler+0x15e>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 812d 	beq.w	8003df0 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00c      	beq.n	8003bba <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d004      	beq.n	8003bda <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d031      	beq.n	8003c3e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fd6e 	bl	80046bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d123      	bne.n	8003c36 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d013      	beq.n	8003c2e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a4a      	ldr	r2, [pc, #296]	; (8003d34 <HAL_UART_IRQHandler+0x308>)
 8003c0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd fe49 	bl	80018aa <HAL_DMA_Abort_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d017      	beq.n	8003c4e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00f      	b.n	8003c4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8f2 	bl	8003e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e00b      	b.n	8003c4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8ee 	bl	8003e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e007      	b.n	8003c4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8ea 	bl	8003e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003c4c:	e0d0      	b.n	8003df0 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4e:	bf00      	nop
    return;
 8003c50:	e0ce      	b.n	8003df0 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	f040 80a7 	bne.w	8003daa <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 80a1 	beq.w	8003daa <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 809b 	beq.w	8003daa <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d156      	bne.n	8003d38 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80ac 	beq.w	8003df4 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ca2:	893a      	ldrh	r2, [r7, #8]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f080 80a5 	bcs.w	8003df4 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	893a      	ldrh	r2, [r7, #8]
 8003cae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cbc:	d02a      	beq.n	8003d14 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ccc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cec:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0210 	bic.w	r2, r2, #16
 8003d08:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd fd5b 	bl	80017ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	4619      	mov	r1, r3
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f87f 	bl	8003e2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d2e:	e061      	b.n	8003df4 <HAL_UART_IRQHandler+0x3c8>
 8003d30:	04000120 	.word	0x04000120
 8003d34:	0800471b 	.word	0x0800471b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d050      	beq.n	8003df8 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d04d      	beq.n	8003df8 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0210 	bic.w	r2, r2, #16
 8003d9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	4619      	mov	r1, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f842 	bl	8003e2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003da8:	e026      	b.n	8003df8 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01a      	beq.n	8003dfc <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
    }
    return;
 8003dce:	e015      	b.n	8003dfc <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d011      	beq.n	8003dfe <HAL_UART_IRQHandler+0x3d2>
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00c      	beq.n	8003dfe <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fcae 	bl	8004746 <UART_EndTransmit_IT>
    return;
 8003dea:	e008      	b.n	8003dfe <HAL_UART_IRQHandler+0x3d2>
      return;
 8003dec:	bf00      	nop
 8003dee:	e006      	b.n	8003dfe <HAL_UART_IRQHandler+0x3d2>
    return;
 8003df0:	bf00      	nop
 8003df2:	e004      	b.n	8003dfe <HAL_UART_IRQHandler+0x3d2>
      return;
 8003df4:	bf00      	nop
 8003df6:	e002      	b.n	8003dfe <HAL_UART_IRQHandler+0x3d2>
      return;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_IRQHandler+0x3d2>
    return;
 8003dfc:	bf00      	nop
  }

}
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4ba7      	ldr	r3, [pc, #668]	; (800410c <UART_SetConfig+0x2c8>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	6979      	ldr	r1, [r7, #20]
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a95      	ldr	r2, [pc, #596]	; (8004110 <UART_SetConfig+0x2cc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d120      	bne.n	8003f02 <UART_SetConfig+0xbe>
 8003ec0:	4b94      	ldr	r3, [pc, #592]	; (8004114 <UART_SetConfig+0x2d0>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d816      	bhi.n	8003efc <UART_SetConfig+0xb8>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <UART_SetConfig+0x90>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003ef1 	.word	0x08003ef1
 8003edc:	08003eeb 	.word	0x08003eeb
 8003ee0:	08003ef7 	.word	0x08003ef7
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e14f      	b.n	800418a <UART_SetConfig+0x346>
 8003eea:	2302      	movs	r3, #2
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e14c      	b.n	800418a <UART_SetConfig+0x346>
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e149      	b.n	800418a <UART_SetConfig+0x346>
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e146      	b.n	800418a <UART_SetConfig+0x346>
 8003efc:	2310      	movs	r3, #16
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e143      	b.n	800418a <UART_SetConfig+0x346>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a84      	ldr	r2, [pc, #528]	; (8004118 <UART_SetConfig+0x2d4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d132      	bne.n	8003f72 <UART_SetConfig+0x12e>
 8003f0c:	4b81      	ldr	r3, [pc, #516]	; (8004114 <UART_SetConfig+0x2d0>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d828      	bhi.n	8003f6c <UART_SetConfig+0x128>
 8003f1a:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <UART_SetConfig+0xdc>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08003f6d 	.word	0x08003f6d
 8003f28:	08003f6d 	.word	0x08003f6d
 8003f2c:	08003f6d 	.word	0x08003f6d
 8003f30:	08003f61 	.word	0x08003f61
 8003f34:	08003f6d 	.word	0x08003f6d
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08003f6d 	.word	0x08003f6d
 8003f40:	08003f5b 	.word	0x08003f5b
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f6d 	.word	0x08003f6d
 8003f50:	08003f67 	.word	0x08003f67
 8003f54:	2300      	movs	r3, #0
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e117      	b.n	800418a <UART_SetConfig+0x346>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e114      	b.n	800418a <UART_SetConfig+0x346>
 8003f60:	2304      	movs	r3, #4
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e111      	b.n	800418a <UART_SetConfig+0x346>
 8003f66:	2308      	movs	r3, #8
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e10e      	b.n	800418a <UART_SetConfig+0x346>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e10b      	b.n	800418a <UART_SetConfig+0x346>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a69      	ldr	r2, [pc, #420]	; (800411c <UART_SetConfig+0x2d8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d120      	bne.n	8003fbe <UART_SetConfig+0x17a>
 8003f7c:	4b65      	ldr	r3, [pc, #404]	; (8004114 <UART_SetConfig+0x2d0>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f86:	2b30      	cmp	r3, #48	; 0x30
 8003f88:	d013      	beq.n	8003fb2 <UART_SetConfig+0x16e>
 8003f8a:	2b30      	cmp	r3, #48	; 0x30
 8003f8c:	d814      	bhi.n	8003fb8 <UART_SetConfig+0x174>
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d009      	beq.n	8003fa6 <UART_SetConfig+0x162>
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d810      	bhi.n	8003fb8 <UART_SetConfig+0x174>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <UART_SetConfig+0x15c>
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d006      	beq.n	8003fac <UART_SetConfig+0x168>
 8003f9e:	e00b      	b.n	8003fb8 <UART_SetConfig+0x174>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	77fb      	strb	r3, [r7, #31]
 8003fa4:	e0f1      	b.n	800418a <UART_SetConfig+0x346>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e0ee      	b.n	800418a <UART_SetConfig+0x346>
 8003fac:	2304      	movs	r3, #4
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e0eb      	b.n	800418a <UART_SetConfig+0x346>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e0e8      	b.n	800418a <UART_SetConfig+0x346>
 8003fb8:	2310      	movs	r3, #16
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e0e5      	b.n	800418a <UART_SetConfig+0x346>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a57      	ldr	r2, [pc, #348]	; (8004120 <UART_SetConfig+0x2dc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d120      	bne.n	800400a <UART_SetConfig+0x1c6>
 8003fc8:	4b52      	ldr	r3, [pc, #328]	; (8004114 <UART_SetConfig+0x2d0>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fd4:	d013      	beq.n	8003ffe <UART_SetConfig+0x1ba>
 8003fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003fd8:	d814      	bhi.n	8004004 <UART_SetConfig+0x1c0>
 8003fda:	2b80      	cmp	r3, #128	; 0x80
 8003fdc:	d009      	beq.n	8003ff2 <UART_SetConfig+0x1ae>
 8003fde:	2b80      	cmp	r3, #128	; 0x80
 8003fe0:	d810      	bhi.n	8004004 <UART_SetConfig+0x1c0>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <UART_SetConfig+0x1a8>
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d006      	beq.n	8003ff8 <UART_SetConfig+0x1b4>
 8003fea:	e00b      	b.n	8004004 <UART_SetConfig+0x1c0>
 8003fec:	2300      	movs	r3, #0
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e0cb      	b.n	800418a <UART_SetConfig+0x346>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e0c8      	b.n	800418a <UART_SetConfig+0x346>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e0c5      	b.n	800418a <UART_SetConfig+0x346>
 8003ffe:	2308      	movs	r3, #8
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e0c2      	b.n	800418a <UART_SetConfig+0x346>
 8004004:	2310      	movs	r3, #16
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e0bf      	b.n	800418a <UART_SetConfig+0x346>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a45      	ldr	r2, [pc, #276]	; (8004124 <UART_SetConfig+0x2e0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d125      	bne.n	8004060 <UART_SetConfig+0x21c>
 8004014:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <UART_SetConfig+0x2d0>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004022:	d017      	beq.n	8004054 <UART_SetConfig+0x210>
 8004024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004028:	d817      	bhi.n	800405a <UART_SetConfig+0x216>
 800402a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402e:	d00b      	beq.n	8004048 <UART_SetConfig+0x204>
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d811      	bhi.n	800405a <UART_SetConfig+0x216>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <UART_SetConfig+0x1fe>
 800403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403e:	d006      	beq.n	800404e <UART_SetConfig+0x20a>
 8004040:	e00b      	b.n	800405a <UART_SetConfig+0x216>
 8004042:	2300      	movs	r3, #0
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e0a0      	b.n	800418a <UART_SetConfig+0x346>
 8004048:	2302      	movs	r3, #2
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e09d      	b.n	800418a <UART_SetConfig+0x346>
 800404e:	2304      	movs	r3, #4
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e09a      	b.n	800418a <UART_SetConfig+0x346>
 8004054:	2308      	movs	r3, #8
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e097      	b.n	800418a <UART_SetConfig+0x346>
 800405a:	2310      	movs	r3, #16
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e094      	b.n	800418a <UART_SetConfig+0x346>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a30      	ldr	r2, [pc, #192]	; (8004128 <UART_SetConfig+0x2e4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d125      	bne.n	80040b6 <UART_SetConfig+0x272>
 800406a:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <UART_SetConfig+0x2d0>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004078:	d017      	beq.n	80040aa <UART_SetConfig+0x266>
 800407a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800407e:	d817      	bhi.n	80040b0 <UART_SetConfig+0x26c>
 8004080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004084:	d00b      	beq.n	800409e <UART_SetConfig+0x25a>
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	d811      	bhi.n	80040b0 <UART_SetConfig+0x26c>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <UART_SetConfig+0x254>
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004094:	d006      	beq.n	80040a4 <UART_SetConfig+0x260>
 8004096:	e00b      	b.n	80040b0 <UART_SetConfig+0x26c>
 8004098:	2301      	movs	r3, #1
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e075      	b.n	800418a <UART_SetConfig+0x346>
 800409e:	2302      	movs	r3, #2
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e072      	b.n	800418a <UART_SetConfig+0x346>
 80040a4:	2304      	movs	r3, #4
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e06f      	b.n	800418a <UART_SetConfig+0x346>
 80040aa:	2308      	movs	r3, #8
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e06c      	b.n	800418a <UART_SetConfig+0x346>
 80040b0:	2310      	movs	r3, #16
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e069      	b.n	800418a <UART_SetConfig+0x346>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1c      	ldr	r2, [pc, #112]	; (800412c <UART_SetConfig+0x2e8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d137      	bne.n	8004130 <UART_SetConfig+0x2ec>
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <UART_SetConfig+0x2d0>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ce:	d017      	beq.n	8004100 <UART_SetConfig+0x2bc>
 80040d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d4:	d817      	bhi.n	8004106 <UART_SetConfig+0x2c2>
 80040d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040da:	d00b      	beq.n	80040f4 <UART_SetConfig+0x2b0>
 80040dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e0:	d811      	bhi.n	8004106 <UART_SetConfig+0x2c2>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <UART_SetConfig+0x2aa>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	d006      	beq.n	80040fa <UART_SetConfig+0x2b6>
 80040ec:	e00b      	b.n	8004106 <UART_SetConfig+0x2c2>
 80040ee:	2300      	movs	r3, #0
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e04a      	b.n	800418a <UART_SetConfig+0x346>
 80040f4:	2302      	movs	r3, #2
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e047      	b.n	800418a <UART_SetConfig+0x346>
 80040fa:	2304      	movs	r3, #4
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e044      	b.n	800418a <UART_SetConfig+0x346>
 8004100:	2308      	movs	r3, #8
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e041      	b.n	800418a <UART_SetConfig+0x346>
 8004106:	2310      	movs	r3, #16
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e03e      	b.n	800418a <UART_SetConfig+0x346>
 800410c:	efff69f3 	.word	0xefff69f3
 8004110:	40011000 	.word	0x40011000
 8004114:	40023800 	.word	0x40023800
 8004118:	40004400 	.word	0x40004400
 800411c:	40004800 	.word	0x40004800
 8004120:	40004c00 	.word	0x40004c00
 8004124:	40005000 	.word	0x40005000
 8004128:	40011400 	.word	0x40011400
 800412c:	40007800 	.word	0x40007800
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a71      	ldr	r2, [pc, #452]	; (80042fc <UART_SetConfig+0x4b8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d125      	bne.n	8004186 <UART_SetConfig+0x342>
 800413a:	4b71      	ldr	r3, [pc, #452]	; (8004300 <UART_SetConfig+0x4bc>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004144:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004148:	d017      	beq.n	800417a <UART_SetConfig+0x336>
 800414a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800414e:	d817      	bhi.n	8004180 <UART_SetConfig+0x33c>
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004154:	d00b      	beq.n	800416e <UART_SetConfig+0x32a>
 8004156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415a:	d811      	bhi.n	8004180 <UART_SetConfig+0x33c>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <UART_SetConfig+0x324>
 8004160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004164:	d006      	beq.n	8004174 <UART_SetConfig+0x330>
 8004166:	e00b      	b.n	8004180 <UART_SetConfig+0x33c>
 8004168:	2300      	movs	r3, #0
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e00d      	b.n	800418a <UART_SetConfig+0x346>
 800416e:	2302      	movs	r3, #2
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e00a      	b.n	800418a <UART_SetConfig+0x346>
 8004174:	2304      	movs	r3, #4
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e007      	b.n	800418a <UART_SetConfig+0x346>
 800417a:	2308      	movs	r3, #8
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e004      	b.n	800418a <UART_SetConfig+0x346>
 8004180:	2310      	movs	r3, #16
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e001      	b.n	800418a <UART_SetConfig+0x346>
 8004186:	2310      	movs	r3, #16
 8004188:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004192:	d15b      	bne.n	800424c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004194:	7ffb      	ldrb	r3, [r7, #31]
 8004196:	2b08      	cmp	r3, #8
 8004198:	d827      	bhi.n	80041ea <UART_SetConfig+0x3a6>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <UART_SetConfig+0x35c>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041cd 	.word	0x080041cd
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	080041eb 	.word	0x080041eb
 80041b0:	080041db 	.word	0x080041db
 80041b4:	080041eb 	.word	0x080041eb
 80041b8:	080041eb 	.word	0x080041eb
 80041bc:	080041eb 	.word	0x080041eb
 80041c0:	080041e3 	.word	0x080041e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fe fa38 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 80041c8:	61b8      	str	r0, [r7, #24]
        break;
 80041ca:	e013      	b.n	80041f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041cc:	f7fe fa48 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 80041d0:	61b8      	str	r0, [r7, #24]
        break;
 80041d2:	e00f      	b.n	80041f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b4b      	ldr	r3, [pc, #300]	; (8004304 <UART_SetConfig+0x4c0>)
 80041d6:	61bb      	str	r3, [r7, #24]
        break;
 80041d8:	e00c      	b.n	80041f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7fe f96b 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 80041de:	61b8      	str	r0, [r7, #24]
        break;
 80041e0:	e008      	b.n	80041f4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	61bb      	str	r3, [r7, #24]
        break;
 80041e8:	e004      	b.n	80041f4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	77bb      	strb	r3, [r7, #30]
        break;
 80041f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d074      	beq.n	80042e4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	005a      	lsls	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	441a      	add	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	b29b      	uxth	r3, r3
 8004210:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d916      	bls.n	8004246 <UART_SetConfig+0x402>
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421e:	d212      	bcs.n	8004246 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f023 030f 	bic.w	r3, r3, #15
 8004228:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	b29b      	uxth	r3, r3
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	b29a      	uxth	r2, r3
 8004236:	89fb      	ldrh	r3, [r7, #14]
 8004238:	4313      	orrs	r3, r2
 800423a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	89fa      	ldrh	r2, [r7, #14]
 8004242:	60da      	str	r2, [r3, #12]
 8004244:	e04e      	b.n	80042e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	77bb      	strb	r3, [r7, #30]
 800424a:	e04b      	b.n	80042e4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800424c:	7ffb      	ldrb	r3, [r7, #31]
 800424e:	2b08      	cmp	r3, #8
 8004250:	d827      	bhi.n	80042a2 <UART_SetConfig+0x45e>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0x414>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800427d 	.word	0x0800427d
 800425c:	08004285 	.word	0x08004285
 8004260:	0800428d 	.word	0x0800428d
 8004264:	080042a3 	.word	0x080042a3
 8004268:	08004293 	.word	0x08004293
 800426c:	080042a3 	.word	0x080042a3
 8004270:	080042a3 	.word	0x080042a3
 8004274:	080042a3 	.word	0x080042a3
 8004278:	0800429b 	.word	0x0800429b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800427c:	f7fe f9dc 	bl	8002638 <HAL_RCC_GetPCLK1Freq>
 8004280:	61b8      	str	r0, [r7, #24]
        break;
 8004282:	e013      	b.n	80042ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7fe f9ec 	bl	8002660 <HAL_RCC_GetPCLK2Freq>
 8004288:	61b8      	str	r0, [r7, #24]
        break;
 800428a:	e00f      	b.n	80042ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800428c:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <UART_SetConfig+0x4c0>)
 800428e:	61bb      	str	r3, [r7, #24]
        break;
 8004290:	e00c      	b.n	80042ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004292:	f7fe f90f 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8004296:	61b8      	str	r0, [r7, #24]
        break;
 8004298:	e008      	b.n	80042ac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e004      	b.n	80042ac <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	77bb      	strb	r3, [r7, #30]
        break;
 80042aa:	bf00      	nop
    }

    if (pclk != 0U)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d018      	beq.n	80042e4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	085a      	lsrs	r2, r3, #1
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	441a      	add	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	d908      	bls.n	80042e0 <UART_SetConfig+0x49c>
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d204      	bcs.n	80042e0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	e001      	b.n	80042e4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40007c00 	.word	0x40007c00
 8004300:	40023800 	.word	0x40023800
 8004304:	00f42400 	.word	0x00f42400

08004308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01a      	beq.n	800441e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004406:	d10a      	bne.n	800441e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	605a      	str	r2, [r3, #4]
  }
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af02      	add	r7, sp, #8
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800445c:	f7fd f874 	bl	8001548 <HAL_GetTick>
 8004460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b08      	cmp	r3, #8
 800446e:	d10e      	bne.n	800448e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f817 	bl	80044b2 <UART_WaitOnFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e00d      	b.n	80044aa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c2:	e05e      	b.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ca:	d05a      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fd f83c 	bl	8001548 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11b      	bne.n	800451a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e043      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d02c      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004536:	d124      	bne.n	8004582 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004540:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004550:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e00f      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4013      	ands	r3, r2
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	bf0c      	ite	eq
 8004592:	2301      	moveq	r3, #1
 8004594:	2300      	movne	r3, #0
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	429a      	cmp	r2, r3
 800459e:	d091      	beq.n	80044c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	88fa      	ldrh	r2, [r7, #6]
 80045cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	d10e      	bne.n	80045fe <UART_Start_Receive_IT+0x52>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d105      	bne.n	80045f4 <UART_Start_Receive_IT+0x48>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045f2:	e02d      	b.n	8004650 <UART_Start_Receive_IT+0xa4>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	22ff      	movs	r2, #255	; 0xff
 80045f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045fc:	e028      	b.n	8004650 <UART_Start_Receive_IT+0xa4>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10d      	bne.n	8004622 <UART_Start_Receive_IT+0x76>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <UART_Start_Receive_IT+0x6c>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	22ff      	movs	r2, #255	; 0xff
 8004612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004616:	e01b      	b.n	8004650 <UART_Start_Receive_IT+0xa4>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	227f      	movs	r2, #127	; 0x7f
 800461c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004620:	e016      	b.n	8004650 <UART_Start_Receive_IT+0xa4>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462a:	d10d      	bne.n	8004648 <UART_Start_Receive_IT+0x9c>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <UART_Start_Receive_IT+0x92>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	227f      	movs	r2, #127	; 0x7f
 8004638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800463c:	e008      	b.n	8004650 <UART_Start_Receive_IT+0xa4>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	223f      	movs	r2, #63	; 0x3f
 8004642:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004646:	e003      	b.n	8004650 <UART_Start_Receive_IT+0xa4>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2222      	movs	r2, #34	; 0x22
 800465c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d107      	bne.n	8004688 <UART_Start_Receive_IT+0xdc>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d103      	bne.n	8004688 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <UART_Start_Receive_IT+0x108>)
 8004684:	665a      	str	r2, [r3, #100]	; 0x64
 8004686:	e002      	b.n	800468e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a0b      	ldr	r2, [pc, #44]	; (80046b8 <UART_Start_Receive_IT+0x10c>)
 800468c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80046a4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	0800484d 	.word	0x0800484d
 80046b8:	08004779 	.word	0x08004779

080046bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046d2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0210 	bic.w	r2, r2, #16
 80046fa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff fb6d 	bl	8003e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fb4a 	bl	8003e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004786:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800478c:	2b22      	cmp	r3, #34	; 0x22
 800478e:	d151      	bne.n	8004834 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004798:	89bb      	ldrh	r3, [r7, #12]
 800479a:	b2d9      	uxtb	r1, r3
 800479c:	89fb      	ldrh	r3, [r7, #14]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	400a      	ands	r2, r1
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d138      	bne.n	8004844 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047e0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004802:	2b01      	cmp	r3, #1
 8004804:	d10f      	bne.n	8004826 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0210 	bic.w	r2, r2, #16
 8004814:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fb04 	bl	8003e2c <HAL_UARTEx_RxEventCallback>
 8004824:	e002      	b.n	800482c <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fc f87a 	bl	8000920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004832:	e007      	b.n	8004844 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0208 	orr.w	r2, r2, #8
 8004842:	619a      	str	r2, [r3, #24]
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800485a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004860:	2b22      	cmp	r3, #34	; 0x22
 8004862:	d151      	bne.n	8004908 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004872:	89ba      	ldrh	r2, [r7, #12]
 8004874:	89fb      	ldrh	r3, [r7, #14]
 8004876:	4013      	ands	r3, r2
 8004878:	b29a      	uxth	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	1c9a      	adds	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d138      	bne.n	8004918 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048b4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d10f      	bne.n	80048fa <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0210 	bic.w	r2, r2, #16
 80048e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff fa9a 	bl	8003e2c <HAL_UARTEx_RxEventCallback>
 80048f8:	e002      	b.n	8004900 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc f810 	bl	8000920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004906:	e007      	b.n	8004918 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0208 	orr.w	r2, r2, #8
 8004916:	619a      	str	r2, [r3, #24]
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <__libc_init_array>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4d0d      	ldr	r5, [pc, #52]	; (8004958 <__libc_init_array+0x38>)
 8004924:	4c0d      	ldr	r4, [pc, #52]	; (800495c <__libc_init_array+0x3c>)
 8004926:	1b64      	subs	r4, r4, r5
 8004928:	10a4      	asrs	r4, r4, #2
 800492a:	2600      	movs	r6, #0
 800492c:	42a6      	cmp	r6, r4
 800492e:	d109      	bne.n	8004944 <__libc_init_array+0x24>
 8004930:	4d0b      	ldr	r5, [pc, #44]	; (8004960 <__libc_init_array+0x40>)
 8004932:	4c0c      	ldr	r4, [pc, #48]	; (8004964 <__libc_init_array+0x44>)
 8004934:	f000 f820 	bl	8004978 <_init>
 8004938:	1b64      	subs	r4, r4, r5
 800493a:	10a4      	asrs	r4, r4, #2
 800493c:	2600      	movs	r6, #0
 800493e:	42a6      	cmp	r6, r4
 8004940:	d105      	bne.n	800494e <__libc_init_array+0x2e>
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f855 3b04 	ldr.w	r3, [r5], #4
 8004948:	4798      	blx	r3
 800494a:	3601      	adds	r6, #1
 800494c:	e7ee      	b.n	800492c <__libc_init_array+0xc>
 800494e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004952:	4798      	blx	r3
 8004954:	3601      	adds	r6, #1
 8004956:	e7f2      	b.n	800493e <__libc_init_array+0x1e>
 8004958:	080049cc 	.word	0x080049cc
 800495c:	080049cc 	.word	0x080049cc
 8004960:	080049cc 	.word	0x080049cc
 8004964:	080049d0 	.word	0x080049d0

08004968 <memset>:
 8004968:	4402      	add	r2, r0
 800496a:	4603      	mov	r3, r0
 800496c:	4293      	cmp	r3, r2
 800496e:	d100      	bne.n	8004972 <memset+0xa>
 8004970:	4770      	bx	lr
 8004972:	f803 1b01 	strb.w	r1, [r3], #1
 8004976:	e7f9      	b.n	800496c <memset+0x4>

08004978 <_init>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	bf00      	nop
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr

08004984 <_fini>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr
