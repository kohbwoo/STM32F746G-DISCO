
STM32F746G-DISCO_UART6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bb0  08004bb0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bb8  08004bb8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200000a0  08004c60  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004c60  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebab  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec8  00000000  00000000  0002ec7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00030b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00031900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002515a  00000000  00000000  00032600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f35e  00000000  00000000  0005775a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb843  00000000  00000000  00066ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001522fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  00152350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a0 	.word	0x200000a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004b74 	.word	0x08004b74

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a4 	.word	0x200000a4
 8000204:	08004b74 	.word	0x08004b74

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <Line_Change1>:
unsigned char Num_Select(unsigned char PrintNumx16);
unsigned short input = 0; //인풋///////////////////////////////////////////////////////////////////
unsigned char addr[4] = { 0, 0, 0, 0 };


void Line_Change1(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e00a      	b.n	80005f6 <Line_Change1+0x22>
		HAL_UART_Transmit(&huart1, &Enter[i], 1, 10);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <Line_Change1+0x34>)
 80005e4:	1899      	adds	r1, r3, r2
 80005e6:	230a      	movs	r3, #10
 80005e8:	2201      	movs	r2, #1
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <Line_Change1+0x38>)
 80005ec:	f003 fa4c 	bl	8003a88 <HAL_UART_Transmit>
	for(int i = 0; i<3; i++){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3301      	adds	r3, #1
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	ddf1      	ble.n	80005e0 <Line_Change1+0xc>
	}

}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000090 	.word	0x20000090
 800060c:	20000118 	.word	0x20000118

08000610 <Line_Change6>:

void Line_Change6(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++){
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e00a      	b.n	8000632 <Line_Change6+0x22>
		HAL_UART_Transmit(&huart6, &Enter[i], 1, 10);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <Line_Change6+0x34>)
 8000620:	1899      	adds	r1, r3, r2
 8000622:	230a      	movs	r3, #10
 8000624:	2201      	movs	r2, #1
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <Line_Change6+0x38>)
 8000628:	f003 fa2e 	bl	8003a88 <HAL_UART_Transmit>
	for(int i = 0; i<3; i++){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b02      	cmp	r3, #2
 8000636:	ddf1      	ble.n	800061c <Line_Change6+0xc>
	}

}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000090 	.word	0x20000090
 8000648:	200001a0 	.word	0x200001a0

0800064c <UART6_Start>:


void UART6_Start(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	for (int i = 0; i <16; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e00a      	b.n	800066e <UART6_Start+0x22>
		HAL_UART_Transmit(&huart6, &UART6_Text_Start[i], 1, 10);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <UART6_Start+0x34>)
 800065c:	1899      	adds	r1, r3, r2
 800065e:	230a      	movs	r3, #10
 8000660:	2201      	movs	r2, #1
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <UART6_Start+0x38>)
 8000664:	f003 fa10 	bl	8003a88 <HAL_UART_Transmit>
	for (int i = 0; i <16; i++) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	ddf1      	ble.n	8000658 <UART6_Start+0xc>
	}
	Line_Change6();
 8000674:	f7ff ffcc 	bl	8000610 <Line_Change6>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000054 	.word	0x20000054
 8000684:	200001a0 	.word	0x200001a0

08000688 <UART1_Start>:
void UART1_Start(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	for (int i = 0; i <16; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	e00a      	b.n	80006aa <UART1_Start+0x22>
		HAL_UART_Transmit(&huart1, &UART1_Text_Start[i], 1, 10);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <UART1_Start+0x34>)
 8000698:	1899      	adds	r1, r3, r2
 800069a:	230a      	movs	r3, #10
 800069c:	2201      	movs	r2, #1
 800069e:	4808      	ldr	r0, [pc, #32]	; (80006c0 <UART1_Start+0x38>)
 80006a0:	f003 f9f2 	bl	8003a88 <HAL_UART_Transmit>
	for (int i = 0; i <16; i++) {
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	ddf1      	ble.n	8000694 <UART1_Start+0xc>
	}
	Line_Change1();
 80006b0:	f7ff ff90 	bl	80005d4 <Line_Change1>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000018 	.word	0x20000018
 80006c0:	20000118 	.word	0x20000118

080006c4 <UART6_Print>:

unsigned char UART6_Print() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
	if (rx6_data == 84 || rx6_data == 116) { //UART 입력이 T 또는 t인경우 실행
 80006ca:	4b44      	ldr	r3, [pc, #272]	; (80007dc <UART6_Print+0x118>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b54      	cmp	r3, #84	; 0x54
 80006d0:	d003      	beq.n	80006da <UART6_Print+0x16>
 80006d2:	4b42      	ldr	r3, [pc, #264]	; (80007dc <UART6_Print+0x118>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b74      	cmp	r3, #116	; 0x74
 80006d8:	d148      	bne.n	800076c <UART6_Print+0xa8>
		for (int i = 0; i < 7; i++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	e00a      	b.n	80006f6 <UART6_Print+0x32>
			HAL_UART_Transmit(&huart6, &UART_Text_Input[i], 1, 10);
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	4a3f      	ldr	r2, [pc, #252]	; (80007e0 <UART6_Print+0x11c>)
 80006e4:	1899      	adds	r1, r3, r2
 80006e6:	230a      	movs	r3, #10
 80006e8:	2201      	movs	r2, #1
 80006ea:	483e      	ldr	r0, [pc, #248]	; (80007e4 <UART6_Print+0x120>)
 80006ec:	f003 f9cc 	bl	8003a88 <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	3301      	adds	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	2b06      	cmp	r3, #6
 80006fa:	ddf1      	ble.n	80006e0 <UART6_Print+0x1c>
		}
		HAL_UART_Transmit(&huart6, &rx6_data, 1, 10);
 80006fc:	230a      	movs	r3, #10
 80006fe:	2201      	movs	r2, #1
 8000700:	4936      	ldr	r1, [pc, #216]	; (80007dc <UART6_Print+0x118>)
 8000702:	4838      	ldr	r0, [pc, #224]	; (80007e4 <UART6_Print+0x120>)
 8000704:	f003 f9c0 	bl	8003a88 <HAL_UART_Transmit>
		Line_Change6();
 8000708:	f7ff ff82 	bl	8000610 <Line_Change6>

		for (int i = 0; i < 7; i++) {
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	e00a      	b.n	8000728 <UART6_Print+0x64>
			HAL_UART_Transmit(&huart6, &UART_Text_Time[i], 1, 10);
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	4a34      	ldr	r2, [pc, #208]	; (80007e8 <UART6_Print+0x124>)
 8000716:	1899      	adds	r1, r3, r2
 8000718:	230a      	movs	r3, #10
 800071a:	2201      	movs	r2, #1
 800071c:	4831      	ldr	r0, [pc, #196]	; (80007e4 <UART6_Print+0x120>)
 800071e:	f003 f9b3 	bl	8003a88 <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	3301      	adds	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	2b06      	cmp	r3, #6
 800072c:	ddf1      	ble.n	8000712 <UART6_Print+0x4e>
		}

		unsigned char tmplist[4];

		for (int i = 0; i < 4; i++) {
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e015      	b.n	8000760 <UART6_Print+0x9c>
			tmplist[i] = addr[i] + 48;
 8000734:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <UART6_Print+0x128>)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3330      	adds	r3, #48	; 0x30
 800073e:	b2d9      	uxtb	r1, r3
 8000740:	463a      	mov	r2, r7
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	4413      	add	r3, r2
 8000746:	460a      	mov	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6, &tmplist[i], 1, 10);
 800074a:	463a      	mov	r2, r7
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	18d1      	adds	r1, r2, r3
 8000750:	230a      	movs	r3, #10
 8000752:	2201      	movs	r2, #1
 8000754:	4823      	ldr	r0, [pc, #140]	; (80007e4 <UART6_Print+0x120>)
 8000756:	f003 f997 	bl	8003a88 <HAL_UART_Transmit>
		for (int i = 0; i < 4; i++) {
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b03      	cmp	r3, #3
 8000764:	dde6      	ble.n	8000734 <UART6_Print+0x70>
		}
		Line_Change6();
 8000766:	f7ff ff53 	bl	8000610 <Line_Change6>
	if (rx6_data == 84 || rx6_data == 116) { //UART 입력이 T 또는 t인경우 실행
 800076a:	e018      	b.n	800079e <UART6_Print+0xda>

	} else {
		for (int i = 0; i < 7; i++) {
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	e00a      	b.n	8000788 <UART6_Print+0xc4>
			HAL_UART_Transmit(&huart6, &UART_Text_Input[i], 1, 10);
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <UART6_Print+0x11c>)
 8000776:	1899      	adds	r1, r3, r2
 8000778:	230a      	movs	r3, #10
 800077a:	2201      	movs	r2, #1
 800077c:	4819      	ldr	r0, [pc, #100]	; (80007e4 <UART6_Print+0x120>)
 800077e:	f003 f983 	bl	8003a88 <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	3301      	adds	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	2b06      	cmp	r3, #6
 800078c:	ddf1      	ble.n	8000772 <UART6_Print+0xae>
		}
		HAL_UART_Transmit(&huart6, &rx6_data, 1, 10);
 800078e:	230a      	movs	r3, #10
 8000790:	2201      	movs	r2, #1
 8000792:	4912      	ldr	r1, [pc, #72]	; (80007dc <UART6_Print+0x118>)
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <UART6_Print+0x120>)
 8000796:	f003 f977 	bl	8003a88 <HAL_UART_Transmit>
		Line_Change6();
 800079a:	f7ff ff39 	bl	8000610 <Line_Change6>
	}


	for (int i = 0; i < 8; i++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	e00a      	b.n	80007ba <UART6_Print+0xf6>
		HAL_UART_Transmit(&huart1, &UART6_Text_Input[i], 1, 10);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <UART6_Print+0x12c>)
 80007a8:	1899      	adds	r1, r3, r2
 80007aa:	230a      	movs	r3, #10
 80007ac:	2201      	movs	r2, #1
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <UART6_Print+0x130>)
 80007b0:	f003 f96a 	bl	8003a88 <HAL_UART_Transmit>
	for (int i = 0; i < 8; i++) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	ddf1      	ble.n	80007a4 <UART6_Print+0xe0>
	}
	HAL_UART_Transmit(&huart1, &rx6_data, 1, 10);
 80007c0:	230a      	movs	r3, #10
 80007c2:	2201      	movs	r2, #1
 80007c4:	4905      	ldr	r1, [pc, #20]	; (80007dc <UART6_Print+0x118>)
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <UART6_Print+0x130>)
 80007c8:	f003 f95e 	bl	8003a88 <HAL_UART_Transmit>
	Line_Change1();
 80007cc:	f7ff ff02 	bl	80005d4 <Line_Change1>



	return 0;
 80007d0:	2300      	movs	r3, #0

}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000019c 	.word	0x2000019c
 80007e0:	20000000 	.word	0x20000000
 80007e4:	200001a0 	.word	0x200001a0
 80007e8:	20000010 	.word	0x20000010
 80007ec:	200000c4 	.word	0x200000c4
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000118 	.word	0x20000118

080007f8 <UART1_Print>:



unsigned char UART1_Print() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
	if (rx1_data == 84 || rx1_data == 116) { //UART 입력이 T 또는 t인경우 실행
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <UART1_Print+0xe4>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b54      	cmp	r3, #84	; 0x54
 8000804:	d003      	beq.n	800080e <UART1_Print+0x16>
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <UART1_Print+0xe4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b74      	cmp	r3, #116	; 0x74
 800080c:	d148      	bne.n	80008a0 <UART1_Print+0xa8>
		for (int i = 0; i < 7; i++) {
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	e00a      	b.n	800082a <UART1_Print+0x32>
			HAL_UART_Transmit(&huart1, &UART_Text_Input[i], 1, 10);
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	4a32      	ldr	r2, [pc, #200]	; (80008e0 <UART1_Print+0xe8>)
 8000818:	1899      	adds	r1, r3, r2
 800081a:	230a      	movs	r3, #10
 800081c:	2201      	movs	r2, #1
 800081e:	4831      	ldr	r0, [pc, #196]	; (80008e4 <UART1_Print+0xec>)
 8000820:	f003 f932 	bl	8003a88 <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b06      	cmp	r3, #6
 800082e:	ddf1      	ble.n	8000814 <UART1_Print+0x1c>
		}
		HAL_UART_Transmit(&huart1, &rx1_data, 1, 10);
 8000830:	230a      	movs	r3, #10
 8000832:	2201      	movs	r2, #1
 8000834:	4929      	ldr	r1, [pc, #164]	; (80008dc <UART1_Print+0xe4>)
 8000836:	482b      	ldr	r0, [pc, #172]	; (80008e4 <UART1_Print+0xec>)
 8000838:	f003 f926 	bl	8003a88 <HAL_UART_Transmit>
		Line_Change1();
 800083c:	f7ff feca 	bl	80005d4 <Line_Change1>

		for (int i = 0; i < 7; i++) {
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	e00a      	b.n	800085c <UART1_Print+0x64>
			HAL_UART_Transmit(&huart1, &UART_Text_Time[i], 1, 10);
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <UART1_Print+0xf0>)
 800084a:	1899      	adds	r1, r3, r2
 800084c:	230a      	movs	r3, #10
 800084e:	2201      	movs	r2, #1
 8000850:	4824      	ldr	r0, [pc, #144]	; (80008e4 <UART1_Print+0xec>)
 8000852:	f003 f919 	bl	8003a88 <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	3301      	adds	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	2b06      	cmp	r3, #6
 8000860:	ddf1      	ble.n	8000846 <UART1_Print+0x4e>
		}

		unsigned char tmplist[4];

		for (int i = 0; i < 4; i++) {
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	e015      	b.n	8000894 <UART1_Print+0x9c>
			tmplist[i] = addr[i] + 48;
 8000868:	4a20      	ldr	r2, [pc, #128]	; (80008ec <UART1_Print+0xf4>)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4413      	add	r3, r2
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	3330      	adds	r3, #48	; 0x30
 8000872:	b2d9      	uxtb	r1, r3
 8000874:	1d3a      	adds	r2, r7, #4
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	460a      	mov	r2, r1
 800087c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, &tmplist[i], 1, 10);
 800087e:	1d3a      	adds	r2, r7, #4
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	18d1      	adds	r1, r2, r3
 8000884:	230a      	movs	r3, #10
 8000886:	2201      	movs	r2, #1
 8000888:	4816      	ldr	r0, [pc, #88]	; (80008e4 <UART1_Print+0xec>)
 800088a:	f003 f8fd 	bl	8003a88 <HAL_UART_Transmit>
		for (int i = 0; i < 4; i++) {
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b03      	cmp	r3, #3
 8000898:	dde6      	ble.n	8000868 <UART1_Print+0x70>
		}
		Line_Change1();
 800089a:	f7ff fe9b 	bl	80005d4 <Line_Change1>
	if (rx1_data == 84 || rx1_data == 116) { //UART 입력이 T 또는 t인경우 실행
 800089e:	e018      	b.n	80008d2 <UART1_Print+0xda>

	} else {
		for (int i = 0; i < 7; i++) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	e00a      	b.n	80008bc <UART1_Print+0xc4>
			HAL_UART_Transmit(&huart1, &UART_Text_Input[i], 1, 10);
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UART1_Print+0xe8>)
 80008aa:	1899      	adds	r1, r3, r2
 80008ac:	230a      	movs	r3, #10
 80008ae:	2201      	movs	r2, #1
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <UART1_Print+0xec>)
 80008b2:	f003 f8e9 	bl	8003a88 <HAL_UART_Transmit>
		for (int i = 0; i < 7; i++) {
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	ddf1      	ble.n	80008a6 <UART1_Print+0xae>
		}
		HAL_UART_Transmit(&huart1, &rx1_data, 1, 10);
 80008c2:	230a      	movs	r3, #10
 80008c4:	2201      	movs	r2, #1
 80008c6:	4905      	ldr	r1, [pc, #20]	; (80008dc <UART1_Print+0xe4>)
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <UART1_Print+0xec>)
 80008ca:	f003 f8dd 	bl	8003a88 <HAL_UART_Transmit>
		Line_Change1();
 80008ce:	f7ff fe81 	bl	80005d4 <Line_Change1>
	}
	return 0;
 80008d2:	2300      	movs	r3, #0

}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000019d 	.word	0x2000019d
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000118 	.word	0x20000118
 80008e8:	20000010 	.word	0x20000010
 80008ec:	200000c4 	.word	0x200000c4

080008f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <HAL_UART_RxCpltCallback+0x44>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d107      	bne.n	8000912 <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Receive_IT(&huart1, &rx1_data, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <HAL_UART_RxCpltCallback+0x48>)
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <HAL_UART_RxCpltCallback+0x4c>)
 8000908:	f003 f951 	bl	8003bae <HAL_UART_Receive_IT>
		UART1_Input = 1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_UART_RxCpltCallback+0x50>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]

	}

	if (huart->Instance == USART6) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <HAL_UART_RxCpltCallback+0x54>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d107      	bne.n	800092c <HAL_UART_RxCpltCallback+0x3c>
		HAL_UART_Receive_IT(&huart6, &rx6_data, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	490a      	ldr	r1, [pc, #40]	; (8000948 <HAL_UART_RxCpltCallback+0x58>)
 8000920:	480a      	ldr	r0, [pc, #40]	; (800094c <HAL_UART_RxCpltCallback+0x5c>)
 8000922:	f003 f944 	bl	8003bae <HAL_UART_Receive_IT>
		UART6_Input = 1;
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <HAL_UART_RxCpltCallback+0x60>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]

	}

}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40011000 	.word	0x40011000
 8000938:	2000019d 	.word	0x2000019d
 800093c:	20000118 	.word	0x20000118
 8000940:	200000c0 	.word	0x200000c0
 8000944:	40011400 	.word	0x40011400
 8000948:	2000019c 	.word	0x2000019c
 800094c:	200001a0 	.word	0x200001a0
 8000950:	200000c1 	.word	0x200000c1

08000954 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //타이머 인터럽트 코드
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d109      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x26>

		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000966:	2102      	movs	r1, #2
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800096a:	f001 fa82 	bl	8001e72 <HAL_GPIO_TogglePin>
		input = input + 1;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000978:	801a      	strh	r2, [r3, #0]
	}
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40000400 	.word	0x40000400
 8000988:	40022000 	.word	0x40022000
 800098c:	200000c2 	.word	0x200000c2

08000990 <Num_Select>:

unsigned char Num_Select(unsigned char PrintNumx16) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	if (PrintNumx16 & 0x40) {
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <Num_Select+0x20>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, 1);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2104      	movs	r1, #4
 80009a8:	4836      	ldr	r0, [pc, #216]	; (8000a84 <Num_Select+0xf4>)
 80009aa:	f001 fa49 	bl	8001e40 <HAL_GPIO_WritePin>
 80009ae:	e004      	b.n	80009ba <Num_Select+0x2a>
	} else {
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2104      	movs	r1, #4
 80009b4:	4833      	ldr	r0, [pc, #204]	; (8000a84 <Num_Select+0xf4>)
 80009b6:	f001 fa43 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x20) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <Num_Select+0x40>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2108      	movs	r1, #8
 80009c8:	482e      	ldr	r0, [pc, #184]	; (8000a84 <Num_Select+0xf4>)
 80009ca:	f001 fa39 	bl	8001e40 <HAL_GPIO_WritePin>
 80009ce:	e004      	b.n	80009da <Num_Select+0x4a>
	} else {
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2108      	movs	r1, #8
 80009d4:	482b      	ldr	r0, [pc, #172]	; (8000a84 <Num_Select+0xf4>)
 80009d6:	f001 fa33 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x10) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d005      	beq.n	80009f0 <Num_Select+0x60>
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, 1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2140      	movs	r1, #64	; 0x40
 80009e8:	4827      	ldr	r0, [pc, #156]	; (8000a88 <Num_Select+0xf8>)
 80009ea:	f001 fa29 	bl	8001e40 <HAL_GPIO_WritePin>
 80009ee:	e004      	b.n	80009fa <Num_Select+0x6a>
	} else {
		HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	4824      	ldr	r0, [pc, #144]	; (8000a88 <Num_Select+0xf8>)
 80009f6:	f001 fa23 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x08) {
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 0308 	and.w	r3, r3, #8
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <Num_Select+0x80>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, 1);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2101      	movs	r1, #1
 8000a08:	481e      	ldr	r0, [pc, #120]	; (8000a84 <Num_Select+0xf4>)
 8000a0a:	f001 fa19 	bl	8001e40 <HAL_GPIO_WritePin>
 8000a0e:	e004      	b.n	8000a1a <Num_Select+0x8a>
	} else {
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	481b      	ldr	r0, [pc, #108]	; (8000a84 <Num_Select+0xf4>)
 8000a16:	f001 fa13 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x04) {
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <Num_Select+0xa0>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	4818      	ldr	r0, [pc, #96]	; (8000a8c <Num_Select+0xfc>)
 8000a2a:	f001 fa09 	bl	8001e40 <HAL_GPIO_WritePin>
 8000a2e:	e004      	b.n	8000a3a <Num_Select+0xaa>
	} else {
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	4815      	ldr	r0, [pc, #84]	; (8000a8c <Num_Select+0xfc>)
 8000a36:	f001 fa03 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x02) {
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d005      	beq.n	8000a50 <Num_Select+0xc0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <Num_Select+0x100>)
 8000a4a:	f001 f9f9 	bl	8001e40 <HAL_GPIO_WritePin>
 8000a4e:	e004      	b.n	8000a5a <Num_Select+0xca>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2110      	movs	r1, #16
 8000a54:	480e      	ldr	r0, [pc, #56]	; (8000a90 <Num_Select+0x100>)
 8000a56:	f001 f9f3 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (PrintNumx16 & 0x01) {
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d005      	beq.n	8000a70 <Num_Select+0xe0>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <Num_Select+0xfc>)
 8000a6a:	f001 f9e9 	bl	8001e40 <HAL_GPIO_WritePin>
 8000a6e:	e004      	b.n	8000a7a <Num_Select+0xea>
	} else {
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <Num_Select+0xfc>)
 8000a76:	f001 f9e3 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	return 0;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40022000 	.word	0x40022000
 8000a88:	40021c00 	.word	0x40021c00
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	40020400 	.word	0x40020400

08000a94 <Segment_Select>:

unsigned char Segment_Select(unsigned char SegmentNumx16,
		unsigned char PrintNumx16) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	71bb      	strb	r3, [r7, #6]
	//출력할 세그먼트 결정

	if (SegmentNumx16 & 0x08) {
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <Segment_Select+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab4:	4824      	ldr	r0, [pc, #144]	; (8000b48 <Segment_Select+0xb4>)
 8000ab6:	f001 f9c3 	bl	8001e40 <HAL_GPIO_WritePin>
 8000aba:	e005      	b.n	8000ac8 <Segment_Select+0x34>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac2:	4821      	ldr	r0, [pc, #132]	; (8000b48 <Segment_Select+0xb4>)
 8000ac4:	f001 f9bc 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (SegmentNumx16 & 0x04) {
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <Segment_Select+0x4c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad8:	481b      	ldr	r0, [pc, #108]	; (8000b48 <Segment_Select+0xb4>)
 8000ada:	f001 f9b1 	bl	8001e40 <HAL_GPIO_WritePin>
 8000ade:	e005      	b.n	8000aec <Segment_Select+0x58>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae6:	4818      	ldr	r0, [pc, #96]	; (8000b48 <Segment_Select+0xb4>)
 8000ae8:	f001 f9aa 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (SegmentNumx16 & 0x02) {
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <Segment_Select+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afc:	4813      	ldr	r0, [pc, #76]	; (8000b4c <Segment_Select+0xb8>)
 8000afe:	f001 f99f 	bl	8001e40 <HAL_GPIO_WritePin>
 8000b02:	e005      	b.n	8000b10 <Segment_Select+0x7c>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	4810      	ldr	r0, [pc, #64]	; (8000b4c <Segment_Select+0xb8>)
 8000b0c:	f001 f998 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	if (SegmentNumx16 & 0x01) {
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d006      	beq.n	8000b28 <Segment_Select+0x94>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <Segment_Select+0xb8>)
 8000b22:	f001 f98d 	bl	8001e40 <HAL_GPIO_WritePin>
 8000b26:	e005      	b.n	8000b34 <Segment_Select+0xa0>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2e:	4807      	ldr	r0, [pc, #28]	; (8000b4c <Segment_Select+0xb8>)
 8000b30:	f001 f986 	bl	8001e40 <HAL_GPIO_WritePin>
	}
	Num_Select(PrintNumx16);
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff2a 	bl	8000990 <Num_Select>
	return 0;
 8000b3c:	2300      	movs	r3, #0

}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40020000 	.word	0x40020000

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b56:	f7ff fcd3 	bl	8000500 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b5a:	f7ff fcf7 	bl	800054c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f000 fd86 	bl	800166e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f8fb 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 fa3b 	bl	8000fe0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b6a:	f000 f989 	bl	8000e80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b6e:	f000 f9d7 	bl	8000f20 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000b72:	f000 fa05 	bl	8000f80 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3); // 타이머 인터럽트 시작 디버그 할경우 주석처리 해야함
 8000b76:	486a      	ldr	r0, [pc, #424]	; (8000d20 <main+0x1d0>)
 8000b78:	f002 facc 	bl	8003114 <HAL_TIM_Base_Start_IT>
  	HAL_UART_Receive_IT(&huart6, &rx6_data, 1); // UART인터럽트 한바이트 들어오면 시작
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4969      	ldr	r1, [pc, #420]	; (8000d24 <main+0x1d4>)
 8000b80:	4869      	ldr	r0, [pc, #420]	; (8000d28 <main+0x1d8>)
 8000b82:	f003 f814 	bl	8003bae <HAL_UART_Receive_IT>
  	HAL_UART_Receive_IT(&huart1, &rx1_data, 1); // UART인터럽트 한바이트 들어오면 시작
 8000b86:	2201      	movs	r2, #1
 8000b88:	4968      	ldr	r1, [pc, #416]	; (8000d2c <main+0x1dc>)
 8000b8a:	4869      	ldr	r0, [pc, #420]	; (8000d30 <main+0x1e0>)
 8000b8c:	f003 f80f 	bl	8003bae <HAL_UART_Receive_IT>
  	unsigned char List_Of_Segments[4] = { 0x01, 0x02, 0x04, 0x08 };
 8000b90:	4b68      	ldr	r3, [pc, #416]	; (8000d34 <main+0x1e4>)
 8000b92:	613b      	str	r3, [r7, #16]
  	unsigned char List_Of_Segment_Info[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99,
 8000b94:	4a68      	ldr	r2, [pc, #416]	; (8000d38 <main+0x1e8>)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b9a:	c303      	stmia	r3!, {r0, r1}
 8000b9c:	801a      	strh	r2, [r3, #0]
  			0x92, 0x82, 0xD8, 0x80, 0x98 };
  	unsigned short delaytime = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	82fb      	strh	r3, [r7, #22]
  	UART1_Start();
 8000ba2:	f7ff fd71 	bl	8000688 <UART1_Start>
  	UART6_Start();
 8000ba6:	f7ff fd51 	bl	800064c <UART6_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Loop_Count++;
 8000baa:	4b64      	ldr	r3, [pc, #400]	; (8000d3c <main+0x1ec>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a62      	ldr	r2, [pc, #392]	; (8000d3c <main+0x1ec>)
 8000bb2:	6013      	str	r3, [r2, #0]
	  		if (input % 100 == 60) {
 8000bb4:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <main+0x1f0>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	4a62      	ldr	r2, [pc, #392]	; (8000d44 <main+0x1f4>)
 8000bba:	fba2 1203 	umull	r1, r2, r2, r3
 8000bbe:	0952      	lsrs	r2, r2, #5
 8000bc0:	2164      	movs	r1, #100	; 0x64
 8000bc2:	fb01 f202 	mul.w	r2, r1, r2
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	2b3c      	cmp	r3, #60	; 0x3c
 8000bcc:	d10b      	bne.n	8000be6 <main+0x96>
	  			input += 100;
 8000bce:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <main+0x1f0>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	3364      	adds	r3, #100	; 0x64
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <main+0x1f0>)
 8000bd8:	801a      	strh	r2, [r3, #0]
	  			input -= 60;
 8000bda:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <main+0x1f0>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	3b3c      	subs	r3, #60	; 0x3c
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b57      	ldr	r3, [pc, #348]	; (8000d40 <main+0x1f0>)
 8000be4:	801a      	strh	r2, [r3, #0]
	  		}
	  		if (input > 2359) {
 8000be6:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <main+0x1f0>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	f640 1237 	movw	r2, #2359	; 0x937
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d902      	bls.n	8000bf8 <main+0xa8>
	  			input = 0;
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <main+0x1f0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	801a      	strh	r2, [r3, #0]
	  		}

	  		addr[0] = input / 1000;
 8000bf8:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <main+0x1f0>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4a52      	ldr	r2, [pc, #328]	; (8000d48 <main+0x1f8>)
 8000bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000c02:	099b      	lsrs	r3, r3, #6
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <main+0x1fc>)
 8000c0a:	701a      	strb	r2, [r3, #0]
	  		addr[1] = input % 1000 / 100;
 8000c0c:	4b4c      	ldr	r3, [pc, #304]	; (8000d40 <main+0x1f0>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	4a4d      	ldr	r2, [pc, #308]	; (8000d48 <main+0x1f8>)
 8000c12:	fba2 1203 	umull	r1, r2, r2, r3
 8000c16:	0992      	lsrs	r2, r2, #6
 8000c18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c1c:	fb01 f202 	mul.w	r2, r1, r2
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4a47      	ldr	r2, [pc, #284]	; (8000d44 <main+0x1f4>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	095b      	lsrs	r3, r3, #5
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <main+0x1fc>)
 8000c32:	705a      	strb	r2, [r3, #1]
	  		addr[2] = input % 100 / 10;
 8000c34:	4b42      	ldr	r3, [pc, #264]	; (8000d40 <main+0x1f0>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	4a42      	ldr	r2, [pc, #264]	; (8000d44 <main+0x1f4>)
 8000c3a:	fba2 1203 	umull	r1, r2, r2, r3
 8000c3e:	0952      	lsrs	r2, r2, #5
 8000c40:	2164      	movs	r1, #100	; 0x64
 8000c42:	fb01 f202 	mul.w	r2, r1, r2
 8000c46:	1a9b      	subs	r3, r3, r2
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	4a41      	ldr	r2, [pc, #260]	; (8000d50 <main+0x200>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <main+0x1fc>)
 8000c58:	709a      	strb	r2, [r3, #2]
	  		addr[3] = input % 10;
 8000c5a:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <main+0x1f0>)
 8000c5c:	881a      	ldrh	r2, [r3, #0]
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <main+0x200>)
 8000c60:	fba3 1302 	umull	r1, r3, r3, r2
 8000c64:	08d9      	lsrs	r1, r3, #3
 8000c66:	460b      	mov	r3, r1
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <main+0x1fc>)
 8000c76:	70da      	strb	r2, [r3, #3]
	  		Segment_Select(List_Of_Segments[0], List_Of_Segment_Info[addr[0]]);
 8000c78:	7c3a      	ldrb	r2, [r7, #16]
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <main+0x1fc>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	f107 0118 	add.w	r1, r7, #24
 8000c82:	440b      	add	r3, r1
 8000c84:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	f7ff ff02 	bl	8000a94 <Segment_Select>
	  		HAL_Delay(delaytime);
 8000c90:	8afb      	ldrh	r3, [r7, #22]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fd48 	bl	8001728 <HAL_Delay>
	  		Segment_Select(List_Of_Segments[1], List_Of_Segment_Info[addr[1]]);
 8000c98:	7c7a      	ldrb	r2, [r7, #17]
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <main+0x1fc>)
 8000c9c:	785b      	ldrb	r3, [r3, #1]
 8000c9e:	f107 0118 	add.w	r1, r7, #24
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4610      	mov	r0, r2
 8000cac:	f7ff fef2 	bl	8000a94 <Segment_Select>
	  		HAL_Delay(delaytime);
 8000cb0:	8afb      	ldrh	r3, [r7, #22]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fd38 	bl	8001728 <HAL_Delay>
	  		Segment_Select(List_Of_Segments[2], List_Of_Segment_Info[addr[2]]);
 8000cb8:	7cba      	ldrb	r2, [r7, #18]
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <main+0x1fc>)
 8000cbc:	789b      	ldrb	r3, [r3, #2]
 8000cbe:	f107 0118 	add.w	r1, r7, #24
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4610      	mov	r0, r2
 8000ccc:	f7ff fee2 	bl	8000a94 <Segment_Select>
	  		HAL_Delay(delaytime);
 8000cd0:	8afb      	ldrh	r3, [r7, #22]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fd28 	bl	8001728 <HAL_Delay>
	  		Segment_Select(List_Of_Segments[3], List_Of_Segment_Info[addr[3]]);
 8000cd8:	7cfa      	ldrb	r2, [r7, #19]
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <main+0x1fc>)
 8000cdc:	78db      	ldrb	r3, [r3, #3]
 8000cde:	f107 0118 	add.w	r1, r7, #24
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f7ff fed2 	bl	8000a94 <Segment_Select>
	  		HAL_Delay(delaytime);
 8000cf0:	8afb      	ldrh	r3, [r7, #22]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fd18 	bl	8001728 <HAL_Delay>

	  		if (UART6_Input == 1) {
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <main+0x204>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d104      	bne.n	8000d0a <main+0x1ba>
	  			UART6_Print();
 8000d00:	f7ff fce0 	bl	80006c4 <UART6_Print>
	  			UART6_Input = 0;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <main+0x204>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	  		}

	  		if (UART1_Input == 1) {
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <main+0x208>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	f47f af4b 	bne.w	8000baa <main+0x5a>
				UART1_Print();
 8000d14:	f7ff fd70 	bl	80007f8 <UART1_Print>
				UART1_Input = 0;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <main+0x208>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	  Loop_Count++;
 8000d1e:	e744      	b.n	8000baa <main+0x5a>
 8000d20:	200000cc 	.word	0x200000cc
 8000d24:	2000019c 	.word	0x2000019c
 8000d28:	200001a0 	.word	0x200001a0
 8000d2c:	2000019d 	.word	0x2000019d
 8000d30:	20000118 	.word	0x20000118
 8000d34:	08040201 	.word	0x08040201
 8000d38:	08004b8c 	.word	0x08004b8c
 8000d3c:	200000bc 	.word	0x200000bc
 8000d40:	200000c2 	.word	0x200000c2
 8000d44:	51eb851f 	.word	0x51eb851f
 8000d48:	10624dd3 	.word	0x10624dd3
 8000d4c:	200000c4 	.word	0x200000c4
 8000d50:	cccccccd 	.word	0xcccccccd
 8000d54:	200000c1 	.word	0x200000c1
 8000d58:	200000c0 	.word	0x200000c0

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0b4      	sub	sp, #208	; 0xd0
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d66:	2230      	movs	r2, #48	; 0x30
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fefa 	bl	8004b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	2284      	movs	r2, #132	; 0x84
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 feeb 	bl	8004b64 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <SystemClock_Config+0x11c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a39      	ldr	r2, [pc, #228]	; (8000e78 <SystemClock_Config+0x11c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <SystemClock_Config+0x11c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <SystemClock_Config+0x120>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <SystemClock_Config+0x120>)
 8000dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <SystemClock_Config+0x120>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000dda:	2319      	movs	r3, #25
 8000ddc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000de0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000de4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000dee:	2309      	movs	r3, #9
 8000df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 f8c9 	bl	8001f90 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e04:	f000 f9f4 	bl	80011f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e08:	f001 f872 	bl	8001ef0 <HAL_PWREx_EnableOverDrive>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e12:	f000 f9ed 	bl	80011f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e3c:	2106      	movs	r1, #6
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fb4a 	bl	80024d8 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e4a:	f000 f9d1 	bl	80011f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6;
 8000e4e:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000e52:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e54:	2300      	movs	r3, #0
 8000e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fd0f 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000e6c:	f000 f9c0 	bl	80011f0 <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	37d0      	adds	r7, #208	; 0xd0
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40007000 	.word	0x40007000

08000e80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <MX_TIM3_Init+0x9c>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000ea6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eaa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000eb4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec6:	4814      	ldr	r0, [pc, #80]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000ec8:	f002 f8cc 	bl	8003064 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000ed2:	f000 f98d 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000ee4:	f002 faae 	bl	8003444 <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000eee:	f000 f97f 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_TIM3_Init+0x98>)
 8000f00:	f002 fcc8 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000f0a:	f000 f971 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3720      	adds	r7, #32
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000cc 	.word	0x200000cc
 8000f1c:	40000400 	.word	0x40000400

08000f20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <MX_USART1_UART_Init+0x5c>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f64:	f002 fd42 	bl	80039ec <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f6e:	f000 f93f 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000118 	.word	0x20000118
 8000f7c:	40011000 	.word	0x40011000

08000f80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <MX_USART6_UART_Init+0x5c>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USART6_UART_Init+0x58>)
 8000fc4:	f002 fd12 	bl	80039ec <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000fce:	f000 f90f 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001a0 	.word	0x200001a0
 8000fdc:	40011400 	.word	0x40011400

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b76      	ldr	r3, [pc, #472]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a75      	ldr	r2, [pc, #468]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b70      	ldr	r3, [pc, #448]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a6f      	ldr	r2, [pc, #444]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b6d      	ldr	r3, [pc, #436]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a69      	ldr	r2, [pc, #420]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103e:	4b64      	ldr	r3, [pc, #400]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a63      	ldr	r2, [pc, #396]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b5e      	ldr	r3, [pc, #376]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a5d      	ldr	r2, [pc, #372]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a57      	ldr	r2, [pc, #348]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001086:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a51      	ldr	r2, [pc, #324]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 800108c:	f043 0320 	orr.w	r3, r3, #32
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <MX_GPIO_Init+0x1f0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0320 	and.w	r3, r3, #32
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f24c 0110 	movw	r1, #49168	; 0xc010
 80010a4:	484b      	ldr	r0, [pc, #300]	; (80011d4 <MX_GPIO_Init+0x1f4>)
 80010a6:	f000 fecb 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80010b0:	4849      	ldr	r0, [pc, #292]	; (80011d8 <MX_GPIO_Init+0x1f8>)
 80010b2:	f000 fec5 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	210f      	movs	r1, #15
 80010ba:	4848      	ldr	r0, [pc, #288]	; (80011dc <MX_GPIO_Init+0x1fc>)
 80010bc:	f000 fec0 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	21c0      	movs	r1, #192	; 0xc0
 80010c4:	4846      	ldr	r0, [pc, #280]	; (80011e0 <MX_GPIO_Init+0x200>)
 80010c6:	f000 febb 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	4845      	ldr	r0, [pc, #276]	; (80011e4 <MX_GPIO_Init+0x204>)
 80010d0:	f000 feb6 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_14|GPIO_PIN_15;
 80010d4:	f24c 0310 	movw	r3, #49168	; 0xc010
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4839      	ldr	r0, [pc, #228]	; (80011d4 <MX_GPIO_Init+0x1f4>)
 80010ee:	f000 fce3 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8;
 80010f2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4833      	ldr	r0, [pc, #204]	; (80011d8 <MX_GPIO_Init+0x1f8>)
 800110c:	f000 fcd4 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001110:	230f      	movs	r3, #15
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	482d      	ldr	r0, [pc, #180]	; (80011dc <MX_GPIO_Init+0x1fc>)
 8001128:	f000 fcc6 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800112c:	23c0      	movs	r3, #192	; 0xc0
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4827      	ldr	r0, [pc, #156]	; (80011e0 <MX_GPIO_Init+0x200>)
 8001144:	f000 fcb8 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF10 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001148:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <MX_GPIO_Init+0x208>)
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001152:	2302      	movs	r3, #2
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4823      	ldr	r0, [pc, #140]	; (80011ec <MX_GPIO_Init+0x20c>)
 800115e:	f000 fcab 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001162:	2301      	movs	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_GPIO_Init+0x208>)
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116a:	2302      	movs	r3, #2
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4818      	ldr	r0, [pc, #96]	; (80011d8 <MX_GPIO_Init+0x1f8>)
 8001176:	f000 fc9f 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800117a:	2340      	movs	r3, #64	; 0x40
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4814      	ldr	r0, [pc, #80]	; (80011e4 <MX_GPIO_Init+0x204>)
 8001192:	f000 fc91 	bl	8001ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2006      	movs	r0, #6
 800119c:	f000 fbc3 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011a0:	2006      	movs	r0, #6
 80011a2:	f000 fbdc 	bl	800195e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2017      	movs	r0, #23
 80011ac:	f000 fbbb 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b0:	2017      	movs	r0, #23
 80011b2:	f000 fbd4 	bl	800195e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2028      	movs	r0, #40	; 0x28
 80011bc:	f000 fbb3 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c0:	2028      	movs	r0, #40	; 0x28
 80011c2:	f000 fbcc 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 80011c6:	bf00      	nop
 80011c8:	3730      	adds	r7, #48	; 0x30
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40022000 	.word	0x40022000
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40021c00 	.word	0x40021c00
 80011e8:	10110000 	.word	0x10110000
 80011ec:	40021400 	.word	0x40021400

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_MspInit+0x50>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_MspInit+0x50>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_MspInit+0x50>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_MspInit+0x50>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_MspInit+0x50>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_MspInit+0x50>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2005      	movs	r0, #5
 8001238:	f000 fb75 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800123c:	2005      	movs	r0, #5
 800123e:	f000 fb8e 	bl	800195e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_TIM_Base_MspInit+0x44>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d113      	bne.n	800128a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6413      	str	r3, [r2, #64]	; 0x40
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	201d      	movs	r0, #29
 8001280:	f000 fb51 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001284:	201d      	movs	r0, #29
 8001286:	f000 fb6a 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40000400 	.word	0x40000400
 8001298:	40023800 	.word	0x40023800

0800129c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a44      	ldr	r2, [pc, #272]	; (80013cc <HAL_UART_MspInit+0x130>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d14d      	bne.n	800135a <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a43      	ldr	r2, [pc, #268]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a3d      	ldr	r2, [pc, #244]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a37      	ldr	r2, [pc, #220]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_UART_MspInit+0x134>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001316:	2307      	movs	r3, #7
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	482c      	ldr	r0, [pc, #176]	; (80013d4 <HAL_UART_MspInit+0x138>)
 8001322:	f000 fbc9 	bl	8001ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001338:	2307      	movs	r3, #7
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <HAL_UART_MspInit+0x13c>)
 8001344:	f000 fbb8 	bl	8001ab8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2025      	movs	r0, #37	; 0x25
 800134e:	f000 faea 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001352:	2025      	movs	r0, #37	; 0x25
 8001354:	f000 fb03 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001358:	e034      	b.n	80013c4 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART6)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <HAL_UART_MspInit+0x140>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d12f      	bne.n	80013c4 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_UART_MspInit+0x134>)
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_UART_MspInit+0x134>)
 800136a:	f043 0320 	orr.w	r3, r3, #32
 800136e:	6453      	str	r3, [r2, #68]	; 0x44
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_UART_MspInit+0x134>)
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f003 0320 	and.w	r3, r3, #32
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_UART_MspInit+0x134>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_UART_MspInit+0x134>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6313      	str	r3, [r2, #48]	; 0x30
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_UART_MspInit+0x134>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001394:	23c0      	movs	r3, #192	; 0xc0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80013a4:	2308      	movs	r3, #8
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <HAL_UART_MspInit+0x144>)
 80013b0:	f000 fb82 	bl	8001ab8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2047      	movs	r0, #71	; 0x47
 80013ba:	f000 fab4 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013be:	2047      	movs	r0, #71	; 0x47
 80013c0:	f000 facd 	bl	800195e <HAL_NVIC_EnableIRQ>
}
 80013c4:	bf00      	nop
 80013c6:	3730      	adds	r7, #48	; 0x30
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40011400 	.word	0x40011400
 80013e0:	40020800 	.word	0x40020800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f95a 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <EXTI0_IRQHandler+0x6c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <EXTI0_IRQHandler+0x70>)
 8001454:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 8001456:	429a      	cmp	r2, r3
 8001458:	d205      	bcs.n	8001466 <EXTI0_IRQHandler+0x1e>
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <EXTI0_IRQHandler+0x70>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <EXTI0_IRQHandler+0x6c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	e004      	b.n	8001470 <EXTI0_IRQHandler+0x28>
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <EXTI0_IRQHandler+0x6c>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <EXTI0_IRQHandler+0x70>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1ad3      	subs	r3, r2, r3
	int gap =
 8001470:	607b      	str	r3, [r7, #4]

		if (gap > 30) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b1e      	cmp	r3, #30
 8001476:	dd15      	ble.n	80014a4 <EXTI0_IRQHandler+0x5c>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1) {
 8001478:	2101      	movs	r1, #1
 800147a:	4810      	ldr	r0, [pc, #64]	; (80014bc <EXTI0_IRQHandler+0x74>)
 800147c:	f000 fcc8 	bl	8001e10 <HAL_GPIO_ReadPin>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d10a      	bne.n	800149c <EXTI0_IRQHandler+0x54>
				input = input + 100;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <EXTI0_IRQHandler+0x78>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	3364      	adds	r3, #100	; 0x64
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <EXTI0_IRQHandler+0x78>)
 8001490:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <EXTI0_IRQHandler+0x6c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <EXTI0_IRQHandler+0x70>)
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e003      	b.n	80014a4 <EXTI0_IRQHandler+0x5c>
			} else {
				Old_Loop_Count = Loop_Count;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <EXTI0_IRQHandler+0x6c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <EXTI0_IRQHandler+0x70>)
 80014a2:	6013      	str	r3, [r2, #0]
			}
		}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 fcff 	bl	8001ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200000bc 	.word	0x200000bc
 80014b8:	200000c8 	.word	0x200000c8
 80014bc:	40020000 	.word	0x40020000
 80014c0:	200000c2 	.word	0x200000c2

080014c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <EXTI9_5_IRQHandler+0x68>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <EXTI9_5_IRQHandler+0x6c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d205      	bcs.n	80014e2 <EXTI9_5_IRQHandler+0x1e>
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <EXTI9_5_IRQHandler+0x6c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <EXTI9_5_IRQHandler+0x68>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	e004      	b.n	80014ec <EXTI9_5_IRQHandler+0x28>
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <EXTI9_5_IRQHandler+0x68>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <EXTI9_5_IRQHandler+0x6c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1ad3      	subs	r3, r2, r3
	int gap =
 80014ec:	607b      	str	r3, [r7, #4]

		if (gap > 10) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0a      	cmp	r3, #10
 80014f2:	dd13      	ble.n	800151c <EXTI9_5_IRQHandler+0x58>
			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9) == 1) {
 80014f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f8:	480e      	ldr	r0, [pc, #56]	; (8001534 <EXTI9_5_IRQHandler+0x70>)
 80014fa:	f000 fc89 	bl	8001e10 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <EXTI9_5_IRQHandler+0x50>
				input = 0;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <EXTI9_5_IRQHandler+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <EXTI9_5_IRQHandler+0x68>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <EXTI9_5_IRQHandler+0x6c>)
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e003      	b.n	800151c <EXTI9_5_IRQHandler+0x58>
			} else {
				Old_Loop_Count = Loop_Count;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <EXTI9_5_IRQHandler+0x68>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a05      	ldr	r2, [pc, #20]	; (8001530 <EXTI9_5_IRQHandler+0x6c>)
 800151a:	6013      	str	r3, [r2, #0]
			}
		}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800151c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001520:	f000 fcc2 	bl	8001ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200000bc 	.word	0x200000bc
 8001530:	200000c8 	.word	0x200000c8
 8001534:	40021400 	.word	0x40021400
 8001538:	200000c2 	.word	0x200000c2

0800153c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM3_IRQHandler+0x10>)
 8001542:	f001 fe5f 	bl	8003204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200000cc 	.word	0x200000cc

08001550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <USART1_IRQHandler+0x10>)
 8001556:	f002 fb67 	bl	8003c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000118 	.word	0x20000118

08001564 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	int gap =
				Loop_Count < Old_Loop_Count ?
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <EXTI15_10_IRQHandler+0x70>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <EXTI15_10_IRQHandler+0x74>)
 8001570:	681b      	ldr	r3, [r3, #0]
						Old_Loop_Count - Loop_Count : Loop_Count - Old_Loop_Count;
 8001572:	429a      	cmp	r2, r3
 8001574:	d205      	bcs.n	8001582 <EXTI15_10_IRQHandler+0x1e>
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <EXTI15_10_IRQHandler+0x74>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <EXTI15_10_IRQHandler+0x70>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	e004      	b.n	800158c <EXTI15_10_IRQHandler+0x28>
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <EXTI15_10_IRQHandler+0x70>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <EXTI15_10_IRQHandler+0x74>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	1ad3      	subs	r3, r2, r3
	int gap =
 800158c:	607b      	str	r3, [r7, #4]

		if (gap > 30) {
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b1e      	cmp	r3, #30
 8001592:	dd16      	ble.n	80015c2 <EXTI15_10_IRQHandler+0x5e>
			if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10) == 1) {
 8001594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001598:	4810      	ldr	r0, [pc, #64]	; (80015dc <EXTI15_10_IRQHandler+0x78>)
 800159a:	f000 fc39 	bl	8001e10 <HAL_GPIO_ReadPin>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10a      	bne.n	80015ba <EXTI15_10_IRQHandler+0x56>
				input += 1;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <EXTI15_10_IRQHandler+0x7c>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <EXTI15_10_IRQHandler+0x7c>)
 80015ae:	801a      	strh	r2, [r3, #0]
				Old_Loop_Count = Loop_Count;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <EXTI15_10_IRQHandler+0x70>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <EXTI15_10_IRQHandler+0x74>)
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e003      	b.n	80015c2 <EXTI15_10_IRQHandler+0x5e>
			} else {
				Old_Loop_Count = Loop_Count;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <EXTI15_10_IRQHandler+0x70>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <EXTI15_10_IRQHandler+0x74>)
 80015c0:	6013      	str	r3, [r2, #0]
			}

		}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015c6:	f000 fc6f 	bl	8001ea8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000bc 	.word	0x200000bc
 80015d8:	200000c8 	.word	0x200000c8
 80015dc:	40021400 	.word	0x40021400
 80015e0:	200000c2 	.word	0x200000c2

080015e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <USART6_IRQHandler+0x10>)
 80015ea:	f002 fb1d 	bl	8003c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001a0 	.word	0x200001a0

080015f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001622:	490e      	ldr	r1, [pc, #56]	; (800165c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001638:	4c0b      	ldr	r4, [pc, #44]	; (8001668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001646:	f7ff ffd7 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f003 fa67 	bl	8004b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff fa7f 	bl	8000b50 <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001660:	08004bc0 	.word	0x08004bc0
  ldr r2, =_sbss
 8001664:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001668:	20000228 	.word	0x20000228

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>

0800166e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001672:	2003      	movs	r0, #3
 8001674:	f000 f94c 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001678:	200f      	movs	r0, #15
 800167a:	f000 f805 	bl	8001688 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800167e:	f7ff fdbd 	bl	80011fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f967 	bl	800197a <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016c4:	f000 f92f 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000094 	.word	0x20000094
 80016e0:	2000009c 	.word	0x2000009c
 80016e4:	20000098 	.word	0x20000098

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2000009c 	.word	0x2000009c
 800170c:	20000224 	.word	0x20000224

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000224 	.word	0x20000224

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000009c 	.word	0x2000009c

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	4313      	orrs	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x40>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	05fa0000 	.word	0x05fa0000

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff3e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff31 	bl	80017d4 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff feb6 	bl	8001710 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d008      	beq.n	80019c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e052      	b.n	8001a6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0216 	bic.w	r2, r2, #22
 80019d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d103      	bne.n	80019f4 <HAL_DMA_Abort+0x62>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0208 	bic.w	r2, r2, #8
 8001a02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a14:	e013      	b.n	8001a3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a16:	f7ff fe7b 	bl	8001710 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d90c      	bls.n	8001a3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2220      	movs	r2, #32
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2203      	movs	r2, #3
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e015      	b.n	8001a6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1e4      	bne.n	8001a16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	223f      	movs	r2, #63	; 0x3f
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d004      	beq.n	8001a90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00c      	b.n	8001aaa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2205      	movs	r2, #5
 8001a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	e175      	b.n	8001dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 8164 	bne.w	8001dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d00b      	beq.n	8001b16 <HAL_GPIO_Init+0x5e>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d007      	beq.n	8001b16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0a:	2b11      	cmp	r3, #17
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d130      	bne.n	8001b78 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 0201 	and.w	r2, r3, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x100>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b12      	cmp	r3, #18
 8001bb6:	d123      	bne.n	8001c00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3208      	adds	r2, #8
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	69b9      	ldr	r1, [r7, #24]
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80be 	beq.w	8001dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c5a:	4a61      	ldr	r2, [pc, #388]	; (8001de0 <HAL_GPIO_Init+0x328>)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_GPIO_Init+0x32c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d037      	beq.n	8001cf6 <HAL_GPIO_Init+0x23e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a57      	ldr	r2, [pc, #348]	; (8001de8 <HAL_GPIO_Init+0x330>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d031      	beq.n	8001cf2 <HAL_GPIO_Init+0x23a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a56      	ldr	r2, [pc, #344]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02b      	beq.n	8001cee <HAL_GPIO_Init+0x236>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a55      	ldr	r2, [pc, #340]	; (8001df0 <HAL_GPIO_Init+0x338>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d025      	beq.n	8001cea <HAL_GPIO_Init+0x232>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a54      	ldr	r2, [pc, #336]	; (8001df4 <HAL_GPIO_Init+0x33c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_GPIO_Init+0x22e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a53      	ldr	r2, [pc, #332]	; (8001df8 <HAL_GPIO_Init+0x340>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x22a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a52      	ldr	r2, [pc, #328]	; (8001dfc <HAL_GPIO_Init+0x344>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x226>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a51      	ldr	r2, [pc, #324]	; (8001e00 <HAL_GPIO_Init+0x348>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x222>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a50      	ldr	r2, [pc, #320]	; (8001e04 <HAL_GPIO_Init+0x34c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x21e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4f      	ldr	r2, [pc, #316]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x21a>
 8001cce:	2309      	movs	r3, #9
 8001cd0:	e012      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	e010      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	e00e      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e00c      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e00a      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f002 0203 	and.w	r2, r2, #3
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d08:	4935      	ldr	r1, [pc, #212]	; (8001de0 <HAL_GPIO_Init+0x328>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	f67f ae86 	bls.w	8001ad8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021c00 	.word	0x40021c00
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40022400 	.word	0x40022400
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e001      	b.n	8001e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e5c:	e003      	b.n	8001e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	619a      	str	r2, [r3, #24]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e84:	887a      	ldrh	r2, [r7, #2]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	400b      	ands	r3, r1
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f806 	bl	8001ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f1e:	f7ff fbf7 	bl	8001710 <HAL_GetTick>
 8001f22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f24:	e009      	b.n	8001f3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f26:	f7ff fbf3 	bl	8001710 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f34:	d901      	bls.n	8001f3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e022      	b.n	8001f80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f46:	d1ee      	bne.n	8001f26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f54:	f7ff fbdc 	bl	8001710 <HAL_GetTick>
 8001f58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f5a:	e009      	b.n	8001f70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f5c:	f7ff fbd8 	bl	8001710 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f6a:	d901      	bls.n	8001f70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e007      	b.n	8001f80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f7c:	d1ee      	bne.n	8001f5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40007000 	.word	0x40007000

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e291      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb4:	4b96      	ldr	r3, [pc, #600]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d00c      	beq.n	8001fda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc0:	4b93      	ldr	r3, [pc, #588]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x62>
 8001fcc:	4b90      	ldr	r3, [pc, #576]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fda:	4b8d      	ldr	r3, [pc, #564]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x130>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d168      	bne.n	80020c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e26b      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x7a>
 8001ffc:	4b84      	ldr	r3, [pc, #528]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a83      	ldr	r2, [pc, #524]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02e      	b.n	8002068 <HAL_RCC_OscConfig+0xd8>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x9c>
 8002012:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a7b      	ldr	r2, [pc, #492]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xd8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xc0>
 8002036:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a75      	ldr	r2, [pc, #468]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b73      	ldr	r3, [pc, #460]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a72      	ldr	r2, [pc, #456]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xd8>
 8002050:	4b6f      	ldr	r3, [pc, #444]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6e      	ldr	r2, [pc, #440]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a6b      	ldr	r2, [pc, #428]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff fb4e 	bl	8001710 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fb4a 	bl	8001710 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e21f      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b61      	ldr	r3, [pc, #388]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xe8>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff fb3a 	bl	8001710 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff fb36 	bl	8001710 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e20b      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b57      	ldr	r3, [pc, #348]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x110>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d069      	beq.n	80021a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b4d      	ldr	r3, [pc, #308]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x190>
 80020e6:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x17a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1df      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b41      	ldr	r3, [pc, #260]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	493d      	ldr	r1, [pc, #244]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e040      	b.n	80021a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d023      	beq.n	8002170 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b39      	ldr	r3, [pc, #228]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a38      	ldr	r2, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff faec 	bl	8001710 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff fae8 	bl	8001710 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1bd      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4929      	ldr	r1, [pc, #164]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
 800216e:	e018      	b.n	80021a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a26      	ldr	r2, [pc, #152]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff fac8 	bl	8001710 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002184:	f7ff fac4 	bl	8001710 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e199      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d038      	beq.n	8002220 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d019      	beq.n	80021ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff faa5 	bl	8001710 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ca:	f7ff faa1 	bl	8001710 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e176      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80021de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x23a>
 80021e8:	e01a      	b.n	8002220 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80021ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <HAL_RCC_OscConfig+0x280>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f6:	f7ff fa8b 	bl	8001710 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fe:	f7ff fa87 	bl	8001710 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d903      	bls.n	8002214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e15c      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
 8002210:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b91      	ldr	r3, [pc, #580]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ee      	bne.n	80021fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a4 	beq.w	8002376 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	4b8b      	ldr	r3, [pc, #556]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a87      	ldr	r2, [pc, #540]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002252:	2301      	movs	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002262:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7e      	ldr	r2, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x4d0>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7ff fa4f 	bl	8001710 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002276:	f7ff fa4b 	bl	8001710 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e120      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002288:	4b75      	ldr	r3, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x4d0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d106      	bne.n	80022aa <HAL_RCC_OscConfig+0x31a>
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a6e      	ldr	r2, [pc, #440]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	e02d      	b.n	8002306 <HAL_RCC_OscConfig+0x376>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10c      	bne.n	80022cc <HAL_RCC_OscConfig+0x33c>
 80022b2:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a69      	ldr	r2, [pc, #420]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a66      	ldr	r2, [pc, #408]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ca:	e01c      	b.n	8002306 <HAL_RCC_OscConfig+0x376>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0x35e>
 80022d4:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	4a60      	ldr	r2, [pc, #384]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6713      	str	r3, [r2, #112]	; 0x70
 80022e0:	4b5e      	ldr	r3, [pc, #376]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	4a5d      	ldr	r2, [pc, #372]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6713      	str	r3, [r2, #112]	; 0x70
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0x376>
 80022ee:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	4a5a      	ldr	r2, [pc, #360]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6713      	str	r3, [r2, #112]	; 0x70
 80022fa:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d015      	beq.n	800233a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7ff f9ff 	bl	8001710 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff f9fb 	bl	8001710 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0ce      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	4b4b      	ldr	r3, [pc, #300]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ee      	beq.n	8002316 <HAL_RCC_OscConfig+0x386>
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7ff f9e9 	bl	8001710 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7ff f9e5 	bl	8001710 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0b8      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d105      	bne.n	8002376 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236a:	4b3c      	ldr	r3, [pc, #240]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a3b      	ldr	r2, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80a4 	beq.w	80024c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d06b      	beq.n	8002464 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d149      	bne.n	8002428 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a30      	ldr	r2, [pc, #192]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800239a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7ff f9b6 	bl	8001710 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7ff f9b2 	bl	8001710 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e087      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	3b01      	subs	r3, #1
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	4313      	orrs	r3, r2
 80023ec:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7ff f986 	bl	8001710 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f982 	bl	8001710 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e057      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x478>
 8002426:	e04f      	b.n	80024c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0b      	ldr	r2, [pc, #44]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 800242e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff f96c 	bl	8001710 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7ff f968 	bl	8001710 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e03d      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_RCC_OscConfig+0x4cc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x4ac>
 800245a:	e035      	b.n	80024c8 <HAL_RCC_OscConfig+0x538>
 800245c:	40023800 	.word	0x40023800
 8002460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x544>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d028      	beq.n	80024c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d121      	bne.n	80024c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d11a      	bne.n	80024c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002494:	4013      	ands	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800249a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800249c:	4293      	cmp	r3, r2
 800249e:	d111      	bne.n	80024c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	3b01      	subs	r3, #1
 80024ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0d0      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d910      	bls.n	8002520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b67      	ldr	r3, [pc, #412]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 020f 	bic.w	r2, r3, #15
 8002506:	4965      	ldr	r1, [pc, #404]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a52      	ldr	r2, [pc, #328]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800255a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d040      	beq.n	80025fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d115      	bne.n	80025ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e073      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06b      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ba:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 0203 	bic.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4936      	ldr	r1, [pc, #216]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025cc:	f7ff f8a0 	bl	8001710 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	e00a      	b.n	80025ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7ff f89c 	bl	8001710 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e053      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 020c 	and.w	r2, r3, #12
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d1eb      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d210      	bcs.n	800262c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 020f 	bic.w	r2, r3, #15
 8002612:	4922      	ldr	r1, [pc, #136]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f821 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490a      	ldr	r1, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x1cc>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <HAL_RCC_ClockConfig+0x1d4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fffc 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	08004b98 	.word	0x08004b98
 80026a8:	20000094 	.word	0x20000094
 80026ac:	20000098 	.word	0x20000098

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026b6:	2100      	movs	r1, #0
 80026b8:	6079      	str	r1, [r7, #4]
 80026ba:	2100      	movs	r1, #0
 80026bc:	60f9      	str	r1, [r7, #12]
 80026be:	2100      	movs	r1, #0
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80026c2:	2100      	movs	r1, #0
 80026c4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c6:	4952      	ldr	r1, [pc, #328]	; (8002810 <HAL_RCC_GetSysClockFreq+0x160>)
 80026c8:	6889      	ldr	r1, [r1, #8]
 80026ca:	f001 010c 	and.w	r1, r1, #12
 80026ce:	2908      	cmp	r1, #8
 80026d0:	d00d      	beq.n	80026ee <HAL_RCC_GetSysClockFreq+0x3e>
 80026d2:	2908      	cmp	r1, #8
 80026d4:	f200 8094 	bhi.w	8002800 <HAL_RCC_GetSysClockFreq+0x150>
 80026d8:	2900      	cmp	r1, #0
 80026da:	d002      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x32>
 80026dc:	2904      	cmp	r1, #4
 80026de:	d003      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x38>
 80026e0:	e08e      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e2:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_GetSysClockFreq+0x164>)
 80026e4:	60bb      	str	r3, [r7, #8]
      break;
 80026e6:	e08e      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026e8:	4b4b      	ldr	r3, [pc, #300]	; (8002818 <HAL_RCC_GetSysClockFreq+0x168>)
 80026ea:	60bb      	str	r3, [r7, #8]
      break;
 80026ec:	e08b      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ee:	4948      	ldr	r1, [pc, #288]	; (8002810 <HAL_RCC_GetSysClockFreq+0x160>)
 80026f0:	6849      	ldr	r1, [r1, #4]
 80026f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80026f6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026f8:	4945      	ldr	r1, [pc, #276]	; (8002810 <HAL_RCC_GetSysClockFreq+0x160>)
 80026fa:	6849      	ldr	r1, [r1, #4]
 80026fc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002700:	2900      	cmp	r1, #0
 8002702:	d024      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002704:	4942      	ldr	r1, [pc, #264]	; (8002810 <HAL_RCC_GetSysClockFreq+0x160>)
 8002706:	6849      	ldr	r1, [r1, #4]
 8002708:	0989      	lsrs	r1, r1, #6
 800270a:	4608      	mov	r0, r1
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002714:	f04f 0500 	mov.w	r5, #0
 8002718:	ea00 0204 	and.w	r2, r0, r4
 800271c:	ea01 0305 	and.w	r3, r1, r5
 8002720:	493d      	ldr	r1, [pc, #244]	; (8002818 <HAL_RCC_GetSysClockFreq+0x168>)
 8002722:	fb01 f003 	mul.w	r0, r1, r3
 8002726:	2100      	movs	r1, #0
 8002728:	fb01 f102 	mul.w	r1, r1, r2
 800272c:	1844      	adds	r4, r0, r1
 800272e:	493a      	ldr	r1, [pc, #232]	; (8002818 <HAL_RCC_GetSysClockFreq+0x168>)
 8002730:	fba2 0101 	umull	r0, r1, r2, r1
 8002734:	1863      	adds	r3, r4, r1
 8002736:	4619      	mov	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	f7fd fd62 	bl	8000208 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e04a      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_GetSysClockFreq+0x160>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	461a      	mov	r2, r3
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	ea02 0400 	and.w	r4, r2, r0
 8002766:	ea03 0501 	and.w	r5, r3, r1
 800276a:	4620      	mov	r0, r4
 800276c:	4629      	mov	r1, r5
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	014b      	lsls	r3, r1, #5
 8002778:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800277c:	0142      	lsls	r2, r0, #5
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	1b00      	subs	r0, r0, r4
 8002784:	eb61 0105 	sbc.w	r1, r1, r5
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	018b      	lsls	r3, r1, #6
 8002792:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002796:	0182      	lsls	r2, r0, #6
 8002798:	1a12      	subs	r2, r2, r0
 800279a:	eb63 0301 	sbc.w	r3, r3, r1
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	00d9      	lsls	r1, r3, #3
 80027a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027ac:	00d0      	lsls	r0, r2, #3
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	1912      	adds	r2, r2, r4
 80027b4:	eb45 0303 	adc.w	r3, r5, r3
 80027b8:	f04f 0000 	mov.w	r0, #0
 80027bc:	f04f 0100 	mov.w	r1, #0
 80027c0:	0299      	lsls	r1, r3, #10
 80027c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027c6:	0290      	lsls	r0, r2, #10
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	f7fd fd16 	bl	8000208 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_RCC_GetSysClockFreq+0x160>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	3301      	adds	r3, #1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	60bb      	str	r3, [r7, #8]
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_RCC_GetSysClockFreq+0x164>)
 8002802:	60bb      	str	r3, [r7, #8]
      break;
 8002804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002806:	68bb      	ldr	r3, [r7, #8]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bdb0      	pop	{r4, r5, r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	00f42400 	.word	0x00f42400
 8002818:	017d7840 	.word	0x017d7840

0800281c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCC_GetHCLKFreq+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000094 	.word	0x20000094

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff0 	bl	800281c <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0a9b      	lsrs	r3, r3, #10
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08004ba8 	.word	0x08004ba8

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffdc 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0b5b      	lsrs	r3, r3, #13
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	08004ba8 	.word	0x08004ba8

08002884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d012      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028ac:	4b69      	ldr	r3, [pc, #420]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028b6:	6093      	str	r3, [r2, #8]
 80028b8:	4b66      	ldr	r3, [pc, #408]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	4964      	ldr	r1, [pc, #400]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d017      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028de:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ec:	4959      	ldr	r1, [pc, #356]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028fc:	d101      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d017      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800291a:	4b4e      	ldr	r3, [pc, #312]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002920:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	494a      	ldr	r1, [pc, #296]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002938:	d101      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002946:	2301      	movs	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002956:	2301      	movs	r3, #1
 8002958:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 808b 	beq.w	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a39      	ldr	r2, [pc, #228]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
 8002974:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7fe fec0 	bl	8001710 <HAL_GetTick>
 8002990:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe febc 	bl	8001710 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e357      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d035      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d02e      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d114      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fe84 	bl	8001710 <HAL_GetTick>
 8002a08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fe80 	bl	8001710 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e319      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0ee      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a3a:	d111      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	4901      	ldr	r1, [pc, #4]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	0ffffcff 	.word	0x0ffffcff
 8002a60:	4bb1      	ldr	r3, [pc, #708]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4ab0      	ldr	r2, [pc, #704]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a6a:	6093      	str	r3, [r2, #8]
 8002a6c:	4bae      	ldr	r3, [pc, #696]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	49ab      	ldr	r1, [pc, #684]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d010      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a8a:	4ba7      	ldr	r3, [pc, #668]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a90:	4aa5      	ldr	r2, [pc, #660]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a9a:	4ba3      	ldr	r3, [pc, #652]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	49a0      	ldr	r1, [pc, #640]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ab8:	4b9b      	ldr	r3, [pc, #620]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac6:	4998      	ldr	r1, [pc, #608]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ada:	4b93      	ldr	r3, [pc, #588]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ae8:	498f      	ldr	r1, [pc, #572]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002afc:	4b8a      	ldr	r3, [pc, #552]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0a:	4987      	ldr	r1, [pc, #540]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b1e:	4b82      	ldr	r3, [pc, #520]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	497e      	ldr	r1, [pc, #504]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b40:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4976      	ldr	r1, [pc, #472]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b62:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f023 020c 	bic.w	r2, r3, #12
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	496d      	ldr	r1, [pc, #436]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	4965      	ldr	r1, [pc, #404]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ba6:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb4:	495c      	ldr	r1, [pc, #368]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc8:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	4954      	ldr	r1, [pc, #336]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bea:	4b4f      	ldr	r3, [pc, #316]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	494b      	ldr	r1, [pc, #300]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c0c:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	4943      	ldr	r1, [pc, #268]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3c:	493a      	ldr	r1, [pc, #232]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5e:	4932      	ldr	r1, [pc, #200]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d011      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c80:	4929      	ldr	r1, [pc, #164]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c90:	d101      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	4919      	ldr	r1, [pc, #100]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce4:	4910      	ldr	r1, [pc, #64]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d006      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80d9 	beq.w	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fd00 	bl	8001710 <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d12:	e00b      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d14:	f7fe fcfc 	bl	8001710 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d904      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e197      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ed      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d021      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11d      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d4c:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d5a:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d60:	0e1b      	lsrs	r3, r3, #24
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	019a      	lsls	r2, r3, #6
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	071b      	lsls	r3, r3, #28
 8002d80:	4957      	ldr	r1, [pc, #348]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02e      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db2:	d129      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dc2:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc8:	0f1b      	lsrs	r3, r3, #28
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	019a      	lsls	r2, r3, #6
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	041b      	lsls	r3, r3, #16
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	071b      	lsls	r3, r3, #28
 8002de8:	493d      	ldr	r1, [pc, #244]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002df0:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df6:	f023 021f 	bic.w	r2, r3, #31
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01d      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e14:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1a:	0e1b      	lsrs	r3, r3, #24
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e22:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e28:	0f1b      	lsrs	r3, r3, #28
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	019a      	lsls	r2, r3, #6
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	071b      	lsls	r3, r3, #28
 8002e48:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d011      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	019a      	lsls	r2, r3, #6
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	061b      	lsls	r3, r3, #24
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	071b      	lsls	r3, r3, #28
 8002e78:	4919      	ldr	r1, [pc, #100]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8c:	f7fe fc40 	bl	8001710 <HAL_GetTick>
 8002e90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e94:	f7fe fc3c 	bl	8001710 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0d7      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 80cd 	bne.w	8003054 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a08      	ldr	r2, [pc, #32]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fc23 	bl	8001710 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ece:	f7fe fc1f 	bl	8001710 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b64      	cmp	r3, #100	; 0x64
 8002eda:	d903      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0ba      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ee0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d0ed      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02e      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d12a      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f1a:	4b51      	ldr	r3, [pc, #324]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f28:	4b4d      	ldr	r3, [pc, #308]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	0f1b      	lsrs	r3, r3, #28
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	4944      	ldr	r1, [pc, #272]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f56:	4b42      	ldr	r3, [pc, #264]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	493d      	ldr	r1, [pc, #244]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d022      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f84:	d11d      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	0e1b      	lsrs	r3, r3, #24
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	0f1b      	lsrs	r3, r3, #28
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	019a      	lsls	r2, r3, #6
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	4929      	ldr	r1, [pc, #164]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d028      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fce:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	019a      	lsls	r2, r3, #6
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	071b      	lsls	r3, r3, #28
 8003002:	4917      	ldr	r1, [pc, #92]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800300c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	4911      	ldr	r1, [pc, #68]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302c:	f7fe fb70 	bl	8001710 <HAL_GetTick>
 8003030:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003034:	f7fe fb6c 	bl	8001710 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e007      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003052:	d1ef      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3720      	adds	r7, #32
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800

08003064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e049      	b.n	800310a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe f8e0 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	4610      	mov	r0, r2
 80030a4:	f000 fabc 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d001      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e054      	b.n	80031d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d022      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x80>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003156:	d01d      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x80>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x80>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a21      	ldr	r2, [pc, #132]	; (80031ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x80>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1f      	ldr	r2, [pc, #124]	; (80031f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x80>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x80>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x80>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <HAL_TIM_Base_Start_IT+0xe8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d115      	bne.n	80031c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_TIM_Base_Start_IT+0xec>)
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d015      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0xbe>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d011      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031be:	e008      	b.n	80031d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e000      	b.n	80031d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800
 80031f0:	40000c00 	.word	0x40000c00
 80031f4:	40010400 	.word	0x40010400
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40001800 	.word	0x40001800
 8003200:	00010007 	.word	0x00010007

08003204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d122      	bne.n	8003260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b02      	cmp	r3, #2
 8003226:	d11b      	bne.n	8003260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0202 	mvn.w	r2, #2
 8003230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f9cc 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f9be 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f9cf 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d122      	bne.n	80032b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0204 	mvn.w	r2, #4
 8003284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f9a2 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f994 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f9a5 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d122      	bne.n	8003308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d11b      	bne.n	8003308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0208 	mvn.w	r2, #8
 80032d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2204      	movs	r2, #4
 80032de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f978 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f96a 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f97b 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b10      	cmp	r3, #16
 8003314:	d122      	bne.n	800335c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b10      	cmp	r3, #16
 8003322:	d11b      	bne.n	800335c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0210 	mvn.w	r2, #16
 800332c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2208      	movs	r2, #8
 8003332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f94e 	bl	80035e4 <HAL_TIM_IC_CaptureCallback>
 8003348:	e005      	b.n	8003356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f940 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f951 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10e      	bne.n	8003388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0201 	mvn.w	r2, #1
 8003380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd fae6 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b80      	cmp	r3, #128	; 0x80
 8003394:	d10e      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d107      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fb08 	bl	80039c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c2:	d10e      	bne.n	80033e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d107      	bne.n	80033e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fafb 	bl	80039d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d10e      	bne.n	800340e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d107      	bne.n	800340e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003406:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8ff 	bl	800360c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d10e      	bne.n	800343a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b20      	cmp	r3, #32
 8003428:	d107      	bne.n	800343a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0220 	mvn.w	r2, #32
 8003432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fabb 	bl	80039b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_TIM_ConfigClockSource+0x18>
 8003458:	2302      	movs	r3, #2
 800345a:	e0b3      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x180>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4b55      	ldr	r3, [pc, #340]	; (80035cc <HAL_TIM_ConfigClockSource+0x188>)
 8003478:	4013      	ands	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003482:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003494:	d03e      	beq.n	8003514 <HAL_TIM_ConfigClockSource+0xd0>
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349a:	f200 8087 	bhi.w	80035ac <HAL_TIM_ConfigClockSource+0x168>
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	f000 8085 	beq.w	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	d87f      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x168>
 80034ac:	2b70      	cmp	r3, #112	; 0x70
 80034ae:	d01a      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0xa2>
 80034b0:	2b70      	cmp	r3, #112	; 0x70
 80034b2:	d87b      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x168>
 80034b4:	2b60      	cmp	r3, #96	; 0x60
 80034b6:	d050      	beq.n	800355a <HAL_TIM_ConfigClockSource+0x116>
 80034b8:	2b60      	cmp	r3, #96	; 0x60
 80034ba:	d877      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x168>
 80034bc:	2b50      	cmp	r3, #80	; 0x50
 80034be:	d03c      	beq.n	800353a <HAL_TIM_ConfigClockSource+0xf6>
 80034c0:	2b50      	cmp	r3, #80	; 0x50
 80034c2:	d873      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x168>
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d058      	beq.n	800357a <HAL_TIM_ConfigClockSource+0x136>
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d86f      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x168>
 80034cc:	2b30      	cmp	r3, #48	; 0x30
 80034ce:	d064      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x156>
 80034d0:	2b30      	cmp	r3, #48	; 0x30
 80034d2:	d86b      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x168>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d060      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x156>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d867      	bhi.n	80035ac <HAL_TIM_ConfigClockSource+0x168>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d05c      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x156>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d05a      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034e4:	e062      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6899      	ldr	r1, [r3, #8]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f000 f9ad 	bl	8003854 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003508:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	609a      	str	r2, [r3, #8]
      break;
 8003512:	e04e      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f000 f996 	bl	8003854 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003536:	609a      	str	r2, [r3, #8]
      break;
 8003538:	e03b      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6859      	ldr	r1, [r3, #4]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	461a      	mov	r2, r3
 8003548:	f000 f90a 	bl	8003760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2150      	movs	r1, #80	; 0x50
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f963 	bl	800381e <TIM_ITRx_SetConfig>
      break;
 8003558:	e02b      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	461a      	mov	r2, r3
 8003568:	f000 f929 	bl	80037be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2160      	movs	r1, #96	; 0x60
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f953 	bl	800381e <TIM_ITRx_SetConfig>
      break;
 8003578:	e01b      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	f000 f8ea 	bl	8003760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2140      	movs	r1, #64	; 0x40
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f943 	bl	800381e <TIM_ITRx_SetConfig>
      break;
 8003598:	e00b      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f000 f93a 	bl	800381e <TIM_ITRx_SetConfig>
        break;
 80035aa:	e002      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	fffeff88 	.word	0xfffeff88

080035d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a40      	ldr	r2, [pc, #256]	; (8003734 <TIM_Base_SetConfig+0x114>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d013      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d00f      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3d      	ldr	r2, [pc, #244]	; (8003738 <TIM_Base_SetConfig+0x118>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00b      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3c      	ldr	r2, [pc, #240]	; (800373c <TIM_Base_SetConfig+0x11c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3b      	ldr	r2, [pc, #236]	; (8003740 <TIM_Base_SetConfig+0x120>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3a      	ldr	r2, [pc, #232]	; (8003744 <TIM_Base_SetConfig+0x124>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a2f      	ldr	r2, [pc, #188]	; (8003734 <TIM_Base_SetConfig+0x114>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02b      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d027      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <TIM_Base_SetConfig+0x118>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d023      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2b      	ldr	r2, [pc, #172]	; (800373c <TIM_Base_SetConfig+0x11c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01f      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <TIM_Base_SetConfig+0x120>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01b      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a29      	ldr	r2, [pc, #164]	; (8003744 <TIM_Base_SetConfig+0x124>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d017      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a28      	ldr	r2, [pc, #160]	; (8003748 <TIM_Base_SetConfig+0x128>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <TIM_Base_SetConfig+0x12c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00f      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a26      	ldr	r2, [pc, #152]	; (8003750 <TIM_Base_SetConfig+0x130>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00b      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a25      	ldr	r2, [pc, #148]	; (8003754 <TIM_Base_SetConfig+0x134>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a24      	ldr	r2, [pc, #144]	; (8003758 <TIM_Base_SetConfig+0x138>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a23      	ldr	r2, [pc, #140]	; (800375c <TIM_Base_SetConfig+0x13c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d108      	bne.n	80036e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <TIM_Base_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_Base_SetConfig+0xf8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <TIM_Base_SetConfig+0x124>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d103      	bne.n	8003720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	615a      	str	r2, [r3, #20]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40010400 	.word	0x40010400
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800
 8003754:	40001800 	.word	0x40001800
 8003758:	40001c00 	.word	0x40001c00
 800375c:	40002000 	.word	0x40002000

08003760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f023 0201 	bic.w	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f023 030a 	bic.w	r3, r3, #10
 800379c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037be:	b480      	push	{r7}
 80037c0:	b087      	sub	sp, #28
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0210 	bic.w	r2, r3, #16
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	031b      	lsls	r3, r3, #12
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4313      	orrs	r3, r2
 800383c:	f043 0307 	orr.w	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	609a      	str	r2, [r3, #8]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	431a      	orrs	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	609a      	str	r2, [r3, #8]
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e06d      	b.n	8003988 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a30      	ldr	r2, [pc, #192]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d108      	bne.n	80038f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a20      	ldr	r2, [pc, #128]	; (8003994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d022      	beq.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391e:	d01d      	beq.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d018      	beq.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a15      	ldr	r2, [pc, #84]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d10c      	bne.n	8003976 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003962:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	4313      	orrs	r3, r2
 800396c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40010000 	.word	0x40010000
 8003998:	40010400 	.word	0x40010400
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40001800 	.word	0x40001800

080039b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e040      	b.n	8003a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fc44 	bl	800129c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fb08 	bl	8004040 <UART_SetConfig>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e022      	b.n	8003a80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fd5e 	bl	8004504 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fde5 	bl	8004648 <UART_CheckIdleState>
 8003a7e:	4603      	mov	r3, r0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	f040 8081 	bne.w	8003ba4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_Transmit+0x26>
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e079      	b.n	8003ba6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_UART_Transmit+0x38>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e072      	b.n	8003ba6 <HAL_UART_Transmit+0x11e>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	; 0x21
 8003ad4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fd fe1b 	bl	8001710 <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x80>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b18:	e02c      	b.n	8003b74 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fdc2 	bl	80046ae <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e038      	b.n	8003ba6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1cc      	bne.n	8003b1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fd8f 	bl	80046ae <UART_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e005      	b.n	8003ba6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d12c      	bne.n	8003c1e <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_UART_Receive_IT+0x22>
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e025      	b.n	8003c20 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_UART_Receive_IT+0x34>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e01e      	b.n	8003c20 <HAL_UART_Receive_IT+0x72>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c0c:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	461a      	mov	r2, r3
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fdc7 	bl	80047a8 <UART_Start_Receive_IT>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	e000      	b.n	8003c20 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d113      	bne.n	8003c80 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00e      	beq.n	8003c80 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 81b9 	beq.w	8003fe8 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
      }
      return;
 8003c7e:	e1b3      	b.n	8003fe8 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80e3 	beq.w	8003e4e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4ba5      	ldr	r3, [pc, #660]	; (8003f2c <HAL_UART_IRQHandler+0x304>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80d8 	beq.w	8003e4e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_UART_IRQHandler+0xa2>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d010      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xce>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d010      	beq.n	8003d22 <HAL_UART_IRQHandler+0xfa>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d18:	f043 0202 	orr.w	r2, r3, #2
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d015      	beq.n	8003d58 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4e:	f043 0208 	orr.w	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_UART_IRQHandler+0x15e>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00c      	beq.n	8003d86 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 812d 	beq.w	8003fec <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00c      	beq.n	8003db6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d004      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d031      	beq.n	8003e3a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fd6e 	bl	80048b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d123      	bne.n	8003e32 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <HAL_UART_IRQHandler+0x308>)
 8003e08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fe2f 	bl	8001a72 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8f2 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8ee 	bl	8004014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e007      	b.n	8003e4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f8ea 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e48:	e0d0      	b.n	8003fec <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	bf00      	nop
    return;
 8003e4c:	e0ce      	b.n	8003fec <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	f040 80a7 	bne.w	8003fa6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a1 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 809b 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2210      	movs	r2, #16
 8003e76:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d156      	bne.n	8003f34 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80ac 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e9e:	893a      	ldrh	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	f080 80a5 	bcs.w	8003ff0 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	893a      	ldrh	r2, [r7, #8]
 8003eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb8:	d02a      	beq.n	8003f10 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0210 	bic.w	r2, r2, #16
 8003f04:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd fd41 	bl	8001992 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f87f 	bl	8004028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f2a:	e061      	b.n	8003ff0 <HAL_UART_IRQHandler+0x3c8>
 8003f2c:	04000120 	.word	0x04000120
 8003f30:	08004917 	.word	0x08004917
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d050      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d04d      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f66:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0210 	bic.w	r2, r2, #16
 8003f98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f842 	bl	8004028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fa4:	e026      	b.n	8003ff4 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00d      	beq.n	8003fcc <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01a      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
    }
    return;
 8003fca:	e015      	b.n	8003ff8 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d011      	beq.n	8003ffa <HAL_UART_IRQHandler+0x3d2>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00c      	beq.n	8003ffa <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fcae 	bl	8004942 <UART_EndTransmit_IT>
    return;
 8003fe6:	e008      	b.n	8003ffa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003fe8:	bf00      	nop
 8003fea:	e006      	b.n	8003ffa <HAL_UART_IRQHandler+0x3d2>
    return;
 8003fec:	bf00      	nop
 8003fee:	e004      	b.n	8003ffa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003ff0:	bf00      	nop
 8003ff2:	e002      	b.n	8003ffa <HAL_UART_IRQHandler+0x3d2>
      return;
 8003ff4:	bf00      	nop
 8003ff6:	e000      	b.n	8003ffa <HAL_UART_IRQHandler+0x3d2>
    return;
 8003ff8:	bf00      	nop
  }

}
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4ba7      	ldr	r3, [pc, #668]	; (8004308 <UART_SetConfig+0x2c8>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	6979      	ldr	r1, [r7, #20]
 8004074:	430b      	orrs	r3, r1
 8004076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a95      	ldr	r2, [pc, #596]	; (800430c <UART_SetConfig+0x2cc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d120      	bne.n	80040fe <UART_SetConfig+0xbe>
 80040bc:	4b94      	ldr	r3, [pc, #592]	; (8004310 <UART_SetConfig+0x2d0>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d816      	bhi.n	80040f8 <UART_SetConfig+0xb8>
 80040ca:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <UART_SetConfig+0x90>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	080040e1 	.word	0x080040e1
 80040d4:	080040ed 	.word	0x080040ed
 80040d8:	080040e7 	.word	0x080040e7
 80040dc:	080040f3 	.word	0x080040f3
 80040e0:	2301      	movs	r3, #1
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e14f      	b.n	8004386 <UART_SetConfig+0x346>
 80040e6:	2302      	movs	r3, #2
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e14c      	b.n	8004386 <UART_SetConfig+0x346>
 80040ec:	2304      	movs	r3, #4
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e149      	b.n	8004386 <UART_SetConfig+0x346>
 80040f2:	2308      	movs	r3, #8
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e146      	b.n	8004386 <UART_SetConfig+0x346>
 80040f8:	2310      	movs	r3, #16
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e143      	b.n	8004386 <UART_SetConfig+0x346>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a84      	ldr	r2, [pc, #528]	; (8004314 <UART_SetConfig+0x2d4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d132      	bne.n	800416e <UART_SetConfig+0x12e>
 8004108:	4b81      	ldr	r3, [pc, #516]	; (8004310 <UART_SetConfig+0x2d0>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d828      	bhi.n	8004168 <UART_SetConfig+0x128>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0xdc>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	08004151 	.word	0x08004151
 8004120:	08004169 	.word	0x08004169
 8004124:	08004169 	.word	0x08004169
 8004128:	08004169 	.word	0x08004169
 800412c:	0800415d 	.word	0x0800415d
 8004130:	08004169 	.word	0x08004169
 8004134:	08004169 	.word	0x08004169
 8004138:	08004169 	.word	0x08004169
 800413c:	08004157 	.word	0x08004157
 8004140:	08004169 	.word	0x08004169
 8004144:	08004169 	.word	0x08004169
 8004148:	08004169 	.word	0x08004169
 800414c:	08004163 	.word	0x08004163
 8004150:	2300      	movs	r3, #0
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e117      	b.n	8004386 <UART_SetConfig+0x346>
 8004156:	2302      	movs	r3, #2
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e114      	b.n	8004386 <UART_SetConfig+0x346>
 800415c:	2304      	movs	r3, #4
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e111      	b.n	8004386 <UART_SetConfig+0x346>
 8004162:	2308      	movs	r3, #8
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e10e      	b.n	8004386 <UART_SetConfig+0x346>
 8004168:	2310      	movs	r3, #16
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e10b      	b.n	8004386 <UART_SetConfig+0x346>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a69      	ldr	r2, [pc, #420]	; (8004318 <UART_SetConfig+0x2d8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d120      	bne.n	80041ba <UART_SetConfig+0x17a>
 8004178:	4b65      	ldr	r3, [pc, #404]	; (8004310 <UART_SetConfig+0x2d0>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004182:	2b30      	cmp	r3, #48	; 0x30
 8004184:	d013      	beq.n	80041ae <UART_SetConfig+0x16e>
 8004186:	2b30      	cmp	r3, #48	; 0x30
 8004188:	d814      	bhi.n	80041b4 <UART_SetConfig+0x174>
 800418a:	2b20      	cmp	r3, #32
 800418c:	d009      	beq.n	80041a2 <UART_SetConfig+0x162>
 800418e:	2b20      	cmp	r3, #32
 8004190:	d810      	bhi.n	80041b4 <UART_SetConfig+0x174>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <UART_SetConfig+0x15c>
 8004196:	2b10      	cmp	r3, #16
 8004198:	d006      	beq.n	80041a8 <UART_SetConfig+0x168>
 800419a:	e00b      	b.n	80041b4 <UART_SetConfig+0x174>
 800419c:	2300      	movs	r3, #0
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e0f1      	b.n	8004386 <UART_SetConfig+0x346>
 80041a2:	2302      	movs	r3, #2
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e0ee      	b.n	8004386 <UART_SetConfig+0x346>
 80041a8:	2304      	movs	r3, #4
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e0eb      	b.n	8004386 <UART_SetConfig+0x346>
 80041ae:	2308      	movs	r3, #8
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e0e8      	b.n	8004386 <UART_SetConfig+0x346>
 80041b4:	2310      	movs	r3, #16
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e0e5      	b.n	8004386 <UART_SetConfig+0x346>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a57      	ldr	r2, [pc, #348]	; (800431c <UART_SetConfig+0x2dc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d120      	bne.n	8004206 <UART_SetConfig+0x1c6>
 80041c4:	4b52      	ldr	r3, [pc, #328]	; (8004310 <UART_SetConfig+0x2d0>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041ce:	2bc0      	cmp	r3, #192	; 0xc0
 80041d0:	d013      	beq.n	80041fa <UART_SetConfig+0x1ba>
 80041d2:	2bc0      	cmp	r3, #192	; 0xc0
 80041d4:	d814      	bhi.n	8004200 <UART_SetConfig+0x1c0>
 80041d6:	2b80      	cmp	r3, #128	; 0x80
 80041d8:	d009      	beq.n	80041ee <UART_SetConfig+0x1ae>
 80041da:	2b80      	cmp	r3, #128	; 0x80
 80041dc:	d810      	bhi.n	8004200 <UART_SetConfig+0x1c0>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <UART_SetConfig+0x1a8>
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d006      	beq.n	80041f4 <UART_SetConfig+0x1b4>
 80041e6:	e00b      	b.n	8004200 <UART_SetConfig+0x1c0>
 80041e8:	2300      	movs	r3, #0
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e0cb      	b.n	8004386 <UART_SetConfig+0x346>
 80041ee:	2302      	movs	r3, #2
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e0c8      	b.n	8004386 <UART_SetConfig+0x346>
 80041f4:	2304      	movs	r3, #4
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e0c5      	b.n	8004386 <UART_SetConfig+0x346>
 80041fa:	2308      	movs	r3, #8
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e0c2      	b.n	8004386 <UART_SetConfig+0x346>
 8004200:	2310      	movs	r3, #16
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e0bf      	b.n	8004386 <UART_SetConfig+0x346>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a45      	ldr	r2, [pc, #276]	; (8004320 <UART_SetConfig+0x2e0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d125      	bne.n	800425c <UART_SetConfig+0x21c>
 8004210:	4b3f      	ldr	r3, [pc, #252]	; (8004310 <UART_SetConfig+0x2d0>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800421e:	d017      	beq.n	8004250 <UART_SetConfig+0x210>
 8004220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004224:	d817      	bhi.n	8004256 <UART_SetConfig+0x216>
 8004226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422a:	d00b      	beq.n	8004244 <UART_SetConfig+0x204>
 800422c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004230:	d811      	bhi.n	8004256 <UART_SetConfig+0x216>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <UART_SetConfig+0x1fe>
 8004236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423a:	d006      	beq.n	800424a <UART_SetConfig+0x20a>
 800423c:	e00b      	b.n	8004256 <UART_SetConfig+0x216>
 800423e:	2300      	movs	r3, #0
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e0a0      	b.n	8004386 <UART_SetConfig+0x346>
 8004244:	2302      	movs	r3, #2
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e09d      	b.n	8004386 <UART_SetConfig+0x346>
 800424a:	2304      	movs	r3, #4
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e09a      	b.n	8004386 <UART_SetConfig+0x346>
 8004250:	2308      	movs	r3, #8
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e097      	b.n	8004386 <UART_SetConfig+0x346>
 8004256:	2310      	movs	r3, #16
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e094      	b.n	8004386 <UART_SetConfig+0x346>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a30      	ldr	r2, [pc, #192]	; (8004324 <UART_SetConfig+0x2e4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d125      	bne.n	80042b2 <UART_SetConfig+0x272>
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <UART_SetConfig+0x2d0>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004270:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004274:	d017      	beq.n	80042a6 <UART_SetConfig+0x266>
 8004276:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800427a:	d817      	bhi.n	80042ac <UART_SetConfig+0x26c>
 800427c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004280:	d00b      	beq.n	800429a <UART_SetConfig+0x25a>
 8004282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004286:	d811      	bhi.n	80042ac <UART_SetConfig+0x26c>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <UART_SetConfig+0x254>
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004290:	d006      	beq.n	80042a0 <UART_SetConfig+0x260>
 8004292:	e00b      	b.n	80042ac <UART_SetConfig+0x26c>
 8004294:	2301      	movs	r3, #1
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e075      	b.n	8004386 <UART_SetConfig+0x346>
 800429a:	2302      	movs	r3, #2
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e072      	b.n	8004386 <UART_SetConfig+0x346>
 80042a0:	2304      	movs	r3, #4
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e06f      	b.n	8004386 <UART_SetConfig+0x346>
 80042a6:	2308      	movs	r3, #8
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e06c      	b.n	8004386 <UART_SetConfig+0x346>
 80042ac:	2310      	movs	r3, #16
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e069      	b.n	8004386 <UART_SetConfig+0x346>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <UART_SetConfig+0x2e8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d137      	bne.n	800432c <UART_SetConfig+0x2ec>
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <UART_SetConfig+0x2d0>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042ca:	d017      	beq.n	80042fc <UART_SetConfig+0x2bc>
 80042cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042d0:	d817      	bhi.n	8004302 <UART_SetConfig+0x2c2>
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d6:	d00b      	beq.n	80042f0 <UART_SetConfig+0x2b0>
 80042d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042dc:	d811      	bhi.n	8004302 <UART_SetConfig+0x2c2>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <UART_SetConfig+0x2aa>
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e6:	d006      	beq.n	80042f6 <UART_SetConfig+0x2b6>
 80042e8:	e00b      	b.n	8004302 <UART_SetConfig+0x2c2>
 80042ea:	2300      	movs	r3, #0
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e04a      	b.n	8004386 <UART_SetConfig+0x346>
 80042f0:	2302      	movs	r3, #2
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e047      	b.n	8004386 <UART_SetConfig+0x346>
 80042f6:	2304      	movs	r3, #4
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e044      	b.n	8004386 <UART_SetConfig+0x346>
 80042fc:	2308      	movs	r3, #8
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e041      	b.n	8004386 <UART_SetConfig+0x346>
 8004302:	2310      	movs	r3, #16
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e03e      	b.n	8004386 <UART_SetConfig+0x346>
 8004308:	efff69f3 	.word	0xefff69f3
 800430c:	40011000 	.word	0x40011000
 8004310:	40023800 	.word	0x40023800
 8004314:	40004400 	.word	0x40004400
 8004318:	40004800 	.word	0x40004800
 800431c:	40004c00 	.word	0x40004c00
 8004320:	40005000 	.word	0x40005000
 8004324:	40011400 	.word	0x40011400
 8004328:	40007800 	.word	0x40007800
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a71      	ldr	r2, [pc, #452]	; (80044f8 <UART_SetConfig+0x4b8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d125      	bne.n	8004382 <UART_SetConfig+0x342>
 8004336:	4b71      	ldr	r3, [pc, #452]	; (80044fc <UART_SetConfig+0x4bc>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004340:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004344:	d017      	beq.n	8004376 <UART_SetConfig+0x336>
 8004346:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800434a:	d817      	bhi.n	800437c <UART_SetConfig+0x33c>
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004350:	d00b      	beq.n	800436a <UART_SetConfig+0x32a>
 8004352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004356:	d811      	bhi.n	800437c <UART_SetConfig+0x33c>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <UART_SetConfig+0x324>
 800435c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004360:	d006      	beq.n	8004370 <UART_SetConfig+0x330>
 8004362:	e00b      	b.n	800437c <UART_SetConfig+0x33c>
 8004364:	2300      	movs	r3, #0
 8004366:	77fb      	strb	r3, [r7, #31]
 8004368:	e00d      	b.n	8004386 <UART_SetConfig+0x346>
 800436a:	2302      	movs	r3, #2
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e00a      	b.n	8004386 <UART_SetConfig+0x346>
 8004370:	2304      	movs	r3, #4
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e007      	b.n	8004386 <UART_SetConfig+0x346>
 8004376:	2308      	movs	r3, #8
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e004      	b.n	8004386 <UART_SetConfig+0x346>
 800437c:	2310      	movs	r3, #16
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e001      	b.n	8004386 <UART_SetConfig+0x346>
 8004382:	2310      	movs	r3, #16
 8004384:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800438e:	d15b      	bne.n	8004448 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004390:	7ffb      	ldrb	r3, [r7, #31]
 8004392:	2b08      	cmp	r3, #8
 8004394:	d827      	bhi.n	80043e6 <UART_SetConfig+0x3a6>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <UART_SetConfig+0x35c>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043c9 	.word	0x080043c9
 80043a4:	080043d1 	.word	0x080043d1
 80043a8:	080043e7 	.word	0x080043e7
 80043ac:	080043d7 	.word	0x080043d7
 80043b0:	080043e7 	.word	0x080043e7
 80043b4:	080043e7 	.word	0x080043e7
 80043b8:	080043e7 	.word	0x080043e7
 80043bc:	080043df 	.word	0x080043df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c0:	f7fe fa38 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 80043c4:	61b8      	str	r0, [r7, #24]
        break;
 80043c6:	e013      	b.n	80043f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043c8:	f7fe fa48 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 80043cc:	61b8      	str	r0, [r7, #24]
        break;
 80043ce:	e00f      	b.n	80043f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d0:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <UART_SetConfig+0x4c0>)
 80043d2:	61bb      	str	r3, [r7, #24]
        break;
 80043d4:	e00c      	b.n	80043f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d6:	f7fe f96b 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 80043da:	61b8      	str	r0, [r7, #24]
        break;
 80043dc:	e008      	b.n	80043f0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e2:	61bb      	str	r3, [r7, #24]
        break;
 80043e4:	e004      	b.n	80043f0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	77bb      	strb	r3, [r7, #30]
        break;
 80043ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d074      	beq.n	80044e0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	005a      	lsls	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	fbb2 f3f3 	udiv	r3, r2, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b0f      	cmp	r3, #15
 8004412:	d916      	bls.n	8004442 <UART_SetConfig+0x402>
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441a:	d212      	bcs.n	8004442 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f023 030f 	bic.w	r3, r3, #15
 8004424:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	b29b      	uxth	r3, r3
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	b29a      	uxth	r2, r3
 8004432:	89fb      	ldrh	r3, [r7, #14]
 8004434:	4313      	orrs	r3, r2
 8004436:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	89fa      	ldrh	r2, [r7, #14]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	e04e      	b.n	80044e0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	77bb      	strb	r3, [r7, #30]
 8004446:	e04b      	b.n	80044e0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004448:	7ffb      	ldrb	r3, [r7, #31]
 800444a:	2b08      	cmp	r3, #8
 800444c:	d827      	bhi.n	800449e <UART_SetConfig+0x45e>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x414>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004479 	.word	0x08004479
 8004458:	08004481 	.word	0x08004481
 800445c:	08004489 	.word	0x08004489
 8004460:	0800449f 	.word	0x0800449f
 8004464:	0800448f 	.word	0x0800448f
 8004468:	0800449f 	.word	0x0800449f
 800446c:	0800449f 	.word	0x0800449f
 8004470:	0800449f 	.word	0x0800449f
 8004474:	08004497 	.word	0x08004497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7fe f9dc 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 800447c:	61b8      	str	r0, [r7, #24]
        break;
 800447e:	e013      	b.n	80044a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004480:	f7fe f9ec 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 8004484:	61b8      	str	r0, [r7, #24]
        break;
 8004486:	e00f      	b.n	80044a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <UART_SetConfig+0x4c0>)
 800448a:	61bb      	str	r3, [r7, #24]
        break;
 800448c:	e00c      	b.n	80044a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe f90f 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 8004492:	61b8      	str	r0, [r7, #24]
        break;
 8004494:	e008      	b.n	80044a8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	61bb      	str	r3, [r7, #24]
        break;
 800449c:	e004      	b.n	80044a8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	77bb      	strb	r3, [r7, #30]
        break;
 80044a6:	bf00      	nop
    }

    if (pclk != 0U)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d018      	beq.n	80044e0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	085a      	lsrs	r2, r3, #1
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	441a      	add	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	d908      	bls.n	80044dc <UART_SetConfig+0x49c>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d204      	bcs.n	80044dc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	e001      	b.n	80044e0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40007c00 	.word	0x40007c00
 80044fc:	40023800 	.word	0x40023800
 8004500:	00f42400 	.word	0x00f42400

08004504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01a      	beq.n	800461a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004602:	d10a      	bne.n	800461a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af02      	add	r7, sp, #8
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004658:	f7fd f85a 	bl	8001710 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b08      	cmp	r3, #8
 800466a:	d10e      	bne.n	800468a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f817 	bl	80046ae <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e00d      	b.n	80046a6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046be:	e05e      	b.n	800477e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c6:	d05a      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7fd f822 	bl	8001710 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <UART_WaitOnFlagUntilTimeout+0x30>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d11b      	bne.n	8004716 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e043      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02c      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004732:	d124      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800473c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800474c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00f      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	429a      	cmp	r2, r3
 800479a:	d091      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	88fa      	ldrh	r2, [r7, #6]
 80047c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	88fa      	ldrh	r2, [r7, #6]
 80047c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	d10e      	bne.n	80047fa <UART_Start_Receive_IT+0x52>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <UART_Start_Receive_IT+0x48>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047ee:	e02d      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	22ff      	movs	r2, #255	; 0xff
 80047f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047f8:	e028      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10d      	bne.n	800481e <UART_Start_Receive_IT+0x76>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <UART_Start_Receive_IT+0x6c>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	22ff      	movs	r2, #255	; 0xff
 800480e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004812:	e01b      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	227f      	movs	r2, #127	; 0x7f
 8004818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800481c:	e016      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004826:	d10d      	bne.n	8004844 <UART_Start_Receive_IT+0x9c>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <UART_Start_Receive_IT+0x92>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	227f      	movs	r2, #127	; 0x7f
 8004834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004838:	e008      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	223f      	movs	r2, #63	; 0x3f
 800483e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004842:	e003      	b.n	800484c <UART_Start_Receive_IT+0xa4>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2222      	movs	r2, #34	; 0x22
 8004858:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004872:	d107      	bne.n	8004884 <UART_Start_Receive_IT+0xdc>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d103      	bne.n	8004884 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a0c      	ldr	r2, [pc, #48]	; (80048b0 <UART_Start_Receive_IT+0x108>)
 8004880:	665a      	str	r2, [r3, #100]	; 0x64
 8004882:	e002      	b.n	800488a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a0b      	ldr	r2, [pc, #44]	; (80048b4 <UART_Start_Receive_IT+0x10c>)
 8004888:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80048a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	08004a49 	.word	0x08004a49
 80048b4:	08004975 	.word	0x08004975

080048b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d107      	bne.n	80048f8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0210 	bic.w	r2, r2, #16
 80048f6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	665a      	str	r2, [r3, #100]	; 0x64
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff fb6d 	bl	8004014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004958:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fb4a 	bl	8004000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004982:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004988:	2b22      	cmp	r3, #34	; 0x22
 800498a:	d151      	bne.n	8004a30 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004994:	89bb      	ldrh	r3, [r7, #12]
 8004996:	b2d9      	uxtb	r1, r3
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	b2da      	uxtb	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	400a      	ands	r2, r1
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d138      	bne.n	8004a40 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049dc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d10f      	bne.n	8004a22 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0210 	bic.w	r2, r2, #16
 8004a10:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fb04 	bl	8004028 <HAL_UARTEx_RxEventCallback>
 8004a20:	e002      	b.n	8004a28 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fb ff64 	bl	80008f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a2e:	e007      	b.n	8004a40 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0208 	orr.w	r2, r2, #8
 8004a3e:	619a      	str	r2, [r3, #24]
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a56:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a5c:	2b22      	cmp	r3, #34	; 0x22
 8004a5e:	d151      	bne.n	8004b04 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a6e:	89ba      	ldrh	r2, [r7, #12]
 8004a70:	89fb      	ldrh	r3, [r7, #14]
 8004a72:	4013      	ands	r3, r2
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	1c9a      	adds	r2, r3, #2
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d138      	bne.n	8004b14 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ab0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d10f      	bne.n	8004af6 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0210 	bic.w	r2, r2, #16
 8004ae4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fa9a 	bl	8004028 <HAL_UARTEx_RxEventCallback>
 8004af4:	e002      	b.n	8004afc <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fb fefa 	bl	80008f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b02:	e007      	b.n	8004b14 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0208 	orr.w	r2, r2, #8
 8004b12:	619a      	str	r2, [r3, #24]
}
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <__libc_init_array>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4d0d      	ldr	r5, [pc, #52]	; (8004b54 <__libc_init_array+0x38>)
 8004b20:	4c0d      	ldr	r4, [pc, #52]	; (8004b58 <__libc_init_array+0x3c>)
 8004b22:	1b64      	subs	r4, r4, r5
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	2600      	movs	r6, #0
 8004b28:	42a6      	cmp	r6, r4
 8004b2a:	d109      	bne.n	8004b40 <__libc_init_array+0x24>
 8004b2c:	4d0b      	ldr	r5, [pc, #44]	; (8004b5c <__libc_init_array+0x40>)
 8004b2e:	4c0c      	ldr	r4, [pc, #48]	; (8004b60 <__libc_init_array+0x44>)
 8004b30:	f000 f820 	bl	8004b74 <_init>
 8004b34:	1b64      	subs	r4, r4, r5
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	2600      	movs	r6, #0
 8004b3a:	42a6      	cmp	r6, r4
 8004b3c:	d105      	bne.n	8004b4a <__libc_init_array+0x2e>
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b44:	4798      	blx	r3
 8004b46:	3601      	adds	r6, #1
 8004b48:	e7ee      	b.n	8004b28 <__libc_init_array+0xc>
 8004b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4e:	4798      	blx	r3
 8004b50:	3601      	adds	r6, #1
 8004b52:	e7f2      	b.n	8004b3a <__libc_init_array+0x1e>
 8004b54:	08004bb8 	.word	0x08004bb8
 8004b58:	08004bb8 	.word	0x08004bb8
 8004b5c:	08004bb8 	.word	0x08004bb8
 8004b60:	08004bbc 	.word	0x08004bbc

08004b64 <memset>:
 8004b64:	4402      	add	r2, r0
 8004b66:	4603      	mov	r3, r0
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d100      	bne.n	8004b6e <memset+0xa>
 8004b6c:	4770      	bx	lr
 8004b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b72:	e7f9      	b.n	8004b68 <memset+0x4>

08004b74 <_init>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr

08004b80 <_fini>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr
