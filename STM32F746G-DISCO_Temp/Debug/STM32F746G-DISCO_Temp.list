
STM32F746G-DISCO_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08012d0c  08012d0c  00022d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012db4  08012db4  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08012db4  08012db4  00022db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012dbc  08012dbc  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012dbc  08012dbc  00022dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012dc0  08012dc0  00022dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08012dc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097d8  20000094  08012e58  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000986c  08012e58  0003986c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044e99  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000867f  00000000  00000000  00074f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003290  00000000  00000000  0007d5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f30  00000000  00000000  00080870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365f4  00000000  00000000  000837a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000428c3  00000000  00000000  000b9d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012dd11  00000000  00000000  000fc657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022a368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d8dc  00000000  00000000  0022a3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012cf4 	.word	0x08012cf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08012cf4 	.word	0x08012cf4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	200000b0 	.word	0x200000b0
 800056c:	20000108 	.word	0x20000108

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f002 fb82 	bl	8002c7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f855 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f001 f895 	bl	80016ac <MX_GPIO_Init>
  MX_ADC3_Init();
 8000582:	f000 f911 	bl	80007a8 <MX_ADC3_Init>
  MX_CRC_Init();
 8000586:	f000 f961 	bl	800084c <MX_CRC_Init>
  MX_DCMI_Init();
 800058a:	f000 f981 	bl	8000890 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800058e:	f000 f9b3 	bl	80008f8 <MX_DMA2D_Init>
  MX_ETH_Init();
 8000592:	f000 f9e3 	bl	800095c <MX_ETH_Init>
  MX_FMC_Init();
 8000596:	f001 f839 	bl	800160c <MX_FMC_Init>
  MX_I2C1_Init();
 800059a:	f000 fa21 	bl	80009e0 <MX_I2C1_Init>
  MX_I2C3_Init();
 800059e:	f000 fa5f 	bl	8000a60 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005a2:	f000 fa9d 	bl	8000ae0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005a6:	f000 fb1d 	bl	8000be4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005aa:	f000 fb47 	bl	8000c3c <MX_RTC_Init>
  MX_SAI2_Init();
 80005ae:	f000 fbeb 	bl	8000d88 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80005b2:	f000 fc91 	bl	8000ed8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80005b6:	f000 fcaf 	bl	8000f18 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80005ba:	f000 fcdd 	bl	8000f78 <MX_SPI2_Init>
  MX_TIM1_Init();
 80005be:	f000 fd19 	bl	8000ff4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c2:	f000 fdc3 	bl	800114c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005c6:	f000 fe37 	bl	8001238 <MX_TIM3_Init>
  MX_TIM5_Init();
 80005ca:	f000 fead 	bl	8001328 <MX_TIM5_Init>
  MX_TIM8_Init();
 80005ce:	f000 ff23 	bl	8001418 <MX_TIM8_Init>
  MX_TIM12_Init();
 80005d2:	f000 ff75 	bl	80014c0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 ffb9 	bl	800154c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005da:	f000 ffe7 	bl	80015ac <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80005de:	f00d f869 	bl	800d6b4 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0xac>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00f fca5 	bl	800ff48 <osThreadCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <main+0xb0>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f00f fc7d 	bl	800ff02 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000608:	2102      	movs	r1, #2
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <main+0xb4>)
 800060c:	f004 f923 	bl	8004856 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8000610:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000614:	f002 fb60 	bl	8002cd8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000618:	e7f6      	b.n	8000608 <main+0x98>
 800061a:	bf00      	nop
 800061c:	08012d18 	.word	0x08012d18
 8000620:	20008508 	.word	0x20008508
 8000624:	40022000 	.word	0x40022000

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0b4      	sub	sp, #208	; 0xd0
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f012 fa8c 	bl	8012b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2284      	movs	r2, #132	; 0x84
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f012 fa7d 	bl	8012b54 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800065a:	f006 fb0d 	bl	8006c78 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <SystemClock_Config+0x174>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a4e      	ldr	r2, [pc, #312]	; (800079c <SystemClock_Config+0x174>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b4c      	ldr	r3, [pc, #304]	; (800079c <SystemClock_Config+0x174>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000676:	4b4a      	ldr	r3, [pc, #296]	; (80007a0 <SystemClock_Config+0x178>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a49      	ldr	r2, [pc, #292]	; (80007a0 <SystemClock_Config+0x178>)
 800067c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <SystemClock_Config+0x178>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800068e:	2309      	movs	r3, #9
 8000690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b0:	2319      	movs	r3, #25
 80006b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006c4:	2309      	movs	r3, #9
 80006c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fbf4 	bl	8006ebc <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006da:	f001 f9c1 	bl	8001a60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006de:	f006 fadb 	bl	8006c98 <HAL_PWREx_EnableOverDrive>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006e8:	f001 f9ba 	bl	8001a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000702:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800070e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000712:	2106      	movs	r1, #6
 8000714:	4618      	mov	r0, r3
 8000716:	f006 fe75 	bl	8007404 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000720:	f001 f99e 	bl	8001a60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0x17c>)
 8000726:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000738:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800073c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800073e:	2305      	movs	r3, #5
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800075e:	2300      	movs	r3, #0
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000762:	2300      	movs	r3, #0
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000766:	2300      	movs	r3, #0
 8000768:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800076e:	2300      	movs	r3, #0
 8000770:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000772:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4618      	mov	r0, r3
 8000786:	f007 f845 	bl	8007814 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000790:	f001 f966 	bl	8001a60 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	37d0      	adds	r7, #208	; 0xd0
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000
 80007a4:	01b14868 	.word	0x01b14868

080007a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC3_Init+0x98>)
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <MX_ADC3_Init+0x9c>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC3_Init+0x98>)
 80007c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC3_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC3_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC3_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC3_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_ADC3_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_ADC3_Init+0x98>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_ADC3_Init+0xa0>)
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ADC3_Init+0x98>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_ADC3_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ADC3_Init+0x98>)
 8000804:	2201      	movs	r2, #1
 8000806:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_ADC3_Init+0x98>)
 800080a:	f002 fa89 	bl	8002d20 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000814:	f001 f924 	bl	8001a60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000818:	2304      	movs	r3, #4
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081c:	2301      	movs	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_ADC3_Init+0x98>)
 800082a:	f002 fabd 	bl	8002da8 <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000834:	f001 f914 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000890c 	.word	0x2000890c
 8000844:	40012200 	.word	0x40012200
 8000848:	0f000001 	.word	0x0f000001

0800084c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_CRC_Init+0x3c>)
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_CRC_Init+0x40>)
 8000854:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_CRC_Init+0x3c>)
 8000858:	2200      	movs	r2, #0
 800085a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_CRC_Init+0x3c>)
 800085e:	2200      	movs	r2, #0
 8000860:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_CRC_Init+0x3c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_CRC_Init+0x3c>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_CRC_Init+0x3c>)
 8000870:	2201      	movs	r2, #1
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_CRC_Init+0x3c>)
 8000876:	f002 fdbd 	bl	80033f4 <HAL_CRC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000880:	f001 f8ee 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20008724 	.word	0x20008724
 800088c:	40023000 	.word	0x40023000

08000890 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_DCMI_Init+0x60>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_DCMI_Init+0x64>)
 8000898:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_DCMI_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008de:	f002 fe73 	bl	80035c8 <HAL_DCMI_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f001 f8ba 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20008954 	.word	0x20008954
 80008f4:	50050000 	.word	0x50050000

080008f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_DMA2D_Init+0x5c>)
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <MX_DMA2D_Init+0x60>)
 8000900:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_DMA2D_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_DMA2D_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <MX_DMA2D_Init+0x5c>)
 800092e:	f002 ff5f 	bl	80037f0 <HAL_DMA2D_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000938:	f001 f892 	bl	8001a60 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800093c:	2101      	movs	r1, #1
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000940:	f003 f8b0 	bl	8003aa4 <HAL_DMA2D_ConfigLayer>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800094a:	f001 f889 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20008b18 	.word	0x20008b18
 8000958:	4002b000 	.word	0x4002b000

0800095c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_ETH_Init+0x78>)
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <MX_ETH_Init+0x7c>)
 8000964:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_ETH_Init+0x78>)
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_ETH_Init+0x78>)
 800096e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000972:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_ETH_Init+0x78>)
 8000976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800097a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_ETH_Init+0x78>)
 800097e:	2200      	movs	r2, #0
 8000980:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_ETH_Init+0x80>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_ETH_Init+0x80>)
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_ETH_Init+0x80>)
 8000990:	22e1      	movs	r2, #225	; 0xe1
 8000992:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_ETH_Init+0x80>)
 8000996:	2200      	movs	r2, #0
 8000998:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_ETH_Init+0x80>)
 800099c:	2200      	movs	r2, #0
 800099e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_ETH_Init+0x80>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_ETH_Init+0x78>)
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <MX_ETH_Init+0x80>)
 80009aa:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_ETH_Init+0x78>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_ETH_Init+0x78>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_ETH_Init+0x78>)
 80009ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009be:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_ETH_Init+0x78>)
 80009c2:	f003 f901 	bl	8003bc8 <HAL_ETH_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80009cc:	f001 f848 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20008c24 	.word	0x20008c24
 80009d8:	40028000 	.word	0x40028000
 80009dc:	20000308 	.word	0x20000308

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C1_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a1c:	f005 fc9a 	bl	8006354 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f001 f81b 	bl	8001a60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a2e:	f005 fd21 	bl	8006474 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f001 f812 	bl	8001a60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a40:	f005 fd63 	bl	800650a <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f001 f809 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200086d8 	.word	0x200086d8
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	00c0eaff 	.word	0x00c0eaff

08000a60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C3_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C3_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a9c:	f005 fc5a 	bl	8006354 <HAL_I2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 ffdb 	bl	8001a60 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000aae:	f005 fce1 	bl	8006474 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 ffd2 	bl	8001a60 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000ac0:	f005 fd23 	bl	800650a <HAL_I2CEx_ConfigDigitalFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 ffc9 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000850c 	.word	0x2000850c
 8000ad8:	40005c00 	.word	0x40005c00
 8000adc:	00c0eaff 	.word	0x00c0eaff

08000ae0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2234      	movs	r2, #52	; 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f012 f831 	bl	8012b54 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000af4:	4a3a      	ldr	r2, [pc, #232]	; (8000be0 <MX_LTDC_Init+0x100>)
 8000af6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b12:	2228      	movs	r2, #40	; 0x28
 8000b14:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b18:	2209      	movs	r2, #9
 8000b1a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b1e:	2235      	movs	r2, #53	; 0x35
 8000b20:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b24:	220b      	movs	r2, #11
 8000b26:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b2a:	f240 2215 	movw	r2, #533	; 0x215
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b30:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b32:	f240 121b 	movw	r2, #283	; 0x11b
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b3a:	f240 2235 	movw	r2, #565	; 0x235
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b42:	f240 121d 	movw	r2, #285	; 0x11d
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b60:	481e      	ldr	r0, [pc, #120]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000b62:	f005 fd1f 	bl	80065a4 <HAL_LTDC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b6c:	f000 ff78 	bl	8001a60 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b74:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b78:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b7e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b82:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b88:	23ff      	movs	r3, #255	; 0xff
 8000b8a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b94:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b96:	2307      	movs	r3, #7
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b9a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000ba0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000ba6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_LTDC_Init+0xfc>)
 8000bc6:	f005 fe7f 	bl	80068c8 <HAL_LTDC_ConfigLayer>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000bd0:	f000 ff46 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3738      	adds	r7, #56	; 0x38
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20008864 	.word	0x20008864
 8000be0:	40016800 	.word	0x40016800

08000be4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000bea:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <MX_QUADSPI_Init+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000c02:	2218      	movs	r2, #24
 8000c04:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000c08:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c0c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_QUADSPI_Init+0x50>)
 8000c22:	f006 f889 	bl	8006d38 <HAL_QSPI_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c2c:	f000 ff18 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20008c6c 	.word	0x20008c6c
 8000c38:	a0001000 	.word	0xa0001000

08000c3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b092      	sub	sp, #72	; 0x48
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	222c      	movs	r2, #44	; 0x2c
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f011 ff78 	bl	8012b54 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c64:	4b46      	ldr	r3, [pc, #280]	; (8000d80 <MX_RTC_Init+0x144>)
 8000c66:	4a47      	ldr	r2, [pc, #284]	; (8000d84 <MX_RTC_Init+0x148>)
 8000c68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c6a:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <MX_RTC_Init+0x144>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c70:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <MX_RTC_Init+0x144>)
 8000c72:	227f      	movs	r2, #127	; 0x7f
 8000c74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <MX_RTC_Init+0x144>)
 8000c78:	22ff      	movs	r2, #255	; 0xff
 8000c7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c7c:	4b40      	ldr	r3, [pc, #256]	; (8000d80 <MX_RTC_Init+0x144>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c82:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <MX_RTC_Init+0x144>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <MX_RTC_Init+0x144>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c8e:	483c      	ldr	r0, [pc, #240]	; (8000d80 <MX_RTC_Init+0x144>)
 8000c90:	f007 faf4 	bl	800827c <HAL_RTC_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000c9a:	f000 fee1 	bl	8001a60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	482f      	ldr	r0, [pc, #188]	; (8000d80 <MX_RTC_Init+0x144>)
 8000cc2:	f007 fb6d 	bl	80083a0 <HAL_RTC_SetTime>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000ccc:	f000 fec8 	bl	8001a60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	2201      	movs	r2, #1
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4823      	ldr	r0, [pc, #140]	; (8000d80 <MX_RTC_Init+0x144>)
 8000cf2:	f007 fc13 	bl	800851c <HAL_RTC_SetDate>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000cfc:	f000 feb0 	bl	8001a60 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	4812      	ldr	r0, [pc, #72]	; (8000d80 <MX_RTC_Init+0x144>)
 8000d38:	f007 fc98 	bl	800866c <HAL_RTC_SetAlarm>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000d42:	f000 fe8d 	bl	8001a60 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4619      	mov	r1, r3
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <MX_RTC_Init+0x144>)
 8000d54:	f007 fc8a 	bl	800866c <HAL_RTC_SetAlarm>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d5e:	f000 fe7f 	bl	8001a60 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d62:	2202      	movs	r2, #2
 8000d64:	2100      	movs	r1, #0
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <MX_RTC_Init+0x144>)
 8000d68:	f007 fe0a 	bl	8008980 <HAL_RTCEx_SetTimeStamp>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000d72:	f000 fe75 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3748      	adds	r7, #72	; 0x48
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20008a28 	.word	0x20008a28
 8000d84:	40002800 	.word	0x40002800

08000d88 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000d8e:	4a4e      	ldr	r2, [pc, #312]	; (8000ec8 <MX_SAI2_Init+0x140>)
 8000d90:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d92:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d98:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d9e:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000da0:	2240      	movs	r2, #64	; 0x40
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000da4:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000daa:	4b46      	ldr	r3, [pc, #280]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000db0:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000db6:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000dbc:	4b41      	ldr	r3, [pc, #260]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dc2:	4b40      	ldr	r3, [pc, #256]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dca:	4a40      	ldr	r2, [pc, #256]	; (8000ecc <MX_SAI2_Init+0x144>)
 8000dcc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dce:	4b3d      	ldr	r3, [pc, #244]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dda:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000de0:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000de8:	2208      	movs	r2, #8
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000dec:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000df2:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000df8:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000e1c:	4829      	ldr	r0, [pc, #164]	; (8000ec4 <MX_SAI2_Init+0x13c>)
 8000e1e:	f007 fe05 	bl	8008a2c <HAL_SAI_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000e28:	f000 fe1a 	bl	8001a60 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e2e:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <MX_SAI2_Init+0x14c>)
 8000e30:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e32:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e40:	2240      	movs	r2, #64	; 0x40
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000eb0:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <MX_SAI2_Init+0x148>)
 8000eb2:	f007 fdbb 	bl	8008a2c <HAL_SAI_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000ebc:	f000 fdd0 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20008654 	.word	0x20008654
 8000ec8:	40015c04 	.word	0x40015c04
 8000ecc:	0002ee00 	.word	0x0002ee00
 8000ed0:	20008484 	.word	0x20008484
 8000ed4:	40015c24 	.word	0x40015c24

08000ed8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000ede:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20008748 	.word	0x20008748
 8000f14:	40012c00 	.word	0x40012c00

08000f18 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f1e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f22:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <MX_SPDIFRX_Init+0x5c>)
 8000f62:	f008 ffeb 	bl	8009f3c <HAL_SPDIFRX_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f6c:	f000 fd78 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20008608 	.word	0x20008608

08000f78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_SPI2_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_SPI2_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_SPI2_Init+0x74>)
 8000f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_SPI2_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_SPI2_Init+0x74>)
 8000f92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_SPI2_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000faa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_SPI2_Init+0x74>)
 8000fd8:	f009 f80c 	bl	8009ff4 <HAL_SPI_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 fd3d 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20008558 	.word	0x20008558
 8000ff0:	40003800 	.word	0x40003800

08000ff4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09a      	sub	sp, #104	; 0x68
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	222c      	movs	r2, #44	; 0x2c
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f011 fd90 	bl	8012b54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001034:	4b43      	ldr	r3, [pc, #268]	; (8001144 <MX_TIM1_Init+0x150>)
 8001036:	4a44      	ldr	r2, [pc, #272]	; (8001148 <MX_TIM1_Init+0x154>)
 8001038:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <MX_TIM1_Init+0x150>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b40      	ldr	r3, [pc, #256]	; (8001144 <MX_TIM1_Init+0x150>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001046:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <MX_TIM1_Init+0x150>)
 8001048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <MX_TIM1_Init+0x150>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001054:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <MX_TIM1_Init+0x150>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105a:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <MX_TIM1_Init+0x150>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001060:	4838      	ldr	r0, [pc, #224]	; (8001144 <MX_TIM1_Init+0x150>)
 8001062:	f009 f872 	bl	800a14a <HAL_TIM_Base_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800106c:	f000 fcf8 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001074:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001076:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800107a:	4619      	mov	r1, r3
 800107c:	4831      	ldr	r0, [pc, #196]	; (8001144 <MX_TIM1_Init+0x150>)
 800107e:	f009 fbb9 	bl	800a7f4 <HAL_TIM_ConfigClockSource>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001088:	f000 fcea 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800108c:	482d      	ldr	r0, [pc, #180]	; (8001144 <MX_TIM1_Init+0x150>)
 800108e:	f009 f92b 	bl	800a2e8 <HAL_TIM_PWM_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001098:	f000 fce2 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ac:	4619      	mov	r1, r3
 80010ae:	4825      	ldr	r0, [pc, #148]	; (8001144 <MX_TIM1_Init+0x150>)
 80010b0:	f00a f826 	bl	800b100 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010ba:	f000 fcd1 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010be:	2360      	movs	r3, #96	; 0x60
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4818      	ldr	r0, [pc, #96]	; (8001144 <MX_TIM1_Init+0x150>)
 80010e4:	f009 fa76 	bl	800a5d4 <HAL_TIM_PWM_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010ee:	f000 fcb7 	bl	8001a60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <MX_TIM1_Init+0x150>)
 8001128:	f00a f878 	bl	800b21c <HAL_TIMEx_ConfigBreakDeadTime>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001132:	f000 fc95 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <MX_TIM1_Init+0x150>)
 8001138:	f001 fa34 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 800113c:	bf00      	nop
 800113e:	3768      	adds	r7, #104	; 0x68
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20008a48 	.word	0x20008a48
 8001148:	40010000 	.word	0x40010000

0800114c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
 800117a:	615a      	str	r2, [r3, #20]
 800117c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_TIM2_Init+0xe8>)
 8001180:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001184:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_TIM2_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <MX_TIM2_Init+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_TIM2_Init+0xe8>)
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001198:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_TIM2_Init+0xe8>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <MX_TIM2_Init+0xe8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <MX_TIM2_Init+0xe8>)
 80011a8:	f008 ffcf 	bl	800a14a <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011b2:	f000 fc55 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c0:	4619      	mov	r1, r3
 80011c2:	481c      	ldr	r0, [pc, #112]	; (8001234 <MX_TIM2_Init+0xe8>)
 80011c4:	f009 fb16 	bl	800a7f4 <HAL_TIM_ConfigClockSource>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011ce:	f000 fc47 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011d2:	4818      	ldr	r0, [pc, #96]	; (8001234 <MX_TIM2_Init+0xe8>)
 80011d4:	f009 f888 	bl	800a2e8 <HAL_TIM_PWM_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011de:	f000 fc3f 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4810      	ldr	r0, [pc, #64]	; (8001234 <MX_TIM2_Init+0xe8>)
 80011f2:	f009 ff85 	bl	800b100 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011fc:	f000 fc30 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001200:	2360      	movs	r3, #96	; 0x60
 8001202:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM2_Init+0xe8>)
 8001218:	f009 f9dc 	bl	800a5d4 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001222:	f000 fc1d 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001226:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM2_Init+0xe8>)
 8001228:	f001 f9bc 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 800122c:	bf00      	nop
 800122e:	3738      	adds	r7, #56	; 0x38
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20008b58 	.word	0x20008b58

08001238 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <MX_TIM3_Init+0xe8>)
 800126c:	4a2d      	ldr	r2, [pc, #180]	; (8001324 <MX_TIM3_Init+0xec>)
 800126e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <MX_TIM3_Init+0xe8>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <MX_TIM3_Init+0xe8>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_TIM3_Init+0xe8>)
 800127e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <MX_TIM3_Init+0xe8>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <MX_TIM3_Init+0xe8>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001290:	4823      	ldr	r0, [pc, #140]	; (8001320 <MX_TIM3_Init+0xe8>)
 8001292:	f008 ff5a 	bl	800a14a <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800129c:	f000 fbe0 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012aa:	4619      	mov	r1, r3
 80012ac:	481c      	ldr	r0, [pc, #112]	; (8001320 <MX_TIM3_Init+0xe8>)
 80012ae:	f009 faa1 	bl	800a7f4 <HAL_TIM_ConfigClockSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012b8:	f000 fbd2 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012bc:	4818      	ldr	r0, [pc, #96]	; (8001320 <MX_TIM3_Init+0xe8>)
 80012be:	f009 f813 	bl	800a2e8 <HAL_TIM_PWM_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012c8:	f000 fbca 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4811      	ldr	r0, [pc, #68]	; (8001320 <MX_TIM3_Init+0xe8>)
 80012dc:	f009 ff10 	bl	800b100 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012e6:	f000 fbbb 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ea:	2360      	movs	r3, #96	; 0x60
 80012ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	4807      	ldr	r0, [pc, #28]	; (8001320 <MX_TIM3_Init+0xe8>)
 8001302:	f009 f967 	bl	800a5d4 <HAL_TIM_PWM_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800130c:	f000 fba8 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <MX_TIM3_Init+0xe8>)
 8001312:	f001 f947 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 8001316:	bf00      	nop
 8001318:	3738      	adds	r7, #56	; 0x38
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20008818 	.word	0x20008818
 8001324:	40000400 	.word	0x40000400

08001328 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <MX_TIM5_Init+0xe8>)
 800135c:	4a2d      	ldr	r2, [pc, #180]	; (8001414 <MX_TIM5_Init+0xec>)
 800135e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <MX_TIM5_Init+0xe8>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_TIM5_Init+0xe8>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <MX_TIM5_Init+0xe8>)
 800136e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001372:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_TIM5_Init+0xe8>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <MX_TIM5_Init+0xe8>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001380:	4823      	ldr	r0, [pc, #140]	; (8001410 <MX_TIM5_Init+0xe8>)
 8001382:	f008 fee2 	bl	800a14a <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800138c:	f000 fb68 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	4619      	mov	r1, r3
 800139c:	481c      	ldr	r0, [pc, #112]	; (8001410 <MX_TIM5_Init+0xe8>)
 800139e:	f009 fa29 	bl	800a7f4 <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013a8:	f000 fb5a 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013ac:	4818      	ldr	r0, [pc, #96]	; (8001410 <MX_TIM5_Init+0xe8>)
 80013ae:	f008 ff9b 	bl	800a2e8 <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013b8:	f000 fb52 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_TIM5_Init+0xe8>)
 80013cc:	f009 fe98 	bl	800b100 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013d6:	f000 fb43 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	; 0x60
 80013dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	220c      	movs	r2, #12
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM5_Init+0xe8>)
 80013f2:	f009 f8ef 	bl	800a5d4 <HAL_TIM_PWM_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013fc:	f000 fb30 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM5_Init+0xe8>)
 8001402:	f001 f8cf 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 8001406:	bf00      	nop
 8001408:	3738      	adds	r7, #56	; 0x38
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200087cc 	.word	0x200087cc
 8001414:	40000c00 	.word	0x40000c00

08001418 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <MX_TIM8_Init+0xa0>)
 8001438:	4a20      	ldr	r2, [pc, #128]	; (80014bc <MX_TIM8_Init+0xa4>)
 800143a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_TIM8_Init+0xa0>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_TIM8_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_TIM8_Init+0xa0>)
 800144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_TIM8_Init+0xa0>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_TIM8_Init+0xa0>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_TIM8_Init+0xa0>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001462:	4815      	ldr	r0, [pc, #84]	; (80014b8 <MX_TIM8_Init+0xa0>)
 8001464:	f008 fe71 	bl	800a14a <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800146e:	f000 faf7 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <MX_TIM8_Init+0xa0>)
 8001480:	f009 f9b8 	bl	800a7f4 <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800148a:	f000 fae9 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_TIM8_Init+0xa0>)
 80014a0:	f009 fe2e 	bl	800b100 <HAL_TIMEx_MasterConfigSynchronization>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014aa:	f000 fad9 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200085bc 	.word	0x200085bc
 80014bc:	40010400 	.word	0x40010400

080014c0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM12_Init+0x84>)
 80014da:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <MX_TIM12_Init+0x88>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <MX_TIM12_Init+0x84>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_TIM12_Init+0x84>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_TIM12_Init+0x84>)
 80014ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_TIM12_Init+0x84>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_TIM12_Init+0x84>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80014fe:	4811      	ldr	r0, [pc, #68]	; (8001544 <MX_TIM12_Init+0x84>)
 8001500:	f008 fef2 	bl	800a2e8 <HAL_TIM_PWM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800150a:	f000 faa9 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150e:	2360      	movs	r3, #96	; 0x60
 8001510:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM12_Init+0x84>)
 8001526:	f009 f855 	bl	800a5d4 <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001530:	f000 fa96 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM12_Init+0x84>)
 8001536:	f001 f835 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 800153a:	bf00      	nop
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20008ba4 	.word	0x20008ba4
 8001548:	40001800 	.word	0x40001800

0800154c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 8001552:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <MX_USART1_UART_Init+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART1_UART_Init+0x58>)
 8001590:	f009 fee0 	bl	800b354 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 fa61 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200089a4 	.word	0x200089a4
 80015a8:	40011000 	.word	0x40011000

080015ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <MX_USART6_UART_Init+0x5c>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART6_UART_Init+0x58>)
 80015f0:	f009 feb0 	bl	800b354 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80015fa:	f000 fa31 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20008a94 	.word	0x20008a94
 8001608:	40011400 	.word	0x40011400

0800160c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_FMC_Init+0x98>)
 8001626:	4a20      	ldr	r2, [pc, #128]	; (80016a8 <MX_FMC_Init+0x9c>)
 8001628:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_FMC_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_FMC_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_FMC_Init+0x98>)
 8001638:	2204      	movs	r2, #4
 800163a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_FMC_Init+0x98>)
 800163e:	2210      	movs	r2, #16
 8001640:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_FMC_Init+0x98>)
 8001644:	2240      	movs	r2, #64	; 0x40
 8001646:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_FMC_Init+0x98>)
 800164a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800164e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_FMC_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_FMC_Init+0x98>)
 8001658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_FMC_Init+0x98>)
 8001660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_FMC_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800166c:	2302      	movs	r3, #2
 800166e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001670:	2307      	movs	r3, #7
 8001672:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001674:	2304      	movs	r3, #4
 8001676:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001678:	2307      	movs	r3, #7
 800167a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800167c:	2303      	movs	r3, #3
 800167e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001680:	2302      	movs	r3, #2
 8001682:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001684:	2302      	movs	r3, #2
 8001686:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_FMC_Init+0x98>)
 800168e:	f008 fc20 	bl	8009ed2 <HAL_SDRAM_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001698:	f000 f9e2 	bl	8001a60 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20008bf0 	.word	0x20008bf0
 80016a8:	a0000140 	.word	0xa0000140

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b090      	sub	sp, #64	; 0x40
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c2:	4baf      	ldr	r3, [pc, #700]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4aae      	ldr	r2, [pc, #696]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80016c8:	f043 0310 	orr.w	r3, r3, #16
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4bac      	ldr	r3, [pc, #688]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016da:	4ba9      	ldr	r3, [pc, #676]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4aa8      	ldr	r2, [pc, #672]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80016e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4ba6      	ldr	r3, [pc, #664]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4ba3      	ldr	r3, [pc, #652]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4aa2      	ldr	r2, [pc, #648]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4ba0      	ldr	r3, [pc, #640]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	623b      	str	r3, [r7, #32]
 8001708:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170a:	4b9d      	ldr	r3, [pc, #628]	; (8001980 <MX_GPIO_Init+0x2d4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a9c      	ldr	r2, [pc, #624]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b9a      	ldr	r3, [pc, #616]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b97      	ldr	r3, [pc, #604]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a96      	ldr	r2, [pc, #600]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b94      	ldr	r3, [pc, #592]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b91      	ldr	r3, [pc, #580]	; (8001980 <MX_GPIO_Init+0x2d4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a90      	ldr	r2, [pc, #576]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001752:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a8a      	ldr	r2, [pc, #552]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b88      	ldr	r3, [pc, #544]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <MX_GPIO_Init+0x2d4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a84      	ldr	r2, [pc, #528]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b82      	ldr	r3, [pc, #520]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001782:	4b7f      	ldr	r3, [pc, #508]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a7e      	ldr	r2, [pc, #504]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001788:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b7c      	ldr	r3, [pc, #496]	; (8001980 <MX_GPIO_Init+0x2d4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179a:	4b79      	ldr	r3, [pc, #484]	; (8001980 <MX_GPIO_Init+0x2d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a78      	ldr	r2, [pc, #480]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80017a0:	f043 0320 	orr.w	r3, r3, #32
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b76      	ldr	r3, [pc, #472]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0320 	and.w	r3, r3, #32
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b2:	4b73      	ldr	r3, [pc, #460]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a72      	ldr	r2, [pc, #456]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b70      	ldr	r3, [pc, #448]	; (8001980 <MX_GPIO_Init+0x2d4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2120      	movs	r1, #32
 80017ce:	486d      	ldr	r0, [pc, #436]	; (8001984 <MX_GPIO_Init+0x2d8>)
 80017d0:	f003 f828 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	210c      	movs	r1, #12
 80017d8:	486b      	ldr	r0, [pc, #428]	; (8001988 <MX_GPIO_Init+0x2dc>)
 80017da:	f003 f823 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2108      	movs	r1, #8
 80017e2:	486a      	ldr	r0, [pc, #424]	; (800198c <MX_GPIO_Init+0x2e0>)
 80017e4:	f003 f81e 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ee:	4866      	ldr	r0, [pc, #408]	; (8001988 <MX_GPIO_Init+0x2dc>)
 80017f0:	f003 f818 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fa:	4865      	ldr	r0, [pc, #404]	; (8001990 <MX_GPIO_Init+0x2e4>)
 80017fc:	f003 f812 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	21c8      	movs	r1, #200	; 0xc8
 8001804:	4863      	ldr	r0, [pc, #396]	; (8001994 <MX_GPIO_Init+0x2e8>)
 8001806:	f003 f80d 	bl	8004824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800180a:	2308      	movs	r3, #8
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	485e      	ldr	r0, [pc, #376]	; (8001998 <MX_GPIO_Init+0x2ec>)
 800181e:	f002 fe3d 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001822:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001834:	230a      	movs	r3, #10
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	4857      	ldr	r0, [pc, #348]	; (800199c <MX_GPIO_Init+0x2f0>)
 8001840:	f002 fe2c 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001856:	4619      	mov	r1, r3
 8001858:	4851      	ldr	r0, [pc, #324]	; (80019a0 <MX_GPIO_Init+0x2f4>)
 800185a:	f002 fe1f 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800185e:	2340      	movs	r3, #64	; 0x40
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001862:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <MX_GPIO_Init+0x2f8>)
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	4844      	ldr	r0, [pc, #272]	; (8001984 <MX_GPIO_Init+0x2d8>)
 8001872:	f002 fe13 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001876:	2320      	movs	r3, #32
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188a:	4619      	mov	r1, r3
 800188c:	483d      	ldr	r0, [pc, #244]	; (8001984 <MX_GPIO_Init+0x2d8>)
 800188e:	f002 fe05 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001892:	f241 030c 	movw	r3, #4108	; 0x100c
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4837      	ldr	r0, [pc, #220]	; (8001988 <MX_GPIO_Init+0x2dc>)
 80018ac:	f002 fdf6 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4838      	ldr	r0, [pc, #224]	; (80019a8 <MX_GPIO_Init+0x2fc>)
 80018c6:	f002 fde9 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80018ca:	2308      	movs	r3, #8
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	4619      	mov	r1, r3
 80018e0:	482a      	ldr	r0, [pc, #168]	; (800198c <MX_GPIO_Init+0x2e0>)
 80018e2:	f002 fddb 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018e6:	2310      	movs	r3, #16
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	4822      	ldr	r0, [pc, #136]	; (8001984 <MX_GPIO_Init+0x2d8>)
 80018fa:	f002 fdcf 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80018fe:	f248 0304 	movw	r3, #32772	; 0x8004
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	481f      	ldr	r0, [pc, #124]	; (8001990 <MX_GPIO_Init+0x2e4>)
 8001914:	f002 fdc2 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	4817      	ldr	r0, [pc, #92]	; (8001990 <MX_GPIO_Init+0x2e4>)
 8001932:	f002 fdb3 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <MX_GPIO_Init+0x2f8>)
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	480f      	ldr	r0, [pc, #60]	; (8001988 <MX_GPIO_Init+0x2dc>)
 800194c:	f002 fda6 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001950:	2310      	movs	r3, #16
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001960:	230a      	movs	r3, #10
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001968:	4619      	mov	r1, r3
 800196a:	4809      	ldr	r0, [pc, #36]	; (8001990 <MX_GPIO_Init+0x2e4>)
 800196c:	f002 fd96 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001970:	23c8      	movs	r3, #200	; 0xc8
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
 800197c:	e016      	b.n	80019ac <MX_GPIO_Init+0x300>
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40022000 	.word	0x40022000
 800198c:	40022800 	.word	0x40022800
 8001990:	40021c00 	.word	0x40021c00
 8001994:	40021800 	.word	0x40021800
 8001998:	40021000 	.word	0x40021000
 800199c:	40020400 	.word	0x40020400
 80019a0:	40022400 	.word	0x40022400
 80019a4:	10120000 	.word	0x10120000
 80019a8:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	4819      	ldr	r0, [pc, #100]	; (8001a1c <MX_GPIO_Init+0x370>)
 80019b8:	f002 fd70 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80019bc:	2305      	movs	r3, #5
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019cc:	230a      	movs	r3, #10
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4812      	ldr	r0, [pc, #72]	; (8001a20 <MX_GPIO_Init+0x374>)
 80019d8:	f002 fd60 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019dc:	2304      	movs	r3, #4
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	480b      	ldr	r0, [pc, #44]	; (8001a1c <MX_GPIO_Init+0x370>)
 80019f0:	f002 fd54 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80019f4:	2328      	movs	r3, #40	; 0x28
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a04:	230a      	movs	r3, #10
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_GPIO_Init+0x378>)
 8001a10:	f002 fd44 	bl	800449c <HAL_GPIO_Init>

}
 8001a14:	bf00      	nop
 8001a16:	3740      	adds	r7, #64	; 0x40
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020000 	.word	0x40020000

08001a28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001a30:	f010 fd52 	bl	80124d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f00e fad3 	bl	800ffe0 <osDelay>
 8001a3a:	e7fb      	b.n	8001a34 <StartDefaultTask+0xc>

08001a3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a4e:	f001 f923 	bl	8002c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40001000 	.word	0x40001000

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	f06f 0001 	mvn.w	r0, #1
 8001aaa:	f001 fc79 	bl	80033a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800

08001abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <HAL_ADC_MspInit+0xa4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d13c      	bne.n	8001b58 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001ae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a1a      	ldr	r2, [pc, #104]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001afc:	f043 0320 	orr.w	r3, r3, #32
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_ADC_MspInit+0xa8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001b26:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b2a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480b      	ldr	r0, [pc, #44]	; (8001b68 <HAL_ADC_MspInit+0xac>)
 8001b3c:	f002 fcae 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b40:	2301      	movs	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b44:	2303      	movs	r3, #3
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	4806      	ldr	r0, [pc, #24]	; (8001b6c <HAL_ADC_MspInit+0xb0>)
 8001b54:	f002 fca2 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40012200 	.word	0x40012200
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021400 	.word	0x40021400
 8001b6c:	40020000 	.word	0x40020000

08001b70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_CRC_MspInit+0x38>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10b      	bne.n	8001b9a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_CRC_MspInit+0x3c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_CRC_MspInit+0x3c>)
 8001b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_CRC_MspInit+0x3c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023000 	.word	0x40023000
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08e      	sub	sp, #56	; 0x38
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a50      	ldr	r2, [pc, #320]	; (8001d10 <HAL_DCMI_MspInit+0x160>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	f040 809a 	bne.w	8001d08 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	4a4e      	ldr	r2, [pc, #312]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6353      	str	r3, [r2, #52]	; 0x34
 8001be0:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	623b      	str	r3, [r7, #32]
 8001bea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bec:	4b49      	ldr	r3, [pc, #292]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4a48      	ldr	r2, [pc, #288]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf8:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c10:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c1c:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4a3c      	ldr	r2, [pc, #240]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c26:	6313      	str	r3, [r2, #48]	; 0x30
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a36      	ldr	r2, [pc, #216]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4a30      	ldr	r2, [pc, #192]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6313      	str	r3, [r2, #48]	; 0x30
 8001c58:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <HAL_DCMI_MspInit+0x164>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c64:	2360      	movs	r3, #96	; 0x60
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c74:	230d      	movs	r3, #13
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4826      	ldr	r0, [pc, #152]	; (8001d18 <HAL_DCMI_MspInit+0x168>)
 8001c80:	f002 fc0c 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001c84:	2308      	movs	r3, #8
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c94:	230d      	movs	r3, #13
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	481f      	ldr	r0, [pc, #124]	; (8001d1c <HAL_DCMI_MspInit+0x16c>)
 8001ca0:	f002 fbfc 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cb6:	230d      	movs	r3, #13
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4817      	ldr	r0, [pc, #92]	; (8001d20 <HAL_DCMI_MspInit+0x170>)
 8001cc2:	f002 fbeb 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001cc6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cd8:	230d      	movs	r3, #13
 8001cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4810      	ldr	r0, [pc, #64]	; (8001d24 <HAL_DCMI_MspInit+0x174>)
 8001ce4:	f002 fbda 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ce8:	2350      	movs	r3, #80	; 0x50
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cf8:	230d      	movs	r3, #13
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <HAL_DCMI_MspInit+0x178>)
 8001d04:	f002 fbca 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001d08:	bf00      	nop
 8001d0a:	3738      	adds	r7, #56	; 0x38
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	50050000 	.word	0x50050000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40021800 	.word	0x40021800
 8001d24:	40021c00 	.word	0x40021c00
 8001d28:	40020000 	.word	0x40020000

08001d2c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_DMA2D_MspInit+0x44>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d113      	bne.n	8001d66 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_DMA2D_MspInit+0x48>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_DMA2D_MspInit+0x48>)
 8001d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_DMA2D_MspInit+0x48>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	205a      	movs	r0, #90	; 0x5a
 8001d5c:	f001 fb20 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d60:	205a      	movs	r0, #90	; 0x5a
 8001d62:	f001 fb39 	bl	80033d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	4002b000 	.word	0x4002b000
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08e      	sub	sp, #56	; 0x38
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a3f      	ldr	r2, [pc, #252]	; (8001e94 <HAL_ETH_MspInit+0x11c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d178      	bne.n	8001e8c <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d9a:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a3e      	ldr	r2, [pc, #248]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	623b      	str	r3, [r7, #32]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001db8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001dd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a2c      	ldr	r2, [pc, #176]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfa:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	4b21      	ldr	r3, [pc, #132]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_ETH_MspInit+0x120>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e2a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e3c:	230b      	movs	r3, #11
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4815      	ldr	r0, [pc, #84]	; (8001e9c <HAL_ETH_MspInit+0x124>)
 8001e48:	f002 fb28 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e4c:	2332      	movs	r3, #50	; 0x32
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e5c:	230b      	movs	r3, #11
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <HAL_ETH_MspInit+0x128>)
 8001e68:	f002 fb18 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e6c:	2386      	movs	r3, #134	; 0x86
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e7c:	230b      	movs	r3, #11
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <HAL_ETH_MspInit+0x12c>)
 8001e88:	f002 fb08 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3738      	adds	r7, #56	; 0x38
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40028000 	.word	0x40028000
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40021800 	.word	0x40021800
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020000 	.word	0x40020000

08001ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	; 0x30
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <HAL_I2C_MspInit+0xdc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d129      	bne.n	8001f1e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ee2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee8:	2312      	movs	r3, #18
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4823      	ldr	r0, [pc, #140]	; (8001f8c <HAL_I2C_MspInit+0xe4>)
 8001f00:	f002 facc 	bl	800449c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f04:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f1c:	e02d      	b.n	8001f7a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_I2C_MspInit+0xe8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d128      	bne.n	8001f7a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f32:	6313      	str	r3, [r2, #48]	; 0x30
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f46:	2312      	movs	r3, #18
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f52:	2304      	movs	r3, #4
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <HAL_I2C_MspInit+0xec>)
 8001f5e:	f002 fa9d 	bl	800449c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_I2C_MspInit+0xe0>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3730      	adds	r7, #48	; 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40005400 	.word	0x40005400
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40005c00 	.word	0x40005c00
 8001f94:	40021c00 	.word	0x40021c00

08001f98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a55      	ldr	r2, [pc, #340]	; (800210c <HAL_LTDC_MspInit+0x174>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	f040 80a3 	bne.w	8002102 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fbc:	4b54      	ldr	r3, [pc, #336]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	4a53      	ldr	r2, [pc, #332]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc8:	4b51      	ldr	r3, [pc, #324]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd4:	4b4e      	ldr	r3, [pc, #312]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b4b      	ldr	r3, [pc, #300]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fec:	4b48      	ldr	r3, [pc, #288]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	4a47      	ldr	r2, [pc, #284]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff8:	4b45      	ldr	r3, [pc, #276]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a41      	ldr	r2, [pc, #260]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	6313      	str	r3, [r2, #48]	; 0x30
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800201c:	4b3c      	ldr	r3, [pc, #240]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8002022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002026:	6313      	str	r3, [r2, #48]	; 0x30
 8002028:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002034:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a35      	ldr	r2, [pc, #212]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
 8002040:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_LTDC_MspInit+0x178>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800204c:	2310      	movs	r3, #16
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800205c:	230e      	movs	r3, #14
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	482b      	ldr	r0, [pc, #172]	; (8002114 <HAL_LTDC_MspInit+0x17c>)
 8002068:	f002 fa18 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800206c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800207e:	230e      	movs	r3, #14
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	4823      	ldr	r0, [pc, #140]	; (8002118 <HAL_LTDC_MspInit+0x180>)
 800208a:	f002 fa07 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800208e:	23f7      	movs	r3, #247	; 0xf7
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800209e:	230e      	movs	r3, #14
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	481c      	ldr	r0, [pc, #112]	; (800211c <HAL_LTDC_MspInit+0x184>)
 80020aa:	f002 f9f7 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020c0:	2309      	movs	r3, #9
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	4619      	mov	r1, r3
 80020ca:	4815      	ldr	r0, [pc, #84]	; (8002120 <HAL_LTDC_MspInit+0x188>)
 80020cc:	f002 f9e6 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80020d0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020e2:	230e      	movs	r3, #14
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	4619      	mov	r1, r3
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <HAL_LTDC_MspInit+0x18c>)
 80020ee:	f002 f9d5 	bl	800449c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2105      	movs	r1, #5
 80020f6:	2058      	movs	r0, #88	; 0x58
 80020f8:	f001 f952 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80020fc:	2058      	movs	r0, #88	; 0x58
 80020fe:	f001 f96b 	bl	80033d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	3738      	adds	r7, #56	; 0x38
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40016800 	.word	0x40016800
 8002110:	40023800 	.word	0x40023800
 8002114:	40021000 	.word	0x40021000
 8002118:	40022400 	.word	0x40022400
 800211c:	40022800 	.word	0x40022800
 8002120:	40021800 	.word	0x40021800
 8002124:	40022000 	.word	0x40022000

08002128 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3b      	ldr	r2, [pc, #236]	; (8002234 <HAL_QSPI_MspInit+0x10c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d170      	bne.n	800222c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	4a3a      	ldr	r2, [pc, #232]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6393      	str	r3, [r2, #56]	; 0x38
 8002156:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002162:	4b35      	ldr	r3, [pc, #212]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a34      	ldr	r2, [pc, #208]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002168:	f043 0310 	orr.w	r3, r3, #16
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a2e      	ldr	r2, [pc, #184]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a28      	ldr	r2, [pc, #160]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_QSPI_MspInit+0x110>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80021aa:	2304      	movs	r3, #4
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021ba:	2309      	movs	r3, #9
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	481d      	ldr	r0, [pc, #116]	; (800223c <HAL_QSPI_MspInit+0x114>)
 80021c6:	f002 f969 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80021ca:	2340      	movs	r3, #64	; 0x40
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021da:	230a      	movs	r3, #10
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80021de:	f107 031c 	add.w	r3, r7, #28
 80021e2:	4619      	mov	r1, r3
 80021e4:	4816      	ldr	r0, [pc, #88]	; (8002240 <HAL_QSPI_MspInit+0x118>)
 80021e6:	f002 f959 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021ea:	2304      	movs	r3, #4
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021fa:	2309      	movs	r3, #9
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	480e      	ldr	r0, [pc, #56]	; (8002240 <HAL_QSPI_MspInit+0x118>)
 8002206:	f002 f949 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800220a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800221c:	2309      	movs	r3, #9
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4807      	ldr	r0, [pc, #28]	; (8002244 <HAL_QSPI_MspInit+0x11c>)
 8002228:	f002 f938 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800222c:	bf00      	nop
 800222e:	3730      	adds	r7, #48	; 0x30
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	a0001000 	.word	0xa0001000
 8002238:	40023800 	.word	0x40023800
 800223c:	40021000 	.word	0x40021000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020c00 	.word	0x40020c00

08002248 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_RTC_MspInit+0x2c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d105      	bne.n	8002266 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_RTC_MspInit+0x30>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	4a06      	ldr	r2, [pc, #24]	; (8002278 <HAL_RTC_MspInit+0x30>)
 8002260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002264:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40002800 	.word	0x40002800
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a25      	ldr	r2, [pc, #148]	; (8002330 <HAL_SD_MspInit+0xb4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d144      	bne.n	8002328 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800229e:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_SD_MspInit+0xb8>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80022e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80022ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022f8:	230c      	movs	r3, #12
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	; (8002338 <HAL_SD_MspInit+0xbc>)
 8002304:	f002 f8ca 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002308:	2304      	movs	r3, #4
 800230a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002318:	230c      	movs	r3, #12
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <HAL_SD_MspInit+0xc0>)
 8002324:	f002 f8ba 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40012c00 	.word	0x40012c00
 8002334:	40023800 	.word	0x40023800
 8002338:	40020800 	.word	0x40020800
 800233c:	40020c00 	.word	0x40020c00

08002340 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002360:	d127      	bne.n	80023b2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_SPDIFRX_MspInit+0x7c>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <HAL_SPDIFRX_MspInit+0x7c>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_SPDIFRX_MspInit+0x7c>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_SPDIFRX_MspInit+0x7c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <HAL_SPDIFRX_MspInit+0x7c>)
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_SPDIFRX_MspInit+0x7c>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80023a2:	2308      	movs	r3, #8
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <HAL_SPDIFRX_MspInit+0x80>)
 80023ae:	f002 f875 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	; 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020c00 	.word	0x40020c00

080023c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a25      	ldr	r2, [pc, #148]	; (8002478 <HAL_SPI_MspInit+0xb4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d144      	bne.n	8002470 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_SPI_MspInit+0xb8>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a24      	ldr	r2, [pc, #144]	; (800247c <HAL_SPI_MspInit+0xb8>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_SPI_MspInit+0xb8>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023fe:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_SPI_MspInit+0xb8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_SPI_MspInit+0xb8>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <HAL_SPI_MspInit+0xb8>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_SPI_MspInit+0xb8>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_SPI_MspInit+0xb8>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_SPI_MspInit+0xb8>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800242e:	2302      	movs	r3, #2
 8002430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800243e:	2305      	movs	r3, #5
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <HAL_SPI_MspInit+0xbc>)
 800244a:	f002 f827 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800244e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002460:	2305      	movs	r3, #5
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <HAL_SPI_MspInit+0xc0>)
 800246c:	f002 f816 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40003800 	.word	0x40003800
 800247c:	40023800 	.word	0x40023800
 8002480:	40022000 	.word	0x40022000
 8002484:	40020400 	.word	0x40020400

08002488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_TIM_Base_MspInit+0xc8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10c      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800249a:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80024b2:	e046      	b.n	8002542 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024bc:	d10c      	bne.n	80024d8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024be:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a24      	ldr	r2, [pc, #144]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	69bb      	ldr	r3, [r7, #24]
}
 80024d6:	e034      	b.n	8002542 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_TIM_Base_MspInit+0xd0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d10c      	bne.n	80024fc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6413      	str	r3, [r2, #64]	; 0x40
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
}
 80024fa:	e022      	b.n	8002542 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_TIM_Base_MspInit+0xd4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10c      	bne.n	8002520 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
}
 800251e:	e010      	b.n	8002542 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <HAL_TIM_Base_MspInit+0xd8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10b      	bne.n	8002542 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <HAL_TIM_Base_MspInit+0xcc>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
}
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40010000 	.word	0x40010000
 8002554:	40023800 	.word	0x40023800
 8002558:	40000400 	.word	0x40000400
 800255c:	40000c00 	.word	0x40000c00
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_TIM_PWM_MspInit+0x38>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d10b      	bne.n	800258e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800257c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40001800 	.word	0x40001800
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08c      	sub	sp, #48	; 0x30
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 031c 	add.w	r3, r7, #28
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a56      	ldr	r2, [pc, #344]	; (800271c <HAL_TIM_MspPostInit+0x178>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d11d      	bne.n	8002602 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a55      	ldr	r2, [pc, #340]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80025de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	484a      	ldr	r0, [pc, #296]	; (8002724 <HAL_TIM_MspPostInit+0x180>)
 80025fc:	f001 ff4e 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002600:	e087      	b.n	8002712 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260a:	d11d      	bne.n	8002648 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	4b44      	ldr	r3, [pc, #272]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	4a43      	ldr	r2, [pc, #268]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6313      	str	r3, [r2, #48]	; 0x30
 8002618:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002624:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002636:	2301      	movs	r3, #1
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4619      	mov	r1, r3
 8002640:	4838      	ldr	r0, [pc, #224]	; (8002724 <HAL_TIM_MspPostInit+0x180>)
 8002642:	f001 ff2b 	bl	800449c <HAL_GPIO_Init>
}
 8002646:	e064      	b.n	8002712 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a36      	ldr	r2, [pc, #216]	; (8002728 <HAL_TIM_MspPostInit+0x184>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d11c      	bne.n	800268c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a32      	ldr	r2, [pc, #200]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800266a:	2310      	movs	r3, #16
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800267a:	2302      	movs	r3, #2
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	4619      	mov	r1, r3
 8002684:	4829      	ldr	r0, [pc, #164]	; (800272c <HAL_TIM_MspPostInit+0x188>)
 8002686:	f001 ff09 	bl	800449c <HAL_GPIO_Init>
}
 800268a:	e042      	b.n	8002712 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_TIM_MspPostInit+0x18c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d11c      	bne.n	80026d0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a21      	ldr	r2, [pc, #132]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026be:	2302      	movs	r3, #2
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	4619      	mov	r1, r3
 80026c8:	481a      	ldr	r0, [pc, #104]	; (8002734 <HAL_TIM_MspPostInit+0x190>)
 80026ca:	f001 fee7 	bl	800449c <HAL_GPIO_Init>
}
 80026ce:	e020      	b.n	8002712 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a18      	ldr	r2, [pc, #96]	; (8002738 <HAL_TIM_MspPostInit+0x194>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d11b      	bne.n	8002712 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a10      	ldr	r2, [pc, #64]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 80026e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_TIM_MspPostInit+0x17c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80026f2:	2340      	movs	r3, #64	; 0x40
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002702:	2309      	movs	r3, #9
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	480b      	ldr	r0, [pc, #44]	; (800273c <HAL_TIM_MspPostInit+0x198>)
 800270e:	f001 fec5 	bl	800449c <HAL_GPIO_Init>
}
 8002712:	bf00      	nop
 8002714:	3730      	adds	r7, #48	; 0x30
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40010000 	.word	0x40010000
 8002720:	40023800 	.word	0x40023800
 8002724:	40020000 	.word	0x40020000
 8002728:	40000400 	.word	0x40000400
 800272c:	40020400 	.word	0x40020400
 8002730:	40000c00 	.word	0x40000c00
 8002734:	40022000 	.word	0x40022000
 8002738:	40001800 	.word	0x40001800
 800273c:	40021c00 	.word	0x40021c00

08002740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08c      	sub	sp, #48	; 0x30
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <HAL_UART_MspInit+0x110>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d145      	bne.n	80027ee <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_UART_MspInit+0x114>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a35      	ldr	r2, [pc, #212]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b33      	ldr	r3, [pc, #204]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a2f      	ldr	r2, [pc, #188]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_UART_MspInit+0x114>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ba:	2307      	movs	r3, #7
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	4824      	ldr	r0, [pc, #144]	; (8002858 <HAL_UART_MspInit+0x118>)
 80027c6:	f001 fe69 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80027ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027dc:	2307      	movs	r3, #7
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 031c 	add.w	r3, r7, #28
 80027e4:	4619      	mov	r1, r3
 80027e6:	481d      	ldr	r0, [pc, #116]	; (800285c <HAL_UART_MspInit+0x11c>)
 80027e8:	f001 fe58 	bl	800449c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027ec:	e02c      	b.n	8002848 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_UART_MspInit+0x120>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d127      	bne.n	8002848 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_UART_MspInit+0x114>)
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	4a15      	ldr	r2, [pc, #84]	; (8002854 <HAL_UART_MspInit+0x114>)
 80027fe:	f043 0320 	orr.w	r3, r3, #32
 8002802:	6453      	str	r3, [r2, #68]	; 0x44
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002810:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_UART_MspInit+0x114>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6313      	str	r3, [r2, #48]	; 0x30
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_UART_MspInit+0x114>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002838:	2308      	movs	r3, #8
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	4619      	mov	r1, r3
 8002842:	4808      	ldr	r0, [pc, #32]	; (8002864 <HAL_UART_MspInit+0x124>)
 8002844:	f001 fe2a 	bl	800449c <HAL_GPIO_Init>
}
 8002848:	bf00      	nop
 800284a:	3730      	adds	r7, #48	; 0x30
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40011000 	.word	0x40011000
 8002854:	40023800 	.word	0x40023800
 8002858:	40020400 	.word	0x40020400
 800285c:	40020000 	.word	0x40020000
 8002860:	40011400 	.word	0x40011400
 8002864:	40020800 	.word	0x40020800

08002868 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <HAL_FMC_MspInit+0x100>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d16d      	bne.n	8002960 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002884:	4b38      	ldr	r3, [pc, #224]	; (8002968 <HAL_FMC_MspInit+0x100>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800288a:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_FMC_MspInit+0x104>)
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	4a37      	ldr	r2, [pc, #220]	; (800296c <HAL_FMC_MspInit+0x104>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6393      	str	r3, [r2, #56]	; 0x38
 8002896:	4b35      	ldr	r3, [pc, #212]	; (800296c <HAL_FMC_MspInit+0x104>)
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80028a2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80028a6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028b4:	230c      	movs	r3, #12
 80028b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	4619      	mov	r1, r3
 80028bc:	482c      	ldr	r0, [pc, #176]	; (8002970 <HAL_FMC_MspInit+0x108>)
 80028be:	f001 fded 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80028c2:	f248 1333 	movw	r3, #33075	; 0x8133
 80028c6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028d4:	230c      	movs	r3, #12
 80028d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4825      	ldr	r0, [pc, #148]	; (8002974 <HAL_FMC_MspInit+0x10c>)
 80028de:	f001 fddd 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80028e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80028e6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028f4:	230c      	movs	r3, #12
 80028f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	481e      	ldr	r0, [pc, #120]	; (8002978 <HAL_FMC_MspInit+0x110>)
 80028fe:	f001 fdcd 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002902:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002906:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002914:	230c      	movs	r3, #12
 8002916:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	4619      	mov	r1, r3
 800291c:	4817      	ldr	r0, [pc, #92]	; (800297c <HAL_FMC_MspInit+0x114>)
 800291e:	f001 fdbd 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002922:	2328      	movs	r3, #40	; 0x28
 8002924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002932:	230c      	movs	r3, #12
 8002934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4811      	ldr	r0, [pc, #68]	; (8002980 <HAL_FMC_MspInit+0x118>)
 800293c:	f001 fdae 	bl	800449c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002940:	2308      	movs	r3, #8
 8002942:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002950:	230c      	movs	r3, #12
 8002952:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	4619      	mov	r1, r3
 8002958:	480a      	ldr	r0, [pc, #40]	; (8002984 <HAL_FMC_MspInit+0x11c>)
 800295a:	f001 fd9f 	bl	800449c <HAL_GPIO_Init>
 800295e:	e000      	b.n	8002962 <HAL_FMC_MspInit+0xfa>
    return;
 8002960:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000310 	.word	0x20000310
 800296c:	40023800 	.word	0x40023800
 8002970:	40021000 	.word	0x40021000
 8002974:	40021800 	.word	0x40021800
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40021400 	.word	0x40021400
 8002980:	40021c00 	.word	0x40021c00
 8002984:	40020800 	.word	0x40020800

08002988 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002990:	f7ff ff6a 	bl	8002868 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2b      	ldr	r2, [pc, #172]	; (8002a58 <HAL_SAI_MspInit+0xbc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d124      	bne.n	80029f8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80029ae:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_SAI_MspInit+0xc0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10b      	bne.n	80029ce <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80029b6:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_SAI_MspInit+0xc4>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <HAL_SAI_MspInit+0xc4>)
 80029bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_SAI_MspInit+0xc4>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <HAL_SAI_MspInit+0xc0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <HAL_SAI_MspInit+0xc0>)
 80029d6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80029d8:	23f0      	movs	r3, #240	; 0xf0
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80029e8:	230a      	movs	r3, #10
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	481c      	ldr	r0, [pc, #112]	; (8002a64 <HAL_SAI_MspInit+0xc8>)
 80029f4:	f001 fd52 	bl	800449c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_SAI_MspInit+0xcc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d125      	bne.n	8002a4e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002a02:	4b16      	ldr	r3, [pc, #88]	; (8002a5c <HAL_SAI_MspInit+0xc0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_SAI_MspInit+0xc4>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <HAL_SAI_MspInit+0xc4>)
 8002a10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_SAI_MspInit+0xc4>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_SAI_MspInit+0xc0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	4a0c      	ldr	r2, [pc, #48]	; (8002a5c <HAL_SAI_MspInit+0xc0>)
 8002a2a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a3e:	230a      	movs	r3, #10
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	4808      	ldr	r0, [pc, #32]	; (8002a6c <HAL_SAI_MspInit+0xd0>)
 8002a4a:	f001 fd27 	bl	800449c <HAL_GPIO_Init>

    }
}
 8002a4e:	bf00      	nop
 8002a50:	3728      	adds	r7, #40	; 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40015c04 	.word	0x40015c04
 8002a5c:	20000314 	.word	0x20000314
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40015c24 	.word	0x40015c24
 8002a6c:	40021800 	.word	0x40021800

08002a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	2036      	movs	r0, #54	; 0x36
 8002a86:	f000 fc8b 	bl	80033a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a8a:	2036      	movs	r0, #54	; 0x36
 8002a8c:	f000 fca4 	bl	80033d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_InitTick+0xa0>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_InitTick+0xa0>)
 8002a96:	f043 0310 	orr.w	r3, r3, #16
 8002a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_InitTick+0xa0>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aa8:	f107 0210 	add.w	r2, r7, #16
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 fe7c 	bl	80077b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ab8:	f004 fe52 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 8002abc:	4603      	mov	r3, r0
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <HAL_InitTick+0xa4>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0c9b      	lsrs	r3, r3, #18
 8002acc:	3b01      	subs	r3, #1
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HAL_InitTick+0xa8>)
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_InitTick+0xac>)
 8002ad4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_InitTick+0xa8>)
 8002ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002adc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_InitTick+0xa8>)
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_InitTick+0xa8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_InitTick+0xa8>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <HAL_InitTick+0xa8>)
 8002af2:	f007 fb2a 	bl	800a14a <HAL_TIM_Base_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002afc:	4806      	ldr	r0, [pc, #24]	; (8002b18 <HAL_InitTick+0xa8>)
 8002afe:	f007 fb7b 	bl	800a1f8 <HAL_TIM_Base_Start_IT>
 8002b02:	4603      	mov	r3, r0
 8002b04:	e000      	b.n	8002b08 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3730      	adds	r7, #48	; 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	431bde83 	.word	0x431bde83
 8002b18:	20008cb8 	.word	0x20008cb8
 8002b1c:	40001000 	.word	0x40001000

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <NMI_Handler+0x4>

08002b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <MemManage_Handler+0x4>

08002b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b36:	e7fe      	b.n	8002b36 <BusFault_Handler+0x4>

08002b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b3c:	e7fe      	b.n	8002b3c <UsageFault_Handler+0x4>

08002b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <TIM6_DAC_IRQHandler+0x10>)
 8002b52:	f007 fc20 	bl	800a396 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20008cb8 	.word	0x20008cb8

08002b60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <OTG_FS_IRQHandler+0x10>)
 8002b66:	f002 f8fb 	bl	8004d60 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20009558 	.word	0x20009558

08002b74 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <LTDC_IRQHandler+0x10>)
 8002b7a:	f003 fde3 	bl	8006744 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20008864 	.word	0x20008864

08002b88 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <DMA2D_IRQHandler+0x10>)
 8002b8e:	f000 fe79 	bl	8003884 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20008b18 	.word	0x20008b18

08002b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <_sbrk+0x5c>)
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <_sbrk+0x60>)
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <_sbrk+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <_sbrk+0x64>)
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <_sbrk+0x68>)
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <_sbrk+0x64>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d207      	bcs.n	8002bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bcc:	f00f ff7a 	bl	8012ac4 <__errno>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bda:	e009      	b.n	8002bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <_sbrk+0x64>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <_sbrk+0x64>)
 8002bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20050000 	.word	0x20050000
 8002bfc:	00000400 	.word	0x00000400
 8002c00:	20000318 	.word	0x20000318
 8002c04:	20009870 	.word	0x20009870

08002c08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <SystemInit+0x20>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <SystemInit+0x20>)
 8002c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c30:	480d      	ldr	r0, [pc, #52]	; (8002c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c32:	490e      	ldr	r1, [pc, #56]	; (8002c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c38:	e002      	b.n	8002c40 <LoopCopyDataInit>

08002c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3e:	3304      	adds	r3, #4

08002c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c44:	d3f9      	bcc.n	8002c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c46:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c48:	4c0b      	ldr	r4, [pc, #44]	; (8002c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c4c:	e001      	b.n	8002c52 <LoopFillZerobss>

08002c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c50:	3204      	adds	r2, #4

08002c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c54:	d3fb      	bcc.n	8002c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c56:	f7ff ffd7 	bl	8002c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c5a:	f00f ff39 	bl	8012ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c5e:	f7fd fc87 	bl	8000570 <main>
  bx  lr    
 8002c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c6c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002c70:	08012dc4 	.word	0x08012dc4
  ldr r2, =_sbss
 8002c74:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002c78:	2000986c 	.word	0x2000986c

08002c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC_IRQHandler>

08002c7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c82:	2003      	movs	r0, #3
 8002c84:	f000 fb81 	bl	800338a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7ff fef1 	bl	8002a70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002c8e:	f7fe feed 	bl	8001a6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x20>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x24>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_IncTick+0x24>)
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	20008d04 	.word	0x20008d04

08002cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_GetTick+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20008d04 	.word	0x20008d04

08002cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff ffee 	bl	8002cc0 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf0:	d005      	beq.n	8002cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_Delay+0x44>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cfe:	bf00      	nop
 8002d00:	f7ff ffde 	bl	8002cc0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8f7      	bhi.n	8002d00 <HAL_Delay+0x28>
  {
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000008 	.word	0x20000008

08002d20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e031      	b.n	8002d9a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fe febc 	bl	8001abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_ADC_Init+0x84>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	f043 0202 	orr.w	r2, r3, #2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f964 	bl	800303c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f023 0303 	bic.w	r3, r3, #3
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
 8002d8a:	e001      	b.n	8002d90 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	ffffeefd 	.word	0xffffeefd

08002da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e12a      	b.n	800301a <HAL_ADC_ConfigChannel+0x272>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d93a      	bls.n	8002e4a <HAL_ADC_ConfigChannel+0xa2>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ddc:	d035      	beq.n	8002e4a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68d9      	ldr	r1, [r3, #12]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	3b1e      	subs	r3, #30
 8002df4:	2207      	movs	r2, #7
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a87      	ldr	r2, [pc, #540]	; (8003028 <HAL_ADC_ConfigChannel+0x280>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10a      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68d9      	ldr	r1, [r3, #12]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	061a      	lsls	r2, r3, #24
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e22:	e035      	b.n	8002e90 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	4618      	mov	r0, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4403      	add	r3, r0
 8002e3c:	3b1e      	subs	r3, #30
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e48:	e022      	b.n	8002e90 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6919      	ldr	r1, [r3, #16]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	2207      	movs	r2, #7
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43da      	mvns	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6919      	ldr	r1, [r3, #16]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4603      	mov	r3, r0
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4403      	add	r3, r0
 8002e86:	409a      	lsls	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d824      	bhi.n	8002ee2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b05      	subs	r3, #5
 8002eaa:	221f      	movs	r2, #31
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b05      	subs	r3, #5
 8002ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee0:	e04c      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d824      	bhi.n	8002f34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b23      	subs	r3, #35	; 0x23
 8002efc:	221f      	movs	r2, #31
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	400a      	ands	r2, r1
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	3b23      	subs	r3, #35	; 0x23
 8002f26:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
 8002f32:	e023      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b41      	subs	r3, #65	; 0x41
 8002f46:	221f      	movs	r2, #31
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	400a      	ands	r2, r1
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3b41      	subs	r3, #65	; 0x41
 8002f70:	fa00 f203 	lsl.w	r2, r0, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2a      	ldr	r2, [pc, #168]	; (800302c <HAL_ADC_ConfigChannel+0x284>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10a      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x1f4>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f8e:	d105      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_ADC_ConfigChannel+0x288>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a26      	ldr	r2, [pc, #152]	; (8003030 <HAL_ADC_ConfigChannel+0x288>)
 8002f96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <HAL_ADC_ConfigChannel+0x284>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d109      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x212>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b12      	cmp	r3, #18
 8002fac:	d105      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_ADC_ConfigChannel+0x288>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <HAL_ADC_ConfigChannel+0x288>)
 8002fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fb8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_ADC_ConfigChannel+0x284>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d125      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x268>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a17      	ldr	r2, [pc, #92]	; (8003028 <HAL_ADC_ConfigChannel+0x280>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_ADC_ConfigChannel+0x22e>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b11      	cmp	r3, #17
 8002fd4:	d11c      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_ADC_ConfigChannel+0x288>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a15      	ldr	r2, [pc, #84]	; (8003030 <HAL_ADC_ConfigChannel+0x288>)
 8002fdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fe0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a10      	ldr	r2, [pc, #64]	; (8003028 <HAL_ADC_ConfigChannel+0x280>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d111      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_ADC_ConfigChannel+0x28c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a11      	ldr	r2, [pc, #68]	; (8003038 <HAL_ADC_ConfigChannel+0x290>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0c9a      	lsrs	r2, r3, #18
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003002:	e002      	b.n	800300a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3b01      	subs	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f9      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	10000012 	.word	0x10000012
 800302c:	40012000 	.word	0x40012000
 8003030:	40012300 	.word	0x40012300
 8003034:	20000000 	.word	0x20000000
 8003038:	431bde83 	.word	0x431bde83

0800303c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003044:	4b78      	ldr	r3, [pc, #480]	; (8003228 <ADC_Init+0x1ec>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a77      	ldr	r2, [pc, #476]	; (8003228 <ADC_Init+0x1ec>)
 800304a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800304e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003050:	4b75      	ldr	r3, [pc, #468]	; (8003228 <ADC_Init+0x1ec>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4973      	ldr	r1, [pc, #460]	; (8003228 <ADC_Init+0x1ec>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	021a      	lsls	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ca:	4a58      	ldr	r2, [pc, #352]	; (800322c <ADC_Init+0x1f0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e00f      	b.n	8003136 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003134:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0202 	bic.w	r2, r2, #2
 8003144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6899      	ldr	r1, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	005a      	lsls	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01b      	beq.n	800319c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003172:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003182:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	3b01      	subs	r3, #1
 8003190:	035a      	lsls	r2, r3, #13
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	e007      	b.n	80031ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	051a      	lsls	r2, r3, #20
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6899      	ldr	r1, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031ee:	025a      	lsls	r2, r3, #9
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	029a      	lsls	r2, r3, #10
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40012300 	.word	0x40012300
 800322c:	0f000001 	.word	0x0f000001

08003230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <__NVIC_SetPriorityGrouping+0x40>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <__NVIC_SetPriorityGrouping+0x44>)
 800325a:	4313      	orrs	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	; (8003270 <__NVIC_SetPriorityGrouping+0x40>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00
 8003274:	05fa0000 	.word	0x05fa0000

08003278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <__NVIC_GetPriorityGrouping+0x18>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0307 	and.w	r3, r3, #7
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	db0b      	blt.n	80032be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4907      	ldr	r1, [pc, #28]	; (80032cc <__NVIC_EnableIRQ+0x38>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2001      	movs	r0, #1
 80032b6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100

080032d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	6039      	str	r1, [r7, #0]
 80032da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	db0a      	blt.n	80032fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	490c      	ldr	r1, [pc, #48]	; (800331c <__NVIC_SetPriority+0x4c>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	0112      	lsls	r2, r2, #4
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	440b      	add	r3, r1
 80032f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f8:	e00a      	b.n	8003310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4908      	ldr	r1, [pc, #32]	; (8003320 <__NVIC_SetPriority+0x50>)
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3b04      	subs	r3, #4
 8003308:	0112      	lsls	r2, r2, #4
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	440b      	add	r3, r1
 800330e:	761a      	strb	r2, [r3, #24]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000e100 	.word	0xe000e100
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f1c3 0307 	rsb	r3, r3, #7
 800333e:	2b04      	cmp	r3, #4
 8003340:	bf28      	it	cs
 8003342:	2304      	movcs	r3, #4
 8003344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3304      	adds	r3, #4
 800334a:	2b06      	cmp	r3, #6
 800334c:	d902      	bls.n	8003354 <NVIC_EncodePriority+0x30>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3b03      	subs	r3, #3
 8003352:	e000      	b.n	8003356 <NVIC_EncodePriority+0x32>
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	401a      	ands	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800336c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	43d9      	mvns	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	4313      	orrs	r3, r2
         );
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	; 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff4c 	bl	8003230 <__NVIC_SetPriorityGrouping>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b2:	f7ff ff61 	bl	8003278 <__NVIC_GetPriorityGrouping>
 80033b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	6978      	ldr	r0, [r7, #20]
 80033be:	f7ff ffb1 	bl	8003324 <NVIC_EncodePriority>
 80033c2:	4602      	mov	r2, r0
 80033c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ff80 	bl	80032d0 <__NVIC_SetPriority>
}
 80033d0:	bf00      	nop
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff54 	bl	8003294 <__NVIC_EnableIRQ>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e054      	b.n	80034b0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	7f5b      	ldrb	r3, [r3, #29]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fbaa 	bl	8001b70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	791b      	ldrb	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <HAL_CRC_Init+0xc4>)
 8003430:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0218 	bic.w	r2, r2, #24
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	e00c      	b.n	800345e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	461a      	mov	r2, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f834 	bl	80034bc <HAL_CRCEx_Polynomial_Set>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e028      	b.n	80034b0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	795b      	ldrb	r3, [r3, #5]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346e:	611a      	str	r2, [r3, #16]
 8003470:	e004      	b.n	800347c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6912      	ldr	r2, [r2, #16]
 800347a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	04c11db7 	.word	0x04c11db7

080034bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80034cc:	231f      	movs	r3, #31
 80034ce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80034d0:	bf00      	nop
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1e5a      	subs	r2, r3, #1
 80034d6:	613a      	str	r2, [r7, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_CRCEx_Polynomial_Set+0x34>
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_CRCEx_Polynomial_Set+0x16>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b18      	cmp	r3, #24
 80034f4:	d846      	bhi.n	8003584 <HAL_CRCEx_Polynomial_Set+0xc8>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <HAL_CRCEx_Polynomial_Set+0x40>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	0800358b 	.word	0x0800358b
 8003500:	08003585 	.word	0x08003585
 8003504:	08003585 	.word	0x08003585
 8003508:	08003585 	.word	0x08003585
 800350c:	08003585 	.word	0x08003585
 8003510:	08003585 	.word	0x08003585
 8003514:	08003585 	.word	0x08003585
 8003518:	08003585 	.word	0x08003585
 800351c:	08003579 	.word	0x08003579
 8003520:	08003585 	.word	0x08003585
 8003524:	08003585 	.word	0x08003585
 8003528:	08003585 	.word	0x08003585
 800352c:	08003585 	.word	0x08003585
 8003530:	08003585 	.word	0x08003585
 8003534:	08003585 	.word	0x08003585
 8003538:	08003585 	.word	0x08003585
 800353c:	0800356d 	.word	0x0800356d
 8003540:	08003585 	.word	0x08003585
 8003544:	08003585 	.word	0x08003585
 8003548:	08003585 	.word	0x08003585
 800354c:	08003585 	.word	0x08003585
 8003550:	08003585 	.word	0x08003585
 8003554:	08003585 	.word	0x08003585
 8003558:	08003585 	.word	0x08003585
 800355c:	08003561 	.word	0x08003561
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b06      	cmp	r3, #6
 8003564:	d913      	bls.n	800358e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800356a:	e010      	b.n	800358e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b07      	cmp	r3, #7
 8003570:	d90f      	bls.n	8003592 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003576:	e00c      	b.n	8003592 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	d90b      	bls.n	8003596 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003582:	e008      	b.n	8003596 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
      break;
 8003588:	e006      	b.n	8003598 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800358a:	bf00      	nop
 800358c:	e004      	b.n	8003598 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003596:	bf00      	nop
  }
  if (status == HAL_OK)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 0118 	bic.w	r1, r3, #24
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e069      	b.n	80036ae <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fe fae2 	bl	8001bb0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6819      	ldr	r1, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <HAL_DCMI_Init+0xf0>)
 800360e:	400b      	ands	r3, r1
 8003610:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003626:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003632:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800363e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800364a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003656:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b10      	cmp	r3, #16
 8003666:	d112      	bne.n	800368e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7f1b      	ldrb	r3, [r3, #28]
 800366c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7f5b      	ldrb	r3, [r3, #29]
 8003672:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003674:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7f9b      	ldrb	r3, [r3, #30]
 800367a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800367c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7fdb      	ldrb	r3, [r3, #31]
 8003684:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800368a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800368c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 021e 	orr.w	r2, r2, #30
 800369c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	ffe0f007 	.word	0xffe0f007

080036bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_DMA_Start_IT+0x26>
 80036de:	2302      	movs	r3, #2
 80036e0:	e048      	b.n	8003774 <HAL_DMA_Start_IT+0xb8>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d137      	bne.n	8003766 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2202      	movs	r2, #2
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f842 	bl	8003794 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	223f      	movs	r2, #63	; 0x3f
 8003716:	409a      	lsls	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0216 	orr.w	r2, r2, #22
 800372a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800373a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0208 	orr.w	r2, r2, #8
 8003752:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e005      	b.n	8003772 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800376e:	2302      	movs	r3, #2
 8003770:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d108      	bne.n	80037d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037d2:	e007      	b.n	80037e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	60da      	str	r2, [r3, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e039      	b.n	8003876 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe fa88 	bl	8001d2c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	f023 0107 	bic.w	r1, r3, #7
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_DMA2D_Init+0x90>)
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68d1      	ldr	r1, [r2, #12]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	430b      	orrs	r3, r1
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	ffffc000 	.word	0xffffc000

08003884 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d026      	beq.n	80038f4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d021      	beq.n	80038f4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2204      	movs	r2, #4
 80038d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d026      	beq.n	800394c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d021      	beq.n	800394c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003916:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2220      	movs	r2, #32
 800391e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	f043 0202 	orr.w	r2, r3, #2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2204      	movs	r2, #4
 8003930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d026      	beq.n	80039a4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395c:	2b00      	cmp	r3, #0
 800395e:	d021      	beq.n	80039a4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2204      	movs	r2, #4
 8003988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d013      	beq.n	80039d6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2204      	movs	r2, #4
 80039ce:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f853 	bl	8003a7c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d024      	beq.n	8003a2a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01f      	beq.n	8003a2a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039f8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2202      	movs	r2, #2
 8003a00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01f      	beq.n	8003a74 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01a      	beq.n	8003a74 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2210      	movs	r2, #16
 8003a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f80e 	bl	8003a90 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_DMA2D_ConfigLayer+0x20>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e079      	b.n	8003bb8 <HAL_DMA2D_ConfigLayer+0x114>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	3318      	adds	r3, #24
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003aee:	4b35      	ldr	r3, [pc, #212]	; (8003bc4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003af0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b0a      	cmp	r3, #10
 8003af8:	d003      	beq.n	8003b02 <HAL_DMA2D_ConfigLayer+0x5e>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b09      	cmp	r3, #9
 8003b00:	d107      	bne.n	8003b12 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e005      	b.n	8003b1e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	061b      	lsls	r3, r3, #24
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d120      	bne.n	8003b66 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	ea02 0103 	and.w	r1, r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b0a      	cmp	r3, #10
 8003b4c:	d003      	beq.n	8003b56 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b09      	cmp	r3, #9
 8003b54:	d127      	bne.n	8003ba6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28
 8003b64:	e01f      	b.n	8003ba6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	ea02 0103 	and.w	r1, r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b0a      	cmp	r3, #10
 8003b8e:	d003      	beq.n	8003b98 <HAL_DMA2D_ConfigLayer+0xf4>
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b09      	cmp	r3, #9
 8003b96:	d106      	bne.n	8003ba6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ba4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	ff03000f 	.word	0xff03000f

08003bc8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003bd8:	4ba9      	ldr	r3, [pc, #676]	; (8003e80 <HAL_ETH_Init+0x2b8>)
 8003bda:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e181      	b.n	8003ef2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe f8b8 	bl	8001d78 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c08:	4b9e      	ldr	r3, [pc, #632]	; (8003e84 <HAL_ETH_Init+0x2bc>)
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	4a9d      	ldr	r2, [pc, #628]	; (8003e84 <HAL_ETH_Init+0x2bc>)
 8003c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c12:	6453      	str	r3, [r2, #68]	; 0x44
 8003c14:	4b9b      	ldr	r3, [pc, #620]	; (8003e84 <HAL_ETH_Init+0x2bc>)
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c20:	4b99      	ldr	r3, [pc, #612]	; (8003e88 <HAL_ETH_Init+0x2c0>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a98      	ldr	r2, [pc, #608]	; (8003e88 <HAL_ETH_Init+0x2c0>)
 8003c26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c2a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c2c:	4b96      	ldr	r3, [pc, #600]	; (8003e88 <HAL_ETH_Init+0x2c0>)
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4994      	ldr	r1, [pc, #592]	; (8003e88 <HAL_ETH_Init+0x2c0>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c50:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003c52:	f7ff f835 	bl	8002cc0 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003c58:	e011      	b.n	8003c7e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003c5a:	f7ff f831 	bl	8002cc0 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c68:	d909      	bls.n	8003c7e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e139      	b.n	8003ef2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e4      	bne.n	8003c5a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f023 031c 	bic.w	r3, r3, #28
 8003c9e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003ca0:	f003 fd52 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8003ca4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	4a78      	ldr	r2, [pc, #480]	; (8003e8c <HAL_ETH_Init+0x2c4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d908      	bls.n	8003cc0 <HAL_ETH_Init+0xf8>
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	4a77      	ldr	r2, [pc, #476]	; (8003e90 <HAL_ETH_Init+0x2c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d804      	bhi.n	8003cc0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f043 0308 	orr.w	r3, r3, #8
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e027      	b.n	8003d10 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	4a73      	ldr	r2, [pc, #460]	; (8003e90 <HAL_ETH_Init+0x2c8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d908      	bls.n	8003cda <HAL_ETH_Init+0x112>
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	4a6d      	ldr	r2, [pc, #436]	; (8003e80 <HAL_ETH_Init+0x2b8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d204      	bcs.n	8003cda <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f043 030c 	orr.w	r3, r3, #12
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	e01a      	b.n	8003d10 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4a68      	ldr	r2, [pc, #416]	; (8003e80 <HAL_ETH_Init+0x2b8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d303      	bcc.n	8003cea <HAL_ETH_Init+0x122>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4a6b      	ldr	r2, [pc, #428]	; (8003e94 <HAL_ETH_Init+0x2cc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d911      	bls.n	8003d0e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4a69      	ldr	r2, [pc, #420]	; (8003e94 <HAL_ETH_Init+0x2cc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d908      	bls.n	8003d04 <HAL_ETH_Init+0x13c>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4a68      	ldr	r2, [pc, #416]	; (8003e98 <HAL_ETH_Init+0x2d0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d804      	bhi.n	8003d04 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f043 0304 	orr.w	r3, r3, #4
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e005      	b.n	8003d10 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f043 0310 	orr.w	r3, r3, #16
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	e000      	b.n	8003d10 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003d0e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003d18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f954 	bl	8003fcc <HAL_ETH_WritePHYRegister>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003d2e:	6939      	ldr	r1, [r7, #16]
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f9b1 	bl	8004098 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0d7      	b.n	8003ef2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003d42:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003d46:	f7fe ffc7 	bl	8002cd8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 80a4 	beq.w	8003e9c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d54:	f7fe ffb4 	bl	8002cc0 <HAL_GetTick>
 8003d58:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003d5a:	f107 030c 	add.w	r3, r7, #12
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2101      	movs	r1, #1
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8ca 	bl	8003efc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003d68:	f7fe ffaa 	bl	8002cc0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d90f      	bls.n	8003d9a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003d7e:	6939      	ldr	r1, [r7, #16]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f989 	bl	8004098 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0ab      	b.n	8003ef2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0da      	beq.n	8003d5a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003da8:	2100      	movs	r1, #0
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f90e 	bl	8003fcc <HAL_ETH_WritePHYRegister>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003dba:	6939      	ldr	r1, [r7, #16]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f96b 	bl	8004098 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e091      	b.n	8003ef2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dce:	f7fe ff77 	bl	8002cc0 <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2101      	movs	r1, #1
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f88d 	bl	8003efc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003de2:	f7fe ff6d 	bl	8002cc0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d90f      	bls.n	8003e14 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003df8:	6939      	ldr	r1, [r7, #16]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f94c 	bl	8004098 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e06e      	b.n	8003ef2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0da      	beq.n	8003dd4 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003e1e:	f107 030c 	add.w	r3, r7, #12
 8003e22:	461a      	mov	r2, r3
 8003e24:	2110      	movs	r1, #16
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f868 	bl	8003efc <HAL_ETH_ReadPHYRegister>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003e36:	6939      	ldr	r1, [r7, #16]
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f92d 	bl	8004098 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003e46:	2301      	movs	r3, #1
 8003e48:	e053      	b.n	8003ef2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e002      	b.n	8003e64 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	e034      	b.n	8003ee0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	e02f      	b.n	8003ee0 <HAL_ETH_Init+0x318>
 8003e80:	03938700 	.word	0x03938700
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40013800 	.word	0x40013800
 8003e8c:	01312cff 	.word	0x01312cff
 8003e90:	02160ebf 	.word	0x02160ebf
 8003e94:	05f5e0ff 	.word	0x05f5e0ff
 8003e98:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	08db      	lsrs	r3, r3, #3
 8003ea2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003eac:	4313      	orrs	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f889 	bl	8003fcc <HAL_ETH_WritePHYRegister>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8e6 	bl	8004098 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e00c      	b.n	8003ef2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003ed8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003edc:	f7fe fefc 	bl	8002cd8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8d8 	bl	8004098 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop

08003efc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	460b      	mov	r3, r1
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b82      	cmp	r3, #130	; 0x82
 8003f1c:	d101      	bne.n	8003f22 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e050      	b.n	8003fc4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2282      	movs	r2, #130	; 0x82
 8003f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 031c 	and.w	r3, r3, #28
 8003f38:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8a1b      	ldrh	r3, [r3, #16]
 8003f3e:	02db      	lsls	r3, r3, #11
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003f48:	897b      	ldrh	r3, [r7, #10]
 8003f4a:	019b      	lsls	r3, r3, #6
 8003f4c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 0302 	bic.w	r3, r3, #2
 8003f5c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f6e:	f7fe fea7 	bl	8002cc0 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f74:	e015      	b.n	8003fa2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003f76:	f7fe fea3 	bl	8002cc0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d309      	bcc.n	8003f9a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e014      	b.n	8003fc4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e4      	bne.n	8003f76 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b42      	cmp	r3, #66	; 0x42
 8003fec:	d101      	bne.n	8003ff2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e04e      	b.n	8004090 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2242      	movs	r2, #66	; 0x42
 8003ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 031c 	and.w	r3, r3, #28
 8004008:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8a1b      	ldrh	r3, [r3, #16]
 800400e:	02db      	lsls	r3, r3, #11
 8004010:	b29b      	uxth	r3, r3
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004018:	897b      	ldrh	r3, [r7, #10]
 800401a:	019b      	lsls	r3, r3, #6
 800401c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f043 0302 	orr.w	r3, r3, #2
 800402c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004048:	f7fe fe3a 	bl	8002cc0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800404e:	e015      	b.n	800407c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004050:	f7fe fe36 	bl	8002cc0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405e:	d309      	bcc.n	8004074 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e00d      	b.n	8004090 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e4      	bne.n	8004050 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b0b0      	sub	sp, #192	; 0xc0
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d007      	beq.n	80040be <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80040c6:	2300      	movs	r3, #0
 80040c8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80040de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e2:	663b      	str	r3, [r7, #96]	; 0x60
 80040e4:	e001      	b.n	80040ea <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80040ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040ee:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040f4:	2300      	movs	r3, #0
 80040f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004104:	2340      	movs	r3, #64	; 0x40
 8004106:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004108:	2300      	movs	r3, #0
 800410a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800413e:	2300      	movs	r3, #0
 8004140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800414a:	2300      	movs	r3, #0
 800414c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800416c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004170:	4bab      	ldr	r3, [pc, #684]	; (8004420 <ETH_MACDMAConfig+0x388>)
 8004172:	4013      	ands	r3, r2
 8004174:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004178:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800417a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800417c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800417e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004180:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004184:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800418a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800418c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800418e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004192:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004198:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800419a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800419c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800419e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80041a0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80041a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80041a4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80041a8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80041aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80041ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80041ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7fe fd83 	bl	8002cd8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041da:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80041dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80041de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80041e0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80041e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80041e4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80041e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80041ea:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80041ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80041f0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80041f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80041f6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80041f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80041fc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004200:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004208:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800420a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004216:	2001      	movs	r0, #1
 8004218:	f7fe fd5e 	bl	8002cd8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004224:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800422e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004238:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004244:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004248:	f64f 7341 	movw	r3, #65345	; 0xff41
 800424c:	4013      	ands	r3, r2
 800424e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004256:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800425c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800425e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004262:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004268:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800426a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800426e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004270:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004274:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004276:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004288:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004294:	2001      	movs	r0, #1
 8004296:	f7fe fd1f 	bl	8002cd8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042a2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80042a4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80042a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80042be:	2001      	movs	r0, #1
 80042c0:	f7fe fd0a 	bl	8002cd8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042cc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80042d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80042dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042e0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80042ee:	2300      	movs	r3, #0
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80042f2:	2304      	movs	r3, #4
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80042f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80042fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004300:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004312:	2300      	movs	r3, #0
 8004314:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004316:	2300      	movs	r3, #0
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004322:	4413      	add	r3, r2
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800432a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800432e:	4b3d      	ldr	r3, [pc, #244]	; (8004424 <ETH_MACDMAConfig+0x38c>)
 8004330:	4013      	ands	r3, r2
 8004332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004336:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004338:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800433a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800433c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800433e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004340:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004342:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004344:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004346:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004348:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800434a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800434c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800434e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004352:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004356:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004358:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	f241 0318 	movw	r3, #4120	; 0x1018
 800436a:	4413      	add	r3, r2
 800436c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004370:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	f241 0318 	movw	r3, #4120	; 0x1018
 800437a:	4413      	add	r3, r2
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004382:	2001      	movs	r0, #1
 8004384:	f7fe fca8 	bl	8002cd8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004390:	4413      	add	r3, r2
 8004392:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004396:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800439c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800439e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80043a0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80043a4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80043a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80043a8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80043aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ac:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80043ae:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80043b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80043b2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80043d0:	2001      	movs	r0, #1
 80043d2:	f7fe fc81 	bl	8002cd8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043e2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10d      	bne.n	8004408 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	f241 031c 	movw	r3, #4124	; 0x101c
 80043f4:	4413      	add	r3, r2
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6811      	ldr	r1, [r2, #0]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <ETH_MACDMAConfig+0x390>)
 80043fe:	431a      	orrs	r2, r3
 8004400:	f241 031c 	movw	r3, #4124	; 0x101c
 8004404:	440b      	add	r3, r1
 8004406:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	461a      	mov	r2, r3
 800440e:	2100      	movs	r1, #0
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f80b 	bl	800442c <ETH_MACAddressConfig>
}
 8004416:	bf00      	nop
 8004418:	37c0      	adds	r7, #192	; 0xc0
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	ff20810f 	.word	0xff20810f
 8004424:	f8de3f23 	.word	0xf8de3f23
 8004428:	00010040 	.word	0x00010040

0800442c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3305      	adds	r3, #5
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	3204      	adds	r2, #4
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	4b11      	ldr	r3, [pc, #68]	; (8004494 <ETH_MACAddressConfig+0x68>)
 800444e:	4413      	add	r3, r2
 8004450:	461a      	mov	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3303      	adds	r3, #3
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	061a      	lsls	r2, r3, #24
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3302      	adds	r3, #2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3301      	adds	r3, #1
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	4313      	orrs	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	7812      	ldrb	r2, [r2, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <ETH_MACAddressConfig+0x6c>)
 800447e:	4413      	add	r3, r2
 8004480:	461a      	mov	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	6013      	str	r3, [r2, #0]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40028040 	.word	0x40028040
 8004498:	40028044 	.word	0x40028044

0800449c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	; 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	e175      	b.n	80047a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044bc:	2201      	movs	r2, #1
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	f040 8164 	bne.w	80047a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d00b      	beq.n	80044fa <HAL_GPIO_Init+0x5e>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d007      	beq.n	80044fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044ee:	2b11      	cmp	r3, #17
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b12      	cmp	r3, #18
 80044f8:	d130      	bne.n	800455c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	2203      	movs	r2, #3
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004530:	2201      	movs	r2, #1
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 0201 	and.w	r2, r3, #1
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2203      	movs	r2, #3
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x100>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b12      	cmp	r3, #18
 800459a:	d123      	bne.n	80045e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	08da      	lsrs	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3208      	adds	r2, #8
 80045a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	220f      	movs	r2, #15
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	08da      	lsrs	r2, r3, #3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3208      	adds	r2, #8
 80045de:	69b9      	ldr	r1, [r7, #24]
 80045e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0203 	and.w	r2, r3, #3
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80be 	beq.w	80047a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004626:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <HAL_GPIO_Init+0x324>)
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	4a65      	ldr	r2, [pc, #404]	; (80047c0 <HAL_GPIO_Init+0x324>)
 800462c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004630:	6453      	str	r3, [r2, #68]	; 0x44
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_GPIO_Init+0x324>)
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800463e:	4a61      	ldr	r2, [pc, #388]	; (80047c4 <HAL_GPIO_Init+0x328>)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	3302      	adds	r3, #2
 8004646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	220f      	movs	r2, #15
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <HAL_GPIO_Init+0x32c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d037      	beq.n	80046da <HAL_GPIO_Init+0x23e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a57      	ldr	r2, [pc, #348]	; (80047cc <HAL_GPIO_Init+0x330>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d031      	beq.n	80046d6 <HAL_GPIO_Init+0x23a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a56      	ldr	r2, [pc, #344]	; (80047d0 <HAL_GPIO_Init+0x334>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d02b      	beq.n	80046d2 <HAL_GPIO_Init+0x236>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a55      	ldr	r2, [pc, #340]	; (80047d4 <HAL_GPIO_Init+0x338>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d025      	beq.n	80046ce <HAL_GPIO_Init+0x232>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a54      	ldr	r2, [pc, #336]	; (80047d8 <HAL_GPIO_Init+0x33c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <HAL_GPIO_Init+0x22e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a53      	ldr	r2, [pc, #332]	; (80047dc <HAL_GPIO_Init+0x340>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d019      	beq.n	80046c6 <HAL_GPIO_Init+0x22a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a52      	ldr	r2, [pc, #328]	; (80047e0 <HAL_GPIO_Init+0x344>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_GPIO_Init+0x226>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a51      	ldr	r2, [pc, #324]	; (80047e4 <HAL_GPIO_Init+0x348>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00d      	beq.n	80046be <HAL_GPIO_Init+0x222>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a50      	ldr	r2, [pc, #320]	; (80047e8 <HAL_GPIO_Init+0x34c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <HAL_GPIO_Init+0x21e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a4f      	ldr	r2, [pc, #316]	; (80047ec <HAL_GPIO_Init+0x350>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_GPIO_Init+0x21a>
 80046b2:	2309      	movs	r3, #9
 80046b4:	e012      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046b6:	230a      	movs	r3, #10
 80046b8:	e010      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046ba:	2308      	movs	r3, #8
 80046bc:	e00e      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046be:	2307      	movs	r3, #7
 80046c0:	e00c      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046c2:	2306      	movs	r3, #6
 80046c4:	e00a      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046c6:	2305      	movs	r3, #5
 80046c8:	e008      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046ca:	2304      	movs	r3, #4
 80046cc:	e006      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046ce:	2303      	movs	r3, #3
 80046d0:	e004      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e002      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_GPIO_Init+0x240>
 80046da:	2300      	movs	r3, #0
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	f002 0203 	and.w	r2, r2, #3
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	4093      	lsls	r3, r2
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046ec:	4935      	ldr	r1, [pc, #212]	; (80047c4 <HAL_GPIO_Init+0x328>)
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	3302      	adds	r3, #2
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046fa:	4b3d      	ldr	r3, [pc, #244]	; (80047f0 <HAL_GPIO_Init+0x354>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	43db      	mvns	r3, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4013      	ands	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800471e:	4a34      	ldr	r2, [pc, #208]	; (80047f0 <HAL_GPIO_Init+0x354>)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004724:	4b32      	ldr	r3, [pc, #200]	; (80047f0 <HAL_GPIO_Init+0x354>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004748:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <HAL_GPIO_Init+0x354>)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800474e:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <HAL_GPIO_Init+0x354>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004772:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <HAL_GPIO_Init+0x354>)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <HAL_GPIO_Init+0x354>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800479c:	4a14      	ldr	r2, [pc, #80]	; (80047f0 <HAL_GPIO_Init+0x354>)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3301      	adds	r3, #1
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2b0f      	cmp	r3, #15
 80047ac:	f67f ae86 	bls.w	80044bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	3724      	adds	r7, #36	; 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40013800 	.word	0x40013800
 80047c8:	40020000 	.word	0x40020000
 80047cc:	40020400 	.word	0x40020400
 80047d0:	40020800 	.word	0x40020800
 80047d4:	40020c00 	.word	0x40020c00
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40021400 	.word	0x40021400
 80047e0:	40021800 	.word	0x40021800
 80047e4:	40021c00 	.word	0x40021c00
 80047e8:	40022000 	.word	0x40022000
 80047ec:	40022400 	.word	0x40022400
 80047f0:	40013c00 	.word	0x40013c00

080047f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	887b      	ldrh	r3, [r7, #2]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e001      	b.n	8004816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
 8004830:	4613      	mov	r3, r2
 8004832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004834:	787b      	ldrb	r3, [r7, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483a:	887a      	ldrh	r2, [r7, #2]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004840:	e003      	b.n	800484a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004842:	887b      	ldrh	r3, [r7, #2]
 8004844:	041a      	lsls	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	619a      	str	r2, [r3, #24]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004868:	887a      	ldrh	r2, [r7, #2]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4013      	ands	r3, r2
 800486e:	041a      	lsls	r2, r3, #16
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	43d9      	mvns	r1, r3
 8004874:	887b      	ldrh	r3, [r7, #2]
 8004876:	400b      	ands	r3, r1
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	619a      	str	r2, [r3, #24]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800488a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488c:	b08f      	sub	sp, #60	; 0x3c
 800488e:	af0a      	add	r7, sp, #40	; 0x28
 8004890:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e054      	b.n	8004946 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f00d fe62 	bl	8012580 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2203      	movs	r2, #3
 80048c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f007 fffd 	bl	800c8da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	687e      	ldr	r6, [r7, #4]
 80048e8:	466d      	mov	r5, sp
 80048ea:	f106 0410 	add.w	r4, r6, #16
 80048ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80048fe:	1d33      	adds	r3, r6, #4
 8004900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004902:	6838      	ldr	r0, [r7, #0]
 8004904:	f007 ff80 	bl	800c808 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2101      	movs	r1, #1
 800490e:	4618      	mov	r0, r3
 8004910:	f007 fff4 	bl	800c8fc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	687e      	ldr	r6, [r7, #4]
 800491c:	466d      	mov	r5, sp
 800491e:	f106 0410 	add.w	r4, r6, #16
 8004922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800492a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800492e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004932:	1d33      	adds	r3, r6, #4
 8004934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004936:	6838      	ldr	r0, [r7, #0]
 8004938:	f008 f906 	bl	800cb48 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800494e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800494e:	b590      	push	{r4, r7, lr}
 8004950:	b089      	sub	sp, #36	; 0x24
 8004952:	af04      	add	r7, sp, #16
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	4608      	mov	r0, r1
 8004958:	4611      	mov	r1, r2
 800495a:	461a      	mov	r2, r3
 800495c:	4603      	mov	r3, r0
 800495e:	70fb      	strb	r3, [r7, #3]
 8004960:	460b      	mov	r3, r1
 8004962:	70bb      	strb	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_HCD_HC_Init+0x28>
 8004972:	2302      	movs	r3, #2
 8004974:	e076      	b.n	8004a64 <HAL_HCD_HC_Init+0x116>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	333d      	adds	r3, #61	; 0x3d
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	212c      	movs	r1, #44	; 0x2c
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	4413      	add	r3, r2
 800499c:	3338      	adds	r3, #56	; 0x38
 800499e:	787a      	ldrb	r2, [r7, #1]
 80049a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	3340      	adds	r3, #64	; 0x40
 80049b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	3339      	adds	r3, #57	; 0x39
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	333f      	adds	r3, #63	; 0x3f
 80049d4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80049d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	78ba      	ldrb	r2, [r7, #2]
 80049de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049e2:	b2d0      	uxtb	r0, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	212c      	movs	r1, #44	; 0x2c
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	333a      	adds	r3, #58	; 0x3a
 80049f0:	4602      	mov	r2, r0
 80049f2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80049f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	da09      	bge.n	8004a10 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	212c      	movs	r1, #44	; 0x2c
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	333b      	adds	r3, #59	; 0x3b
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e008      	b.n	8004a22 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	212c      	movs	r1, #44	; 0x2c
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	333b      	adds	r3, #59	; 0x3b
 8004a1e:	2200      	movs	r2, #0
 8004a20:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	212c      	movs	r1, #44	; 0x2c
 8004a28:	fb01 f303 	mul.w	r3, r1, r3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	333c      	adds	r3, #60	; 0x3c
 8004a30:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a34:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	787c      	ldrb	r4, [r7, #1]
 8004a3c:	78ba      	ldrb	r2, [r7, #2]
 8004a3e:	78f9      	ldrb	r1, [r7, #3]
 8004a40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a42:	9302      	str	r3, [sp, #8]
 8004a44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	4623      	mov	r3, r4
 8004a52:	f008 f9ef 	bl	800ce34 <USB_HC_Init>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd90      	pop	{r4, r7, pc}

08004a6c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_HCD_HC_Halt+0x1e>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e00f      	b.n	8004aaa <HAL_HCD_HC_Halt+0x3e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f008 fc2b 	bl	800d2f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	4608      	mov	r0, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	70fb      	strb	r3, [r7, #3]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	70bb      	strb	r3, [r7, #2]
 8004aca:	4613      	mov	r3, r2
 8004acc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	333b      	adds	r3, #59	; 0x3b
 8004adc:	78ba      	ldrb	r2, [r7, #2]
 8004ade:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	333f      	adds	r3, #63	; 0x3f
 8004aee:	787a      	ldrb	r2, [r7, #1]
 8004af0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004af2:	7c3b      	ldrb	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d112      	bne.n	8004b1e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	212c      	movs	r1, #44	; 0x2c
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	3342      	adds	r3, #66	; 0x42
 8004b06:	2203      	movs	r2, #3
 8004b08:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	212c      	movs	r1, #44	; 0x2c
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	4413      	add	r3, r2
 8004b16:	333d      	adds	r3, #61	; 0x3d
 8004b18:	7f3a      	ldrb	r2, [r7, #28]
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e008      	b.n	8004b30 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	3342      	adds	r3, #66	; 0x42
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b30:	787b      	ldrb	r3, [r7, #1]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	f200 80c6 	bhi.w	8004cc4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b51 	.word	0x08004b51
 8004b44:	08004cb1 	.word	0x08004cb1
 8004b48:	08004bb5 	.word	0x08004bb5
 8004b4c:	08004c33 	.word	0x08004c33
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b50:	7c3b      	ldrb	r3, [r7, #16]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	f040 80b8 	bne.w	8004cc8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004b58:	78bb      	ldrb	r3, [r7, #2]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 80b4 	bne.w	8004cc8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004b60:	8b3b      	ldrh	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d108      	bne.n	8004b78 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	212c      	movs	r1, #44	; 0x2c
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	3355      	adds	r3, #85	; 0x55
 8004b74:	2201      	movs	r2, #1
 8004b76:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	212c      	movs	r1, #44	; 0x2c
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	3355      	adds	r3, #85	; 0x55
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d109      	bne.n	8004ba0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	212c      	movs	r1, #44	; 0x2c
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	3342      	adds	r3, #66	; 0x42
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b9e:	e093      	b.n	8004cc8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3342      	adds	r3, #66	; 0x42
 8004bae:	2202      	movs	r2, #2
 8004bb0:	701a      	strb	r2, [r3, #0]
      break;
 8004bb2:	e089      	b.n	8004cc8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004bb4:	78bb      	ldrb	r3, [r7, #2]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d11d      	bne.n	8004bf6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	212c      	movs	r1, #44	; 0x2c
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3355      	adds	r3, #85	; 0x55
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3342      	adds	r3, #66	; 0x42
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004be0:	e073      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	3342      	adds	r3, #66	; 0x42
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	701a      	strb	r2, [r3, #0]
      break;
 8004bf4:	e069      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004bf6:	78fb      	ldrb	r3, [r7, #3]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	3354      	adds	r3, #84	; 0x54
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	212c      	movs	r1, #44	; 0x2c
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	4413      	add	r3, r2
 8004c16:	3342      	adds	r3, #66	; 0x42
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
      break;
 8004c1c:	e055      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	3342      	adds	r3, #66	; 0x42
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	701a      	strb	r2, [r3, #0]
      break;
 8004c30:	e04b      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c32:	78bb      	ldrb	r3, [r7, #2]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11d      	bne.n	8004c74 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	212c      	movs	r1, #44	; 0x2c
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	3355      	adds	r3, #85	; 0x55
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3342      	adds	r3, #66	; 0x42
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c5e:	e034      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	212c      	movs	r1, #44	; 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3342      	adds	r3, #66	; 0x42
 8004c6e:	2202      	movs	r2, #2
 8004c70:	701a      	strb	r2, [r3, #0]
      break;
 8004c72:	e02a      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	3354      	adds	r3, #84	; 0x54
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d109      	bne.n	8004c9c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	212c      	movs	r1, #44	; 0x2c
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	3342      	adds	r3, #66	; 0x42
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
      break;
 8004c9a:	e016      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3342      	adds	r3, #66	; 0x42
 8004caa:	2202      	movs	r2, #2
 8004cac:	701a      	strb	r2, [r3, #0]
      break;
 8004cae:	e00c      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3342      	adds	r3, #66	; 0x42
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
      break;
 8004cc2:	e002      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004cc4:	bf00      	nop
 8004cc6:	e000      	b.n	8004cca <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004cc8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3344      	adds	r3, #68	; 0x44
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	8b3a      	ldrh	r2, [r7, #24]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	202c      	movs	r0, #44	; 0x2c
 8004ce4:	fb00 f303 	mul.w	r3, r0, r3
 8004ce8:	440b      	add	r3, r1
 8004cea:	334c      	adds	r3, #76	; 0x4c
 8004cec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3360      	adds	r3, #96	; 0x60
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	212c      	movs	r1, #44	; 0x2c
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3350      	adds	r3, #80	; 0x50
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	212c      	movs	r1, #44	; 0x2c
 8004d18:	fb01 f303 	mul.w	r3, r1, r3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3339      	adds	r3, #57	; 0x39
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	212c      	movs	r1, #44	; 0x2c
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	3361      	adds	r3, #97	; 0x61
 8004d32:	2200      	movs	r2, #0
 8004d34:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	222c      	movs	r2, #44	; 0x2c
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	3338      	adds	r3, #56	; 0x38
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	18d1      	adds	r1, r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f008 f97e 	bl	800d050 <USB_HC_StartXfer>
 8004d54:	4603      	mov	r3, r0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop

08004d60 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f007 fea3 	bl	800cac2 <USB_GetMode>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	f040 80ef 	bne.w	8004f62 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f007 fe87 	bl	800ca9c <USB_ReadInterrupts>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80e5 	beq.w	8004f60 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f007 fe7e 	bl	800ca9c <USB_ReadInterrupts>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004daa:	d104      	bne.n	8004db6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004db4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f007 fe6e 	bl	800ca9c <USB_ReadInterrupts>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dca:	d104      	bne.n	8004dd6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f007 fe5e 	bl	800ca9c <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dea:	d104      	bne.n	8004df6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f007 fe4e 	bl	800ca9c <USB_ReadInterrupts>
 8004e00:	4603      	mov	r3, r0
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d103      	bne.n	8004e12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f007 fe40 	bl	800ca9c <USB_ReadInterrupts>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e26:	d115      	bne.n	8004e54 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d108      	bne.n	8004e54 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f00d fc0e 	bl	8012664 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f007 ff2a 	bl	800cca8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f007 fe1f 	bl	800ca9c <USB_ReadInterrupts>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e68:	d102      	bne.n	8004e70 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f001 f9ff 	bl	800626e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f007 fe11 	bl	800ca9c <USB_ReadInterrupts>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d106      	bne.n	8004e92 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f00d fbd1 	bl	801262c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2208      	movs	r2, #8
 8004e90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f007 fe00 	bl	800ca9c <USB_ReadInterrupts>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	2b10      	cmp	r3, #16
 8004ea4:	d101      	bne.n	8004eaa <HAL_HCD_IRQHandler+0x14a>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <HAL_HCD_IRQHandler+0x14c>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d012      	beq.n	8004ed6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0210 	bic.w	r2, r2, #16
 8004ebe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 f902 	bl	80060ca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699a      	ldr	r2, [r3, #24]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0210 	orr.w	r2, r2, #16
 8004ed4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f007 fdde 	bl	800ca9c <USB_ReadInterrupts>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eea:	d13a      	bne.n	8004f62 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f008 f9ef 	bl	800d2d4 <USB_HC_ReadInterrupt>
 8004ef6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e025      	b.n	8004f4a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d018      	beq.n	8004f44 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d106      	bne.n	8004f38 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f8ab 	bl	800508c <HCD_HC_IN_IRQHandler>
 8004f36:	e005      	b.n	8004f44 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fcc6 	bl	80058d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3301      	adds	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d3d4      	bcc.n	8004efe <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f5c:	615a      	str	r2, [r3, #20]
 8004f5e:	e000      	b.n	8004f62 <HAL_HCD_IRQHandler+0x202>
      return;
 8004f60:	bf00      	nop
    }
  }
}
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_HCD_Start+0x16>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e013      	b.n	8004fa6 <HAL_HCD_Start+0x3e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f007 fc94 	bl	800c8b8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2101      	movs	r1, #1
 8004f96:	4618      	mov	r0, r3
 8004f98:	f007 feea 	bl	800cd70 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_HCD_Stop+0x16>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e00d      	b.n	8004fe0 <HAL_HCD_Stop+0x32>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f008 fae9 	bl	800d5a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f007 fe91 	bl	800cd1c <USB_ResetPort>
 8004ffa:	4603      	mov	r3, r0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	212c      	movs	r1, #44	; 0x2c
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	3360      	adds	r3, #96	; 0x60
 800501e:	781b      	ldrb	r3, [r3, #0]
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	212c      	movs	r1, #44	; 0x2c
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3350      	adds	r3, #80	; 0x50
 8005046:	681b      	ldr	r3, [r3, #0]
}
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f007 fed5 	bl	800ce10 <USB_GetCurrentFrame>
 8005066:	4603      	mov	r3, r0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f007 feb0 	bl	800cde2 <USB_GetHostSpeed>
 8005082:	4603      	mov	r3, r0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d119      	bne.n	80050f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c8:	461a      	mov	r2, r3
 80050ca:	2304      	movs	r3, #4
 80050cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e8:	f043 0302 	orr.w	r3, r3, #2
 80050ec:	60d3      	str	r3, [r2, #12]
 80050ee:	e101      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005106:	d12b      	bne.n	8005160 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	461a      	mov	r2, r3
 8005116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800511a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	212c      	movs	r1, #44	; 0x2c
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	4413      	add	r3, r2
 8005128:	3361      	adds	r3, #97	; 0x61
 800512a:	2207      	movs	r2, #7
 800512c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	440a      	add	r2, r1
 8005144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	4611      	mov	r1, r2
 8005158:	4618      	mov	r0, r3
 800515a:	f008 f8cc 	bl	800d2f6 <USB_HC_Halt>
 800515e:	e0c9      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4413      	add	r3, r2
 8005168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	d109      	bne.n	800518a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4413      	add	r3, r2
 800517e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005182:	461a      	mov	r2, r3
 8005184:	2320      	movs	r3, #32
 8005186:	6093      	str	r3, [r2, #8]
 8005188:	e0b4      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4413      	add	r3, r2
 8005192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b08      	cmp	r3, #8
 800519e:	d133      	bne.n	8005208 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ba:	f043 0302 	orr.w	r3, r3, #2
 80051be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	212c      	movs	r1, #44	; 0x2c
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	3361      	adds	r3, #97	; 0x61
 80051ce:	2205      	movs	r2, #5
 80051d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	461a      	mov	r2, r3
 80051e0:	2310      	movs	r3, #16
 80051e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f0:	461a      	mov	r2, r3
 80051f2:	2308      	movs	r3, #8
 80051f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f008 f878 	bl	800d2f6 <USB_HC_Halt>
 8005206:	e075      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521e:	d134      	bne.n	800528a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4413      	add	r3, r2
 8005228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	440a      	add	r2, r1
 8005236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523a:	f043 0302 	orr.w	r3, r3, #2
 800523e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	212c      	movs	r1, #44	; 0x2c
 8005246:	fb01 f303 	mul.w	r3, r1, r3
 800524a:	4413      	add	r3, r2
 800524c:	3361      	adds	r3, #97	; 0x61
 800524e:	2208      	movs	r2, #8
 8005250:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525e:	461a      	mov	r2, r3
 8005260:	2310      	movs	r3, #16
 8005262:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	461a      	mov	r2, r3
 8005272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005276:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f008 f837 	bl	800d2f6 <USB_HC_Halt>
 8005288:	e034      	b.n	80052f4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b80      	cmp	r3, #128	; 0x80
 800529e:	d129      	bne.n	80052f4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ba:	f043 0302 	orr.w	r3, r3, #2
 80052be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	212c      	movs	r1, #44	; 0x2c
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	3361      	adds	r3, #97	; 0x61
 80052ce:	2206      	movs	r2, #6
 80052d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f008 f80a 	bl	800d2f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	461a      	mov	r2, r3
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530a:	d122      	bne.n	8005352 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	440a      	add	r2, r1
 8005322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005326:	f043 0302 	orr.w	r3, r3, #2
 800532a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f007 ffdd 	bl	800d2f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	461a      	mov	r2, r3
 800534a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800534e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005350:	e2ba      	b.n	80058c8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	f040 811b 	bne.w	80055a0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d019      	beq.n	80053a6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	212c      	movs	r1, #44	; 0x2c
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	4413      	add	r3, r2
 800537e:	3348      	adds	r3, #72	; 0x48
 8005380:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	0159      	lsls	r1, r3, #5
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	440b      	add	r3, r1
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005394:	1ad2      	subs	r2, r2, r3
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	202c      	movs	r0, #44	; 0x2c
 800539c:	fb00 f303 	mul.w	r3, r0, r3
 80053a0:	440b      	add	r3, r1
 80053a2:	3350      	adds	r3, #80	; 0x50
 80053a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	212c      	movs	r1, #44	; 0x2c
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	4413      	add	r3, r2
 80053b2:	3361      	adds	r3, #97	; 0x61
 80053b4:	2201      	movs	r2, #1
 80053b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	335c      	adds	r3, #92	; 0x5c
 80053c6:	2200      	movs	r2, #0
 80053c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	461a      	mov	r2, r3
 80053d8:	2301      	movs	r3, #1
 80053da:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	212c      	movs	r1, #44	; 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	333f      	adds	r3, #63	; 0x3f
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	212c      	movs	r1, #44	; 0x2c
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	333f      	adds	r3, #63	; 0x3f
 80053fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005400:	2b02      	cmp	r3, #2
 8005402:	d121      	bne.n	8005448 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	440a      	add	r2, r1
 800541a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541e:	f043 0302 	orr.w	r3, r3, #2
 8005422:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f007 ff61 	bl	800d2f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	461a      	mov	r2, r3
 8005442:	2310      	movs	r3, #16
 8005444:	6093      	str	r3, [r2, #8]
 8005446:	e066      	b.n	8005516 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	212c      	movs	r1, #44	; 0x2c
 800544e:	fb01 f303 	mul.w	r3, r1, r3
 8005452:	4413      	add	r3, r2
 8005454:	333f      	adds	r3, #63	; 0x3f
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d127      	bne.n	80054ac <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	440a      	add	r2, r1
 8005472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800547a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	212c      	movs	r1, #44	; 0x2c
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	4413      	add	r3, r2
 8005488:	3360      	adds	r3, #96	; 0x60
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	b2d9      	uxtb	r1, r3
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	202c      	movs	r0, #44	; 0x2c
 8005498:	fb00 f303 	mul.w	r3, r0, r3
 800549c:	4413      	add	r3, r2
 800549e:	3360      	adds	r3, #96	; 0x60
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f00d f8eb 	bl	8012680 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054aa:	e034      	b.n	8005516 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	212c      	movs	r1, #44	; 0x2c
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	4413      	add	r3, r2
 80054b8:	333f      	adds	r3, #63	; 0x3f
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d12a      	bne.n	8005516 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	212c      	movs	r1, #44	; 0x2c
 80054c6:	fb01 f303 	mul.w	r3, r1, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	3360      	adds	r3, #96	; 0x60
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	3354      	adds	r3, #84	; 0x54
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f083 0301 	eor.w	r3, r3, #1
 80054e6:	b2d8      	uxtb	r0, r3
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	212c      	movs	r1, #44	; 0x2c
 80054ee:	fb01 f303 	mul.w	r3, r1, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	3354      	adds	r3, #84	; 0x54
 80054f6:	4602      	mov	r2, r0
 80054f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	b2d9      	uxtb	r1, r3
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	202c      	movs	r0, #44	; 0x2c
 8005504:	fb00 f303 	mul.w	r3, r0, r3
 8005508:	4413      	add	r3, r2
 800550a:	3360      	adds	r3, #96	; 0x60
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f00d f8b5 	bl	8012680 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d12b      	bne.n	8005576 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	212c      	movs	r1, #44	; 0x2c
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	3348      	adds	r3, #72	; 0x48
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	202c      	movs	r0, #44	; 0x2c
 8005534:	fb00 f202 	mul.w	r2, r0, r2
 8005538:	440a      	add	r2, r1
 800553a:	3240      	adds	r2, #64	; 0x40
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 81be 	beq.w	80058c8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	212c      	movs	r1, #44	; 0x2c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	3354      	adds	r3, #84	; 0x54
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f083 0301 	eor.w	r3, r3, #1
 8005560:	b2d8      	uxtb	r0, r3
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	212c      	movs	r1, #44	; 0x2c
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	4413      	add	r3, r2
 800556e:	3354      	adds	r3, #84	; 0x54
 8005570:	4602      	mov	r2, r0
 8005572:	701a      	strb	r2, [r3, #0]
}
 8005574:	e1a8      	b.n	80058c8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	212c      	movs	r1, #44	; 0x2c
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	3354      	adds	r3, #84	; 0x54
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f083 0301 	eor.w	r3, r3, #1
 800558a:	b2d8      	uxtb	r0, r3
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	212c      	movs	r1, #44	; 0x2c
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	3354      	adds	r3, #84	; 0x54
 800559a:	4602      	mov	r2, r0
 800559c:	701a      	strb	r2, [r3, #0]
}
 800559e:	e193      	b.n	80058c8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	f040 8106 	bne.w	80057c4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d2:	f023 0302 	bic.w	r3, r3, #2
 80055d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	212c      	movs	r1, #44	; 0x2c
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	3361      	adds	r3, #97	; 0x61
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d109      	bne.n	8005600 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	212c      	movs	r1, #44	; 0x2c
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	3360      	adds	r3, #96	; 0x60
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e0c9      	b.n	8005794 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	212c      	movs	r1, #44	; 0x2c
 8005606:	fb01 f303 	mul.w	r3, r1, r3
 800560a:	4413      	add	r3, r2
 800560c:	3361      	adds	r3, #97	; 0x61
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b05      	cmp	r3, #5
 8005612:	d109      	bne.n	8005628 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	212c      	movs	r1, #44	; 0x2c
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	4413      	add	r3, r2
 8005620:	3360      	adds	r3, #96	; 0x60
 8005622:	2205      	movs	r2, #5
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e0b5      	b.n	8005794 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	212c      	movs	r1, #44	; 0x2c
 800562e:	fb01 f303 	mul.w	r3, r1, r3
 8005632:	4413      	add	r3, r2
 8005634:	3361      	adds	r3, #97	; 0x61
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d009      	beq.n	8005650 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	212c      	movs	r1, #44	; 0x2c
 8005642:	fb01 f303 	mul.w	r3, r1, r3
 8005646:	4413      	add	r3, r2
 8005648:	3361      	adds	r3, #97	; 0x61
 800564a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800564c:	2b08      	cmp	r3, #8
 800564e:	d150      	bne.n	80056f2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	212c      	movs	r1, #44	; 0x2c
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	4413      	add	r3, r2
 800565c:	335c      	adds	r3, #92	; 0x5c
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	202c      	movs	r0, #44	; 0x2c
 8005668:	fb00 f303 	mul.w	r3, r0, r3
 800566c:	440b      	add	r3, r1
 800566e:	335c      	adds	r3, #92	; 0x5c
 8005670:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	212c      	movs	r1, #44	; 0x2c
 8005678:	fb01 f303 	mul.w	r3, r1, r3
 800567c:	4413      	add	r3, r2
 800567e:	335c      	adds	r3, #92	; 0x5c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d912      	bls.n	80056ac <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	212c      	movs	r1, #44	; 0x2c
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	4413      	add	r3, r2
 8005692:	335c      	adds	r3, #92	; 0x5c
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	212c      	movs	r1, #44	; 0x2c
 800569e:	fb01 f303 	mul.w	r3, r1, r3
 80056a2:	4413      	add	r3, r2
 80056a4:	3360      	adds	r3, #96	; 0x60
 80056a6:	2204      	movs	r2, #4
 80056a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056aa:	e073      	b.n	8005794 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	212c      	movs	r1, #44	; 0x2c
 80056b2:	fb01 f303 	mul.w	r3, r1, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	3360      	adds	r3, #96	; 0x60
 80056ba:	2202      	movs	r2, #2
 80056bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ea:	461a      	mov	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056f0:	e050      	b.n	8005794 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	212c      	movs	r1, #44	; 0x2c
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	3361      	adds	r3, #97	; 0x61
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d122      	bne.n	800574c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	212c      	movs	r1, #44	; 0x2c
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	3360      	adds	r3, #96	; 0x60
 8005714:	2202      	movs	r2, #2
 8005716:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800572e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005736:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005744:	461a      	mov	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e023      	b.n	8005794 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	212c      	movs	r1, #44	; 0x2c
 8005752:	fb01 f303 	mul.w	r3, r1, r3
 8005756:	4413      	add	r3, r2
 8005758:	3361      	adds	r3, #97	; 0x61
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b07      	cmp	r3, #7
 800575e:	d119      	bne.n	8005794 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	212c      	movs	r1, #44	; 0x2c
 8005766:	fb01 f303 	mul.w	r3, r1, r3
 800576a:	4413      	add	r3, r2
 800576c:	335c      	adds	r3, #92	; 0x5c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	202c      	movs	r0, #44	; 0x2c
 8005778:	fb00 f303 	mul.w	r3, r0, r3
 800577c:	440b      	add	r3, r1
 800577e:	335c      	adds	r3, #92	; 0x5c
 8005780:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	212c      	movs	r1, #44	; 0x2c
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	4413      	add	r3, r2
 800578e:	3360      	adds	r3, #96	; 0x60
 8005790:	2204      	movs	r2, #4
 8005792:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4413      	add	r3, r2
 800579c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a0:	461a      	mov	r2, r3
 80057a2:	2302      	movs	r3, #2
 80057a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	b2d9      	uxtb	r1, r3
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	202c      	movs	r0, #44	; 0x2c
 80057b0:	fb00 f303 	mul.w	r3, r0, r3
 80057b4:	4413      	add	r3, r2
 80057b6:	3360      	adds	r3, #96	; 0x60
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f00c ff5f 	bl	8012680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057c2:	e081      	b.n	80058c8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d176      	bne.n	80058c8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	212c      	movs	r1, #44	; 0x2c
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	4413      	add	r3, r2
 80057e6:	333f      	adds	r3, #63	; 0x3f
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d121      	bne.n	8005832 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	212c      	movs	r1, #44	; 0x2c
 80057f4:	fb01 f303 	mul.w	r3, r1, r3
 80057f8:	4413      	add	r3, r2
 80057fa:	335c      	adds	r3, #92	; 0x5c
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	440a      	add	r2, r1
 8005816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800581a:	f043 0302 	orr.w	r3, r3, #2
 800581e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	4611      	mov	r1, r2
 800582a:	4618      	mov	r0, r3
 800582c:	f007 fd63 	bl	800d2f6 <USB_HC_Halt>
 8005830:	e041      	b.n	80058b6 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	212c      	movs	r1, #44	; 0x2c
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	333f      	adds	r3, #63	; 0x3f
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	212c      	movs	r1, #44	; 0x2c
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	333f      	adds	r3, #63	; 0x3f
 8005854:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005856:	2b02      	cmp	r3, #2
 8005858:	d12d      	bne.n	80058b6 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	212c      	movs	r1, #44	; 0x2c
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	335c      	adds	r3, #92	; 0x5c
 8005868:	2200      	movs	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d120      	bne.n	80058b6 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	212c      	movs	r1, #44	; 0x2c
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	3361      	adds	r3, #97	; 0x61
 8005882:	2203      	movs	r2, #3
 8005884:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	440a      	add	r2, r1
 800589c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a0:	f043 0302 	orr.w	r3, r3, #2
 80058a4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f007 fd20 	bl	800d2f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c2:	461a      	mov	r2, r3
 80058c4:	2310      	movs	r3, #16
 80058c6:	6093      	str	r3, [r2, #8]
}
 80058c8:	bf00      	nop
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d119      	bne.n	8005934 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	4413      	add	r3, r2
 8005908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590c:	461a      	mov	r2, r3
 800590e:	2304      	movs	r3, #4
 8005910:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	440a      	add	r2, r1
 8005928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800592c:	f043 0302 	orr.w	r3, r3, #2
 8005930:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005932:	e3c6      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	4413      	add	r3, r2
 800593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b20      	cmp	r3, #32
 8005948:	d13e      	bne.n	80059c8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	461a      	mov	r2, r3
 8005958:	2320      	movs	r3, #32
 800595a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	212c      	movs	r1, #44	; 0x2c
 8005962:	fb01 f303 	mul.w	r3, r1, r3
 8005966:	4413      	add	r3, r2
 8005968:	333d      	adds	r3, #61	; 0x3d
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	f040 83a8 	bne.w	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	212c      	movs	r1, #44	; 0x2c
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	4413      	add	r3, r2
 800597e:	333d      	adds	r3, #61	; 0x3d
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	212c      	movs	r1, #44	; 0x2c
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	4413      	add	r3, r2
 8005990:	3360      	adds	r3, #96	; 0x60
 8005992:	2202      	movs	r2, #2
 8005994:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	0151      	lsls	r1, r2, #5
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	440a      	add	r2, r1
 80059ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b0:	f043 0302 	orr.w	r3, r3, #2
 80059b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f007 fc98 	bl	800d2f6 <USB_HC_Halt>
}
 80059c6:	e37c      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059de:	d122      	bne.n	8005a26 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fa:	f043 0302 	orr.w	r3, r3, #2
 80059fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f007 fc73 	bl	800d2f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a22:	6093      	str	r3, [r2, #8]
}
 8005a24:	e34d      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d150      	bne.n	8005ade <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	212c      	movs	r1, #44	; 0x2c
 8005a42:	fb01 f303 	mul.w	r3, r1, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	335c      	adds	r3, #92	; 0x5c
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d111      	bne.n	8005a88 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	212c      	movs	r1, #44	; 0x2c
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	4413      	add	r3, r2
 8005a70:	333d      	adds	r3, #61	; 0x3d
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	461a      	mov	r2, r3
 8005a84:	2340      	movs	r3, #64	; 0x40
 8005a86:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa2:	f043 0302 	orr.w	r3, r3, #2
 8005aa6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f007 fc1f 	bl	800d2f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	212c      	movs	r1, #44	; 0x2c
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	4413      	add	r3, r2
 8005ad6:	3361      	adds	r3, #97	; 0x61
 8005ad8:	2201      	movs	r2, #1
 8005ada:	701a      	strb	r2, [r3, #0]
}
 8005adc:	e2f1      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	d13c      	bne.n	8005b6e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	212c      	movs	r1, #44	; 0x2c
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	4413      	add	r3, r2
 8005b00:	3361      	adds	r3, #97	; 0x61
 8005b02:	2204      	movs	r2, #4
 8005b04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	212c      	movs	r1, #44	; 0x2c
 8005b0c:	fb01 f303 	mul.w	r3, r1, r3
 8005b10:	4413      	add	r3, r2
 8005b12:	333d      	adds	r3, #61	; 0x3d
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	212c      	movs	r1, #44	; 0x2c
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	4413      	add	r3, r2
 8005b24:	335c      	adds	r3, #92	; 0x5c
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f007 fbce 	bl	800d2f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	461a      	mov	r2, r3
 8005b68:	2340      	movs	r3, #64	; 0x40
 8005b6a:	6093      	str	r3, [r2, #8]
}
 8005b6c:	e2a9      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d12a      	bne.n	8005bda <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	461a      	mov	r2, r3
 8005b92:	2308      	movs	r3, #8
 8005b94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f007 fb98 	bl	800d2f6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	212c      	movs	r1, #44	; 0x2c
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3361      	adds	r3, #97	; 0x61
 8005bd4:	2205      	movs	r2, #5
 8005bd6:	701a      	strb	r2, [r3, #0]
}
 8005bd8:	e273      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d150      	bne.n	8005c92 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	212c      	movs	r1, #44	; 0x2c
 8005bf6:	fb01 f303 	mul.w	r3, r1, r3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	335c      	adds	r3, #92	; 0x5c
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	212c      	movs	r1, #44	; 0x2c
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	4413      	add	r3, r2
 8005c0e:	3361      	adds	r3, #97	; 0x61
 8005c10:	2203      	movs	r2, #3
 8005c12:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	212c      	movs	r1, #44	; 0x2c
 8005c1a:	fb01 f303 	mul.w	r3, r1, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	333d      	adds	r3, #61	; 0x3d
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d112      	bne.n	8005c4e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	212c      	movs	r1, #44	; 0x2c
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	333c      	adds	r3, #60	; 0x3c
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	212c      	movs	r1, #44	; 0x2c
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	4413      	add	r3, r2
 8005c48:	333d      	adds	r3, #61	; 0x3d
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c68:	f043 0302 	orr.w	r3, r3, #2
 8005c6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	4611      	mov	r1, r2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f007 fb3c 	bl	800d2f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2310      	movs	r3, #16
 8005c8e:	6093      	str	r3, [r2, #8]
}
 8005c90:	e217      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca4:	2b80      	cmp	r3, #128	; 0x80
 8005ca6:	d174      	bne.n	8005d92 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d121      	bne.n	8005cf4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	212c      	movs	r1, #44	; 0x2c
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	3361      	adds	r3, #97	; 0x61
 8005cbe:	2206      	movs	r2, #6
 8005cc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f007 fb02 	bl	800d2f6 <USB_HC_Halt>
 8005cf2:	e044      	b.n	8005d7e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	212c      	movs	r1, #44	; 0x2c
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	335c      	adds	r3, #92	; 0x5c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	202c      	movs	r0, #44	; 0x2c
 8005d0c:	fb00 f303 	mul.w	r3, r0, r3
 8005d10:	440b      	add	r3, r1
 8005d12:	335c      	adds	r3, #92	; 0x5c
 8005d14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	212c      	movs	r1, #44	; 0x2c
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	335c      	adds	r3, #92	; 0x5c
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d920      	bls.n	8005d6c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	212c      	movs	r1, #44	; 0x2c
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	335c      	adds	r3, #92	; 0x5c
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	212c      	movs	r1, #44	; 0x2c
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	3360      	adds	r3, #96	; 0x60
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	b2d9      	uxtb	r1, r3
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	202c      	movs	r0, #44	; 0x2c
 8005d58:	fb00 f303 	mul.w	r3, r0, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3360      	adds	r3, #96	; 0x60
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f00c fc8b 	bl	8012680 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005d6a:	e008      	b.n	8005d7e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	212c      	movs	r1, #44	; 0x2c
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	3360      	adds	r3, #96	; 0x60
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	6093      	str	r3, [r2, #8]
}
 8005d90:	e197      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da8:	d134      	bne.n	8005e14 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f007 fa8e 	bl	800d2f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	461a      	mov	r2, r3
 8005de8:	2310      	movs	r3, #16
 8005dea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	212c      	movs	r1, #44	; 0x2c
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3361      	adds	r3, #97	; 0x61
 8005e0e:	2208      	movs	r2, #8
 8005e10:	701a      	strb	r2, [r3, #0]
}
 8005e12:	e156      	b.n	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	f040 814b 	bne.w	80060c2 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e46:	f023 0302 	bic.w	r3, r3, #2
 8005e4a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	212c      	movs	r1, #44	; 0x2c
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	3361      	adds	r3, #97	; 0x61
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d179      	bne.n	8005f54 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	212c      	movs	r1, #44	; 0x2c
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3360      	adds	r3, #96	; 0x60
 8005e6e:	2201      	movs	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	212c      	movs	r1, #44	; 0x2c
 8005e78:	fb01 f303 	mul.w	r3, r1, r3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	333f      	adds	r3, #63	; 0x3f
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d00a      	beq.n	8005e9c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	212c      	movs	r1, #44	; 0x2c
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	4413      	add	r3, r2
 8005e92:	333f      	adds	r3, #63	; 0x3f
 8005e94:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	f040 80fc 	bne.w	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d142      	bne.n	8005f2a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	212c      	movs	r1, #44	; 0x2c
 8005eaa:	fb01 f303 	mul.w	r3, r1, r3
 8005eae:	4413      	add	r3, r2
 8005eb0:	334c      	adds	r3, #76	; 0x4c
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80ed 	beq.w	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	212c      	movs	r1, #44	; 0x2c
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	334c      	adds	r3, #76	; 0x4c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	202c      	movs	r0, #44	; 0x2c
 8005ed0:	fb00 f202 	mul.w	r2, r0, r2
 8005ed4:	440a      	add	r2, r1
 8005ed6:	3240      	adds	r2, #64	; 0x40
 8005ed8:	8812      	ldrh	r2, [r2, #0]
 8005eda:	4413      	add	r3, r2
 8005edc:	3b01      	subs	r3, #1
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	697a      	ldr	r2, [r7, #20]
 8005ee2:	202c      	movs	r0, #44	; 0x2c
 8005ee4:	fb00 f202 	mul.w	r2, r0, r2
 8005ee8:	440a      	add	r2, r1
 8005eea:	3240      	adds	r2, #64	; 0x40
 8005eec:	8812      	ldrh	r2, [r2, #0]
 8005eee:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80ca 	beq.w	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	212c      	movs	r1, #44	; 0x2c
 8005f06:	fb01 f303 	mul.w	r3, r1, r3
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3355      	adds	r3, #85	; 0x55
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	f083 0301 	eor.w	r3, r3, #1
 8005f14:	b2d8      	uxtb	r0, r3
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	212c      	movs	r1, #44	; 0x2c
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	4413      	add	r3, r2
 8005f22:	3355      	adds	r3, #85	; 0x55
 8005f24:	4602      	mov	r2, r0
 8005f26:	701a      	strb	r2, [r3, #0]
 8005f28:	e0b4      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	212c      	movs	r1, #44	; 0x2c
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	3355      	adds	r3, #85	; 0x55
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	f083 0301 	eor.w	r3, r3, #1
 8005f3e:	b2d8      	uxtb	r0, r3
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	212c      	movs	r1, #44	; 0x2c
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3355      	adds	r3, #85	; 0x55
 8005f4e:	4602      	mov	r2, r0
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	e09f      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	212c      	movs	r1, #44	; 0x2c
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	3361      	adds	r3, #97	; 0x61
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d109      	bne.n	8005f7c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	212c      	movs	r1, #44	; 0x2c
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	4413      	add	r3, r2
 8005f74:	3360      	adds	r3, #96	; 0x60
 8005f76:	2202      	movs	r2, #2
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	e08b      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	212c      	movs	r1, #44	; 0x2c
 8005f82:	fb01 f303 	mul.w	r3, r1, r3
 8005f86:	4413      	add	r3, r2
 8005f88:	3361      	adds	r3, #97	; 0x61
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d109      	bne.n	8005fa4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	212c      	movs	r1, #44	; 0x2c
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3360      	adds	r3, #96	; 0x60
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e077      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	212c      	movs	r1, #44	; 0x2c
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	3361      	adds	r3, #97	; 0x61
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b05      	cmp	r3, #5
 8005fb6:	d109      	bne.n	8005fcc <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	212c      	movs	r1, #44	; 0x2c
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3360      	adds	r3, #96	; 0x60
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e063      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	212c      	movs	r1, #44	; 0x2c
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3361      	adds	r3, #97	; 0x61
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b06      	cmp	r3, #6
 8005fde:	d009      	beq.n	8005ff4 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	212c      	movs	r1, #44	; 0x2c
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	3361      	adds	r3, #97	; 0x61
 8005fee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d14f      	bne.n	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	212c      	movs	r1, #44	; 0x2c
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	335c      	adds	r3, #92	; 0x5c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	202c      	movs	r0, #44	; 0x2c
 800600c:	fb00 f303 	mul.w	r3, r0, r3
 8006010:	440b      	add	r3, r1
 8006012:	335c      	adds	r3, #92	; 0x5c
 8006014:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	212c      	movs	r1, #44	; 0x2c
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	4413      	add	r3, r2
 8006022:	335c      	adds	r3, #92	; 0x5c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d912      	bls.n	8006050 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	212c      	movs	r1, #44	; 0x2c
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	4413      	add	r3, r2
 8006036:	335c      	adds	r3, #92	; 0x5c
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	212c      	movs	r1, #44	; 0x2c
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	4413      	add	r3, r2
 8006048:	3360      	adds	r3, #96	; 0x60
 800604a:	2204      	movs	r2, #4
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e021      	b.n	8006094 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	212c      	movs	r1, #44	; 0x2c
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	4413      	add	r3, r2
 800605c:	3360      	adds	r3, #96	; 0x60
 800605e:	2202      	movs	r2, #2
 8006060:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	4413      	add	r3, r2
 800606a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006078:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006080:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	4413      	add	r3, r2
 800608a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608e:	461a      	mov	r2, r3
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	461a      	mov	r2, r3
 80060a2:	2302      	movs	r3, #2
 80060a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	b2d9      	uxtb	r1, r3
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	202c      	movs	r0, #44	; 0x2c
 80060b0:	fb00 f303 	mul.w	r3, r0, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	3360      	adds	r3, #96	; 0x60
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f00c fadf 	bl	8012680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80060c2:	bf00      	nop
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b08a      	sub	sp, #40	; 0x28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	0c5b      	lsrs	r3, r3, #17
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060fe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d004      	beq.n	8006110 <HCD_RXQLVL_IRQHandler+0x46>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b05      	cmp	r3, #5
 800610a:	f000 80a9 	beq.w	8006260 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800610e:	e0aa      	b.n	8006266 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 80a6 	beq.w	8006264 <HCD_RXQLVL_IRQHandler+0x19a>
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	212c      	movs	r1, #44	; 0x2c
 800611e:	fb01 f303 	mul.w	r3, r1, r3
 8006122:	4413      	add	r3, r2
 8006124:	3344      	adds	r3, #68	; 0x44
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 809b 	beq.w	8006264 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	212c      	movs	r1, #44	; 0x2c
 8006134:	fb01 f303 	mul.w	r3, r1, r3
 8006138:	4413      	add	r3, r2
 800613a:	3350      	adds	r3, #80	; 0x50
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	441a      	add	r2, r3
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	202c      	movs	r0, #44	; 0x2c
 8006148:	fb00 f303 	mul.w	r3, r0, r3
 800614c:	440b      	add	r3, r1
 800614e:	334c      	adds	r3, #76	; 0x4c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d87a      	bhi.n	800624c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	212c      	movs	r1, #44	; 0x2c
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	3344      	adds	r3, #68	; 0x44
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	b292      	uxth	r2, r2
 800616e:	4619      	mov	r1, r3
 8006170:	f006 fc6b 	bl	800ca4a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	212c      	movs	r1, #44	; 0x2c
 800617a:	fb01 f303 	mul.w	r3, r1, r3
 800617e:	4413      	add	r3, r2
 8006180:	3344      	adds	r3, #68	; 0x44
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	441a      	add	r2, r3
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	202c      	movs	r0, #44	; 0x2c
 800618e:	fb00 f303 	mul.w	r3, r0, r3
 8006192:	440b      	add	r3, r1
 8006194:	3344      	adds	r3, #68	; 0x44
 8006196:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	212c      	movs	r1, #44	; 0x2c
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	4413      	add	r3, r2
 80061a4:	3350      	adds	r3, #80	; 0x50
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	441a      	add	r2, r3
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	202c      	movs	r0, #44	; 0x2c
 80061b2:	fb00 f303 	mul.w	r3, r0, r3
 80061b6:	440b      	add	r3, r1
 80061b8:	3350      	adds	r3, #80	; 0x50
 80061ba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	0cdb      	lsrs	r3, r3, #19
 80061cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	212c      	movs	r1, #44	; 0x2c
 80061d8:	fb01 f303 	mul.w	r3, r1, r3
 80061dc:	4413      	add	r3, r2
 80061de:	3340      	adds	r3, #64	; 0x40
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d13c      	bne.n	8006264 <HCD_RXQLVL_IRQHandler+0x19a>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d039      	beq.n	8006264 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006206:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800620e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	212c      	movs	r1, #44	; 0x2c
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	4413      	add	r3, r2
 800622e:	3354      	adds	r3, #84	; 0x54
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f083 0301 	eor.w	r3, r3, #1
 8006236:	b2d8      	uxtb	r0, r3
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	212c      	movs	r1, #44	; 0x2c
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	3354      	adds	r3, #84	; 0x54
 8006246:	4602      	mov	r2, r0
 8006248:	701a      	strb	r2, [r3, #0]
      break;
 800624a:	e00b      	b.n	8006264 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	212c      	movs	r1, #44	; 0x2c
 8006252:	fb01 f303 	mul.w	r3, r1, r3
 8006256:	4413      	add	r3, r2
 8006258:	3360      	adds	r3, #96	; 0x60
 800625a:	2204      	movs	r2, #4
 800625c:	701a      	strb	r2, [r3, #0]
      break;
 800625e:	e001      	b.n	8006264 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006260:	bf00      	nop
 8006262:	e000      	b.n	8006266 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006264:	bf00      	nop
  }
}
 8006266:	bf00      	nop
 8006268:	3728      	adds	r7, #40	; 0x28
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b086      	sub	sp, #24
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800629a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d10b      	bne.n	80062be <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d102      	bne.n	80062b6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f00c f9c9 	bl	8012648 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f043 0302 	orr.w	r3, r3, #2
 80062bc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d132      	bne.n	800632e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f043 0308 	orr.w	r3, r3, #8
 80062ce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d126      	bne.n	8006328 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d113      	bne.n	800630a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80062e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062ec:	d106      	bne.n	80062fc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2102      	movs	r1, #2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f006 fcd7 	bl	800cca8 <USB_InitFSLSPClkSel>
 80062fa:	e011      	b.n	8006320 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f006 fcd0 	bl	800cca8 <USB_InitFSLSPClkSel>
 8006308:	e00a      	b.n	8006320 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d106      	bne.n	8006320 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006318:	461a      	mov	r2, r3
 800631a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800631e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f00c f9bf 	bl	80126a4 <HAL_HCD_PortEnabled_Callback>
 8006326:	e002      	b.n	800632e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f00c f9c9 	bl	80126c0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b20      	cmp	r3, #32
 8006336:	d103      	bne.n	8006340 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f043 0320 	orr.w	r3, r3, #32
 800633e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006346:	461a      	mov	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6013      	str	r3, [r2, #0]
}
 800634c:	bf00      	nop
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e07f      	b.n	8006466 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fb fd94 	bl	8001ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2224      	movs	r2, #36	; 0x24
 8006384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d107      	bne.n	80063ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ca:	609a      	str	r2, [r3, #8]
 80063cc:	e006      	b.n	80063dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80063da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d104      	bne.n	80063ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6859      	ldr	r1, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <HAL_I2C_Init+0x11c>)
 80063fa:	430b      	orrs	r3, r1
 80063fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800640c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	ea42 0103 	orr.w	r1, r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	021a      	lsls	r2, r3, #8
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	02008000 	.word	0x02008000

08006474 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b20      	cmp	r3, #32
 8006488:	d138      	bne.n	80064fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006494:	2302      	movs	r3, #2
 8006496:	e032      	b.n	80064fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	; 0x24
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6819      	ldr	r1, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	e000      	b.n	80064fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064fc:	2302      	movs	r3, #2
  }
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b20      	cmp	r3, #32
 800651e:	d139      	bne.n	8006594 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800652a:	2302      	movs	r3, #2
 800652c:	e033      	b.n	8006596 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2224      	movs	r2, #36	; 0x24
 800653a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0201 	bic.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800655c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e000      	b.n	8006596 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
  }
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e0bf      	b.n	8006736 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fb fce4 	bl	8001f98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80065e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6999      	ldr	r1, [r3, #24]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80065fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6899      	ldr	r1, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b4a      	ldr	r3, [pc, #296]	; (8006740 <HAL_LTDC_Init+0x19c>)
 8006618:	400b      	ands	r3, r1
 800661a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	041b      	lsls	r3, r3, #16
 8006622:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6899      	ldr	r1, [r3, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68d9      	ldr	r1, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4b3e      	ldr	r3, [pc, #248]	; (8006740 <HAL_LTDC_Init+0x19c>)
 8006646:	400b      	ands	r3, r1
 8006648:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	041b      	lsls	r3, r3, #16
 8006650:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68d9      	ldr	r1, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1a      	ldr	r2, [r3, #32]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6919      	ldr	r1, [r3, #16]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b33      	ldr	r3, [pc, #204]	; (8006740 <HAL_LTDC_Init+0x19c>)
 8006674:	400b      	ands	r3, r1
 8006676:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6919      	ldr	r1, [r3, #16]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6959      	ldr	r1, [r3, #20]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	4b27      	ldr	r3, [pc, #156]	; (8006740 <HAL_LTDC_Init+0x19c>)
 80066a2:	400b      	ands	r3, r1
 80066a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	041b      	lsls	r3, r3, #16
 80066ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6959      	ldr	r1, [r3, #20]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0206 	orr.w	r2, r2, #6
 8006712:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	f000f800 	.word	0xf000f800

08006744 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b00      	cmp	r3, #0
 8006764:	d023      	beq.n	80067ae <HAL_LTDC_IRQHandler+0x6a>
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01e      	beq.n	80067ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0204 	bic.w	r2, r2, #4
 800677e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2204      	movs	r2, #4
 8006786:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800678e:	f043 0201 	orr.w	r2, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2204      	movs	r2, #4
 800679c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f86f 	bl	800688c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d023      	beq.n	8006800 <HAL_LTDC_IRQHandler+0xbc>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d01e      	beq.n	8006800 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0202 	bic.w	r2, r2, #2
 80067d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2202      	movs	r2, #2
 80067d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067e0:	f043 0202 	orr.w	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2204      	movs	r2, #4
 80067ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f846 	bl	800688c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d01b      	beq.n	8006842 <HAL_LTDC_IRQHandler+0xfe>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d016      	beq.n	8006842 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2201      	movs	r2, #1
 800682a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f82f 	bl	80068a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01b      	beq.n	8006884 <HAL_LTDC_IRQHandler+0x140>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d016      	beq.n	8006884 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0208 	bic.w	r2, r2, #8
 8006864:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2208      	movs	r2, #8
 800686c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f818 	bl	80068b4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80068c8:	b5b0      	push	{r4, r5, r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_LTDC_ConfigLayer+0x1a>
 80068de:	2302      	movs	r3, #2
 80068e0:	e02c      	b.n	800693c <HAL_LTDC_ConfigLayer+0x74>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2134      	movs	r1, #52	; 0x34
 80068f8:	fb01 f303 	mul.w	r3, r1, r3
 80068fc:	4413      	add	r3, r2
 80068fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4614      	mov	r4, r2
 8006906:	461d      	mov	r5, r3
 8006908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800690a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800690c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800690e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006914:	682b      	ldr	r3, [r5, #0]
 8006916:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f811 	bl	8006944 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2201      	movs	r2, #1
 8006928:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bdb0      	pop	{r4, r5, r7, pc}

08006944 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006944:	b480      	push	{r7}
 8006946:	b089      	sub	sp, #36	; 0x24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	0c1b      	lsrs	r3, r3, #16
 800695c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006960:	4413      	add	r3, r2
 8006962:	041b      	lsls	r3, r3, #16
 8006964:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	01db      	lsls	r3, r3, #7
 8006970:	4413      	add	r3, r2
 8006972:	3384      	adds	r3, #132	; 0x84
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	4611      	mov	r1, r2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	01d2      	lsls	r2, r2, #7
 8006980:	440a      	add	r2, r1
 8006982:	3284      	adds	r2, #132	; 0x84
 8006984:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006988:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699a:	4413      	add	r3, r2
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4619      	mov	r1, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	01db      	lsls	r3, r3, #7
 80069a8:	440b      	add	r3, r1
 80069aa:	3384      	adds	r3, #132	; 0x84
 80069ac:	4619      	mov	r1, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069c2:	4413      	add	r3, r2
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	01db      	lsls	r3, r3, #7
 80069d2:	4413      	add	r3, r2
 80069d4:	3384      	adds	r3, #132	; 0x84
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	4611      	mov	r1, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	01d2      	lsls	r2, r2, #7
 80069e2:	440a      	add	r2, r1
 80069e4:	3284      	adds	r2, #132	; 0x84
 80069e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80069ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069fa:	4413      	add	r3, r2
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	01db      	lsls	r3, r3, #7
 8006a08:	440b      	add	r3, r1
 8006a0a:	3384      	adds	r3, #132	; 0x84
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	01db      	lsls	r3, r3, #7
 8006a1e:	4413      	add	r3, r2
 8006a20:	3384      	adds	r3, #132	; 0x84
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	01d2      	lsls	r2, r2, #7
 8006a2e:	440a      	add	r2, r1
 8006a30:	3284      	adds	r2, #132	; 0x84
 8006a32:	f023 0307 	bic.w	r3, r3, #7
 8006a36:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	01db      	lsls	r3, r3, #7
 8006a42:	4413      	add	r3, r2
 8006a44:	3384      	adds	r3, #132	; 0x84
 8006a46:	461a      	mov	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	061b      	lsls	r3, r3, #24
 8006a68:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	01db      	lsls	r3, r3, #7
 8006a74:	4413      	add	r3, r2
 8006a76:	3384      	adds	r3, #132	; 0x84
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	4413      	add	r3, r2
 8006a86:	3384      	adds	r3, #132	; 0x84
 8006a88:	461a      	mov	r2, r3
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a94:	461a      	mov	r2, r3
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	01db      	lsls	r3, r3, #7
 8006aa8:	440b      	add	r3, r1
 8006aaa:	3384      	adds	r3, #132	; 0x84
 8006aac:	4619      	mov	r1, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	01db      	lsls	r3, r3, #7
 8006abe:	4413      	add	r3, r2
 8006ac0:	3384      	adds	r3, #132	; 0x84
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	4611      	mov	r1, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	01d2      	lsls	r2, r2, #7
 8006ace:	440a      	add	r2, r1
 8006ad0:	3284      	adds	r2, #132	; 0x84
 8006ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ad6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	01db      	lsls	r3, r3, #7
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3384      	adds	r3, #132	; 0x84
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	01db      	lsls	r3, r3, #7
 8006af8:	4413      	add	r3, r2
 8006afa:	3384      	adds	r3, #132	; 0x84
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	01db      	lsls	r3, r3, #7
 8006b08:	440b      	add	r3, r1
 8006b0a:	3384      	adds	r3, #132	; 0x84
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4b58      	ldr	r3, [pc, #352]	; (8006c70 <LTDC_SetConfig+0x32c>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	6809      	ldr	r1, [r1, #0]
 8006b20:	4608      	mov	r0, r1
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	01c9      	lsls	r1, r1, #7
 8006b26:	4401      	add	r1, r0
 8006b28:	3184      	adds	r1, #132	; 0x84
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	01db      	lsls	r3, r3, #7
 8006b38:	4413      	add	r3, r2
 8006b3a:	3384      	adds	r3, #132	; 0x84
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	01db      	lsls	r3, r3, #7
 8006b48:	4413      	add	r3, r2
 8006b4a:	3384      	adds	r3, #132	; 0x84
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	01db      	lsls	r3, r3, #7
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3384      	adds	r3, #132	; 0x84
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006b70:	2304      	movs	r3, #4
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e01b      	b.n	8006bae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d102      	bne.n	8006b84 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	e014      	b.n	8006bae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d00b      	beq.n	8006ba4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d007      	beq.n	8006ba4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b98:	2b03      	cmp	r3, #3
 8006b9a:	d003      	beq.n	8006ba4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ba0:	2b07      	cmp	r3, #7
 8006ba2:	d102      	bne.n	8006baa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e001      	b.n	8006bae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006baa:	2301      	movs	r3, #1
 8006bac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	01db      	lsls	r3, r3, #7
 8006bb8:	4413      	add	r3, r2
 8006bba:	3384      	adds	r3, #132	; 0x84
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	01d2      	lsls	r2, r2, #7
 8006bc8:	440a      	add	r2, r1
 8006bca:	3284      	adds	r2, #132	; 0x84
 8006bcc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006bd0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	fb02 f303 	mul.w	r3, r2, r3
 8006bdc:	041a      	lsls	r2, r3, #16
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6859      	ldr	r1, [r3, #4]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	1acb      	subs	r3, r1, r3
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	3303      	adds	r3, #3
 8006bf0:	68f9      	ldr	r1, [r7, #12]
 8006bf2:	6809      	ldr	r1, [r1, #0]
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	01c9      	lsls	r1, r1, #7
 8006bfa:	4401      	add	r1, r0
 8006bfc:	3184      	adds	r1, #132	; 0x84
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	01db      	lsls	r3, r3, #7
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3384      	adds	r3, #132	; 0x84
 8006c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4619      	mov	r1, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	440b      	add	r3, r1
 8006c1e:	3384      	adds	r3, #132	; 0x84
 8006c20:	4619      	mov	r1, r3
 8006c22:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <LTDC_SetConfig+0x330>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	01db      	lsls	r3, r3, #7
 8006c32:	4413      	add	r3, r2
 8006c34:	3384      	adds	r3, #132	; 0x84
 8006c36:	461a      	mov	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	01db      	lsls	r3, r3, #7
 8006c48:	4413      	add	r3, r2
 8006c4a:	3384      	adds	r3, #132	; 0x84
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	4611      	mov	r1, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	01d2      	lsls	r2, r2, #7
 8006c58:	440a      	add	r2, r1
 8006c5a:	3284      	adds	r2, #132	; 0x84
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	6013      	str	r3, [r2, #0]
}
 8006c62:	bf00      	nop
 8006c64:	3724      	adds	r7, #36	; 0x24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	fffff8f8 	.word	0xfffff8f8
 8006c74:	fffff800 	.word	0xfffff800

08006c78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a04      	ldr	r2, [pc, #16]	; (8006c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c86:	6013      	str	r3, [r2, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40007000 	.word	0x40007000

08006c98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ca2:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	4a22      	ldr	r2, [pc, #136]	; (8006d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cac:	6413      	str	r3, [r2, #64]	; 0x40
 8006cae:	4b20      	ldr	r3, [pc, #128]	; (8006d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006cba:	4b1e      	ldr	r3, [pc, #120]	; (8006d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cc6:	f7fb fffb 	bl	8002cc0 <HAL_GetTick>
 8006cca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ccc:	e009      	b.n	8006ce2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006cce:	f7fb fff7 	bl	8002cc0 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cdc:	d901      	bls.n	8006ce2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e022      	b.n	8006d28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ce2:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cee:	d1ee      	bne.n	8006cce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006cf0:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a0f      	ldr	r2, [pc, #60]	; (8006d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cfc:	f7fb ffe0 	bl	8002cc0 <HAL_GetTick>
 8006d00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d02:	e009      	b.n	8006d18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d04:	f7fb ffdc 	bl	8002cc0 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d12:	d901      	bls.n	8006d18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e007      	b.n	8006d28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d24:	d1ee      	bne.n	8006d04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40023800 	.word	0x40023800
 8006d34:	40007000 	.word	0x40007000

08006d38 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006d40:	f7fb ffbe 	bl	8002cc0 <HAL_GetTick>
 8006d44:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e067      	b.n	8006e20 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7fb f9df 	bl	8002128 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006d6a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f85e 	bl	8006e30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	021a      	lsls	r2, r3, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2120      	movs	r1, #32
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f856 	bl	8006e4c <QSPI_WaitFlagStateUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006da4:	7afb      	ldrb	r3, [r7, #11]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d135      	bne.n	8006e16 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b1d      	ldr	r3, [pc, #116]	; (8006e28 <HAL_QSPI_Init+0xf0>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6852      	ldr	r2, [r2, #4]
 8006db8:	0611      	lsls	r1, r2, #24
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	68d2      	ldr	r2, [r2, #12]
 8006dbe:	4311      	orrs	r1, r2
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	69d2      	ldr	r2, [r2, #28]
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6a12      	ldr	r2, [r2, #32]
 8006dca:	4311      	orrs	r1, r2
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <HAL_QSPI_Init+0xf4>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6912      	ldr	r2, [r2, #16]
 8006de2:	0411      	lsls	r1, r2, #16
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6952      	ldr	r2, [r2, #20]
 8006de8:	4311      	orrs	r1, r2
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6992      	ldr	r2, [r2, #24]
 8006dee:	4311      	orrs	r1, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0201 	orr.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	00ffff2f 	.word	0x00ffff2f
 8006e2c:	ffe0f8fe 	.word	0xffe0f8fe

08006e30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006e5c:	e01a      	b.n	8006e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e64:	d016      	beq.n	8006e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e66:	f7fb ff2b 	bl	8002cc0 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d302      	bcc.n	8006e7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e88:	f043 0201 	orr.w	r2, r3, #1
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e00e      	b.n	8006eb2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bf14      	ite	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	2300      	moveq	r3, #0
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d1d6      	bne.n	8006e5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e291      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 8087 	beq.w	8006fee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ee0:	4b96      	ldr	r3, [pc, #600]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 030c 	and.w	r3, r3, #12
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d00c      	beq.n	8006f06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eec:	4b93      	ldr	r3, [pc, #588]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 030c 	and.w	r3, r3, #12
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d112      	bne.n	8006f1e <HAL_RCC_OscConfig+0x62>
 8006ef8:	4b90      	ldr	r3, [pc, #576]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f04:	d10b      	bne.n	8006f1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f06:	4b8d      	ldr	r3, [pc, #564]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d06c      	beq.n	8006fec <HAL_RCC_OscConfig+0x130>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d168      	bne.n	8006fec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e26b      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f26:	d106      	bne.n	8006f36 <HAL_RCC_OscConfig+0x7a>
 8006f28:	4b84      	ldr	r3, [pc, #528]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a83      	ldr	r2, [pc, #524]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	e02e      	b.n	8006f94 <HAL_RCC_OscConfig+0xd8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10c      	bne.n	8006f58 <HAL_RCC_OscConfig+0x9c>
 8006f3e:	4b7f      	ldr	r3, [pc, #508]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a7e      	ldr	r2, [pc, #504]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	4b7c      	ldr	r3, [pc, #496]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7b      	ldr	r2, [pc, #492]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	e01d      	b.n	8006f94 <HAL_RCC_OscConfig+0xd8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f60:	d10c      	bne.n	8006f7c <HAL_RCC_OscConfig+0xc0>
 8006f62:	4b76      	ldr	r3, [pc, #472]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a75      	ldr	r2, [pc, #468]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	4b73      	ldr	r3, [pc, #460]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a72      	ldr	r2, [pc, #456]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	e00b      	b.n	8006f94 <HAL_RCC_OscConfig+0xd8>
 8006f7c:	4b6f      	ldr	r3, [pc, #444]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a6e      	ldr	r2, [pc, #440]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	4b6c      	ldr	r3, [pc, #432]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a6b      	ldr	r2, [pc, #428]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d013      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fb fe90 	bl	8002cc0 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fa4:	f7fb fe8c 	bl	8002cc0 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b64      	cmp	r3, #100	; 0x64
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e21f      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fb6:	4b61      	ldr	r3, [pc, #388]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0xe8>
 8006fc2:	e014      	b.n	8006fee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc4:	f7fb fe7c 	bl	8002cc0 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fcc:	f7fb fe78 	bl	8002cc0 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b64      	cmp	r3, #100	; 0x64
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e20b      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fde:	4b57      	ldr	r3, [pc, #348]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f0      	bne.n	8006fcc <HAL_RCC_OscConfig+0x110>
 8006fea:	e000      	b.n	8006fee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d069      	beq.n	80070ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ffa:	4b50      	ldr	r3, [pc, #320]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 030c 	and.w	r3, r3, #12
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00b      	beq.n	800701e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007006:	4b4d      	ldr	r3, [pc, #308]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 030c 	and.w	r3, r3, #12
 800700e:	2b08      	cmp	r3, #8
 8007010:	d11c      	bne.n	800704c <HAL_RCC_OscConfig+0x190>
 8007012:	4b4a      	ldr	r3, [pc, #296]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d116      	bne.n	800704c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800701e:	4b47      	ldr	r3, [pc, #284]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <HAL_RCC_OscConfig+0x17a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d001      	beq.n	8007036 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e1df      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	493d      	ldr	r1, [pc, #244]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007046:	4313      	orrs	r3, r2
 8007048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800704a:	e040      	b.n	80070ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d023      	beq.n	800709c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007054:	4b39      	ldr	r3, [pc, #228]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a38      	ldr	r2, [pc, #224]	; (800713c <HAL_RCC_OscConfig+0x280>)
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fb fe2e 	bl	8002cc0 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007068:	f7fb fe2a 	bl	8002cc0 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e1bd      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707a:	4b30      	ldr	r3, [pc, #192]	; (800713c <HAL_RCC_OscConfig+0x280>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0f0      	beq.n	8007068 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007086:	4b2d      	ldr	r3, [pc, #180]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	4929      	ldr	r1, [pc, #164]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007096:	4313      	orrs	r3, r2
 8007098:	600b      	str	r3, [r1, #0]
 800709a:	e018      	b.n	80070ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800709c:	4b27      	ldr	r3, [pc, #156]	; (800713c <HAL_RCC_OscConfig+0x280>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a26      	ldr	r2, [pc, #152]	; (800713c <HAL_RCC_OscConfig+0x280>)
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a8:	f7fb fe0a 	bl	8002cc0 <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b0:	f7fb fe06 	bl	8002cc0 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e199      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070c2:	4b1e      	ldr	r3, [pc, #120]	; (800713c <HAL_RCC_OscConfig+0x280>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1f0      	bne.n	80070b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d038      	beq.n	800714c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d019      	beq.n	8007116 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070e2:	4b16      	ldr	r3, [pc, #88]	; (800713c <HAL_RCC_OscConfig+0x280>)
 80070e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e6:	4a15      	ldr	r2, [pc, #84]	; (800713c <HAL_RCC_OscConfig+0x280>)
 80070e8:	f043 0301 	orr.w	r3, r3, #1
 80070ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ee:	f7fb fde7 	bl	8002cc0 <HAL_GetTick>
 80070f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070f6:	f7fb fde3 	bl	8002cc0 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e176      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <HAL_RCC_OscConfig+0x280>)
 800710a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <HAL_RCC_OscConfig+0x23a>
 8007114:	e01a      	b.n	800714c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <HAL_RCC_OscConfig+0x280>)
 8007118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711a:	4a08      	ldr	r2, [pc, #32]	; (800713c <HAL_RCC_OscConfig+0x280>)
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007122:	f7fb fdcd 	bl	8002cc0 <HAL_GetTick>
 8007126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007128:	e00a      	b.n	8007140 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800712a:	f7fb fdc9 	bl	8002cc0 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d903      	bls.n	8007140 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e15c      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
 800713c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007140:	4b91      	ldr	r3, [pc, #580]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1ee      	bne.n	800712a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80a4 	beq.w	80072a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800715a:	4b8b      	ldr	r3, [pc, #556]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10d      	bne.n	8007182 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007166:	4b88      	ldr	r3, [pc, #544]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	4a87      	ldr	r2, [pc, #540]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800716c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007170:	6413      	str	r3, [r2, #64]	; 0x40
 8007172:	4b85      	ldr	r3, [pc, #532]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800717a:	60bb      	str	r3, [r7, #8]
 800717c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800717e:	2301      	movs	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007182:	4b82      	ldr	r3, [pc, #520]	; (800738c <HAL_RCC_OscConfig+0x4d0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	2b00      	cmp	r3, #0
 800718c:	d118      	bne.n	80071c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800718e:	4b7f      	ldr	r3, [pc, #508]	; (800738c <HAL_RCC_OscConfig+0x4d0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a7e      	ldr	r2, [pc, #504]	; (800738c <HAL_RCC_OscConfig+0x4d0>)
 8007194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800719a:	f7fb fd91 	bl	8002cc0 <HAL_GetTick>
 800719e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a2:	f7fb fd8d 	bl	8002cc0 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b64      	cmp	r3, #100	; 0x64
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e120      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071b4:	4b75      	ldr	r3, [pc, #468]	; (800738c <HAL_RCC_OscConfig+0x4d0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0f0      	beq.n	80071a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d106      	bne.n	80071d6 <HAL_RCC_OscConfig+0x31a>
 80071c8:	4b6f      	ldr	r3, [pc, #444]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80071ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071cc:	4a6e      	ldr	r2, [pc, #440]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80071ce:	f043 0301 	orr.w	r3, r3, #1
 80071d2:	6713      	str	r3, [r2, #112]	; 0x70
 80071d4:	e02d      	b.n	8007232 <HAL_RCC_OscConfig+0x376>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10c      	bne.n	80071f8 <HAL_RCC_OscConfig+0x33c>
 80071de:	4b6a      	ldr	r3, [pc, #424]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e2:	4a69      	ldr	r2, [pc, #420]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80071e4:	f023 0301 	bic.w	r3, r3, #1
 80071e8:	6713      	str	r3, [r2, #112]	; 0x70
 80071ea:	4b67      	ldr	r3, [pc, #412]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a66      	ldr	r2, [pc, #408]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80071f0:	f023 0304 	bic.w	r3, r3, #4
 80071f4:	6713      	str	r3, [r2, #112]	; 0x70
 80071f6:	e01c      	b.n	8007232 <HAL_RCC_OscConfig+0x376>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	2b05      	cmp	r3, #5
 80071fe:	d10c      	bne.n	800721a <HAL_RCC_OscConfig+0x35e>
 8007200:	4b61      	ldr	r3, [pc, #388]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	4a60      	ldr	r2, [pc, #384]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007206:	f043 0304 	orr.w	r3, r3, #4
 800720a:	6713      	str	r3, [r2, #112]	; 0x70
 800720c:	4b5e      	ldr	r3, [pc, #376]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800720e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007210:	4a5d      	ldr	r2, [pc, #372]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007212:	f043 0301 	orr.w	r3, r3, #1
 8007216:	6713      	str	r3, [r2, #112]	; 0x70
 8007218:	e00b      	b.n	8007232 <HAL_RCC_OscConfig+0x376>
 800721a:	4b5b      	ldr	r3, [pc, #364]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800721c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721e:	4a5a      	ldr	r2, [pc, #360]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	6713      	str	r3, [r2, #112]	; 0x70
 8007226:	4b58      	ldr	r3, [pc, #352]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	4a57      	ldr	r2, [pc, #348]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800722c:	f023 0304 	bic.w	r3, r3, #4
 8007230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d015      	beq.n	8007266 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723a:	f7fb fd41 	bl	8002cc0 <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007240:	e00a      	b.n	8007258 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007242:	f7fb fd3d 	bl	8002cc0 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e0ce      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007258:	4b4b      	ldr	r3, [pc, #300]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ee      	beq.n	8007242 <HAL_RCC_OscConfig+0x386>
 8007264:	e014      	b.n	8007290 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007266:	f7fb fd2b 	bl	8002cc0 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800726c:	e00a      	b.n	8007284 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726e:	f7fb fd27 	bl	8002cc0 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f241 3288 	movw	r2, #5000	; 0x1388
 800727c:	4293      	cmp	r3, r2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e0b8      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007284:	4b40      	ldr	r3, [pc, #256]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1ee      	bne.n	800726e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d105      	bne.n	80072a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007296:	4b3c      	ldr	r3, [pc, #240]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	4a3b      	ldr	r2, [pc, #236]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800729c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 80a4 	beq.w	80073f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072ac:	4b36      	ldr	r3, [pc, #216]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 030c 	and.w	r3, r3, #12
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d06b      	beq.n	8007390 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d149      	bne.n	8007354 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072c0:	4b31      	ldr	r3, [pc, #196]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a30      	ldr	r2, [pc, #192]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80072c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072cc:	f7fb fcf8 	bl	8002cc0 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d4:	f7fb fcf4 	bl	8002cc0 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e087      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e6:	4b28      	ldr	r3, [pc, #160]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69da      	ldr	r2, [r3, #28]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	019b      	lsls	r3, r3, #6
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	085b      	lsrs	r3, r3, #1
 800730a:	3b01      	subs	r3, #1
 800730c:	041b      	lsls	r3, r3, #16
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	061b      	lsls	r3, r3, #24
 8007316:	4313      	orrs	r3, r2
 8007318:	4a1b      	ldr	r2, [pc, #108]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800731a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800731e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007320:	4b19      	ldr	r3, [pc, #100]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a18      	ldr	r2, [pc, #96]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800732a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732c:	f7fb fcc8 	bl	8002cc0 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007332:	e008      	b.n	8007346 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007334:	f7fb fcc4 	bl	8002cc0 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d901      	bls.n	8007346 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e057      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007346:	4b10      	ldr	r3, [pc, #64]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f0      	beq.n	8007334 <HAL_RCC_OscConfig+0x478>
 8007352:	e04f      	b.n	80073f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007354:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a0b      	ldr	r2, [pc, #44]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800735a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800735e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fb fcae 	bl	8002cc0 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007368:	f7fb fcaa 	bl	8002cc0 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e03d      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800737a:	4b03      	ldr	r3, [pc, #12]	; (8007388 <HAL_RCC_OscConfig+0x4cc>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1f0      	bne.n	8007368 <HAL_RCC_OscConfig+0x4ac>
 8007386:	e035      	b.n	80073f4 <HAL_RCC_OscConfig+0x538>
 8007388:	40023800 	.word	0x40023800
 800738c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007390:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <HAL_RCC_OscConfig+0x544>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d028      	beq.n	80073f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d121      	bne.n	80073f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d11a      	bne.n	80073f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073c0:	4013      	ands	r3, r2
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d111      	bne.n	80073f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	3b01      	subs	r3, #1
 80073da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073dc:	429a      	cmp	r2, r3
 80073de:	d107      	bne.n	80073f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d001      	beq.n	80073f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40023800 	.word	0x40023800

08007404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e0d0      	b.n	80075be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800741c:	4b6a      	ldr	r3, [pc, #424]	; (80075c8 <HAL_RCC_ClockConfig+0x1c4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d910      	bls.n	800744c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742a:	4b67      	ldr	r3, [pc, #412]	; (80075c8 <HAL_RCC_ClockConfig+0x1c4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f023 020f 	bic.w	r2, r3, #15
 8007432:	4965      	ldr	r1, [pc, #404]	; (80075c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	4313      	orrs	r3, r2
 8007438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743a:	4b63      	ldr	r3, [pc, #396]	; (80075c8 <HAL_RCC_ClockConfig+0x1c4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d001      	beq.n	800744c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0b8      	b.n	80075be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d020      	beq.n	800749a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007464:	4b59      	ldr	r3, [pc, #356]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	4a58      	ldr	r2, [pc, #352]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 800746a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800746e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800747c:	4b53      	ldr	r3, [pc, #332]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	4a52      	ldr	r2, [pc, #328]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 8007482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007488:	4b50      	ldr	r3, [pc, #320]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	494d      	ldr	r1, [pc, #308]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 8007496:	4313      	orrs	r3, r2
 8007498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d040      	beq.n	8007528 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d107      	bne.n	80074be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ae:	4b47      	ldr	r3, [pc, #284]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d115      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e07f      	b.n	80075be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c6:	4b41      	ldr	r3, [pc, #260]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e073      	b.n	80075be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d6:	4b3d      	ldr	r3, [pc, #244]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e06b      	b.n	80075be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074e6:	4b39      	ldr	r3, [pc, #228]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f023 0203 	bic.w	r2, r3, #3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4936      	ldr	r1, [pc, #216]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f8:	f7fb fbe2 	bl	8002cc0 <HAL_GetTick>
 80074fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007500:	f7fb fbde 	bl	8002cc0 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	f241 3288 	movw	r2, #5000	; 0x1388
 800750e:	4293      	cmp	r3, r2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e053      	b.n	80075be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007516:	4b2d      	ldr	r3, [pc, #180]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 020c 	and.w	r2, r3, #12
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	429a      	cmp	r2, r3
 8007526:	d1eb      	bne.n	8007500 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007528:	4b27      	ldr	r3, [pc, #156]	; (80075c8 <HAL_RCC_ClockConfig+0x1c4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d210      	bcs.n	8007558 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007536:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f023 020f 	bic.w	r2, r3, #15
 800753e:	4922      	ldr	r1, [pc, #136]	; (80075c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d001      	beq.n	8007558 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e032      	b.n	80075be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007564:	4b19      	ldr	r3, [pc, #100]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	4916      	ldr	r1, [pc, #88]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 8007572:	4313      	orrs	r3, r2
 8007574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007582:	4b12      	ldr	r3, [pc, #72]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	490e      	ldr	r1, [pc, #56]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 8007592:	4313      	orrs	r3, r2
 8007594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007596:	f000 f821 	bl	80075dc <HAL_RCC_GetSysClockFreq>
 800759a:	4602      	mov	r2, r0
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <HAL_RCC_ClockConfig+0x1c8>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	091b      	lsrs	r3, r3, #4
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	490a      	ldr	r1, [pc, #40]	; (80075d0 <HAL_RCC_ClockConfig+0x1cc>)
 80075a8:	5ccb      	ldrb	r3, [r1, r3]
 80075aa:	fa22 f303 	lsr.w	r3, r2, r3
 80075ae:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <HAL_RCC_ClockConfig+0x1d0>)
 80075b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <HAL_RCC_ClockConfig+0x1d4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fb fa5a 	bl	8002a70 <HAL_InitTick>

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	40023c00 	.word	0x40023c00
 80075cc:	40023800 	.word	0x40023800
 80075d0:	08012d88 	.word	0x08012d88
 80075d4:	20000000 	.word	0x20000000
 80075d8:	20000004 	.word	0x20000004

080075dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075dc:	b5b0      	push	{r4, r5, r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075e2:	2100      	movs	r1, #0
 80075e4:	6079      	str	r1, [r7, #4]
 80075e6:	2100      	movs	r1, #0
 80075e8:	60f9      	str	r1, [r7, #12]
 80075ea:	2100      	movs	r1, #0
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80075ee:	2100      	movs	r1, #0
 80075f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075f2:	4952      	ldr	r1, [pc, #328]	; (800773c <HAL_RCC_GetSysClockFreq+0x160>)
 80075f4:	6889      	ldr	r1, [r1, #8]
 80075f6:	f001 010c 	and.w	r1, r1, #12
 80075fa:	2908      	cmp	r1, #8
 80075fc:	d00d      	beq.n	800761a <HAL_RCC_GetSysClockFreq+0x3e>
 80075fe:	2908      	cmp	r1, #8
 8007600:	f200 8094 	bhi.w	800772c <HAL_RCC_GetSysClockFreq+0x150>
 8007604:	2900      	cmp	r1, #0
 8007606:	d002      	beq.n	800760e <HAL_RCC_GetSysClockFreq+0x32>
 8007608:	2904      	cmp	r1, #4
 800760a:	d003      	beq.n	8007614 <HAL_RCC_GetSysClockFreq+0x38>
 800760c:	e08e      	b.n	800772c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800760e:	4b4c      	ldr	r3, [pc, #304]	; (8007740 <HAL_RCC_GetSysClockFreq+0x164>)
 8007610:	60bb      	str	r3, [r7, #8]
      break;
 8007612:	e08e      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007614:	4b4b      	ldr	r3, [pc, #300]	; (8007744 <HAL_RCC_GetSysClockFreq+0x168>)
 8007616:	60bb      	str	r3, [r7, #8]
      break;
 8007618:	e08b      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800761a:	4948      	ldr	r1, [pc, #288]	; (800773c <HAL_RCC_GetSysClockFreq+0x160>)
 800761c:	6849      	ldr	r1, [r1, #4]
 800761e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007622:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007624:	4945      	ldr	r1, [pc, #276]	; (800773c <HAL_RCC_GetSysClockFreq+0x160>)
 8007626:	6849      	ldr	r1, [r1, #4]
 8007628:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800762c:	2900      	cmp	r1, #0
 800762e:	d024      	beq.n	800767a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007630:	4942      	ldr	r1, [pc, #264]	; (800773c <HAL_RCC_GetSysClockFreq+0x160>)
 8007632:	6849      	ldr	r1, [r1, #4]
 8007634:	0989      	lsrs	r1, r1, #6
 8007636:	4608      	mov	r0, r1
 8007638:	f04f 0100 	mov.w	r1, #0
 800763c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007640:	f04f 0500 	mov.w	r5, #0
 8007644:	ea00 0204 	and.w	r2, r0, r4
 8007648:	ea01 0305 	and.w	r3, r1, r5
 800764c:	493d      	ldr	r1, [pc, #244]	; (8007744 <HAL_RCC_GetSysClockFreq+0x168>)
 800764e:	fb01 f003 	mul.w	r0, r1, r3
 8007652:	2100      	movs	r1, #0
 8007654:	fb01 f102 	mul.w	r1, r1, r2
 8007658:	1844      	adds	r4, r0, r1
 800765a:	493a      	ldr	r1, [pc, #232]	; (8007744 <HAL_RCC_GetSysClockFreq+0x168>)
 800765c:	fba2 0101 	umull	r0, r1, r2, r1
 8007660:	1863      	adds	r3, r4, r1
 8007662:	4619      	mov	r1, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	461a      	mov	r2, r3
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	f7f8 fdd0 	bl	8000210 <__aeabi_uldivmod>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4613      	mov	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	e04a      	b.n	8007710 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <HAL_RCC_GetSysClockFreq+0x160>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	099b      	lsrs	r3, r3, #6
 8007680:	461a      	mov	r2, r3
 8007682:	f04f 0300 	mov.w	r3, #0
 8007686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800768a:	f04f 0100 	mov.w	r1, #0
 800768e:	ea02 0400 	and.w	r4, r2, r0
 8007692:	ea03 0501 	and.w	r5, r3, r1
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	014b      	lsls	r3, r1, #5
 80076a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076a8:	0142      	lsls	r2, r0, #5
 80076aa:	4610      	mov	r0, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	1b00      	subs	r0, r0, r4
 80076b0:	eb61 0105 	sbc.w	r1, r1, r5
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	018b      	lsls	r3, r1, #6
 80076be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80076c2:	0182      	lsls	r2, r0, #6
 80076c4:	1a12      	subs	r2, r2, r0
 80076c6:	eb63 0301 	sbc.w	r3, r3, r1
 80076ca:	f04f 0000 	mov.w	r0, #0
 80076ce:	f04f 0100 	mov.w	r1, #0
 80076d2:	00d9      	lsls	r1, r3, #3
 80076d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076d8:	00d0      	lsls	r0, r2, #3
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	1912      	adds	r2, r2, r4
 80076e0:	eb45 0303 	adc.w	r3, r5, r3
 80076e4:	f04f 0000 	mov.w	r0, #0
 80076e8:	f04f 0100 	mov.w	r1, #0
 80076ec:	0299      	lsls	r1, r3, #10
 80076ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80076f2:	0290      	lsls	r0, r2, #10
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4610      	mov	r0, r2
 80076fa:	4619      	mov	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	461a      	mov	r2, r3
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	f7f8 fd84 	bl	8000210 <__aeabi_uldivmod>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4613      	mov	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007710:	4b0a      	ldr	r3, [pc, #40]	; (800773c <HAL_RCC_GetSysClockFreq+0x160>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	0c1b      	lsrs	r3, r3, #16
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	3301      	adds	r3, #1
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	fbb2 f3f3 	udiv	r3, r2, r3
 8007728:	60bb      	str	r3, [r7, #8]
      break;
 800772a:	e002      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <HAL_RCC_GetSysClockFreq+0x164>)
 800772e:	60bb      	str	r3, [r7, #8]
      break;
 8007730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007732:	68bb      	ldr	r3, [r7, #8]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bdb0      	pop	{r4, r5, r7, pc}
 800773c:	40023800 	.word	0x40023800
 8007740:	00f42400 	.word	0x00f42400
 8007744:	017d7840 	.word	0x017d7840

08007748 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <HAL_RCC_GetHCLKFreq+0x14>)
 800774e:	681b      	ldr	r3, [r3, #0]
}
 8007750:	4618      	mov	r0, r3
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20000000 	.word	0x20000000

08007760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007764:	f7ff fff0 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8007768:	4602      	mov	r2, r0
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	0a9b      	lsrs	r3, r3, #10
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	4903      	ldr	r1, [pc, #12]	; (8007784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007776:	5ccb      	ldrb	r3, [r1, r3]
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40023800 	.word	0x40023800
 8007784:	08012d98 	.word	0x08012d98

08007788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800778c:	f7ff ffdc 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8007790:	4602      	mov	r2, r0
 8007792:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	0b5b      	lsrs	r3, r3, #13
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	4903      	ldr	r1, [pc, #12]	; (80077ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800779e:	5ccb      	ldrb	r3, [r1, r3]
 80077a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40023800 	.word	0x40023800
 80077ac:	08012d98 	.word	0x08012d98

080077b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	220f      	movs	r2, #15
 80077be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <HAL_RCC_GetClockConfig+0x5c>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 0203 	and.w	r2, r3, #3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80077cc:	4b0f      	ldr	r3, [pc, #60]	; (800780c <HAL_RCC_GetClockConfig+0x5c>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80077d8:	4b0c      	ldr	r3, [pc, #48]	; (800780c <HAL_RCC_GetClockConfig+0x5c>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80077e4:	4b09      	ldr	r3, [pc, #36]	; (800780c <HAL_RCC_GetClockConfig+0x5c>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	08db      	lsrs	r3, r3, #3
 80077ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <HAL_RCC_GetClockConfig+0x60>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 020f 	and.w	r2, r3, #15
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	601a      	str	r2, [r3, #0]
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40023800 	.word	0x40023800
 8007810:	40023c00 	.word	0x40023c00

08007814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d012      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800783c:	4b69      	ldr	r3, [pc, #420]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a68      	ldr	r2, [pc, #416]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007842:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007846:	6093      	str	r3, [r2, #8]
 8007848:	4b66      	ldr	r3, [pc, #408]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	4964      	ldr	r1, [pc, #400]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007852:	4313      	orrs	r3, r2
 8007854:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800785e:	2301      	movs	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d017      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800786e:	4b5d      	ldr	r3, [pc, #372]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	4959      	ldr	r1, [pc, #356]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787e:	4313      	orrs	r3, r2
 8007880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800788c:	d101      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800788e:	2301      	movs	r3, #1
 8007890:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800789a:	2301      	movs	r3, #1
 800789c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d017      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078aa:	4b4e      	ldr	r3, [pc, #312]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	494a      	ldr	r1, [pc, #296]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078c8:	d101      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078d6:	2301      	movs	r3, #1
 80078d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078e6:	2301      	movs	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 808b 	beq.w	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078f8:	4b3a      	ldr	r3, [pc, #232]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	4a39      	ldr	r2, [pc, #228]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007902:	6413      	str	r3, [r2, #64]	; 0x40
 8007904:	4b37      	ldr	r3, [pc, #220]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007910:	4b35      	ldr	r3, [pc, #212]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a34      	ldr	r2, [pc, #208]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800791a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800791c:	f7fb f9d0 	bl	8002cc0 <HAL_GetTick>
 8007920:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007922:	e008      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007924:	f7fb f9cc 	bl	8002cc0 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b64      	cmp	r3, #100	; 0x64
 8007930:	d901      	bls.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e357      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007936:	4b2c      	ldr	r3, [pc, #176]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f0      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007942:	4b28      	ldr	r3, [pc, #160]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800794a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d035      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	d02e      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007960:	4b20      	ldr	r3, [pc, #128]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007968:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800796a:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007974:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007976:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007982:	4a18      	ldr	r2, [pc, #96]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007988:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b01      	cmp	r3, #1
 8007992:	d114      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007994:	f7fb f994 	bl	8002cc0 <HAL_GetTick>
 8007998:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799a:	e00a      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800799c:	f7fb f990 	bl	8002cc0 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e319      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b2:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0ee      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ca:	d111      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079d8:	4b04      	ldr	r3, [pc, #16]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079da:	400b      	ands	r3, r1
 80079dc:	4901      	ldr	r1, [pc, #4]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
 80079e2:	e00b      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079e4:	40023800 	.word	0x40023800
 80079e8:	40007000 	.word	0x40007000
 80079ec:	0ffffcff 	.word	0x0ffffcff
 80079f0:	4bb1      	ldr	r3, [pc, #708]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	4ab0      	ldr	r2, [pc, #704]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079fa:	6093      	str	r3, [r2, #8]
 80079fc:	4bae      	ldr	r3, [pc, #696]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a08:	49ab      	ldr	r1, [pc, #684]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d010      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a1a:	4ba7      	ldr	r3, [pc, #668]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a20:	4aa5      	ldr	r2, [pc, #660]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007a2a:	4ba3      	ldr	r3, [pc, #652]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	49a0      	ldr	r1, [pc, #640]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a48:	4b9b      	ldr	r3, [pc, #620]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a56:	4998      	ldr	r1, [pc, #608]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a6a:	4b93      	ldr	r3, [pc, #588]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a78:	498f      	ldr	r1, [pc, #572]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a8c:	4b8a      	ldr	r3, [pc, #552]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9a:	4987      	ldr	r1, [pc, #540]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007aae:	4b82      	ldr	r3, [pc, #520]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abc:	497e      	ldr	r1, [pc, #504]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ad0:	4b79      	ldr	r3, [pc, #484]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad6:	f023 0203 	bic.w	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ade:	4976      	ldr	r1, [pc, #472]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007af2:	4b71      	ldr	r3, [pc, #452]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af8:	f023 020c 	bic.w	r2, r3, #12
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b00:	496d      	ldr	r1, [pc, #436]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b14:	4b68      	ldr	r3, [pc, #416]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	4965      	ldr	r1, [pc, #404]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b36:	4b60      	ldr	r3, [pc, #384]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b44:	495c      	ldr	r1, [pc, #368]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b58:	4b57      	ldr	r3, [pc, #348]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	4954      	ldr	r1, [pc, #336]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b7a:	4b4f      	ldr	r3, [pc, #316]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b88:	494b      	ldr	r1, [pc, #300]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b9c:	4b46      	ldr	r3, [pc, #280]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007baa:	4943      	ldr	r1, [pc, #268]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bac:	4313      	orrs	r3, r2
 8007bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007bbe:	4b3e      	ldr	r3, [pc, #248]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bcc:	493a      	ldr	r1, [pc, #232]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00a      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007be0:	4b35      	ldr	r3, [pc, #212]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bee:	4932      	ldr	r1, [pc, #200]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d011      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c02:	4b2d      	ldr	r3, [pc, #180]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c10:	4929      	ldr	r1, [pc, #164]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c20:	d101      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c22:	2301      	movs	r3, #1
 8007c24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c32:	2301      	movs	r3, #1
 8007c34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c42:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c50:	4919      	ldr	r1, [pc, #100]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c64:	4b14      	ldr	r3, [pc, #80]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c74:	4910      	ldr	r1, [pc, #64]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d006      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 80d9 	beq.w	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c90:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a08      	ldr	r2, [pc, #32]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c9c:	f7fb f810 	bl	8002cc0 <HAL_GetTick>
 8007ca0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ca2:	e00b      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ca4:	f7fb f80c 	bl	8002cc0 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b64      	cmp	r3, #100	; 0x64
 8007cb0:	d904      	bls.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e197      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007cb6:	bf00      	nop
 8007cb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cbc:	4b6c      	ldr	r3, [pc, #432]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1ed      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d021      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d11d      	bne.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007cdc:	4b64      	ldr	r3, [pc, #400]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ce2:	0c1b      	lsrs	r3, r3, #16
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007cea:	4b61      	ldr	r3, [pc, #388]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf0:	0e1b      	lsrs	r3, r3, #24
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	019a      	lsls	r2, r3, #6
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	041b      	lsls	r3, r3, #16
 8007d02:	431a      	orrs	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	061b      	lsls	r3, r3, #24
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	071b      	lsls	r3, r3, #28
 8007d10:	4957      	ldr	r1, [pc, #348]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d004      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2c:	d00a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d02e      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d42:	d129      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d44:	4b4a      	ldr	r3, [pc, #296]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d4a:	0c1b      	lsrs	r3, r3, #16
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d52:	4b47      	ldr	r3, [pc, #284]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d58:	0f1b      	lsrs	r3, r3, #28
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	019a      	lsls	r2, r3, #6
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	041b      	lsls	r3, r3, #16
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	061b      	lsls	r3, r3, #24
 8007d72:	431a      	orrs	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	071b      	lsls	r3, r3, #28
 8007d78:	493d      	ldr	r1, [pc, #244]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d80:	4b3b      	ldr	r3, [pc, #236]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d86:	f023 021f 	bic.w	r2, r3, #31
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	4937      	ldr	r1, [pc, #220]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01d      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007da4:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007daa:	0e1b      	lsrs	r3, r3, #24
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007db2:	4b2f      	ldr	r3, [pc, #188]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db8:	0f1b      	lsrs	r3, r3, #28
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	019a      	lsls	r2, r3, #6
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	061b      	lsls	r3, r3, #24
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	071b      	lsls	r3, r3, #28
 8007dd8:	4925      	ldr	r1, [pc, #148]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d011      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	019a      	lsls	r2, r3, #6
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	061b      	lsls	r3, r3, #24
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	071b      	lsls	r3, r3, #28
 8007e08:	4919      	ldr	r1, [pc, #100]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e10:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a16      	ldr	r2, [pc, #88]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e1c:	f7fa ff50 	bl	8002cc0 <HAL_GetTick>
 8007e20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e22:	e008      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e24:	f7fa ff4c 	bl	8002cc0 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b64      	cmp	r3, #100	; 0x64
 8007e30:	d901      	bls.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e0d7      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0f0      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	f040 80cd 	bne.w	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e56:	f7fa ff33 	bl	8002cc0 <HAL_GetTick>
 8007e5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e5c:	e00a      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e5e:	f7fa ff2f 	bl	8002cc0 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b64      	cmp	r3, #100	; 0x64
 8007e6a:	d903      	bls.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e0ba      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007e70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e74:	4b5e      	ldr	r3, [pc, #376]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e80:	d0ed      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d02e      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d12a      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007eaa:	4b51      	ldr	r3, [pc, #324]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb0:	0c1b      	lsrs	r3, r3, #16
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007eb8:	4b4d      	ldr	r3, [pc, #308]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	0f1b      	lsrs	r3, r3, #28
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	019a      	lsls	r2, r3, #6
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	061b      	lsls	r3, r3, #24
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	071b      	lsls	r3, r3, #28
 8007ede:	4944      	ldr	r1, [pc, #272]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ee6:	4b42      	ldr	r3, [pc, #264]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	493d      	ldr	r1, [pc, #244]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d022      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f14:	d11d      	bne.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f16:	4b36      	ldr	r3, [pc, #216]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1c:	0e1b      	lsrs	r3, r3, #24
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f24:	4b32      	ldr	r3, [pc, #200]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2a:	0f1b      	lsrs	r3, r3, #28
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	019a      	lsls	r2, r3, #6
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	061b      	lsls	r3, r3, #24
 8007f44:	431a      	orrs	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	071b      	lsls	r3, r3, #28
 8007f4a:	4929      	ldr	r1, [pc, #164]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d028      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f5e:	4b24      	ldr	r3, [pc, #144]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	0e1b      	lsrs	r3, r3, #24
 8007f66:	f003 030f 	and.w	r3, r3, #15
 8007f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f6c:	4b20      	ldr	r3, [pc, #128]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f72:	0c1b      	lsrs	r3, r3, #16
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	019a      	lsls	r2, r3, #6
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	041b      	lsls	r3, r3, #16
 8007f84:	431a      	orrs	r2, r3
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	061b      	lsls	r3, r3, #24
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	071b      	lsls	r3, r3, #28
 8007f92:	4917      	ldr	r1, [pc, #92]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007f9a:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	4911      	ldr	r1, [pc, #68]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a0e      	ldr	r2, [pc, #56]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fbc:	f7fa fe80 	bl	8002cc0 <HAL_GetTick>
 8007fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fc4:	f7fa fe7c 	bl	8002cc0 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b64      	cmp	r3, #100	; 0x64
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e007      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007fd6:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe2:	d1ef      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40023800 	.word	0x40023800

08007ff4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008012:	f040 808c 	bne.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008016:	4b95      	ldr	r3, [pc, #596]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800801c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008024:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800802c:	d07c      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008034:	d87d      	bhi.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008042:	d039      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008044:	e075      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008046:	4b89      	ldr	r3, [pc, #548]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d108      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008052:	4b86      	ldr	r3, [pc, #536]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800805a:	4a85      	ldr	r2, [pc, #532]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800805c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	e007      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008064:	4b81      	ldr	r3, [pc, #516]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800806c:	4a81      	ldr	r2, [pc, #516]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008074:	4b7d      	ldr	r3, [pc, #500]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807a:	0e1b      	lsrs	r3, r3, #24
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008082:	4b7a      	ldr	r3, [pc, #488]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008088:	099b      	lsrs	r3, r3, #6
 800808a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	fb02 f203 	mul.w	r2, r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	fbb2 f3f3 	udiv	r3, r2, r3
 800809a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800809c:	4b73      	ldr	r3, [pc, #460]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800809e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	617b      	str	r3, [r7, #20]
        break;
 80080b6:	e03d      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080b8:	4b6c      	ldr	r3, [pc, #432]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d108      	bne.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080c4:	4b69      	ldr	r3, [pc, #420]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080cc:	4a68      	ldr	r2, [pc, #416]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80080ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	e007      	b.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080d6:	4b65      	ldr	r3, [pc, #404]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080de:	4a65      	ldr	r2, [pc, #404]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80080e6:	4b61      	ldr	r3, [pc, #388]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ec:	0e1b      	lsrs	r3, r3, #24
 80080ee:	f003 030f 	and.w	r3, r3, #15
 80080f2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080f4:	4b5d      	ldr	r3, [pc, #372]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fa:	099b      	lsrs	r3, r3, #6
 80080fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	fb02 f203 	mul.w	r2, r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800810e:	4b57      	ldr	r3, [pc, #348]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008114:	f003 031f 	and.w	r3, r3, #31
 8008118:	3301      	adds	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	fbb2 f3f3 	udiv	r3, r2, r3
 8008124:	617b      	str	r3, [r7, #20]
        break;
 8008126:	e005      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008128:	4b53      	ldr	r3, [pc, #332]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800812a:	617b      	str	r3, [r7, #20]
        break;
 800812c:	e002      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8008132:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800813a:	f040 808c 	bne.w	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800813e:	4b4b      	ldr	r3, [pc, #300]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008144:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800814c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008154:	d07c      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800815c:	d87d      	bhi.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800816a:	d039      	beq.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800816c:	e075      	b.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800816e:	4b3f      	ldr	r3, [pc, #252]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d108      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800817a:	4b3c      	ldr	r3, [pc, #240]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008182:	4a3b      	ldr	r2, [pc, #236]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008184:	fbb2 f3f3 	udiv	r3, r2, r3
 8008188:	613b      	str	r3, [r7, #16]
 800818a:	e007      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800818c:	4b37      	ldr	r3, [pc, #220]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008194:	4a37      	ldr	r2, [pc, #220]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008196:	fbb2 f3f3 	udiv	r3, r2, r3
 800819a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800819c:	4b33      	ldr	r3, [pc, #204]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800819e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80081aa:	4b30      	ldr	r3, [pc, #192]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b0:	099b      	lsrs	r3, r3, #6
 80081b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	fb02 f203 	mul.w	r2, r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80081c4:	4b29      	ldr	r3, [pc, #164]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	3301      	adds	r3, #1
 80081d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081dc:	617b      	str	r3, [r7, #20]
        break;
 80081de:	e03d      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80081e0:	4b22      	ldr	r3, [pc, #136]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d108      	bne.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80081ec:	4b1f      	ldr	r3, [pc, #124]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f4:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80081f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fa:	613b      	str	r3, [r7, #16]
 80081fc:	e007      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80081fe:	4b1b      	ldr	r3, [pc, #108]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008206:	4a1b      	ldr	r2, [pc, #108]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800820e:	4b17      	ldr	r3, [pc, #92]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008214:	0e1b      	lsrs	r3, r3, #24
 8008216:	f003 030f 	and.w	r3, r3, #15
 800821a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800821c:	4b13      	ldr	r3, [pc, #76]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800821e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008222:	099b      	lsrs	r3, r3, #6
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	fb02 f203 	mul.w	r2, r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	fbb2 f3f3 	udiv	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008236:	4b0d      	ldr	r3, [pc, #52]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800823c:	f003 031f 	and.w	r3, r3, #31
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	fbb2 f3f3 	udiv	r3, r2, r3
 800824c:	617b      	str	r3, [r7, #20]
        break;
 800824e:	e005      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008252:	617b      	str	r3, [r7, #20]
        break;
 8008254:	e002      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8008256:	bf00      	nop
 8008258:	e000      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800825a:	bf00      	nop

  return frequency;
 800825c:	697b      	ldr	r3, [r7, #20]
}
 800825e:	4618      	mov	r0, r3
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40023800 	.word	0x40023800
 8008270:	00f42400 	.word	0x00f42400
 8008274:	017d7840 	.word	0x017d7840
 8008278:	00bb8000 	.word	0x00bb8000

0800827c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e081      	b.n	8008392 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7f5b      	ldrb	r3, [r3, #29]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d105      	bne.n	80082a4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7f9 ffd2 	bl	8002248 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	22ca      	movs	r2, #202	; 0xca
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2253      	movs	r2, #83	; 0x53
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fb16 	bl	80088ec <RTC_EnterInitMode>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d008      	beq.n	80082d8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	22ff      	movs	r2, #255	; 0xff
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2204      	movs	r2, #4
 80082d2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e05c      	b.n	8008392 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6899      	ldr	r1, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b2e      	ldr	r3, [pc, #184]	; (800839c <HAL_RTC_Init+0x120>)
 80082e4:	400b      	ands	r3, r1
 80082e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6899      	ldr	r1, [r3, #8]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	68d2      	ldr	r2, [r2, #12]
 800830e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6919      	ldr	r1, [r3, #16]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	041a      	lsls	r2, r3, #16
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	430a      	orrs	r2, r1
 8008322:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008332:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10e      	bne.n	8008360 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 faaa 	bl	800889c <HAL_RTC_WaitForSynchro>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d008      	beq.n	8008360 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	22ff      	movs	r2, #255	; 0xff
 8008354:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2204      	movs	r2, #4
 800835a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e018      	b.n	8008392 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0208 	bic.w	r2, r2, #8
 800836e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699a      	ldr	r2, [r3, #24]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	22ff      	movs	r2, #255	; 0xff
 8008388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2201      	movs	r2, #1
 800838e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008390:	2300      	movs	r3, #0
  }
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	ff8fffbf 	.word	0xff8fffbf

080083a0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	7f1b      	ldrb	r3, [r3, #28]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_RTC_SetTime+0x1c>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e0a8      	b.n	800850e <HAL_RTC_SetTime+0x16e>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2202      	movs	r2, #2
 80083c6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d126      	bne.n	800841c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 faac 	bl	8008944 <RTC_ByteToBcd2>
 80083ec:	4603      	mov	r3, r0
 80083ee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 faa5 	bl	8008944 <RTC_ByteToBcd2>
 80083fa:	4603      	mov	r3, r0
 80083fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083fe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	789b      	ldrb	r3, [r3, #2]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fa9d 	bl	8008944 <RTC_ByteToBcd2>
 800840a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800840c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	7b1b      	ldrb	r3, [r3, #12]
 8008414:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	e018      	b.n	800844e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800843c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008442:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	7b1b      	ldrb	r3, [r3, #12]
 8008448:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	22ca      	movs	r2, #202	; 0xca
 8008454:	625a      	str	r2, [r3, #36]	; 0x24
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2253      	movs	r2, #83	; 0x53
 800845c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fa44 	bl	80088ec <RTC_EnterInitMode>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	22ff      	movs	r2, #255	; 0xff
 8008470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2204      	movs	r2, #4
 8008476:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e045      	b.n	800850e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	6979      	ldr	r1, [r7, #20]
 8008488:	4b23      	ldr	r3, [pc, #140]	; (8008518 <HAL_RTC_SetTime+0x178>)
 800848a:	400b      	ands	r3, r1
 800848c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800849c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6899      	ldr	r1, [r3, #8]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	431a      	orrs	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68da      	ldr	r2, [r3, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084c4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f003 0320 	and.w	r3, r3, #32
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d111      	bne.n	80084f8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f9e1 	bl	800889c <HAL_RTC_WaitForSynchro>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2204      	movs	r2, #4
 80084ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e00a      	b.n	800850e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	22ff      	movs	r2, #255	; 0xff
 80084fe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800850c:	2300      	movs	r3, #0
  }
}
 800850e:	4618      	mov	r0, r3
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}
 8008516:	bf00      	nop
 8008518:	007f7f7f 	.word	0x007f7f7f

0800851c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	7f1b      	ldrb	r3, [r3, #28]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_RTC_SetDate+0x1c>
 8008534:	2302      	movs	r3, #2
 8008536:	e092      	b.n	800865e <HAL_RTC_SetDate+0x142>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2202      	movs	r2, #2
 8008542:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10e      	bne.n	8008568 <HAL_RTC_SetDate+0x4c>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b00      	cmp	r3, #0
 8008554:	d008      	beq.n	8008568 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	b2db      	uxtb	r3, r3
 8008560:	330a      	adds	r3, #10
 8008562:	b2da      	uxtb	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d11c      	bne.n	80085a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	78db      	ldrb	r3, [r3, #3]
 8008572:	4618      	mov	r0, r3
 8008574:	f000 f9e6 	bl	8008944 <RTC_ByteToBcd2>
 8008578:	4603      	mov	r3, r0
 800857a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	4618      	mov	r0, r3
 8008582:	f000 f9df 	bl	8008944 <RTC_ByteToBcd2>
 8008586:	4603      	mov	r3, r0
 8008588:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800858a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	789b      	ldrb	r3, [r3, #2]
 8008590:	4618      	mov	r0, r3
 8008592:	f000 f9d7 	bl	8008944 <RTC_ByteToBcd2>
 8008596:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008598:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	e00e      	b.n	80085c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80085ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	22ca      	movs	r2, #202	; 0xca
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2253      	movs	r2, #83	; 0x53
 80085d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f988 	bl	80088ec <RTC_EnterInitMode>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	22ff      	movs	r2, #255	; 0xff
 80085e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2204      	movs	r2, #4
 80085ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e031      	b.n	800865e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	6979      	ldr	r1, [r7, #20]
 8008600:	4b19      	ldr	r3, [pc, #100]	; (8008668 <HAL_RTC_SetDate+0x14c>)
 8008602:	400b      	ands	r3, r1
 8008604:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68da      	ldr	r2, [r3, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008614:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	d111      	bne.n	8008648 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f939 	bl	800889c <HAL_RTC_WaitForSynchro>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	22ff      	movs	r2, #255	; 0xff
 8008636:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2204      	movs	r2, #4
 800863c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e00a      	b.n	800865e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	22ff      	movs	r2, #255	; 0xff
 800864e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800865c:	2300      	movs	r3, #0
  }
}
 800865e:	4618      	mov	r0, r3
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	bd90      	pop	{r4, r7, pc}
 8008666:	bf00      	nop
 8008668:	00ffff3f 	.word	0x00ffff3f

0800866c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800866c:	b590      	push	{r4, r7, lr}
 800866e:	b089      	sub	sp, #36	; 0x24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	7f1b      	ldrb	r3, [r3, #28]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_RTC_SetAlarm+0x24>
 800868c:	2302      	movs	r3, #2
 800868e:	e101      	b.n	8008894 <HAL_RTC_SetAlarm+0x228>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2201      	movs	r2, #1
 8008694:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2202      	movs	r2, #2
 800869a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d137      	bne.n	8008712 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2200      	movs	r2, #0
 80086b4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f942 	bl	8008944 <RTC_ByteToBcd2>
 80086c0:	4603      	mov	r3, r0
 80086c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	785b      	ldrb	r3, [r3, #1]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 f93b 	bl	8008944 <RTC_ByteToBcd2>
 80086ce:	4603      	mov	r3, r0
 80086d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80086d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	789b      	ldrb	r3, [r3, #2]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f933 	bl	8008944 <RTC_ByteToBcd2>
 80086de:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80086e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	7b1b      	ldrb	r3, [r3, #12]
 80086e8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80086ea:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 f925 	bl	8008944 <RTC_ByteToBcd2>
 80086fa:	4603      	mov	r3, r0
 80086fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80086fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008706:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800870c:	4313      	orrs	r3, r2
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	e023      	b.n	800875a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2200      	movs	r2, #0
 8008724:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	785b      	ldrb	r3, [r3, #1]
 8008730:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008732:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008738:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	7b1b      	ldrb	r3, [r3, #12]
 800873e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008740:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008748:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800874a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008750:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008756:	4313      	orrs	r3, r2
 8008758:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	4313      	orrs	r3, r2
 8008764:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	22ca      	movs	r2, #202	; 0xca
 800876c:	625a      	str	r2, [r3, #36]	; 0x24
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2253      	movs	r2, #83	; 0x53
 8008774:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877e:	d13f      	bne.n	8008800 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800878e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800879e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087a0:	f7fa fa8e 	bl	8002cc0 <HAL_GetTick>
 80087a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087a6:	e013      	b.n	80087d0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087a8:	f7fa fa8a 	bl	8002cc0 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087b6:	d90b      	bls.n	80087d0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2203      	movs	r2, #3
 80087c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e061      	b.n	8008894 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0e4      	beq.n	80087a8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087fc:	609a      	str	r2, [r3, #8]
 80087fe:	e03e      	b.n	800887e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800880e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800881e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008820:	f7fa fa4e 	bl	8002cc0 <HAL_GetTick>
 8008824:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008826:	e013      	b.n	8008850 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008828:	f7fa fa4a 	bl	8002cc0 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008836:	d90b      	bls.n	8008850 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	22ff      	movs	r2, #255	; 0xff
 800883e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2203      	movs	r2, #3
 8008844:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e021      	b.n	8008894 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0e4      	beq.n	8008828 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	69fa      	ldr	r2, [r7, #28]
 8008864:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800887c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	22ff      	movs	r2, #255	; 0xff
 8008884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3724      	adds	r7, #36	; 0x24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd90      	pop	{r4, r7, pc}

0800889c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088b8:	f7fa fa02 	bl	8002cc0 <HAL_GetTick>
 80088bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088be:	e009      	b.n	80088d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80088c0:	f7fa f9fe 	bl	8002cc0 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088ce:	d901      	bls.n	80088d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e007      	b.n	80088e4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0ee      	beq.n	80088c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	d119      	bne.n	800893a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800890e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008910:	f7fa f9d6 	bl	8002cc0 <HAL_GetTick>
 8008914:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008916:	e009      	b.n	800892c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008918:	f7fa f9d2 	bl	8002cc0 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008926:	d901      	bls.n	800892c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e007      	b.n	800893c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0ee      	beq.n	8008918 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008952:	e005      	b.n	8008960 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3301      	adds	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	3b0a      	subs	r3, #10
 800895e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b09      	cmp	r3, #9
 8008964:	d8f6      	bhi.n	8008954 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	b2da      	uxtb	r2, r3
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	4313      	orrs	r3, r2
 8008972:	b2db      	uxtb	r3, r3
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	7f1b      	ldrb	r3, [r3, #28]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d101      	bne.n	800899c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008998:	2302      	movs	r3, #2
 800899a:	e03e      	b.n	8008a1a <HAL_RTCEx_SetTimeStamp+0x9a>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2202      	movs	r2, #2
 80089a6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689a      	ldr	r2, [r3, #8]
 80089ae:	4b1e      	ldr	r3, [pc, #120]	; (8008a28 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80089b0:	4013      	ands	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	22ca      	movs	r2, #202	; 0xca
 80089c2:	625a      	str	r2, [r3, #36]	; 0x24
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2253      	movs	r2, #83	; 0x53
 80089ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0206 	bic.w	r2, r2, #6
 80089da:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a02:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	22ff      	movs	r2, #255	; 0xff
 8008a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	371c      	adds	r7, #28
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	fffff7f7 	.word	0xfffff7f7

08008a2c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e156      	b.n	8008cf8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7f9 ff9c 	bl	800299c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f95b 	bl	8008d28 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d00c      	beq.n	8008a94 <HAL_SAI_Init+0x68>
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d80d      	bhi.n	8008a9a <HAL_SAI_Init+0x6e>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_SAI_Init+0x5c>
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d003      	beq.n	8008a8e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008a86:	e008      	b.n	8008a9a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	61fb      	str	r3, [r7, #28]
      break;
 8008a8c:	e006      	b.n	8008a9c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008a8e:	2310      	movs	r3, #16
 8008a90:	61fb      	str	r3, [r7, #28]
      break;
 8008a92:	e003      	b.n	8008a9c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008a94:	2320      	movs	r3, #32
 8008a96:	61fb      	str	r3, [r7, #28]
      break;
 8008a98:	e000      	b.n	8008a9c <HAL_SAI_Init+0x70>
      break;
 8008a9a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d81e      	bhi.n	8008ae2 <HAL_SAI_Init+0xb6>
 8008aa4:	a201      	add	r2, pc, #4	; (adr r2, 8008aac <HAL_SAI_Init+0x80>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008abd 	.word	0x08008abd
 8008ab0:	08008ac3 	.word	0x08008ac3
 8008ab4:	08008acb 	.word	0x08008acb
 8008ab8:	08008ad3 	.word	0x08008ad3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ac0:	e010      	b.n	8008ae4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac6:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ac8:	e00c      	b.n	8008ae4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ace:	617b      	str	r3, [r7, #20]
    }
    break;
 8008ad0:	e008      	b.n	8008ae4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ad2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ad6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008ae0:	e000      	b.n	8008ae4 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008ae2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a85      	ldr	r2, [pc, #532]	; (8008d00 <HAL_SAI_Init+0x2d4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d004      	beq.n	8008af8 <HAL_SAI_Init+0xcc>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a84      	ldr	r2, [pc, #528]	; (8008d04 <HAL_SAI_Init+0x2d8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d103      	bne.n	8008b00 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008af8:	4a83      	ldr	r2, [pc, #524]	; (8008d08 <HAL_SAI_Init+0x2dc>)
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e002      	b.n	8008b06 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b00:	4a82      	ldr	r2, [pc, #520]	; (8008d0c <HAL_SAI_Init+0x2e0>)
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d04c      	beq.n	8008ba8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a7a      	ldr	r2, [pc, #488]	; (8008d00 <HAL_SAI_Init+0x2d4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d004      	beq.n	8008b26 <HAL_SAI_Init+0xfa>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a78      	ldr	r2, [pc, #480]	; (8008d04 <HAL_SAI_Init+0x2d8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d104      	bne.n	8008b30 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b2a:	f7ff fa63 	bl	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b2e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a76      	ldr	r2, [pc, #472]	; (8008d10 <HAL_SAI_Init+0x2e4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <HAL_SAI_Init+0x118>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a75      	ldr	r2, [pc, #468]	; (8008d14 <HAL_SAI_Init+0x2e8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d104      	bne.n	8008b4e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b48:	f7ff fa54 	bl	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b4c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	025b      	lsls	r3, r3, #9
 8008b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b64:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4a6b      	ldr	r2, [pc, #428]	; (8008d18 <HAL_SAI_Init+0x2ec>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	08da      	lsrs	r2, r3, #3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008b74:	68f9      	ldr	r1, [r7, #12]
 8008b76:	4b68      	ldr	r3, [pc, #416]	; (8008d18 <HAL_SAI_Init+0x2ec>)
 8008b78:	fba3 2301 	umull	r2, r3, r3, r1
 8008b7c:	08da      	lsrs	r2, r3, #3
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	1aca      	subs	r2, r1, r3
 8008b88:	2a08      	cmp	r2, #8
 8008b8a:	d904      	bls.n	8008b96 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	d104      	bne.n	8008ba8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	085a      	lsrs	r2, r3, #1
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <HAL_SAI_Init+0x18c>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d109      	bne.n	8008bcc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_SAI_Init+0x198>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e001      	b.n	8008bc8 <HAL_SAI_Init+0x19c>
 8008bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	e008      	b.n	8008bde <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d102      	bne.n	8008bda <HAL_SAI_Init+0x1ae>
 8008bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd8:	e000      	b.n	8008bdc <HAL_SAI_Init+0x1b0>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	4b4c      	ldr	r3, [pc, #304]	; (8008d1c <HAL_SAI_Init+0x2f0>)
 8008bea:	400b      	ands	r3, r1
 8008bec:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6819      	ldr	r1, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c02:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008c16:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c22:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	051b      	lsls	r3, r3, #20
 8008c2a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6859      	ldr	r1, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4b38      	ldr	r3, [pc, #224]	; (8008d20 <HAL_SAI_Init+0x2f4>)
 8008c40:	400b      	ands	r3, r1
 8008c42:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6859      	ldr	r1, [r3, #4]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	699a      	ldr	r2, [r3, #24]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6899      	ldr	r1, [r3, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	4b2d      	ldr	r3, [pc, #180]	; (8008d24 <HAL_SAI_Init+0x2f8>)
 8008c6e:	400b      	ands	r3, r1
 8008c70:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6899      	ldr	r1, [r3, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c82:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008c88:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008c8e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c94:	3b01      	subs	r3, #1
 8008c96:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008c98:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68d9      	ldr	r1, [r3, #12]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008cb0:	400b      	ands	r3, r1
 8008cb2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68d9      	ldr	r1, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc8:	041b      	lsls	r3, r3, #16
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3720      	adds	r7, #32
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40015804 	.word	0x40015804
 8008d04:	40015824 	.word	0x40015824
 8008d08:	40015800 	.word	0x40015800
 8008d0c:	40015c00 	.word	0x40015c00
 8008d10:	40015c04 	.word	0x40015c04
 8008d14:	40015c24 	.word	0x40015c24
 8008d18:	cccccccd 	.word	0xcccccccd
 8008d1c:	ff05c010 	.word	0xff05c010
 8008d20:	ffff1ff0 	.word	0xffff1ff0
 8008d24:	fff88000 	.word	0xfff88000

08008d28 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008d30:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <SAI_Disable+0x68>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <SAI_Disable+0x6c>)
 8008d36:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3a:	0b1b      	lsrs	r3, r3, #12
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d52:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	1e5a      	subs	r2, r3, #1
 8008d58:	60fa      	str	r2, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10a      	bne.n	8008d74 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	72fb      	strb	r3, [r7, #11]
      break;
 8008d72:	e006      	b.n	8008d82 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e8      	bne.n	8008d54 <SAI_Disable+0x2c>

  return status;
 8008d82:	7afb      	ldrb	r3, [r7, #11]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	20000000 	.word	0x20000000
 8008d94:	95cbec1b 	.word	0x95cbec1b

08008d98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e022      	b.n	8008df0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d105      	bne.n	8008dc2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7f9 fa5d 	bl	800227c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f814 	bl	8008df8 <HAL_SD_InitCard>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e00a      	b.n	8008df0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008df8:	b5b0      	push	{r4, r5, r7, lr}
 8008dfa:	b08e      	sub	sp, #56	; 0x38
 8008dfc:	af04      	add	r7, sp, #16
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008e14:	2376      	movs	r3, #118	; 0x76
 8008e16:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681d      	ldr	r5, [r3, #0]
 8008e1c:	466c      	mov	r4, sp
 8008e1e:	f107 0314 	add.w	r3, r7, #20
 8008e22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e30:	4628      	mov	r0, r5
 8008e32:	f002 ff83 	bl	800bd3c <SDMMC_Init>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e056      	b.n	8008ef6 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e56:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 ffa6 	bl	800bdae <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e70:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fe0e 	bl	8009a94 <SD_PowerON>
 8008e78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e02e      	b.n	8008ef6 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fd2f 	bl	80098fc <SD_InitCard>
 8008e9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	431a      	orrs	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e01b      	b.n	8008ef6 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f003 f804 	bl	800bed4 <SDMMC_CmdBlockLength>
 8008ecc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00f      	beq.n	8008ef4 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a09      	ldr	r2, [pc, #36]	; (8008f00 <HAL_SD_InitCard+0x108>)
 8008eda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e000      	b.n	8008ef6 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3728      	adds	r7, #40	; 0x28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bdb0      	pop	{r4, r5, r7, pc}
 8008efe:	bf00      	nop
 8008f00:	004005ff 	.word	0x004005ff

08008f04 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08c      	sub	sp, #48	; 0x30
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d107      	bne.n	8008f2c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0c3      	b.n	80090b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	f040 80bc 	bne.w	80090b2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	441a      	add	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d907      	bls.n	8008f5e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e0aa      	b.n	80090b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2203      	movs	r2, #3
 8008f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f82:	4a4e      	ldr	r2, [pc, #312]	; (80090bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008f84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	4a4d      	ldr	r2, [pc, #308]	; (80090c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008f8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	2200      	movs	r2, #0
 8008f94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3380      	adds	r3, #128	; 0x80
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	025b      	lsls	r3, r3, #9
 8008fcc:	089b      	lsrs	r3, r3, #2
 8008fce:	f7fa fb75 	bl	80036bc <HAL_DMA_Start_IT>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d017      	beq.n	8009008 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008fe6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a35      	ldr	r2, [pc, #212]	; (80090c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008fee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e055      	b.n	80090b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0208 	orr.w	r2, r2, #8
 8009016:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800901c:	2b01      	cmp	r3, #1
 800901e:	d002      	beq.n	8009026 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	025b      	lsls	r3, r3, #9
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800902a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	025b      	lsls	r3, r3, #9
 8009030:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009032:	2390      	movs	r3, #144	; 0x90
 8009034:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009036:	2302      	movs	r3, #2
 8009038:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800903a:	2300      	movs	r3, #0
 800903c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800903e:	2301      	movs	r3, #1
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f107 0210 	add.w	r2, r7, #16
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f002 ff15 	bl	800be7c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d90a      	bls.n	800906e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2282      	movs	r2, #130	; 0x82
 800905c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009064:	4618      	mov	r0, r3
 8009066:	f002 ff79 	bl	800bf5c <SDMMC_CmdReadMultiBlock>
 800906a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800906c:	e009      	b.n	8009082 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2281      	movs	r2, #129	; 0x81
 8009072:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800907a:	4618      	mov	r0, r3
 800907c:	f002 ff4c 	bl	800bf18 <SDMMC_CmdReadSingleBlock>
 8009080:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	2b00      	cmp	r3, #0
 8009086:	d012      	beq.n	80090ae <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a0d      	ldr	r2, [pc, #52]	; (80090c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	431a      	orrs	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e002      	b.n	80090b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	e000      	b.n	80090b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80090b2:	2302      	movs	r3, #2
  }
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3730      	adds	r7, #48	; 0x30
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	080097e7 	.word	0x080097e7
 80090c0:	08009859 	.word	0x08009859
 80090c4:	004005ff 	.word	0x004005ff

080090c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08c      	sub	sp, #48	; 0x30
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d107      	bne.n	80090f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e0c6      	b.n	800927e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	f040 80bf 	bne.w	800927c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	441a      	add	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910e:	429a      	cmp	r2, r3
 8009110:	d907      	bls.n	8009122 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009116:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e0ad      	b.n	800927e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2203      	movs	r2, #3
 8009126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2200      	movs	r2, #0
 8009130:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 021a 	orr.w	r2, r2, #26
 8009140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009146:	4a50      	ldr	r2, [pc, #320]	; (8009288 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914e:	4a4f      	ldr	r2, [pc, #316]	; (800928c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009150:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009156:	2200      	movs	r2, #0
 8009158:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800915e:	2b01      	cmp	r3, #1
 8009160:	d002      	beq.n	8009168 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	025b      	lsls	r3, r3, #9
 8009166:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d90a      	bls.n	8009184 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	22a0      	movs	r2, #160	; 0xa0
 8009172:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800917a:	4618      	mov	r0, r3
 800917c:	f002 ff32 	bl	800bfe4 <SDMMC_CmdWriteMultiBlock>
 8009180:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009182:	e009      	b.n	8009198 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2290      	movs	r2, #144	; 0x90
 8009188:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009190:	4618      	mov	r0, r3
 8009192:	f002 ff05 	bl	800bfa0 <SDMMC_CmdWriteSingleBlock>
 8009196:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d012      	beq.n	80091c4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a3b      	ldr	r2, [pc, #236]	; (8009290 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80091a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	431a      	orrs	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e05c      	b.n	800927e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0208 	orr.w	r2, r2, #8
 80091d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d8:	2240      	movs	r2, #64	; 0x40
 80091da:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ec:	689a      	ldr	r2, [r3, #8]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3380      	adds	r3, #128	; 0x80
 8009204:	461a      	mov	r2, r3
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	025b      	lsls	r3, r3, #9
 800920a:	089b      	lsrs	r3, r3, #2
 800920c:	f7fa fa56 	bl	80036bc <HAL_DMA_Start_IT>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01a      	beq.n	800924c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 021a 	bic.w	r2, r2, #26
 8009224:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a19      	ldr	r2, [pc, #100]	; (8009290 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800922c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009232:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e018      	b.n	800927e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800924c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009250:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	025b      	lsls	r3, r3, #9
 8009256:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009258:	2390      	movs	r3, #144	; 0x90
 800925a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800925c:	2300      	movs	r3, #0
 800925e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009260:	2300      	movs	r3, #0
 8009262:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009264:	2301      	movs	r3, #1
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f107 0210 	add.w	r2, r7, #16
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f002 fe02 	bl	800be7c <SDMMC_ConfigData>

      return HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	e000      	b.n	800927e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800927c:	2302      	movs	r3, #2
  }
}
 800927e:	4618      	mov	r0, r3
 8009280:	3730      	adds	r7, #48	; 0x30
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	080097bd 	.word	0x080097bd
 800928c:	08009859 	.word	0x08009859
 8009290:	004005ff 	.word	0x004005ff

08009294 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b6:	0f9b      	lsrs	r3, r3, #30
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092c2:	0e9b      	lsrs	r3, r3, #26
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092d4:	0e1b      	lsrs	r3, r3, #24
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 0303 	and.w	r3, r3, #3
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092e6:	0c1b      	lsrs	r3, r3, #16
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f2:	0a1b      	lsrs	r3, r3, #8
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009308:	0d1b      	lsrs	r3, r3, #20
 800930a:	b29a      	uxth	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	b2db      	uxtb	r3, r3
 8009318:	f003 030f 	and.w	r3, r3, #15
 800931c:	b2da      	uxtb	r2, r3
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009326:	0bdb      	lsrs	r3, r3, #15
 8009328:	b2db      	uxtb	r3, r3
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	b2da      	uxtb	r2, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009338:	0b9b      	lsrs	r3, r3, #14
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	b2da      	uxtb	r2, r3
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800934a:	0b5b      	lsrs	r3, r3, #13
 800934c:	b2db      	uxtb	r3, r3
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	b2da      	uxtb	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800935c:	0b1b      	lsrs	r3, r3, #12
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	b2da      	uxtb	r2, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2200      	movs	r2, #0
 800936e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009374:	2b00      	cmp	r3, #0
 8009376:	d163      	bne.n	8009440 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800937c:	009a      	lsls	r2, r3, #2
 800937e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009382:	4013      	ands	r3, r2
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009388:	0f92      	lsrs	r2, r2, #30
 800938a:	431a      	orrs	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009394:	0edb      	lsrs	r3, r3, #27
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0307 	and.w	r3, r3, #7
 800939c:	b2da      	uxtb	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a6:	0e1b      	lsrs	r3, r3, #24
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	f003 0307 	and.w	r3, r3, #7
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093b8:	0d5b      	lsrs	r3, r3, #21
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ca:	0c9b      	lsrs	r3, r3, #18
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093dc:	0bdb      	lsrs	r3, r3, #15
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	7e1b      	ldrb	r3, [r3, #24]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	3302      	adds	r3, #2
 8009400:	2201      	movs	r2, #1
 8009402:	fa02 f303 	lsl.w	r3, r2, r3
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800940a:	fb02 f203 	mul.w	r2, r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	7a1b      	ldrb	r3, [r3, #8]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 030f 	and.w	r3, r3, #15
 800941c:	2201      	movs	r2, #1
 800941e:	409a      	lsls	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800942c:	0a52      	lsrs	r2, r2, #9
 800942e:	fb02 f203 	mul.w	r2, r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800943c:	661a      	str	r2, [r3, #96]	; 0x60
 800943e:	e031      	b.n	80094a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009444:	2b01      	cmp	r3, #1
 8009446:	d11d      	bne.n	8009484 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800944c:	041b      	lsls	r3, r3, #16
 800944e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009456:	0c1b      	lsrs	r3, r3, #16
 8009458:	431a      	orrs	r2, r3
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	3301      	adds	r3, #1
 8009464:	029a      	lsls	r2, r3, #10
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009478:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	661a      	str	r2, [r3, #96]	; 0x60
 8009482:	e00f      	b.n	80094a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a58      	ldr	r2, [pc, #352]	; (80095ec <HAL_SD_GetCardCSD+0x344>)
 800948a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e09d      	b.n	80095e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a8:	0b9b      	lsrs	r3, r3, #14
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ba:	09db      	lsrs	r3, r3, #7
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094dc:	0fdb      	lsrs	r3, r3, #31
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e8:	0f5b      	lsrs	r3, r3, #29
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0303 	and.w	r3, r3, #3
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fa:	0e9b      	lsrs	r3, r3, #26
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	f003 0307 	and.w	r3, r3, #7
 8009502:	b2da      	uxtb	r2, r3
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950c:	0d9b      	lsrs	r3, r3, #22
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	b2da      	uxtb	r2, r3
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951e:	0d5b      	lsrs	r3, r3, #21
 8009520:	b2db      	uxtb	r3, r3
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	b2da      	uxtb	r2, r3
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	b2db      	uxtb	r3, r3
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	b2da      	uxtb	r2, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954e:	0bdb      	lsrs	r3, r3, #15
 8009550:	b2db      	uxtb	r3, r3
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	b2da      	uxtb	r2, r3
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009562:	0b9b      	lsrs	r3, r3, #14
 8009564:	b2db      	uxtb	r3, r3
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	b2da      	uxtb	r2, r3
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009576:	0b5b      	lsrs	r3, r3, #13
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800958a:	0b1b      	lsrs	r3, r3, #12
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	b2da      	uxtb	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959e:	0a9b      	lsrs	r3, r3, #10
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b2:	0a1b      	lsrs	r3, r3, #8
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c6:	085b      	lsrs	r3, r3, #1
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	004005ff 	.word	0x004005ff

080095f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009648:	b5b0      	push	{r4, r5, r7, lr}
 800964a:	b08e      	sub	sp, #56	; 0x38
 800964c:	af04      	add	r7, sp, #16
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2203      	movs	r2, #3
 800965c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	2b03      	cmp	r3, #3
 8009666:	d02e      	beq.n	80096c6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800966e:	d106      	bne.n	800967e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	639a      	str	r2, [r3, #56]	; 0x38
 800967c:	e029      	b.n	80096d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009684:	d10a      	bne.n	800969c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 faba 	bl	8009c00 <SD_WideBus_Enable>
 800968c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	431a      	orrs	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	639a      	str	r2, [r3, #56]	; 0x38
 800969a:	e01a      	b.n	80096d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 faf7 	bl	8009c96 <SD_WideBus_Disable>
 80096a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	639a      	str	r2, [r3, #56]	; 0x38
 80096b6:	e00c      	b.n	80096d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	639a      	str	r2, [r3, #56]	; 0x38
 80096c4:	e005      	b.n	80096d2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00b      	beq.n	80096f2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a26      	ldr	r2, [pc, #152]	; (8009778 <HAL_SD_ConfigWideBusOperation+0x130>)
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096f0:	e01f      	b.n	8009732 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681d      	ldr	r5, [r3, #0]
 8009718:	466c      	mov	r4, sp
 800971a:	f107 0314 	add.w	r3, r7, #20
 800971e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009726:	f107 0308 	add.w	r3, r7, #8
 800972a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800972c:	4628      	mov	r0, r5
 800972e:	f002 fb05 	bl	800bd3c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800973a:	4618      	mov	r0, r3
 800973c:	f002 fbca 	bl	800bed4 <SDMMC_CmdBlockLength>
 8009740:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00c      	beq.n	8009762 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a0a      	ldr	r2, [pc, #40]	; (8009778 <HAL_SD_ConfigWideBusOperation+0x130>)
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	431a      	orrs	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800976a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800976e:	4618      	mov	r0, r3
 8009770:	3728      	adds	r7, #40	; 0x28
 8009772:	46bd      	mov	sp, r7
 8009774:	bdb0      	pop	{r4, r5, r7, pc}
 8009776:	bf00      	nop
 8009778:	004005ff 	.word	0x004005ff

0800977c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009788:	f107 030c 	add.w	r3, r7, #12
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fa0e 	bl	8009bb0 <SD_SendStatus>
 8009794:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d005      	beq.n	80097a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	431a      	orrs	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	0a5b      	lsrs	r3, r3, #9
 80097ac:	f003 030f 	and.w	r3, r3, #15
 80097b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80097b2:	693b      	ldr	r3, [r7, #16]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80097da:	bf00      	nop
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f8:	2b82      	cmp	r3, #130	; 0x82
 80097fa:	d111      	bne.n	8009820 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4618      	mov	r0, r3
 8009802:	f002 fc11 	bl	800c028 <SDMMC_CmdStopTransfer>
 8009806:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d008      	beq.n	8009820 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	431a      	orrs	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff fd3a 	bl	8009294 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 0208 	bic.w	r2, r2, #8
 800982e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f240 523a 	movw	r2, #1338	; 0x53a
 8009838:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f003 ffbd 	bl	800d7c8 <HAL_SD_RxCpltCallback>
#endif
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7f9 ff88 	bl	800377c <HAL_DMA_GetError>
 800986c:	4603      	mov	r3, r0
 800986e:	2b02      	cmp	r3, #2
 8009870:	d03e      	beq.n	80098f0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009878:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009880:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d002      	beq.n	800988e <SD_DMAError+0x36>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d12d      	bne.n	80098ea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a19      	ldr	r2, [pc, #100]	; (80098f8 <SD_DMAError+0xa0>)
 8009894:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80098a4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80098b2:	6978      	ldr	r0, [r7, #20]
 80098b4:	f7ff ff62 	bl	800977c <HAL_SD_GetCardState>
 80098b8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b06      	cmp	r3, #6
 80098be:	d002      	beq.n	80098c6 <SD_DMAError+0x6e>
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2b05      	cmp	r3, #5
 80098c4:	d10a      	bne.n	80098dc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f002 fbac 	bl	800c028 <SDMMC_CmdStopTransfer>
 80098d0:	4602      	mov	r2, r0
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	431a      	orrs	r2, r3
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	2200      	movs	r2, #0
 80098e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80098ea:	6978      	ldr	r0, [r7, #20]
 80098ec:	f7ff fcd2 	bl	8009294 <HAL_SD_ErrorCallback>
#endif
  }
}
 80098f0:	bf00      	nop
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	004005ff 	.word	0x004005ff

080098fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80098fc:	b5b0      	push	{r4, r5, r7, lr}
 80098fe:	b094      	sub	sp, #80	; 0x50
 8009900:	af04      	add	r7, sp, #16
 8009902:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009904:	2301      	movs	r3, #1
 8009906:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4618      	mov	r0, r3
 800990e:	f002 fa5d 	bl	800bdcc <SDMMC_GetPowerState>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009918:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800991c:	e0b6      	b.n	8009a8c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009922:	2b03      	cmp	r3, #3
 8009924:	d02f      	beq.n	8009986 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4618      	mov	r0, r3
 800992c:	f002 fc87 	bl	800c23e <SDMMC_CmdSendCID>
 8009930:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <SD_InitCard+0x40>
    {
      return errorstate;
 8009938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800993a:	e0a7      	b.n	8009a8c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f002 fa87 	bl	800be56 <SDMMC_GetResponse>
 8009948:	4602      	mov	r2, r0
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2104      	movs	r1, #4
 8009954:	4618      	mov	r0, r3
 8009956:	f002 fa7e 	bl	800be56 <SDMMC_GetResponse>
 800995a:	4602      	mov	r2, r0
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2108      	movs	r1, #8
 8009966:	4618      	mov	r0, r3
 8009968:	f002 fa75 	bl	800be56 <SDMMC_GetResponse>
 800996c:	4602      	mov	r2, r0
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	210c      	movs	r1, #12
 8009978:	4618      	mov	r0, r3
 800997a:	f002 fa6c 	bl	800be56 <SDMMC_GetResponse>
 800997e:	4602      	mov	r2, r0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998a:	2b03      	cmp	r3, #3
 800998c:	d00d      	beq.n	80099aa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f107 020e 	add.w	r2, r7, #14
 8009996:	4611      	mov	r1, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f002 fc8d 	bl	800c2b8 <SDMMC_CmdSetRelAdd>
 800999e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <SD_InitCard+0xae>
    {
      return errorstate;
 80099a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a8:	e070      	b.n	8009a8c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d036      	beq.n	8009a20 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80099b2:	89fb      	ldrh	r3, [r7, #14]
 80099b4:	461a      	mov	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c2:	041b      	lsls	r3, r3, #16
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f002 fc57 	bl	800c27a <SDMMC_CmdSendCSD>
 80099cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80099d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d6:	e059      	b.n	8009a8c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f002 fa39 	bl	800be56 <SDMMC_GetResponse>
 80099e4:	4602      	mov	r2, r0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2104      	movs	r1, #4
 80099f0:	4618      	mov	r0, r3
 80099f2:	f002 fa30 	bl	800be56 <SDMMC_GetResponse>
 80099f6:	4602      	mov	r2, r0
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2108      	movs	r1, #8
 8009a02:	4618      	mov	r0, r3
 8009a04:	f002 fa27 	bl	800be56 <SDMMC_GetResponse>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	210c      	movs	r1, #12
 8009a14:	4618      	mov	r0, r3
 8009a16:	f002 fa1e 	bl	800be56 <SDMMC_GetResponse>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2104      	movs	r1, #4
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 fa15 	bl	800be56 <SDMMC_GetResponse>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	0d1a      	lsrs	r2, r3, #20
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a34:	f107 0310 	add.w	r3, r7, #16
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff fc34 	bl	80092a8 <HAL_SD_GetCardCSD>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a4a:	e01f      	b.n	8009a8c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a54:	041b      	lsls	r3, r3, #16
 8009a56:	461a      	mov	r2, r3
 8009a58:	f04f 0300 	mov.w	r3, #0
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	f002 fb05 	bl	800c06c <SDMMC_CmdSelDesel>
 8009a62:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <SD_InitCard+0x172>
  {
    return errorstate;
 8009a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a6c:	e00e      	b.n	8009a8c <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681d      	ldr	r5, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	466c      	mov	r4, sp
 8009a76:	f103 0210 	add.w	r2, r3, #16
 8009a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a80:	3304      	adds	r3, #4
 8009a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a84:	4628      	mov	r0, r5
 8009a86:	f002 f959 	bl	800bd3c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3740      	adds	r7, #64	; 0x40
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bdb0      	pop	{r4, r5, r7, pc}

08009a94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f002 fb00 	bl	800c0b2 <SDMMC_CmdGoIdleState>
 8009ab2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <SD_PowerON+0x2a>
  {
    return errorstate;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	e072      	b.n	8009ba4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f002 fb13 	bl	800c0ee <SDMMC_CmdOperCond>
 8009ac8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00d      	beq.n	8009aec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f002 fae9 	bl	800c0b2 <SDMMC_CmdGoIdleState>
 8009ae0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d004      	beq.n	8009af2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	e05b      	b.n	8009ba4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d137      	bne.n	8009b6a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2100      	movs	r1, #0
 8009b00:	4618      	mov	r0, r3
 8009b02:	f002 fb13 	bl	800c12c <SDMMC_CmdAppCommand>
 8009b06:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d02d      	beq.n	8009b6a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b12:	e047      	b.n	8009ba4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f002 fb06 	bl	800c12c <SDMMC_CmdAppCommand>
 8009b20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <SD_PowerON+0x98>
    {
      return errorstate;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	e03b      	b.n	8009ba4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	491e      	ldr	r1, [pc, #120]	; (8009bac <SD_PowerON+0x118>)
 8009b32:	4618      	mov	r0, r3
 8009b34:	f002 fb1c 	bl	800c170 <SDMMC_CmdAppOperCommand>
 8009b38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b44:	e02e      	b.n	8009ba4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f002 f982 	bl	800be56 <SDMMC_GetResponse>
 8009b52:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	0fdb      	lsrs	r3, r3, #31
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <SD_PowerON+0xcc>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e000      	b.n	8009b62 <SD_PowerON+0xce>
 8009b60:	2300      	movs	r3, #0
 8009b62:	613b      	str	r3, [r7, #16]

    count++;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d802      	bhi.n	8009b7a <SD_PowerON+0xe6>
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0cc      	beq.n	8009b14 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d902      	bls.n	8009b8a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b88:	e00c      	b.n	8009ba4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d003      	beq.n	8009b9c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	645a      	str	r2, [r3, #68]	; 0x44
 8009b9a:	e002      	b.n	8009ba2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	c1100000 	.word	0xc1100000

08009bb0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009bc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bc4:	e018      	b.n	8009bf8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bce:	041b      	lsls	r3, r3, #16
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	f002 fb91 	bl	800c2fa <SDMMC_CmdSendStatus>
 8009bd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	e009      	b.n	8009bf8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2100      	movs	r1, #0
 8009bea:	4618      	mov	r0, r3
 8009bec:	f002 f933 	bl	800be56 <SDMMC_GetResponse>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2100      	movs	r1, #0
 8009c16:	4618      	mov	r0, r3
 8009c18:	f002 f91d 	bl	800be56 <SDMMC_GetResponse>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c26:	d102      	bne.n	8009c2e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c2c:	e02f      	b.n	8009c8e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f879 	bl	8009d2c <SD_FindSCR>
 8009c3a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	e023      	b.n	8009c8e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01c      	beq.n	8009c8a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c58:	041b      	lsls	r3, r3, #16
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f002 fa65 	bl	800c12c <SDMMC_CmdAppCommand>
 8009c62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	e00f      	b.n	8009c8e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2102      	movs	r1, #2
 8009c74:	4618      	mov	r0, r3
 8009c76:	f002 fa9f 	bl	800c1b8 <SDMMC_CmdBusWidth>
 8009c7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	e003      	b.n	8009c8e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e001      	b.n	8009c8e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b086      	sub	sp, #24
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f002 f8d2 	bl	800be56 <SDMMC_GetResponse>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cbc:	d102      	bne.n	8009cc4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cc2:	e02f      	b.n	8009d24 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009cc4:	f107 030c 	add.w	r3, r7, #12
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f82e 	bl	8009d2c <SD_FindSCR>
 8009cd0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	e023      	b.n	8009d24 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01c      	beq.n	8009d20 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cee:	041b      	lsls	r3, r3, #16
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f002 fa1a 	bl	800c12c <SDMMC_CmdAppCommand>
 8009cf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	e00f      	b.n	8009d24 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f002 fa54 	bl	800c1b8 <SDMMC_CmdBusWidth>
 8009d10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d001      	beq.n	8009d1c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	e003      	b.n	8009d24 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e001      	b.n	8009d24 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009d2c:	b590      	push	{r4, r7, lr}
 8009d2e:	b08f      	sub	sp, #60	; 0x3c
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d36:	f7f8 ffc3 	bl	8002cc0 <HAL_GetTick>
 8009d3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009d40:	2300      	movs	r3, #0
 8009d42:	60bb      	str	r3, [r7, #8]
 8009d44:	2300      	movs	r3, #0
 8009d46:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2108      	movs	r1, #8
 8009d52:	4618      	mov	r0, r3
 8009d54:	f002 f8be 	bl	800bed4 <SDMMC_CmdBlockLength>
 8009d58:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	e0b2      	b.n	8009eca <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d6c:	041b      	lsls	r3, r3, #16
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f002 f9db 	bl	800c12c <SDMMC_CmdAppCommand>
 8009d76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	e0a3      	b.n	8009eca <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d86:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009d88:	2308      	movs	r3, #8
 8009d8a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009d8c:	2330      	movs	r3, #48	; 0x30
 8009d8e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d90:	2302      	movs	r3, #2
 8009d92:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f107 0210 	add.w	r2, r7, #16
 8009da4:	4611      	mov	r1, r2
 8009da6:	4618      	mov	r0, r3
 8009da8:	f002 f868 	bl	800be7c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f002 fa23 	bl	800c1fc <SDMMC_CmdSendSCR>
 8009db6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d02a      	beq.n	8009e14 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	e083      	b.n	8009eca <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00f      	beq.n	8009df0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6819      	ldr	r1, [r3, #0]
 8009dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	f107 0208 	add.w	r2, r7, #8
 8009ddc:	18d4      	adds	r4, r2, r3
 8009dde:	4608      	mov	r0, r1
 8009de0:	f001 ffd8 	bl	800bd94 <SDMMC_ReadFIFO>
 8009de4:	4603      	mov	r3, r0
 8009de6:	6023      	str	r3, [r4, #0]
      index++;
 8009de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dea:	3301      	adds	r3, #1
 8009dec:	637b      	str	r3, [r7, #52]	; 0x34
 8009dee:	e006      	b.n	8009dfe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d012      	beq.n	8009e24 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009dfe:	f7f8 ff5f 	bl	8002cc0 <HAL_GetTick>
 8009e02:	4602      	mov	r2, r0
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e0c:	d102      	bne.n	8009e14 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e12:	e05a      	b.n	8009eca <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0cf      	beq.n	8009dc2 <SD_FindSCR+0x96>
 8009e22:	e000      	b.n	8009e26 <SD_FindSCR+0xfa>
      break;
 8009e24:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	f003 0308 	and.w	r3, r3, #8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d005      	beq.n	8009e40 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2208      	movs	r2, #8
 8009e3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e3c:	2308      	movs	r3, #8
 8009e3e:	e044      	b.n	8009eca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2202      	movs	r2, #2
 8009e54:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e56:	2302      	movs	r3, #2
 8009e58:	e037      	b.n	8009eca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d005      	beq.n	8009e74 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009e70:	2320      	movs	r3, #32
 8009e72:	e02a      	b.n	8009eca <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e7c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	061a      	lsls	r2, r3, #24
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	021b      	lsls	r3, r3, #8
 8009e86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e8a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	0a1b      	lsrs	r3, r3, #8
 8009e90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	0e1b      	lsrs	r3, r3, #24
 8009e9a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9e:	601a      	str	r2, [r3, #0]
    scr++;
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	061a      	lsls	r2, r3, #24
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009eb2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	0a1b      	lsrs	r3, r3, #8
 8009eb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ebc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	0e1b      	lsrs	r3, r3, #24
 8009ec2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	373c      	adds	r7, #60	; 0x3c
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd90      	pop	{r4, r7, pc}

08009ed2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e025      	b.n	8009f32 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d106      	bne.n	8009f00 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7f8 fd44 	bl	8002988 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2202      	movs	r2, #2
 8009f04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	3304      	adds	r3, #4
 8009f10:	4619      	mov	r1, r3
 8009f12:	4610      	mov	r0, r2
 8009f14:	f001 fe20 	bl	800bb58 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6818      	ldr	r0, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	461a      	mov	r2, r3
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	f001 fe8a 	bl	800bc3c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e04c      	b.n	8009fe8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d106      	bne.n	8009f68 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7f8 f9ec 	bl	8002340 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 0203 	bic.w	r2, r2, #3
 8009f7e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4b19      	ldr	r3, [pc, #100]	; (8009ff0 <HAL_SPDIFRX_Init+0xb4>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009f98:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009f9e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009fa4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009faa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009fb0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009fb6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009fbc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009fc2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009fc8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	fff88407 	.word	0xfff88407

08009ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e09d      	b.n	800a142 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d108      	bne.n	800a020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a016:	d009      	beq.n	800a02c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	61da      	str	r2, [r3, #28]
 800a01e:	e005      	b.n	800a02c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d106      	bne.n	800a04c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7f8 f9bc 	bl	80023c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a062:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a06c:	d902      	bls.n	800a074 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e002      	b.n	800a07a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a078:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a082:	d007      	beq.n	800a094 <HAL_SPI_Init+0xa0>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a08c:	d002      	beq.n	800a094 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	431a      	orrs	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0d6:	ea42 0103 	orr.w	r1, r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	0c1b      	lsrs	r3, r3, #16
 800a0f0:	f003 0204 	and.w	r2, r3, #4
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	f003 0310 	and.w	r3, r3, #16
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a110:	ea42 0103 	orr.w	r1, r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69da      	ldr	r2, [r3, #28]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e049      	b.n	800a1f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7f8 f989 	bl	8002488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2202      	movs	r2, #2
 800a17a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3304      	adds	r3, #4
 800a186:	4619      	mov	r1, r3
 800a188:	4610      	mov	r0, r2
 800a18a:	f000 fc21 	bl	800a9d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d001      	beq.n	800a210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e054      	b.n	800a2ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2202      	movs	r2, #2
 800a214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0201 	orr.w	r2, r2, #1
 800a226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a26      	ldr	r2, [pc, #152]	; (800a2c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d022      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x80>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a23a:	d01d      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x80>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a22      	ldr	r2, [pc, #136]	; (800a2cc <HAL_TIM_Base_Start_IT+0xd4>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d018      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x80>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a21      	ldr	r2, [pc, #132]	; (800a2d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d013      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x80>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a1f      	ldr	r2, [pc, #124]	; (800a2d4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d00e      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x80>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d009      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x80>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a1c      	ldr	r2, [pc, #112]	; (800a2dc <HAL_TIM_Base_Start_IT+0xe4>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d004      	beq.n	800a278 <HAL_TIM_Base_Start_IT+0x80>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a1b      	ldr	r2, [pc, #108]	; (800a2e0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d115      	bne.n	800a2a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689a      	ldr	r2, [r3, #8]
 800a27e:	4b19      	ldr	r3, [pc, #100]	; (800a2e4 <HAL_TIM_Base_Start_IT+0xec>)
 800a280:	4013      	ands	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b06      	cmp	r3, #6
 800a288:	d015      	beq.n	800a2b6 <HAL_TIM_Base_Start_IT+0xbe>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a290:	d011      	beq.n	800a2b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 0201 	orr.w	r2, r2, #1
 800a2a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2a2:	e008      	b.n	800a2b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f042 0201 	orr.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	e000      	b.n	800a2b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40010000 	.word	0x40010000
 800a2cc:	40000400 	.word	0x40000400
 800a2d0:	40000800 	.word	0x40000800
 800a2d4:	40000c00 	.word	0x40000c00
 800a2d8:	40010400 	.word	0x40010400
 800a2dc:	40014000 	.word	0x40014000
 800a2e0:	40001800 	.word	0x40001800
 800a2e4:	00010007 	.word	0x00010007

0800a2e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e049      	b.n	800a38e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d106      	bne.n	800a314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7f8 f928 	bl	8002564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	3304      	adds	r3, #4
 800a324:	4619      	mov	r1, r3
 800a326:	4610      	mov	r0, r2
 800a328:	f000 fb52 	bl	800a9d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	f003 0302 	and.w	r3, r3, #2
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d122      	bne.n	800a3f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f003 0302 	and.w	r3, r3, #2
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d11b      	bne.n	800a3f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f06f 0202 	mvn.w	r2, #2
 800a3c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	f003 0303 	and.w	r3, r3, #3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fadb 	bl	800a994 <HAL_TIM_IC_CaptureCallback>
 800a3de:	e005      	b.n	800a3ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 facd 	bl	800a980 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fade 	bl	800a9a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d122      	bne.n	800a446 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	2b04      	cmp	r3, #4
 800a40c:	d11b      	bne.n	800a446 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f06f 0204 	mvn.w	r2, #4
 800a416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2202      	movs	r2, #2
 800a41c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d003      	beq.n	800a434 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fab1 	bl	800a994 <HAL_TIM_IC_CaptureCallback>
 800a432:	e005      	b.n	800a440 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 faa3 	bl	800a980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fab4 	bl	800a9a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	f003 0308 	and.w	r3, r3, #8
 800a450:	2b08      	cmp	r3, #8
 800a452:	d122      	bne.n	800a49a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	f003 0308 	and.w	r3, r3, #8
 800a45e:	2b08      	cmp	r3, #8
 800a460:	d11b      	bne.n	800a49a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f06f 0208 	mvn.w	r2, #8
 800a46a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2204      	movs	r2, #4
 800a470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d003      	beq.n	800a488 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fa87 	bl	800a994 <HAL_TIM_IC_CaptureCallback>
 800a486:	e005      	b.n	800a494 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fa79 	bl	800a980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fa8a 	bl	800a9a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	2b10      	cmp	r3, #16
 800a4a6:	d122      	bne.n	800a4ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	f003 0310 	and.w	r3, r3, #16
 800a4b2:	2b10      	cmp	r3, #16
 800a4b4:	d11b      	bne.n	800a4ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f06f 0210 	mvn.w	r2, #16
 800a4be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2208      	movs	r2, #8
 800a4c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fa5d 	bl	800a994 <HAL_TIM_IC_CaptureCallback>
 800a4da:	e005      	b.n	800a4e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fa4f 	bl	800a980 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fa60 	bl	800a9a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d10e      	bne.n	800a51a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b01      	cmp	r3, #1
 800a508:	d107      	bne.n	800a51a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f06f 0201 	mvn.w	r2, #1
 800a512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7f7 fa91 	bl	8001a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a524:	2b80      	cmp	r3, #128	; 0x80
 800a526:	d10e      	bne.n	800a546 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a532:	2b80      	cmp	r3, #128	; 0x80
 800a534:	d107      	bne.n	800a546 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a53e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fef3 	bl	800b32c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a554:	d10e      	bne.n	800a574 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a560:	2b80      	cmp	r3, #128	; 0x80
 800a562:	d107      	bne.n	800a574 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a56c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fee6 	bl	800b340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57e:	2b40      	cmp	r3, #64	; 0x40
 800a580:	d10e      	bne.n	800a5a0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58c:	2b40      	cmp	r3, #64	; 0x40
 800a58e:	d107      	bne.n	800a5a0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa0e 	bl	800a9bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	f003 0320 	and.w	r3, r3, #32
 800a5aa:	2b20      	cmp	r3, #32
 800a5ac:	d10e      	bne.n	800a5cc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f003 0320 	and.w	r3, r3, #32
 800a5b8:	2b20      	cmp	r3, #32
 800a5ba:	d107      	bne.n	800a5cc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f06f 0220 	mvn.w	r2, #32
 800a5c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fea6 	bl	800b318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5cc:	bf00      	nop
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d101      	bne.n	800a5ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	e0fd      	b.n	800a7ea <HAL_TIM_PWM_ConfigChannel+0x216>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b14      	cmp	r3, #20
 800a5fa:	f200 80f0 	bhi.w	800a7de <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a5fe:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a604:	0800a659 	.word	0x0800a659
 800a608:	0800a7df 	.word	0x0800a7df
 800a60c:	0800a7df 	.word	0x0800a7df
 800a610:	0800a7df 	.word	0x0800a7df
 800a614:	0800a699 	.word	0x0800a699
 800a618:	0800a7df 	.word	0x0800a7df
 800a61c:	0800a7df 	.word	0x0800a7df
 800a620:	0800a7df 	.word	0x0800a7df
 800a624:	0800a6db 	.word	0x0800a6db
 800a628:	0800a7df 	.word	0x0800a7df
 800a62c:	0800a7df 	.word	0x0800a7df
 800a630:	0800a7df 	.word	0x0800a7df
 800a634:	0800a71b 	.word	0x0800a71b
 800a638:	0800a7df 	.word	0x0800a7df
 800a63c:	0800a7df 	.word	0x0800a7df
 800a640:	0800a7df 	.word	0x0800a7df
 800a644:	0800a75d 	.word	0x0800a75d
 800a648:	0800a7df 	.word	0x0800a7df
 800a64c:	0800a7df 	.word	0x0800a7df
 800a650:	0800a7df 	.word	0x0800a7df
 800a654:	0800a79d 	.word	0x0800a79d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fa56 	bl	800ab10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699a      	ldr	r2, [r3, #24]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0208 	orr.w	r2, r2, #8
 800a672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	699a      	ldr	r2, [r3, #24]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0204 	bic.w	r2, r2, #4
 800a682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6999      	ldr	r1, [r3, #24]
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	691a      	ldr	r2, [r3, #16]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	430a      	orrs	r2, r1
 800a694:	619a      	str	r2, [r3, #24]
      break;
 800a696:	e0a3      	b.n	800a7e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68b9      	ldr	r1, [r7, #8]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 faa8 	bl	800abf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	699a      	ldr	r2, [r3, #24]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	699a      	ldr	r2, [r3, #24]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6999      	ldr	r1, [r3, #24]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	021a      	lsls	r2, r3, #8
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	619a      	str	r2, [r3, #24]
      break;
 800a6d8:	e082      	b.n	800a7e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 faff 	bl	800ace4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	69da      	ldr	r2, [r3, #28]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f042 0208 	orr.w	r2, r2, #8
 800a6f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	69da      	ldr	r2, [r3, #28]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0204 	bic.w	r2, r2, #4
 800a704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	69d9      	ldr	r1, [r3, #28]
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	691a      	ldr	r2, [r3, #16]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	430a      	orrs	r2, r1
 800a716:	61da      	str	r2, [r3, #28]
      break;
 800a718:	e062      	b.n	800a7e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	4618      	mov	r0, r3
 800a722:	f000 fb55 	bl	800add0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69da      	ldr	r2, [r3, #28]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69d9      	ldr	r1, [r3, #28]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	021a      	lsls	r2, r3, #8
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	61da      	str	r2, [r3, #28]
      break;
 800a75a:	e041      	b.n	800a7e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	4618      	mov	r0, r3
 800a764:	f000 fb8c 	bl	800ae80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f042 0208 	orr.w	r2, r2, #8
 800a776:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f022 0204 	bic.w	r2, r2, #4
 800a786:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	691a      	ldr	r2, [r3, #16]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a79a:	e021      	b.n	800a7e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68b9      	ldr	r1, [r7, #8]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fbbe 	bl	800af24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	021a      	lsls	r2, r3, #8
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7dc:	e000      	b.n	800a7e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a7de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop

0800a7f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_TIM_ConfigClockSource+0x18>
 800a808:	2302      	movs	r3, #2
 800a80a:	e0b3      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x180>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	4b55      	ldr	r3, [pc, #340]	; (800a97c <HAL_TIM_ConfigClockSource+0x188>)
 800a828:	4013      	ands	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a832:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a844:	d03e      	beq.n	800a8c4 <HAL_TIM_ConfigClockSource+0xd0>
 800a846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a84a:	f200 8087 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a852:	f000 8085 	beq.w	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85a:	d87f      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a85c:	2b70      	cmp	r3, #112	; 0x70
 800a85e:	d01a      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0xa2>
 800a860:	2b70      	cmp	r3, #112	; 0x70
 800a862:	d87b      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a864:	2b60      	cmp	r3, #96	; 0x60
 800a866:	d050      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x116>
 800a868:	2b60      	cmp	r3, #96	; 0x60
 800a86a:	d877      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a86c:	2b50      	cmp	r3, #80	; 0x50
 800a86e:	d03c      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0xf6>
 800a870:	2b50      	cmp	r3, #80	; 0x50
 800a872:	d873      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	d058      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x136>
 800a878:	2b40      	cmp	r3, #64	; 0x40
 800a87a:	d86f      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a87c:	2b30      	cmp	r3, #48	; 0x30
 800a87e:	d064      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x156>
 800a880:	2b30      	cmp	r3, #48	; 0x30
 800a882:	d86b      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a884:	2b20      	cmp	r3, #32
 800a886:	d060      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x156>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	d867      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d05c      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x156>
 800a890:	2b10      	cmp	r3, #16
 800a892:	d05a      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a894:	e062      	b.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	6899      	ldr	r1, [r3, #8]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	f000 fc0b 	bl	800b0c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a8b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	609a      	str	r2, [r3, #8]
      break;
 800a8c2:	e04e      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	6899      	ldr	r1, [r3, #8]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f000 fbf4 	bl	800b0c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689a      	ldr	r2, [r3, #8]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8e6:	609a      	str	r2, [r3, #8]
      break;
 800a8e8:	e03b      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	6859      	ldr	r1, [r3, #4]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f000 fb68 	bl	800afcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2150      	movs	r1, #80	; 0x50
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fbc1 	bl	800b08a <TIM_ITRx_SetConfig>
      break;
 800a908:	e02b      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	6859      	ldr	r1, [r3, #4]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	461a      	mov	r2, r3
 800a918:	f000 fb87 	bl	800b02a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2160      	movs	r1, #96	; 0x60
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fbb1 	bl	800b08a <TIM_ITRx_SetConfig>
      break;
 800a928:	e01b      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	6859      	ldr	r1, [r3, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	461a      	mov	r2, r3
 800a938:	f000 fb48 	bl	800afcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2140      	movs	r1, #64	; 0x40
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fba1 	bl	800b08a <TIM_ITRx_SetConfig>
      break;
 800a948:	e00b      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f000 fb98 	bl	800b08a <TIM_ITRx_SetConfig>
        break;
 800a95a:	e002      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a95c:	bf00      	nop
 800a95e:	e000      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a960:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	fffeff88 	.word	0xfffeff88

0800a980 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a40      	ldr	r2, [pc, #256]	; (800aae4 <TIM_Base_SetConfig+0x114>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d013      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ee:	d00f      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a3d      	ldr	r2, [pc, #244]	; (800aae8 <TIM_Base_SetConfig+0x118>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00b      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a3c      	ldr	r2, [pc, #240]	; (800aaec <TIM_Base_SetConfig+0x11c>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d007      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a3b      	ldr	r2, [pc, #236]	; (800aaf0 <TIM_Base_SetConfig+0x120>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d003      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a3a      	ldr	r2, [pc, #232]	; (800aaf4 <TIM_Base_SetConfig+0x124>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d108      	bne.n	800aa22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a2f      	ldr	r2, [pc, #188]	; (800aae4 <TIM_Base_SetConfig+0x114>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d02b      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa30:	d027      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a2c      	ldr	r2, [pc, #176]	; (800aae8 <TIM_Base_SetConfig+0x118>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d023      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a2b      	ldr	r2, [pc, #172]	; (800aaec <TIM_Base_SetConfig+0x11c>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d01f      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a2a      	ldr	r2, [pc, #168]	; (800aaf0 <TIM_Base_SetConfig+0x120>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d01b      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a29      	ldr	r2, [pc, #164]	; (800aaf4 <TIM_Base_SetConfig+0x124>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d017      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a28      	ldr	r2, [pc, #160]	; (800aaf8 <TIM_Base_SetConfig+0x128>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d013      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a27      	ldr	r2, [pc, #156]	; (800aafc <TIM_Base_SetConfig+0x12c>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00f      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a26      	ldr	r2, [pc, #152]	; (800ab00 <TIM_Base_SetConfig+0x130>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00b      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a25      	ldr	r2, [pc, #148]	; (800ab04 <TIM_Base_SetConfig+0x134>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d007      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a24      	ldr	r2, [pc, #144]	; (800ab08 <TIM_Base_SetConfig+0x138>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d003      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a23      	ldr	r2, [pc, #140]	; (800ab0c <TIM_Base_SetConfig+0x13c>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d108      	bne.n	800aa94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	689a      	ldr	r2, [r3, #8]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a0a      	ldr	r2, [pc, #40]	; (800aae4 <TIM_Base_SetConfig+0x114>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d003      	beq.n	800aac8 <TIM_Base_SetConfig+0xf8>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a0c      	ldr	r2, [pc, #48]	; (800aaf4 <TIM_Base_SetConfig+0x124>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d103      	bne.n	800aad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	691a      	ldr	r2, [r3, #16]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	615a      	str	r2, [r3, #20]
}
 800aad6:	bf00      	nop
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	40010000 	.word	0x40010000
 800aae8:	40000400 	.word	0x40000400
 800aaec:	40000800 	.word	0x40000800
 800aaf0:	40000c00 	.word	0x40000c00
 800aaf4:	40010400 	.word	0x40010400
 800aaf8:	40014000 	.word	0x40014000
 800aafc:	40014400 	.word	0x40014400
 800ab00:	40014800 	.word	0x40014800
 800ab04:	40001800 	.word	0x40001800
 800ab08:	40001c00 	.word	0x40001c00
 800ab0c:	40002000 	.word	0x40002000

0800ab10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	f023 0201 	bic.w	r2, r3, #1
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	4b2b      	ldr	r3, [pc, #172]	; (800abe8 <TIM_OC1_SetConfig+0xd8>)
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f023 0302 	bic.w	r3, r3, #2
 800ab58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a21      	ldr	r2, [pc, #132]	; (800abec <TIM_OC1_SetConfig+0xdc>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d003      	beq.n	800ab74 <TIM_OC1_SetConfig+0x64>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a20      	ldr	r2, [pc, #128]	; (800abf0 <TIM_OC1_SetConfig+0xe0>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d10c      	bne.n	800ab8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f023 0308 	bic.w	r3, r3, #8
 800ab7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f023 0304 	bic.w	r3, r3, #4
 800ab8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a16      	ldr	r2, [pc, #88]	; (800abec <TIM_OC1_SetConfig+0xdc>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d003      	beq.n	800ab9e <TIM_OC1_SetConfig+0x8e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a15      	ldr	r2, [pc, #84]	; (800abf0 <TIM_OC1_SetConfig+0xe0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d111      	bne.n	800abc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	621a      	str	r2, [r3, #32]
}
 800abdc:	bf00      	nop
 800abde:	371c      	adds	r7, #28
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	fffeff8f 	.word	0xfffeff8f
 800abec:	40010000 	.word	0x40010000
 800abf0:	40010400 	.word	0x40010400

0800abf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f023 0210 	bic.w	r2, r3, #16
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	4b2e      	ldr	r3, [pc, #184]	; (800acd8 <TIM_OC2_SetConfig+0xe4>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	021b      	lsls	r3, r3, #8
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f023 0320 	bic.w	r3, r3, #32
 800ac3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	011b      	lsls	r3, r3, #4
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a23      	ldr	r2, [pc, #140]	; (800acdc <TIM_OC2_SetConfig+0xe8>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d003      	beq.n	800ac5c <TIM_OC2_SetConfig+0x68>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a22      	ldr	r2, [pc, #136]	; (800ace0 <TIM_OC2_SetConfig+0xec>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d10d      	bne.n	800ac78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	011b      	lsls	r3, r3, #4
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a18      	ldr	r2, [pc, #96]	; (800acdc <TIM_OC2_SetConfig+0xe8>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d003      	beq.n	800ac88 <TIM_OC2_SetConfig+0x94>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a17      	ldr	r2, [pc, #92]	; (800ace0 <TIM_OC2_SetConfig+0xec>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d113      	bne.n	800acb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	4313      	orrs	r3, r2
 800acae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	621a      	str	r2, [r3, #32]
}
 800acca:	bf00      	nop
 800accc:	371c      	adds	r7, #28
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	feff8fff 	.word	0xfeff8fff
 800acdc:	40010000 	.word	0x40010000
 800ace0:	40010400 	.word	0x40010400

0800ace4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	69db      	ldr	r3, [r3, #28]
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	4b2d      	ldr	r3, [pc, #180]	; (800adc4 <TIM_OC3_SetConfig+0xe0>)
 800ad10:	4013      	ands	r3, r2
 800ad12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0303 	bic.w	r3, r3, #3
 800ad1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a22      	ldr	r2, [pc, #136]	; (800adc8 <TIM_OC3_SetConfig+0xe4>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d003      	beq.n	800ad4a <TIM_OC3_SetConfig+0x66>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a21      	ldr	r2, [pc, #132]	; (800adcc <TIM_OC3_SetConfig+0xe8>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d10d      	bne.n	800ad66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	021b      	lsls	r3, r3, #8
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <TIM_OC3_SetConfig+0xe4>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d003      	beq.n	800ad76 <TIM_OC3_SetConfig+0x92>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a16      	ldr	r2, [pc, #88]	; (800adcc <TIM_OC3_SetConfig+0xe8>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d113      	bne.n	800ad9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	011b      	lsls	r3, r3, #4
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	621a      	str	r2, [r3, #32]
}
 800adb8:	bf00      	nop
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	fffeff8f 	.word	0xfffeff8f
 800adc8:	40010000 	.word	0x40010000
 800adcc:	40010400 	.word	0x40010400

0800add0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	4b1e      	ldr	r3, [pc, #120]	; (800ae74 <TIM_OC4_SetConfig+0xa4>)
 800adfc:	4013      	ands	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	031b      	lsls	r3, r3, #12
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a13      	ldr	r2, [pc, #76]	; (800ae78 <TIM_OC4_SetConfig+0xa8>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d003      	beq.n	800ae38 <TIM_OC4_SetConfig+0x68>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a12      	ldr	r2, [pc, #72]	; (800ae7c <TIM_OC4_SetConfig+0xac>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d109      	bne.n	800ae4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	019b      	lsls	r3, r3, #6
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	621a      	str	r2, [r3, #32]
}
 800ae66:	bf00      	nop
 800ae68:	371c      	adds	r7, #28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	feff8fff 	.word	0xfeff8fff
 800ae78:	40010000 	.word	0x40010000
 800ae7c:	40010400 	.word	0x40010400

0800ae80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	4b1b      	ldr	r3, [pc, #108]	; (800af18 <TIM_OC5_SetConfig+0x98>)
 800aeac:	4013      	ands	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aec0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	041b      	lsls	r3, r3, #16
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a12      	ldr	r2, [pc, #72]	; (800af1c <TIM_OC5_SetConfig+0x9c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d003      	beq.n	800aede <TIM_OC5_SetConfig+0x5e>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a11      	ldr	r2, [pc, #68]	; (800af20 <TIM_OC5_SetConfig+0xa0>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d109      	bne.n	800aef2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	621a      	str	r2, [r3, #32]
}
 800af0c:	bf00      	nop
 800af0e:	371c      	adds	r7, #28
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr
 800af18:	fffeff8f 	.word	0xfffeff8f
 800af1c:	40010000 	.word	0x40010000
 800af20:	40010400 	.word	0x40010400

0800af24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	4b1c      	ldr	r3, [pc, #112]	; (800afc0 <TIM_OC6_SetConfig+0x9c>)
 800af50:	4013      	ands	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	051b      	lsls	r3, r3, #20
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	4313      	orrs	r3, r2
 800af72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a13      	ldr	r2, [pc, #76]	; (800afc4 <TIM_OC6_SetConfig+0xa0>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d003      	beq.n	800af84 <TIM_OC6_SetConfig+0x60>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a12      	ldr	r2, [pc, #72]	; (800afc8 <TIM_OC6_SetConfig+0xa4>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d109      	bne.n	800af98 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	695b      	ldr	r3, [r3, #20]
 800af90:	029b      	lsls	r3, r3, #10
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	4313      	orrs	r3, r2
 800af96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	621a      	str	r2, [r3, #32]
}
 800afb2:	bf00      	nop
 800afb4:	371c      	adds	r7, #28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	feff8fff 	.word	0xfeff8fff
 800afc4:	40010000 	.word	0x40010000
 800afc8:	40010400 	.word	0x40010400

0800afcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	f023 0201 	bic.w	r2, r3, #1
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	4313      	orrs	r3, r2
 800b000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f023 030a 	bic.w	r3, r3, #10
 800b008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	4313      	orrs	r3, r2
 800b010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	621a      	str	r2, [r3, #32]
}
 800b01e:	bf00      	nop
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b02a:	b480      	push	{r7}
 800b02c:	b087      	sub	sp, #28
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	f023 0210 	bic.w	r2, r3, #16
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6a1b      	ldr	r3, [r3, #32]
 800b04c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	031b      	lsls	r3, r3, #12
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b066:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	4313      	orrs	r3, r2
 800b070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	621a      	str	r2, [r3, #32]
}
 800b07e:	bf00      	nop
 800b080:	371c      	adds	r7, #28
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b085      	sub	sp, #20
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0a2:	683a      	ldr	r2, [r7, #0]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f043 0307 	orr.w	r3, r3, #7
 800b0ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	609a      	str	r2, [r3, #8]
}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	021a      	lsls	r2, r3, #8
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	431a      	orrs	r2, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	609a      	str	r2, [r3, #8]
}
 800b0f4:	bf00      	nop
 800b0f6:	371c      	adds	r7, #28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b110:	2b01      	cmp	r3, #1
 800b112:	d101      	bne.n	800b118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b114:	2302      	movs	r3, #2
 800b116:	e06d      	b.n	800b1f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a30      	ldr	r2, [pc, #192]	; (800b200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d004      	beq.n	800b14c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a2f      	ldr	r2, [pc, #188]	; (800b204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d108      	bne.n	800b15e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a20      	ldr	r2, [pc, #128]	; (800b200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d022      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b18a:	d01d      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a1d      	ldr	r2, [pc, #116]	; (800b208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d018      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a1c      	ldr	r2, [pc, #112]	; (800b20c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d013      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a1a      	ldr	r2, [pc, #104]	; (800b210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00e      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a15      	ldr	r2, [pc, #84]	; (800b204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d009      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a16      	ldr	r2, [pc, #88]	; (800b214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d004      	beq.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a15      	ldr	r2, [pc, #84]	; (800b218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d10c      	bne.n	800b1e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr
 800b200:	40010000 	.word	0x40010000
 800b204:	40010400 	.word	0x40010400
 800b208:	40000400 	.word	0x40000400
 800b20c:	40000800 	.word	0x40000800
 800b210:	40000c00 	.word	0x40000c00
 800b214:	40014000 	.word	0x40014000
 800b218:	40001800 	.word	0x40001800

0800b21c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b230:	2b01      	cmp	r3, #1
 800b232:	d101      	bne.n	800b238 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b234:	2302      	movs	r3, #2
 800b236:	e065      	b.n	800b304 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	4313      	orrs	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	4313      	orrs	r3, r2
 800b268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4313      	orrs	r3, r2
 800b276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	4313      	orrs	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	4313      	orrs	r3, r2
 800b292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	041b      	lsls	r3, r3, #16
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a16      	ldr	r2, [pc, #88]	; (800b310 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d004      	beq.n	800b2c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a14      	ldr	r2, [pc, #80]	; (800b314 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d115      	bne.n	800b2f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	051b      	lsls	r3, r3, #20
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	40010000 	.word	0x40010000
 800b314:	40010400 	.word	0x40010400

0800b318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e040      	b.n	800b3e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7f7 f9e2 	bl	8002740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2224      	movs	r2, #36	; 0x24
 800b380:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f022 0201 	bic.w	r2, r2, #1
 800b390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f82c 	bl	800b3f0 <UART_SetConfig>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d101      	bne.n	800b3a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e022      	b.n	800b3e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fa82 	bl	800b8b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689a      	ldr	r2, [r3, #8]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f042 0201 	orr.w	r2, r2, #1
 800b3de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fb09 	bl	800b9f8 <UART_CheckIdleState>
 800b3e6:	4603      	mov	r3, r0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b088      	sub	sp, #32
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689a      	ldr	r2, [r3, #8]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	431a      	orrs	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	4313      	orrs	r3, r2
 800b412:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	4ba7      	ldr	r3, [pc, #668]	; (800b6b8 <UART_SetConfig+0x2c8>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	6812      	ldr	r2, [r2, #0]
 800b422:	6979      	ldr	r1, [r7, #20]
 800b424:	430b      	orrs	r3, r1
 800b426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68da      	ldr	r2, [r3, #12]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	430a      	orrs	r2, r1
 800b460:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a95      	ldr	r2, [pc, #596]	; (800b6bc <UART_SetConfig+0x2cc>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d120      	bne.n	800b4ae <UART_SetConfig+0xbe>
 800b46c:	4b94      	ldr	r3, [pc, #592]	; (800b6c0 <UART_SetConfig+0x2d0>)
 800b46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b472:	f003 0303 	and.w	r3, r3, #3
 800b476:	2b03      	cmp	r3, #3
 800b478:	d816      	bhi.n	800b4a8 <UART_SetConfig+0xb8>
 800b47a:	a201      	add	r2, pc, #4	; (adr r2, 800b480 <UART_SetConfig+0x90>)
 800b47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b480:	0800b491 	.word	0x0800b491
 800b484:	0800b49d 	.word	0x0800b49d
 800b488:	0800b497 	.word	0x0800b497
 800b48c:	0800b4a3 	.word	0x0800b4a3
 800b490:	2301      	movs	r3, #1
 800b492:	77fb      	strb	r3, [r7, #31]
 800b494:	e14f      	b.n	800b736 <UART_SetConfig+0x346>
 800b496:	2302      	movs	r3, #2
 800b498:	77fb      	strb	r3, [r7, #31]
 800b49a:	e14c      	b.n	800b736 <UART_SetConfig+0x346>
 800b49c:	2304      	movs	r3, #4
 800b49e:	77fb      	strb	r3, [r7, #31]
 800b4a0:	e149      	b.n	800b736 <UART_SetConfig+0x346>
 800b4a2:	2308      	movs	r3, #8
 800b4a4:	77fb      	strb	r3, [r7, #31]
 800b4a6:	e146      	b.n	800b736 <UART_SetConfig+0x346>
 800b4a8:	2310      	movs	r3, #16
 800b4aa:	77fb      	strb	r3, [r7, #31]
 800b4ac:	e143      	b.n	800b736 <UART_SetConfig+0x346>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a84      	ldr	r2, [pc, #528]	; (800b6c4 <UART_SetConfig+0x2d4>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d132      	bne.n	800b51e <UART_SetConfig+0x12e>
 800b4b8:	4b81      	ldr	r3, [pc, #516]	; (800b6c0 <UART_SetConfig+0x2d0>)
 800b4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4be:	f003 030c 	and.w	r3, r3, #12
 800b4c2:	2b0c      	cmp	r3, #12
 800b4c4:	d828      	bhi.n	800b518 <UART_SetConfig+0x128>
 800b4c6:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <UART_SetConfig+0xdc>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b501 	.word	0x0800b501
 800b4d0:	0800b519 	.word	0x0800b519
 800b4d4:	0800b519 	.word	0x0800b519
 800b4d8:	0800b519 	.word	0x0800b519
 800b4dc:	0800b50d 	.word	0x0800b50d
 800b4e0:	0800b519 	.word	0x0800b519
 800b4e4:	0800b519 	.word	0x0800b519
 800b4e8:	0800b519 	.word	0x0800b519
 800b4ec:	0800b507 	.word	0x0800b507
 800b4f0:	0800b519 	.word	0x0800b519
 800b4f4:	0800b519 	.word	0x0800b519
 800b4f8:	0800b519 	.word	0x0800b519
 800b4fc:	0800b513 	.word	0x0800b513
 800b500:	2300      	movs	r3, #0
 800b502:	77fb      	strb	r3, [r7, #31]
 800b504:	e117      	b.n	800b736 <UART_SetConfig+0x346>
 800b506:	2302      	movs	r3, #2
 800b508:	77fb      	strb	r3, [r7, #31]
 800b50a:	e114      	b.n	800b736 <UART_SetConfig+0x346>
 800b50c:	2304      	movs	r3, #4
 800b50e:	77fb      	strb	r3, [r7, #31]
 800b510:	e111      	b.n	800b736 <UART_SetConfig+0x346>
 800b512:	2308      	movs	r3, #8
 800b514:	77fb      	strb	r3, [r7, #31]
 800b516:	e10e      	b.n	800b736 <UART_SetConfig+0x346>
 800b518:	2310      	movs	r3, #16
 800b51a:	77fb      	strb	r3, [r7, #31]
 800b51c:	e10b      	b.n	800b736 <UART_SetConfig+0x346>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a69      	ldr	r2, [pc, #420]	; (800b6c8 <UART_SetConfig+0x2d8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d120      	bne.n	800b56a <UART_SetConfig+0x17a>
 800b528:	4b65      	ldr	r3, [pc, #404]	; (800b6c0 <UART_SetConfig+0x2d0>)
 800b52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b52e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b532:	2b30      	cmp	r3, #48	; 0x30
 800b534:	d013      	beq.n	800b55e <UART_SetConfig+0x16e>
 800b536:	2b30      	cmp	r3, #48	; 0x30
 800b538:	d814      	bhi.n	800b564 <UART_SetConfig+0x174>
 800b53a:	2b20      	cmp	r3, #32
 800b53c:	d009      	beq.n	800b552 <UART_SetConfig+0x162>
 800b53e:	2b20      	cmp	r3, #32
 800b540:	d810      	bhi.n	800b564 <UART_SetConfig+0x174>
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <UART_SetConfig+0x15c>
 800b546:	2b10      	cmp	r3, #16
 800b548:	d006      	beq.n	800b558 <UART_SetConfig+0x168>
 800b54a:	e00b      	b.n	800b564 <UART_SetConfig+0x174>
 800b54c:	2300      	movs	r3, #0
 800b54e:	77fb      	strb	r3, [r7, #31]
 800b550:	e0f1      	b.n	800b736 <UART_SetConfig+0x346>
 800b552:	2302      	movs	r3, #2
 800b554:	77fb      	strb	r3, [r7, #31]
 800b556:	e0ee      	b.n	800b736 <UART_SetConfig+0x346>
 800b558:	2304      	movs	r3, #4
 800b55a:	77fb      	strb	r3, [r7, #31]
 800b55c:	e0eb      	b.n	800b736 <UART_SetConfig+0x346>
 800b55e:	2308      	movs	r3, #8
 800b560:	77fb      	strb	r3, [r7, #31]
 800b562:	e0e8      	b.n	800b736 <UART_SetConfig+0x346>
 800b564:	2310      	movs	r3, #16
 800b566:	77fb      	strb	r3, [r7, #31]
 800b568:	e0e5      	b.n	800b736 <UART_SetConfig+0x346>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a57      	ldr	r2, [pc, #348]	; (800b6cc <UART_SetConfig+0x2dc>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d120      	bne.n	800b5b6 <UART_SetConfig+0x1c6>
 800b574:	4b52      	ldr	r3, [pc, #328]	; (800b6c0 <UART_SetConfig+0x2d0>)
 800b576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b57a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b57e:	2bc0      	cmp	r3, #192	; 0xc0
 800b580:	d013      	beq.n	800b5aa <UART_SetConfig+0x1ba>
 800b582:	2bc0      	cmp	r3, #192	; 0xc0
 800b584:	d814      	bhi.n	800b5b0 <UART_SetConfig+0x1c0>
 800b586:	2b80      	cmp	r3, #128	; 0x80
 800b588:	d009      	beq.n	800b59e <UART_SetConfig+0x1ae>
 800b58a:	2b80      	cmp	r3, #128	; 0x80
 800b58c:	d810      	bhi.n	800b5b0 <UART_SetConfig+0x1c0>
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <UART_SetConfig+0x1a8>
 800b592:	2b40      	cmp	r3, #64	; 0x40
 800b594:	d006      	beq.n	800b5a4 <UART_SetConfig+0x1b4>
 800b596:	e00b      	b.n	800b5b0 <UART_SetConfig+0x1c0>
 800b598:	2300      	movs	r3, #0
 800b59a:	77fb      	strb	r3, [r7, #31]
 800b59c:	e0cb      	b.n	800b736 <UART_SetConfig+0x346>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	77fb      	strb	r3, [r7, #31]
 800b5a2:	e0c8      	b.n	800b736 <UART_SetConfig+0x346>
 800b5a4:	2304      	movs	r3, #4
 800b5a6:	77fb      	strb	r3, [r7, #31]
 800b5a8:	e0c5      	b.n	800b736 <UART_SetConfig+0x346>
 800b5aa:	2308      	movs	r3, #8
 800b5ac:	77fb      	strb	r3, [r7, #31]
 800b5ae:	e0c2      	b.n	800b736 <UART_SetConfig+0x346>
 800b5b0:	2310      	movs	r3, #16
 800b5b2:	77fb      	strb	r3, [r7, #31]
 800b5b4:	e0bf      	b.n	800b736 <UART_SetConfig+0x346>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a45      	ldr	r2, [pc, #276]	; (800b6d0 <UART_SetConfig+0x2e0>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d125      	bne.n	800b60c <UART_SetConfig+0x21c>
 800b5c0:	4b3f      	ldr	r3, [pc, #252]	; (800b6c0 <UART_SetConfig+0x2d0>)
 800b5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ce:	d017      	beq.n	800b600 <UART_SetConfig+0x210>
 800b5d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5d4:	d817      	bhi.n	800b606 <UART_SetConfig+0x216>
 800b5d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5da:	d00b      	beq.n	800b5f4 <UART_SetConfig+0x204>
 800b5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e0:	d811      	bhi.n	800b606 <UART_SetConfig+0x216>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <UART_SetConfig+0x1fe>
 800b5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ea:	d006      	beq.n	800b5fa <UART_SetConfig+0x20a>
 800b5ec:	e00b      	b.n	800b606 <UART_SetConfig+0x216>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	77fb      	strb	r3, [r7, #31]
 800b5f2:	e0a0      	b.n	800b736 <UART_SetConfig+0x346>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	77fb      	strb	r3, [r7, #31]
 800b5f8:	e09d      	b.n	800b736 <UART_SetConfig+0x346>
 800b5fa:	2304      	movs	r3, #4
 800b5fc:	77fb      	strb	r3, [r7, #31]
 800b5fe:	e09a      	b.n	800b736 <UART_SetConfig+0x346>
 800b600:	2308      	movs	r3, #8
 800b602:	77fb      	strb	r3, [r7, #31]
 800b604:	e097      	b.n	800b736 <UART_SetConfig+0x346>
 800b606:	2310      	movs	r3, #16
 800b608:	77fb      	strb	r3, [r7, #31]
 800b60a:	e094      	b.n	800b736 <UART_SetConfig+0x346>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a30      	ldr	r2, [pc, #192]	; (800b6d4 <UART_SetConfig+0x2e4>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d125      	bne.n	800b662 <UART_SetConfig+0x272>
 800b616:	4b2a      	ldr	r3, [pc, #168]	; (800b6c0 <UART_SetConfig+0x2d0>)
 800b618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b61c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b624:	d017      	beq.n	800b656 <UART_SetConfig+0x266>
 800b626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b62a:	d817      	bhi.n	800b65c <UART_SetConfig+0x26c>
 800b62c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b630:	d00b      	beq.n	800b64a <UART_SetConfig+0x25a>
 800b632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b636:	d811      	bhi.n	800b65c <UART_SetConfig+0x26c>
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <UART_SetConfig+0x254>
 800b63c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b640:	d006      	beq.n	800b650 <UART_SetConfig+0x260>
 800b642:	e00b      	b.n	800b65c <UART_SetConfig+0x26c>
 800b644:	2301      	movs	r3, #1
 800b646:	77fb      	strb	r3, [r7, #31]
 800b648:	e075      	b.n	800b736 <UART_SetConfig+0x346>
 800b64a:	2302      	movs	r3, #2
 800b64c:	77fb      	strb	r3, [r7, #31]
 800b64e:	e072      	b.n	800b736 <UART_SetConfig+0x346>
 800b650:	2304      	movs	r3, #4
 800b652:	77fb      	strb	r3, [r7, #31]
 800b654:	e06f      	b.n	800b736 <UART_SetConfig+0x346>
 800b656:	2308      	movs	r3, #8
 800b658:	77fb      	strb	r3, [r7, #31]
 800b65a:	e06c      	b.n	800b736 <UART_SetConfig+0x346>
 800b65c:	2310      	movs	r3, #16
 800b65e:	77fb      	strb	r3, [r7, #31]
 800b660:	e069      	b.n	800b736 <UART_SetConfig+0x346>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a1c      	ldr	r2, [pc, #112]	; (800b6d8 <UART_SetConfig+0x2e8>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d137      	bne.n	800b6dc <UART_SetConfig+0x2ec>
 800b66c:	4b14      	ldr	r3, [pc, #80]	; (800b6c0 <UART_SetConfig+0x2d0>)
 800b66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b672:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b676:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b67a:	d017      	beq.n	800b6ac <UART_SetConfig+0x2bc>
 800b67c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b680:	d817      	bhi.n	800b6b2 <UART_SetConfig+0x2c2>
 800b682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b686:	d00b      	beq.n	800b6a0 <UART_SetConfig+0x2b0>
 800b688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b68c:	d811      	bhi.n	800b6b2 <UART_SetConfig+0x2c2>
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d003      	beq.n	800b69a <UART_SetConfig+0x2aa>
 800b692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b696:	d006      	beq.n	800b6a6 <UART_SetConfig+0x2b6>
 800b698:	e00b      	b.n	800b6b2 <UART_SetConfig+0x2c2>
 800b69a:	2300      	movs	r3, #0
 800b69c:	77fb      	strb	r3, [r7, #31]
 800b69e:	e04a      	b.n	800b736 <UART_SetConfig+0x346>
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	77fb      	strb	r3, [r7, #31]
 800b6a4:	e047      	b.n	800b736 <UART_SetConfig+0x346>
 800b6a6:	2304      	movs	r3, #4
 800b6a8:	77fb      	strb	r3, [r7, #31]
 800b6aa:	e044      	b.n	800b736 <UART_SetConfig+0x346>
 800b6ac:	2308      	movs	r3, #8
 800b6ae:	77fb      	strb	r3, [r7, #31]
 800b6b0:	e041      	b.n	800b736 <UART_SetConfig+0x346>
 800b6b2:	2310      	movs	r3, #16
 800b6b4:	77fb      	strb	r3, [r7, #31]
 800b6b6:	e03e      	b.n	800b736 <UART_SetConfig+0x346>
 800b6b8:	efff69f3 	.word	0xefff69f3
 800b6bc:	40011000 	.word	0x40011000
 800b6c0:	40023800 	.word	0x40023800
 800b6c4:	40004400 	.word	0x40004400
 800b6c8:	40004800 	.word	0x40004800
 800b6cc:	40004c00 	.word	0x40004c00
 800b6d0:	40005000 	.word	0x40005000
 800b6d4:	40011400 	.word	0x40011400
 800b6d8:	40007800 	.word	0x40007800
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a71      	ldr	r2, [pc, #452]	; (800b8a8 <UART_SetConfig+0x4b8>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d125      	bne.n	800b732 <UART_SetConfig+0x342>
 800b6e6:	4b71      	ldr	r3, [pc, #452]	; (800b8ac <UART_SetConfig+0x4bc>)
 800b6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b6f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b6f4:	d017      	beq.n	800b726 <UART_SetConfig+0x336>
 800b6f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b6fa:	d817      	bhi.n	800b72c <UART_SetConfig+0x33c>
 800b6fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b700:	d00b      	beq.n	800b71a <UART_SetConfig+0x32a>
 800b702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b706:	d811      	bhi.n	800b72c <UART_SetConfig+0x33c>
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <UART_SetConfig+0x324>
 800b70c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b710:	d006      	beq.n	800b720 <UART_SetConfig+0x330>
 800b712:	e00b      	b.n	800b72c <UART_SetConfig+0x33c>
 800b714:	2300      	movs	r3, #0
 800b716:	77fb      	strb	r3, [r7, #31]
 800b718:	e00d      	b.n	800b736 <UART_SetConfig+0x346>
 800b71a:	2302      	movs	r3, #2
 800b71c:	77fb      	strb	r3, [r7, #31]
 800b71e:	e00a      	b.n	800b736 <UART_SetConfig+0x346>
 800b720:	2304      	movs	r3, #4
 800b722:	77fb      	strb	r3, [r7, #31]
 800b724:	e007      	b.n	800b736 <UART_SetConfig+0x346>
 800b726:	2308      	movs	r3, #8
 800b728:	77fb      	strb	r3, [r7, #31]
 800b72a:	e004      	b.n	800b736 <UART_SetConfig+0x346>
 800b72c:	2310      	movs	r3, #16
 800b72e:	77fb      	strb	r3, [r7, #31]
 800b730:	e001      	b.n	800b736 <UART_SetConfig+0x346>
 800b732:	2310      	movs	r3, #16
 800b734:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b73e:	d15b      	bne.n	800b7f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b740:	7ffb      	ldrb	r3, [r7, #31]
 800b742:	2b08      	cmp	r3, #8
 800b744:	d827      	bhi.n	800b796 <UART_SetConfig+0x3a6>
 800b746:	a201      	add	r2, pc, #4	; (adr r2, 800b74c <UART_SetConfig+0x35c>)
 800b748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74c:	0800b771 	.word	0x0800b771
 800b750:	0800b779 	.word	0x0800b779
 800b754:	0800b781 	.word	0x0800b781
 800b758:	0800b797 	.word	0x0800b797
 800b75c:	0800b787 	.word	0x0800b787
 800b760:	0800b797 	.word	0x0800b797
 800b764:	0800b797 	.word	0x0800b797
 800b768:	0800b797 	.word	0x0800b797
 800b76c:	0800b78f 	.word	0x0800b78f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b770:	f7fb fff6 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 800b774:	61b8      	str	r0, [r7, #24]
        break;
 800b776:	e013      	b.n	800b7a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b778:	f7fc f806 	bl	8007788 <HAL_RCC_GetPCLK2Freq>
 800b77c:	61b8      	str	r0, [r7, #24]
        break;
 800b77e:	e00f      	b.n	800b7a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b780:	4b4b      	ldr	r3, [pc, #300]	; (800b8b0 <UART_SetConfig+0x4c0>)
 800b782:	61bb      	str	r3, [r7, #24]
        break;
 800b784:	e00c      	b.n	800b7a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b786:	f7fb ff29 	bl	80075dc <HAL_RCC_GetSysClockFreq>
 800b78a:	61b8      	str	r0, [r7, #24]
        break;
 800b78c:	e008      	b.n	800b7a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b78e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b792:	61bb      	str	r3, [r7, #24]
        break;
 800b794:	e004      	b.n	800b7a0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	77bb      	strb	r3, [r7, #30]
        break;
 800b79e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d074      	beq.n	800b890 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7a6:	69bb      	ldr	r3, [r7, #24]
 800b7a8:	005a      	lsls	r2, r3, #1
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	085b      	lsrs	r3, r3, #1
 800b7b0:	441a      	add	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	2b0f      	cmp	r3, #15
 800b7c2:	d916      	bls.n	800b7f2 <UART_SetConfig+0x402>
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7ca:	d212      	bcs.n	800b7f2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	f023 030f 	bic.w	r3, r3, #15
 800b7d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	085b      	lsrs	r3, r3, #1
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	f003 0307 	and.w	r3, r3, #7
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	89fb      	ldrh	r3, [r7, #14]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	89fa      	ldrh	r2, [r7, #14]
 800b7ee:	60da      	str	r2, [r3, #12]
 800b7f0:	e04e      	b.n	800b890 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	77bb      	strb	r3, [r7, #30]
 800b7f6:	e04b      	b.n	800b890 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7f8:	7ffb      	ldrb	r3, [r7, #31]
 800b7fa:	2b08      	cmp	r3, #8
 800b7fc:	d827      	bhi.n	800b84e <UART_SetConfig+0x45e>
 800b7fe:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <UART_SetConfig+0x414>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b829 	.word	0x0800b829
 800b808:	0800b831 	.word	0x0800b831
 800b80c:	0800b839 	.word	0x0800b839
 800b810:	0800b84f 	.word	0x0800b84f
 800b814:	0800b83f 	.word	0x0800b83f
 800b818:	0800b84f 	.word	0x0800b84f
 800b81c:	0800b84f 	.word	0x0800b84f
 800b820:	0800b84f 	.word	0x0800b84f
 800b824:	0800b847 	.word	0x0800b847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b828:	f7fb ff9a 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 800b82c:	61b8      	str	r0, [r7, #24]
        break;
 800b82e:	e013      	b.n	800b858 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b830:	f7fb ffaa 	bl	8007788 <HAL_RCC_GetPCLK2Freq>
 800b834:	61b8      	str	r0, [r7, #24]
        break;
 800b836:	e00f      	b.n	800b858 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b838:	4b1d      	ldr	r3, [pc, #116]	; (800b8b0 <UART_SetConfig+0x4c0>)
 800b83a:	61bb      	str	r3, [r7, #24]
        break;
 800b83c:	e00c      	b.n	800b858 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b83e:	f7fb fecd 	bl	80075dc <HAL_RCC_GetSysClockFreq>
 800b842:	61b8      	str	r0, [r7, #24]
        break;
 800b844:	e008      	b.n	800b858 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b84a:	61bb      	str	r3, [r7, #24]
        break;
 800b84c:	e004      	b.n	800b858 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	77bb      	strb	r3, [r7, #30]
        break;
 800b856:	bf00      	nop
    }

    if (pclk != 0U)
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d018      	beq.n	800b890 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	085a      	lsrs	r2, r3, #1
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	441a      	add	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b870:	b29b      	uxth	r3, r3
 800b872:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b0f      	cmp	r3, #15
 800b878:	d908      	bls.n	800b88c <UART_SetConfig+0x49c>
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b880:	d204      	bcs.n	800b88c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	60da      	str	r2, [r3, #12]
 800b88a:	e001      	b.n	800b890 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b89c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3720      	adds	r7, #32
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	40007c00 	.word	0x40007c00
 800b8ac:	40023800 	.word	0x40023800
 800b8b0:	00f42400 	.word	0x00f42400

0800b8b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00a      	beq.n	800b8de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e2:	f003 0302 	and.w	r3, r3, #2
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00a      	beq.n	800b900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	430a      	orrs	r2, r1
 800b8fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00a      	beq.n	800b922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	430a      	orrs	r2, r1
 800b920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	f003 0308 	and.w	r3, r3, #8
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00a      	beq.n	800b944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	f003 0310 	and.w	r3, r3, #16
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00a      	beq.n	800b966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	430a      	orrs	r2, r1
 800b964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96a:	f003 0320 	and.w	r3, r3, #32
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00a      	beq.n	800b988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	430a      	orrs	r2, r1
 800b986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b990:	2b00      	cmp	r3, #0
 800b992:	d01a      	beq.n	800b9ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	430a      	orrs	r2, r1
 800b9a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b2:	d10a      	bne.n	800b9ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	605a      	str	r2, [r3, #4]
  }
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba08:	f7f7 f95a 	bl	8002cc0 <HAL_GetTick>
 800ba0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 0308 	and.w	r3, r3, #8
 800ba18:	2b08      	cmp	r3, #8
 800ba1a:	d10e      	bne.n	800ba3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f817 	bl	800ba5e <UART_WaitOnFlagUntilTimeout>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d001      	beq.n	800ba3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e00d      	b.n	800ba56 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2220      	movs	r2, #32
 800ba3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2220      	movs	r2, #32
 800ba44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b084      	sub	sp, #16
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	603b      	str	r3, [r7, #0]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba6e:	e05e      	b.n	800bb2e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba76:	d05a      	beq.n	800bb2e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba78:	f7f7 f922 	bl	8002cc0 <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	69ba      	ldr	r2, [r7, #24]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d302      	bcc.n	800ba8e <UART_WaitOnFlagUntilTimeout+0x30>
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d11b      	bne.n	800bac6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	689a      	ldr	r2, [r3, #8]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f022 0201 	bic.w	r2, r2, #1
 800baac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2220      	movs	r2, #32
 800bab2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2220      	movs	r2, #32
 800bab8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e043      	b.n	800bb4e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 0304 	and.w	r3, r3, #4
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d02c      	beq.n	800bb2e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bae2:	d124      	bne.n	800bb2e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bafc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689a      	ldr	r2, [r3, #8]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f022 0201 	bic.w	r2, r2, #1
 800bb0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2220      	movs	r2, #32
 800bb12:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2220      	movs	r2, #32
 800bb18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e00f      	b.n	800bb4e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69da      	ldr	r2, [r3, #28]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	4013      	ands	r3, r2
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	bf0c      	ite	eq
 800bb3e:	2301      	moveq	r3, #1
 800bb40:	2300      	movne	r3, #0
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	461a      	mov	r2, r3
 800bb46:	79fb      	ldrb	r3, [r7, #7]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d091      	beq.n	800ba70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d027      	beq.n	800bbc2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	4b2f      	ldr	r3, [pc, #188]	; (800bc38 <FMC_SDRAM_Init+0xe0>)
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bb88:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bb8e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bb94:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bb9a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bba0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bba6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bbac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bbb2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	e032      	b.n	800bc28 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbce:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bbd8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bbde:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	4b12      	ldr	r3, [pc, #72]	; (800bc38 <FMC_SDRAM_Init+0xe0>)
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bbfc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bc02:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bc08:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bc0e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bc14:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	ffff8000 	.word	0xffff8000

0800bc3c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d02e      	beq.n	800bcb4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc62:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bc72:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bc7c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	3b01      	subs	r3, #1
 800bc84:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bc86:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bc90:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bc9a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bca4:	4313      	orrs	r3, r2
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	697a      	ldr	r2, [r7, #20]
 800bcb0:	609a      	str	r2, [r3, #8]
 800bcb2:	e039      	b.n	800bd28 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	4b1e      	ldr	r3, [pc, #120]	; (800bd38 <FMC_SDRAM_Timing_Init+0xfc>)
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bce6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bcf6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bd00:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800bd0a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	3b01      	subs	r3, #1
 800bd12:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bd14:	4313      	orrs	r3, r2
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	697a      	ldr	r2, [r7, #20]
 800bd20:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	693a      	ldr	r2, [r7, #16]
 800bd26:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	ff0f0fff 	.word	0xff0f0fff

0800bd3c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bd3c:	b084      	sub	sp, #16
 800bd3e:	b480      	push	{r7}
 800bd40:	b085      	sub	sp, #20
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
 800bd46:	f107 001c 	add.w	r0, r7, #28
 800bd4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bd52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bd54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bd56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bd5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bd5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bd62:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bd66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <SDMMC_Init+0x54>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3714      	adds	r7, #20
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	b004      	add	sp, #16
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	ffff8100 	.word	0xffff8100

0800bd94 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b082      	sub	sp, #8
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2203      	movs	r2, #3
 800bdba:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bdbc:	2002      	movs	r0, #2
 800bdbe:	f7f6 ff8b 	bl	8002cd8 <HAL_Delay>
  
  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0303 	and.w	r3, r3, #3
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800be06:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800be0c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800be12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	4313      	orrs	r3, r2
 800be18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	4b06      	ldr	r3, [pc, #24]	; (800be38 <SDMMC_SendCommand+0x50>)
 800be20:	4013      	ands	r3, r2
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	431a      	orrs	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3714      	adds	r7, #20
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	fffff000 	.word	0xfffff000

0800be3c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	b2db      	uxtb	r3, r3
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	3314      	adds	r3, #20
 800be64:	461a      	mov	r2, r3
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	4413      	add	r3, r2
 800be6a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
}  
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bea2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bea8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800beae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	431a      	orrs	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bec6:	2300      	movs	r3, #0

}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bee2:	2310      	movs	r3, #16
 800bee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee6:	2340      	movs	r3, #64	; 0x40
 800bee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800beea:	2300      	movs	r3, #0
 800beec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bef2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef4:	f107 0308 	add.w	r3, r7, #8
 800bef8:	4619      	mov	r1, r3
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f7ff ff74 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bf00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf04:	2110      	movs	r1, #16
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fa46 	bl	800c398 <SDMMC_GetCmdResp1>
 800bf0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf0e:	69fb      	ldr	r3, [r7, #28]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b088      	sub	sp, #32
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bf26:	2311      	movs	r3, #17
 800bf28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf2a:	2340      	movs	r3, #64	; 0x40
 800bf2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf38:	f107 0308 	add.w	r3, r7, #8
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7ff ff52 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bf44:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf48:	2111      	movs	r1, #17
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fa24 	bl	800c398 <SDMMC_GetCmdResp1>
 800bf50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf52:	69fb      	ldr	r3, [r7, #28]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3720      	adds	r7, #32
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b088      	sub	sp, #32
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bf6a:	2312      	movs	r3, #18
 800bf6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf6e:	2340      	movs	r3, #64	; 0x40
 800bf70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf72:	2300      	movs	r3, #0
 800bf74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf7c:	f107 0308 	add.w	r3, r7, #8
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff ff30 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bf88:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf8c:	2112      	movs	r1, #18
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 fa02 	bl	800c398 <SDMMC_GetCmdResp1>
 800bf94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf96:	69fb      	ldr	r3, [r7, #28]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b088      	sub	sp, #32
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bfae:	2318      	movs	r3, #24
 800bfb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfb2:	2340      	movs	r3, #64	; 0x40
 800bfb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfc0:	f107 0308 	add.w	r3, r7, #8
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7ff ff0e 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfd0:	2118      	movs	r1, #24
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f9e0 	bl	800c398 <SDMMC_GetCmdResp1>
 800bfd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfda:	69fb      	ldr	r3, [r7, #28]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3720      	adds	r7, #32
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bff2:	2319      	movs	r3, #25
 800bff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bff6:	2340      	movs	r3, #64	; 0x40
 800bff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bffa:	2300      	movs	r3, #0
 800bffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c004:	f107 0308 	add.w	r3, r7, #8
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff feec 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c010:	f241 3288 	movw	r2, #5000	; 0x1388
 800c014:	2119      	movs	r1, #25
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f9be 	bl	800c398 <SDMMC_GetCmdResp1>
 800c01c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c01e:	69fb      	ldr	r3, [r7, #28]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3720      	adds	r7, #32
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b088      	sub	sp, #32
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c030:	2300      	movs	r3, #0
 800c032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c034:	230c      	movs	r3, #12
 800c036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c038:	2340      	movs	r3, #64	; 0x40
 800c03a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c03c:	2300      	movs	r3, #0
 800c03e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c044:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c046:	f107 0308 	add.w	r3, r7, #8
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff fecb 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c052:	4a05      	ldr	r2, [pc, #20]	; (800c068 <SDMMC_CmdStopTransfer+0x40>)
 800c054:	210c      	movs	r1, #12
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f99e 	bl	800c398 <SDMMC_GetCmdResp1>
 800c05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c05e:	69fb      	ldr	r3, [r7, #28]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3720      	adds	r7, #32
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	05f5e100 	.word	0x05f5e100

0800c06c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b08a      	sub	sp, #40	; 0x28
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c07c:	2307      	movs	r3, #7
 800c07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c080:	2340      	movs	r3, #64	; 0x40
 800c082:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c084:	2300      	movs	r3, #0
 800c086:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c08c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c08e:	f107 0310 	add.w	r3, r7, #16
 800c092:	4619      	mov	r1, r3
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7ff fea7 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c09a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c09e:	2107      	movs	r1, #7
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 f979 	bl	800c398 <SDMMC_GetCmdResp1>
 800c0a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3728      	adds	r7, #40	; 0x28
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b088      	sub	sp, #32
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0d0:	f107 0308 	add.w	r3, r7, #8
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fe86 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f92f 	bl	800c340 <SDMMC_GetCmdError>
 800c0e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0e4:	69fb      	ldr	r3, [r7, #28]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3720      	adds	r7, #32
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b088      	sub	sp, #32
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c0f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c0fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c0fc:	2308      	movs	r3, #8
 800c0fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c100:	2340      	movs	r3, #64	; 0x40
 800c102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c104:	2300      	movs	r3, #0
 800c106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c10c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c10e:	f107 0308 	add.w	r3, r7, #8
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff fe67 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fb26 	bl	800c76c <SDMMC_GetCmdResp7>
 800c120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c122:	69fb      	ldr	r3, [r7, #28]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3720      	adds	r7, #32
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c13a:	2337      	movs	r3, #55	; 0x37
 800c13c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c13e:	2340      	movs	r3, #64	; 0x40
 800c140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c142:	2300      	movs	r3, #0
 800c144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c14a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c14c:	f107 0308 	add.w	r3, r7, #8
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff fe48 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c158:	f241 3288 	movw	r2, #5000	; 0x1388
 800c15c:	2137      	movs	r1, #55	; 0x37
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f91a 	bl	800c398 <SDMMC_GetCmdResp1>
 800c164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c166:	69fb      	ldr	r3, [r7, #28]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3720      	adds	r7, #32
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b088      	sub	sp, #32
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	4b0d      	ldr	r3, [pc, #52]	; (800c1b4 <SDMMC_CmdAppOperCommand+0x44>)
 800c17e:	4313      	orrs	r3, r2
 800c180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c182:	2329      	movs	r3, #41	; 0x29
 800c184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c186:	2340      	movs	r3, #64	; 0x40
 800c188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c18e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c192:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c194:	f107 0308 	add.w	r3, r7, #8
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff fe24 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fa2f 	bl	800c604 <SDMMC_GetCmdResp3>
 800c1a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a8:	69fb      	ldr	r3, [r7, #28]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3720      	adds	r7, #32
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	80100000 	.word	0x80100000

0800c1b8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c1c6:	2306      	movs	r3, #6
 800c1c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1ca:	2340      	movs	r3, #64	; 0x40
 800c1cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1d8:	f107 0308 	add.w	r3, r7, #8
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff fe02 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c1e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1e8:	2106      	movs	r1, #6
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f8d4 	bl	800c398 <SDMMC_GetCmdResp1>
 800c1f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1f2:	69fb      	ldr	r3, [r7, #28]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3720      	adds	r7, #32
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c204:	2300      	movs	r3, #0
 800c206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c208:	2333      	movs	r3, #51	; 0x33
 800c20a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c20c:	2340      	movs	r3, #64	; 0x40
 800c20e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c210:	2300      	movs	r3, #0
 800c212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c218:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7ff fde1 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c226:	f241 3288 	movw	r2, #5000	; 0x1388
 800c22a:	2133      	movs	r1, #51	; 0x33
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f8b3 	bl	800c398 <SDMMC_GetCmdResp1>
 800c232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c234:	69fb      	ldr	r3, [r7, #28]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3720      	adds	r7, #32
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b088      	sub	sp, #32
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c246:	2300      	movs	r3, #0
 800c248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c24a:	2302      	movs	r3, #2
 800c24c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c24e:	23c0      	movs	r3, #192	; 0xc0
 800c250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c252:	2300      	movs	r3, #0
 800c254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c25a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c25c:	f107 0308 	add.w	r3, r7, #8
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff fdc0 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f983 	bl	800c574 <SDMMC_GetCmdResp2>
 800c26e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c270:	69fb      	ldr	r3, [r7, #28]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3720      	adds	r7, #32
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b088      	sub	sp, #32
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c288:	2309      	movs	r3, #9
 800c28a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c28c:	23c0      	movs	r3, #192	; 0xc0
 800c28e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c290:	2300      	movs	r3, #0
 800c292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c298:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c29a:	f107 0308 	add.w	r3, r7, #8
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff fda1 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f964 	bl	800c574 <SDMMC_GetCmdResp2>
 800c2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3720      	adds	r7, #32
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b088      	sub	sp, #32
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2ca:	2340      	movs	r3, #64	; 0x40
 800c2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2d8:	f107 0308 	add.w	r3, r7, #8
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fd82 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	2103      	movs	r1, #3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f9c9 	bl	800c680 <SDMMC_GetCmdResp6>
 800c2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2f0:	69fb      	ldr	r3, [r7, #28]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3720      	adds	r7, #32
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b088      	sub	sp, #32
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c308:	230d      	movs	r3, #13
 800c30a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c30c:	2340      	movs	r3, #64	; 0x40
 800c30e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c310:	2300      	movs	r3, #0
 800c312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c31a:	f107 0308 	add.w	r3, r7, #8
 800c31e:	4619      	mov	r1, r3
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff fd61 	bl	800bde8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c326:	f241 3288 	movw	r2, #5000	; 0x1388
 800c32a:	210d      	movs	r1, #13
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f833 	bl	800c398 <SDMMC_GetCmdResp1>
 800c332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c334:	69fb      	ldr	r3, [r7, #28]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3720      	adds	r7, #32
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c348:	4b11      	ldr	r3, [pc, #68]	; (800c390 <SDMMC_GetCmdError+0x50>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a11      	ldr	r2, [pc, #68]	; (800c394 <SDMMC_GetCmdError+0x54>)
 800c34e:	fba2 2303 	umull	r2, r3, r2, r3
 800c352:	0a5b      	lsrs	r3, r3, #9
 800c354:	f241 3288 	movw	r2, #5000	; 0x1388
 800c358:	fb02 f303 	mul.w	r3, r2, r3
 800c35c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	1e5a      	subs	r2, r3, #1
 800c362:	60fa      	str	r2, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d102      	bne.n	800c36e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c36c:	e009      	b.n	800c382 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c376:	2b00      	cmp	r3, #0
 800c378:	d0f1      	beq.n	800c35e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	22c5      	movs	r2, #197	; 0xc5
 800c37e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	20000000 	.word	0x20000000
 800c394:	10624dd3 	.word	0x10624dd3

0800c398 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c3a6:	4b70      	ldr	r3, [pc, #448]	; (800c568 <SDMMC_GetCmdResp1+0x1d0>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a70      	ldr	r2, [pc, #448]	; (800c56c <SDMMC_GetCmdResp1+0x1d4>)
 800c3ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b0:	0a5a      	lsrs	r2, r3, #9
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	fb02 f303 	mul.w	r3, r2, r3
 800c3b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	1e5a      	subs	r2, r3, #1
 800c3be:	61fa      	str	r2, [r7, #28]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3c8:	e0c9      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0ef      	beq.n	800c3ba <SDMMC_GetCmdResp1+0x22>
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1ea      	bne.n	800c3ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e8:	f003 0304 	and.w	r3, r3, #4
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d004      	beq.n	800c3fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2204      	movs	r2, #4
 800c3f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3f6:	2304      	movs	r3, #4
 800c3f8:	e0b1      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	2b00      	cmp	r3, #0
 800c404:	d004      	beq.n	800c410 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2201      	movs	r2, #1
 800c40a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e0a6      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	22c5      	movs	r2, #197	; 0xc5
 800c414:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f7ff fd10 	bl	800be3c <SDMMC_GetCommandResponse>
 800c41c:	4603      	mov	r3, r0
 800c41e:	461a      	mov	r2, r3
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	4293      	cmp	r3, r2
 800c424:	d001      	beq.n	800c42a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c426:	2301      	movs	r3, #1
 800c428:	e099      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c42a:	2100      	movs	r1, #0
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7ff fd12 	bl	800be56 <SDMMC_GetResponse>
 800c432:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	4b4e      	ldr	r3, [pc, #312]	; (800c570 <SDMMC_GetCmdResp1+0x1d8>)
 800c438:	4013      	ands	r3, r2
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c43e:	2300      	movs	r3, #0
 800c440:	e08d      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	2b00      	cmp	r3, #0
 800c446:	da02      	bge.n	800c44e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c44c:	e087      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c458:	2340      	movs	r3, #64	; 0x40
 800c45a:	e080      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c466:	2380      	movs	r3, #128	; 0x80
 800c468:	e079      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c474:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c478:	e071      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c480:	2b00      	cmp	r3, #0
 800c482:	d002      	beq.n	800c48a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c484:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c488:	e069      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c498:	e061      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c4a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4a8:	e059      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d002      	beq.n	800c4ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c4b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4b8:	e051      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c4c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4c8:	e049      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d002      	beq.n	800c4da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c4d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4d8:	e041      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d002      	beq.n	800c4ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c4e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4e8:	e039      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d002      	beq.n	800c4fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c4f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4f8:	e031      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c504:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c508:	e029      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c514:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c518:	e021      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c520:	2b00      	cmp	r3, #0
 800c522:	d002      	beq.n	800c52a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c524:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c528:	e019      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c538:	e011      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c548:	e009      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	f003 0308 	and.w	r3, r3, #8
 800c550:	2b00      	cmp	r3, #0
 800c552:	d002      	beq.n	800c55a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c554:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c558:	e001      	b.n	800c55e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c55a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3720      	adds	r7, #32
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	20000000 	.word	0x20000000
 800c56c:	10624dd3 	.word	0x10624dd3
 800c570:	fdffe008 	.word	0xfdffe008

0800c574 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c57c:	4b1f      	ldr	r3, [pc, #124]	; (800c5fc <SDMMC_GetCmdResp2+0x88>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a1f      	ldr	r2, [pc, #124]	; (800c600 <SDMMC_GetCmdResp2+0x8c>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	0a5b      	lsrs	r3, r3, #9
 800c588:	f241 3288 	movw	r2, #5000	; 0x1388
 800c58c:	fb02 f303 	mul.w	r3, r2, r3
 800c590:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	1e5a      	subs	r2, r3, #1
 800c596:	60fa      	str	r2, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d102      	bne.n	800c5a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c59c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5a0:	e026      	b.n	800c5f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0ef      	beq.n	800c592 <SDMMC_GetCmdResp2+0x1e>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1ea      	bne.n	800c592 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d004      	beq.n	800c5d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2204      	movs	r2, #4
 800c5cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5ce:	2304      	movs	r3, #4
 800c5d0:	e00e      	b.n	800c5f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	f003 0301 	and.w	r3, r3, #1
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d004      	beq.n	800c5e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e003      	b.n	800c5f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	22c5      	movs	r2, #197	; 0xc5
 800c5ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3714      	adds	r7, #20
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	20000000 	.word	0x20000000
 800c600:	10624dd3 	.word	0x10624dd3

0800c604 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c60c:	4b1a      	ldr	r3, [pc, #104]	; (800c678 <SDMMC_GetCmdResp3+0x74>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a1a      	ldr	r2, [pc, #104]	; (800c67c <SDMMC_GetCmdResp3+0x78>)
 800c612:	fba2 2303 	umull	r2, r3, r2, r3
 800c616:	0a5b      	lsrs	r3, r3, #9
 800c618:	f241 3288 	movw	r2, #5000	; 0x1388
 800c61c:	fb02 f303 	mul.w	r3, r2, r3
 800c620:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	1e5a      	subs	r2, r3, #1
 800c626:	60fa      	str	r2, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d102      	bne.n	800c632 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c62c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c630:	e01b      	b.n	800c66a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c636:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d0ef      	beq.n	800c622 <SDMMC_GetCmdResp3+0x1e>
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1ea      	bne.n	800c622 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c650:	f003 0304 	and.w	r3, r3, #4
 800c654:	2b00      	cmp	r3, #0
 800c656:	d004      	beq.n	800c662 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2204      	movs	r2, #4
 800c65c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c65e:	2304      	movs	r3, #4
 800c660:	e003      	b.n	800c66a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	22c5      	movs	r2, #197	; 0xc5
 800c666:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	20000000 	.word	0x20000000
 800c67c:	10624dd3 	.word	0x10624dd3

0800c680 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	460b      	mov	r3, r1
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c68e:	4b35      	ldr	r3, [pc, #212]	; (800c764 <SDMMC_GetCmdResp6+0xe4>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a35      	ldr	r2, [pc, #212]	; (800c768 <SDMMC_GetCmdResp6+0xe8>)
 800c694:	fba2 2303 	umull	r2, r3, r2, r3
 800c698:	0a5b      	lsrs	r3, r3, #9
 800c69a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c69e:	fb02 f303 	mul.w	r3, r2, r3
 800c6a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	1e5a      	subs	r2, r3, #1
 800c6a8:	61fa      	str	r2, [r7, #28]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d102      	bne.n	800c6b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6b2:	e052      	b.n	800c75a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d0ef      	beq.n	800c6a4 <SDMMC_GetCmdResp6+0x24>
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1ea      	bne.n	800c6a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d2:	f003 0304 	and.w	r3, r3, #4
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d004      	beq.n	800c6e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2204      	movs	r2, #4
 800c6de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6e0:	2304      	movs	r3, #4
 800c6e2:	e03a      	b.n	800c75a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d004      	beq.n	800c6fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e02f      	b.n	800c75a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7ff fb9e 	bl	800be3c <SDMMC_GetCommandResponse>
 800c700:	4603      	mov	r3, r0
 800c702:	461a      	mov	r2, r3
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	4293      	cmp	r3, r2
 800c708:	d001      	beq.n	800c70e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e025      	b.n	800c75a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	22c5      	movs	r2, #197	; 0xc5
 800c712:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c714:	2100      	movs	r1, #0
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f7ff fb9d 	bl	800be56 <SDMMC_GetResponse>
 800c71c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c724:	2b00      	cmp	r3, #0
 800c726:	d106      	bne.n	800c736 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	0c1b      	lsrs	r3, r3, #16
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c732:	2300      	movs	r3, #0
 800c734:	e011      	b.n	800c75a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c744:	e009      	b.n	800c75a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c754:	e001      	b.n	800c75a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3720      	adds	r7, #32
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	20000000 	.word	0x20000000
 800c768:	10624dd3 	.word	0x10624dd3

0800c76c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c774:	4b22      	ldr	r3, [pc, #136]	; (800c800 <SDMMC_GetCmdResp7+0x94>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a22      	ldr	r2, [pc, #136]	; (800c804 <SDMMC_GetCmdResp7+0x98>)
 800c77a:	fba2 2303 	umull	r2, r3, r2, r3
 800c77e:	0a5b      	lsrs	r3, r3, #9
 800c780:	f241 3288 	movw	r2, #5000	; 0x1388
 800c784:	fb02 f303 	mul.w	r3, r2, r3
 800c788:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	1e5a      	subs	r2, r3, #1
 800c78e:	60fa      	str	r2, [r7, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d102      	bne.n	800c79a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c798:	e02c      	b.n	800c7f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c79e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d0ef      	beq.n	800c78a <SDMMC_GetCmdResp7+0x1e>
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1ea      	bne.n	800c78a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d004      	beq.n	800c7ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2204      	movs	r2, #4
 800c7c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7c6:	2304      	movs	r3, #4
 800c7c8:	e014      	b.n	800c7f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ce:	f003 0301 	and.w	r3, r3, #1
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d004      	beq.n	800c7e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e009      	b.n	800c7f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2240      	movs	r2, #64	; 0x40
 800c7f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c7f2:	2300      	movs	r3, #0
  
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	20000000 	.word	0x20000000
 800c804:	10624dd3 	.word	0x10624dd3

0800c808 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c808:	b084      	sub	sp, #16
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b084      	sub	sp, #16
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	f107 001c 	add.w	r0, r7, #28
 800c816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d120      	bne.n	800c862 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c824:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	68da      	ldr	r2, [r3, #12]
 800c830:	4b20      	ldr	r3, [pc, #128]	; (800c8b4 <USB_CoreInit+0xac>)
 800c832:	4013      	ands	r3, r2
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c846:	2b01      	cmp	r3, #1
 800c848:	d105      	bne.n	800c856 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f942 	bl	800cae0 <USB_CoreReset>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
 800c860:	e010      	b.n	800c884 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f936 	bl	800cae0 <USB_CoreReset>
 800c874:	4603      	mov	r3, r0
 800c876:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	2b01      	cmp	r3, #1
 800c888:	d10b      	bne.n	800c8a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f043 0206 	orr.w	r2, r3, #6
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f043 0220 	orr.w	r2, r3, #32
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3710      	adds	r7, #16
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8ae:	b004      	add	sp, #16
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	ffbdffbf 	.word	0xffbdffbf

0800c8b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f043 0201 	orr.w	r2, r3, #1
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b083      	sub	sp, #12
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	f023 0201 	bic.w	r2, r3, #1
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	460b      	mov	r3, r1
 800c906:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	2b01      	cmp	r3, #1
 800c918:	d106      	bne.n	800c928 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	60da      	str	r2, [r3, #12]
 800c926:	e00b      	b.n	800c940 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c928:	78fb      	ldrb	r3, [r7, #3]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d106      	bne.n	800c93c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	60da      	str	r2, [r3, #12]
 800c93a:	e001      	b.n	800c940 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	e003      	b.n	800c948 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c940:	2032      	movs	r0, #50	; 0x32
 800c942:	f7f6 f9c9 	bl	8002cd8 <HAL_Delay>

  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	019b      	lsls	r3, r3, #6
 800c962:	f043 0220 	orr.w	r2, r3, #32
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3301      	adds	r3, #1
 800c96e:	60fb      	str	r3, [r7, #12]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	4a09      	ldr	r2, [pc, #36]	; (800c998 <USB_FlushTxFifo+0x48>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d901      	bls.n	800c97c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c978:	2303      	movs	r3, #3
 800c97a:	e006      	b.n	800c98a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	f003 0320 	and.w	r3, r3, #32
 800c984:	2b20      	cmp	r3, #32
 800c986:	d0f0      	beq.n	800c96a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3714      	adds	r7, #20
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	00030d40 	.word	0x00030d40

0800c99c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2210      	movs	r2, #16
 800c9ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4a09      	ldr	r2, [pc, #36]	; (800c9dc <USB_FlushRxFifo+0x40>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d901      	bls.n	800c9c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	e006      	b.n	800c9ce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	f003 0310 	and.w	r3, r3, #16
 800c9c8:	2b10      	cmp	r3, #16
 800c9ca:	d0f0      	beq.n	800c9ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	00030d40 	.word	0x00030d40

0800c9e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b089      	sub	sp, #36	; 0x24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	71fb      	strb	r3, [r7, #7]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c9fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d11a      	bne.n	800ca3c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ca06:	88bb      	ldrh	r3, [r7, #4]
 800ca08:	3303      	adds	r3, #3
 800ca0a:	089b      	lsrs	r3, r3, #2
 800ca0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ca0e:	2300      	movs	r3, #0
 800ca10:	61bb      	str	r3, [r7, #24]
 800ca12:	e00f      	b.n	800ca34 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	031a      	lsls	r2, r3, #12
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca20:	461a      	mov	r2, r3
 800ca22:	69fb      	ldr	r3, [r7, #28]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	3304      	adds	r3, #4
 800ca2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	3301      	adds	r3, #1
 800ca32:	61bb      	str	r3, [r7, #24]
 800ca34:	69ba      	ldr	r2, [r7, #24]
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d3eb      	bcc.n	800ca14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3724      	adds	r7, #36	; 0x24
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b089      	sub	sp, #36	; 0x24
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	60f8      	str	r0, [r7, #12]
 800ca52:	60b9      	str	r1, [r7, #8]
 800ca54:	4613      	mov	r3, r2
 800ca56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ca60:	88fb      	ldrh	r3, [r7, #6]
 800ca62:	3303      	adds	r3, #3
 800ca64:	089b      	lsrs	r3, r3, #2
 800ca66:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ca68:	2300      	movs	r3, #0
 800ca6a:	61bb      	str	r3, [r7, #24]
 800ca6c:	e00b      	b.n	800ca86 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	601a      	str	r2, [r3, #0]
    pDest++;
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	3301      	adds	r3, #1
 800ca84:	61bb      	str	r3, [r7, #24]
 800ca86:	69ba      	ldr	r2, [r7, #24]
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d3ef      	bcc.n	800ca6e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ca8e:	69fb      	ldr	r3, [r7, #28]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3724      	adds	r7, #36	; 0x24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	4013      	ands	r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cab4:	68fb      	ldr	r3, [r7, #12]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3714      	adds	r7, #20
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b083      	sub	sp, #12
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	f003 0301 	and.w	r3, r3, #1
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
	...

0800cae0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cae8:	2300      	movs	r3, #0
 800caea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3301      	adds	r3, #1
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	4a13      	ldr	r2, [pc, #76]	; (800cb44 <USB_CoreReset+0x64>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d901      	bls.n	800cafe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e01b      	b.n	800cb36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	daf2      	bge.n	800caec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	f043 0201 	orr.w	r2, r3, #1
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4a09      	ldr	r2, [pc, #36]	; (800cb44 <USB_CoreReset+0x64>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d901      	bls.n	800cb28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cb24:	2303      	movs	r3, #3
 800cb26:	e006      	b.n	800cb36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	f003 0301 	and.w	r3, r3, #1
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d0f0      	beq.n	800cb16 <USB_CoreReset+0x36>

  return HAL_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3714      	adds	r7, #20
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	00030d40 	.word	0x00030d40

0800cb48 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb48:	b084      	sub	sp, #16
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	f107 001c 	add.w	r0, r7, #28
 800cb56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb64:	461a      	mov	r2, r3
 800cb66:	2300      	movs	r3, #0
 800cb68:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d018      	beq.n	800cbb4 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d10a      	bne.n	800cb9e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb96:	f043 0304 	orr.w	r3, r3, #4
 800cb9a:	6013      	str	r3, [r2, #0]
 800cb9c:	e014      	b.n	800cbc8 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbac:	f023 0304 	bic.w	r3, r3, #4
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	e009      	b.n	800cbc8 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbc2:	f023 0304 	bic.w	r3, r3, #4
 800cbc6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cbc8:	2110      	movs	r1, #16
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff fec0 	bl	800c950 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff fee3 	bl	800c99c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	e015      	b.n	800cc08 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	015a      	lsls	r2, r3, #5
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe8:	461a      	mov	r2, r3
 800cbea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	2300      	movs	r3, #0
 800cc00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3301      	adds	r3, #1
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	6a3b      	ldr	r3, [r7, #32]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d3e5      	bcc.n	800cbdc <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cc10:	2101      	movs	r1, #1
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 f8ac 	bl	800cd70 <USB_DriveVbus>

  HAL_Delay(200U);
 800cc18:	20c8      	movs	r0, #200	; 0xc8
 800cc1a:	f7f6 f85d 	bl	8002cd8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc2a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00b      	beq.n	800cc50 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc3e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a14      	ldr	r2, [pc, #80]	; (800cc94 <USB_HostInit+0x14c>)
 800cc44:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a13      	ldr	r2, [pc, #76]	; (800cc98 <USB_HostInit+0x150>)
 800cc4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cc4e:	e009      	b.n	800cc64 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2280      	movs	r2, #128	; 0x80
 800cc54:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a10      	ldr	r2, [pc, #64]	; (800cc9c <USB_HostInit+0x154>)
 800cc5a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a10      	ldr	r2, [pc, #64]	; (800cca0 <USB_HostInit+0x158>)
 800cc60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d105      	bne.n	800cc76 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	699b      	ldr	r3, [r3, #24]
 800cc6e:	f043 0210 	orr.w	r2, r3, #16
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	699a      	ldr	r2, [r3, #24]
 800cc7a:	4b0a      	ldr	r3, [pc, #40]	; (800cca4 <USB_HostInit+0x15c>)
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc8e:	b004      	add	sp, #16
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	01000200 	.word	0x01000200
 800cc98:	00e00300 	.word	0x00e00300
 800cc9c:	00600080 	.word	0x00600080
 800cca0:	004000e0 	.word	0x004000e0
 800cca4:	a3200008 	.word	0xa3200008

0800cca8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ccc6:	f023 0303 	bic.w	r3, r3, #3
 800ccca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	78fb      	ldrb	r3, [r7, #3]
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	68f9      	ldr	r1, [r7, #12]
 800ccdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cce0:	4313      	orrs	r3, r2
 800cce2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cce4:	78fb      	ldrb	r3, [r7, #3]
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d107      	bne.n	800ccfa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ccf6:	6053      	str	r3, [r2, #4]
 800ccf8:	e009      	b.n	800cd0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ccfa:	78fb      	ldrb	r3, [r7, #3]
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	d106      	bne.n	800cd0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd06:	461a      	mov	r2, r3
 800cd08:	f241 7370 	movw	r3, #6000	; 0x1770
 800cd0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cd4c:	2064      	movs	r0, #100	; 0x64
 800cd4e:	f7f5 ffc3 	bl	8002cd8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cd60:	200a      	movs	r0, #10
 800cd62:	f7f5 ffb9 	bl	8002cd8 <HAL_Delay>

  return HAL_OK;
 800cd66:	2300      	movs	r3, #0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cd80:	2300      	movs	r3, #0
 800cd82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d109      	bne.n	800cdb4 <USB_DriveVbus+0x44>
 800cda0:	78fb      	ldrb	r3, [r7, #3]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d106      	bne.n	800cdb4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cdae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cdb2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cdba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdbe:	d109      	bne.n	800cdd4 <USB_DriveVbus+0x64>
 800cdc0:	78fb      	ldrb	r3, [r7, #3]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cdce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdd2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3714      	adds	r7, #20
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cde2:	b480      	push	{r7}
 800cde4:	b085      	sub	sp, #20
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	0c5b      	lsrs	r3, r3, #17
 800ce00:	f003 0303 	and.w	r3, r3, #3
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	b29b      	uxth	r3, r3
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
	...

0800ce34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	4611      	mov	r1, r2
 800ce40:	461a      	mov	r2, r3
 800ce42:	4603      	mov	r3, r0
 800ce44:	70fb      	strb	r3, [r7, #3]
 800ce46:	460b      	mov	r3, r1
 800ce48:	70bb      	strb	r3, [r7, #2]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ce56:	78fb      	ldrb	r3, [r7, #3]
 800ce58:	015a      	lsls	r2, r3, #5
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce62:	461a      	mov	r2, r3
 800ce64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ce6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d87e      	bhi.n	800cf70 <USB_HC_Init+0x13c>
 800ce72:	a201      	add	r2, pc, #4	; (adr r2, 800ce78 <USB_HC_Init+0x44>)
 800ce74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce78:	0800ce89 	.word	0x0800ce89
 800ce7c:	0800cf33 	.word	0x0800cf33
 800ce80:	0800ce89 	.word	0x0800ce89
 800ce84:	0800cef5 	.word	0x0800cef5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce88:	78fb      	ldrb	r3, [r7, #3]
 800ce8a:	015a      	lsls	r2, r3, #5
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	4413      	add	r3, r2
 800ce90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce94:	461a      	mov	r2, r3
 800ce96:	f240 439d 	movw	r3, #1181	; 0x49d
 800ce9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ce9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	da10      	bge.n	800cec6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cea4:	78fb      	ldrb	r3, [r7, #3]
 800cea6:	015a      	lsls	r2, r3, #5
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	78fa      	ldrb	r2, [r7, #3]
 800ceb4:	0151      	lsls	r1, r2, #5
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	440a      	add	r2, r1
 800ceba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cec2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cec4:	e057      	b.n	800cf76 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d051      	beq.n	800cf76 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ced2:	78fb      	ldrb	r3, [r7, #3]
 800ced4:	015a      	lsls	r2, r3, #5
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	4413      	add	r3, r2
 800ceda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	78fa      	ldrb	r2, [r7, #3]
 800cee2:	0151      	lsls	r1, r2, #5
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	440a      	add	r2, r1
 800cee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ceec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cef0:	60d3      	str	r3, [r2, #12]
      break;
 800cef2:	e040      	b.n	800cf76 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cef4:	78fb      	ldrb	r3, [r7, #3]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf00:	461a      	mov	r2, r3
 800cf02:	f240 639d 	movw	r3, #1693	; 0x69d
 800cf06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cf08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	da34      	bge.n	800cf7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cf10:	78fb      	ldrb	r3, [r7, #3]
 800cf12:	015a      	lsls	r2, r3, #5
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	4413      	add	r3, r2
 800cf18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	78fa      	ldrb	r2, [r7, #3]
 800cf20:	0151      	lsls	r1, r2, #5
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	440a      	add	r2, r1
 800cf26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cf30:	e023      	b.n	800cf7a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cf32:	78fb      	ldrb	r3, [r7, #3]
 800cf34:	015a      	lsls	r2, r3, #5
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	4413      	add	r3, r2
 800cf3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf3e:	461a      	mov	r2, r3
 800cf40:	f240 2325 	movw	r3, #549	; 0x225
 800cf44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cf46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	da17      	bge.n	800cf7e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cf4e:	78fb      	ldrb	r3, [r7, #3]
 800cf50:	015a      	lsls	r2, r3, #5
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	4413      	add	r3, r2
 800cf56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	78fa      	ldrb	r2, [r7, #3]
 800cf5e:	0151      	lsls	r1, r2, #5
 800cf60:	693a      	ldr	r2, [r7, #16]
 800cf62:	440a      	add	r2, r1
 800cf64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf68:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cf6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cf6e:	e006      	b.n	800cf7e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	77fb      	strb	r3, [r7, #31]
      break;
 800cf74:	e004      	b.n	800cf80 <USB_HC_Init+0x14c>
      break;
 800cf76:	bf00      	nop
 800cf78:	e002      	b.n	800cf80 <USB_HC_Init+0x14c>
      break;
 800cf7a:	bf00      	nop
 800cf7c:	e000      	b.n	800cf80 <USB_HC_Init+0x14c>
      break;
 800cf7e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf86:	699a      	ldr	r2, [r3, #24]
 800cf88:	78fb      	ldrb	r3, [r7, #3]
 800cf8a:	f003 030f 	and.w	r3, r3, #15
 800cf8e:	2101      	movs	r1, #1
 800cf90:	fa01 f303 	lsl.w	r3, r1, r3
 800cf94:	6939      	ldr	r1, [r7, #16]
 800cf96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	699b      	ldr	r3, [r3, #24]
 800cfa2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cfaa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	da03      	bge.n	800cfba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cfb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfb6:	61bb      	str	r3, [r7, #24]
 800cfb8:	e001      	b.n	800cfbe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f7ff ff0f 	bl	800cde2 <USB_GetHostSpeed>
 800cfc4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800cfc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d106      	bne.n	800cfdc <USB_HC_Init+0x1a8>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d003      	beq.n	800cfdc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cfd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cfd8:	617b      	str	r3, [r7, #20]
 800cfda:	e001      	b.n	800cfe0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfe0:	787b      	ldrb	r3, [r7, #1]
 800cfe2:	059b      	lsls	r3, r3, #22
 800cfe4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cfe8:	78bb      	ldrb	r3, [r7, #2]
 800cfea:	02db      	lsls	r3, r3, #11
 800cfec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cff0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cff2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cff6:	049b      	lsls	r3, r3, #18
 800cff8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cffc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cffe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d000:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d004:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d00a:	78fb      	ldrb	r3, [r7, #3]
 800d00c:	0159      	lsls	r1, r3, #5
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	440b      	add	r3, r1
 800d012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d016:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d01c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d01e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d022:	2b03      	cmp	r3, #3
 800d024:	d10f      	bne.n	800d046 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d026:	78fb      	ldrb	r3, [r7, #3]
 800d028:	015a      	lsls	r2, r3, #5
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	4413      	add	r3, r2
 800d02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	78fa      	ldrb	r2, [r7, #3]
 800d036:	0151      	lsls	r1, r2, #5
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	440a      	add	r2, r1
 800d03c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d044:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d046:	7ffb      	ldrb	r3, [r7, #31]
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3720      	adds	r7, #32
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b08c      	sub	sp, #48	; 0x30
 800d054:	af02      	add	r7, sp, #8
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	4613      	mov	r3, r2
 800d05c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	785b      	ldrb	r3, [r3, #1]
 800d066:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d06c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d076:	2b00      	cmp	r3, #0
 800d078:	d02d      	beq.n	800d0d6 <USB_HC_StartXfer+0x86>
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	791b      	ldrb	r3, [r3, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d129      	bne.n	800d0d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d117      	bne.n	800d0b8 <USB_HC_StartXfer+0x68>
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	79db      	ldrb	r3, [r3, #7]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d003      	beq.n	800d098 <USB_HC_StartXfer+0x48>
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	79db      	ldrb	r3, [r3, #7]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d10f      	bne.n	800d0b8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	015a      	lsls	r2, r3, #5
 800d09c:	6a3b      	ldr	r3, [r7, #32]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	69fa      	ldr	r2, [r7, #28]
 800d0a8:	0151      	lsls	r1, r2, #5
 800d0aa:	6a3a      	ldr	r2, [r7, #32]
 800d0ac:	440a      	add	r2, r1
 800d0ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0b6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d0b8:	79fb      	ldrb	r3, [r7, #7]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10b      	bne.n	800d0d6 <USB_HC_StartXfer+0x86>
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	795b      	ldrb	r3, [r3, #5]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d107      	bne.n	800d0d6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	785b      	ldrb	r3, [r3, #1]
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f000 fa2f 	bl	800d530 <USB_DoPing>
      return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	e0f8      	b.n	800d2c8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d018      	beq.n	800d110 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	8912      	ldrh	r2, [r2, #8]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	68ba      	ldr	r2, [r7, #8]
 800d0ec:	8912      	ldrh	r2, [r2, #8]
 800d0ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0f2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d0f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0f6:	8b7b      	ldrh	r3, [r7, #26]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d90b      	bls.n	800d114 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d0fc:	8b7b      	ldrh	r3, [r7, #26]
 800d0fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	8912      	ldrh	r2, [r2, #8]
 800d106:	fb02 f203 	mul.w	r2, r2, r3
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	611a      	str	r2, [r3, #16]
 800d10e:	e001      	b.n	800d114 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d110:	2301      	movs	r3, #1
 800d112:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	78db      	ldrb	r3, [r3, #3]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d007      	beq.n	800d12c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d11c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	8912      	ldrh	r2, [r2, #8]
 800d122:	fb02 f203 	mul.w	r2, r2, r3
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	611a      	str	r2, [r3, #16]
 800d12a:	e003      	b.n	800d134 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	695a      	ldr	r2, [r3, #20]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d13c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d13e:	04d9      	lsls	r1, r3, #19
 800d140:	4b63      	ldr	r3, [pc, #396]	; (800d2d0 <USB_HC_StartXfer+0x280>)
 800d142:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d144:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	7a9b      	ldrb	r3, [r3, #10]
 800d14a:	075b      	lsls	r3, r3, #29
 800d14c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d150:	69f9      	ldr	r1, [r7, #28]
 800d152:	0148      	lsls	r0, r1, #5
 800d154:	6a39      	ldr	r1, [r7, #32]
 800d156:	4401      	add	r1, r0
 800d158:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d15c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d15e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d009      	beq.n	800d17a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	68d9      	ldr	r1, [r3, #12]
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	015a      	lsls	r2, r3, #5
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	4413      	add	r3, r2
 800d172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d176:	460a      	mov	r2, r1
 800d178:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	2b00      	cmp	r3, #0
 800d188:	bf0c      	ite	eq
 800d18a:	2301      	moveq	r3, #1
 800d18c:	2300      	movne	r3, #0
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	015a      	lsls	r2, r3, #5
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	4413      	add	r3, r2
 800d19a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	69fa      	ldr	r2, [r7, #28]
 800d1a2:	0151      	lsls	r1, r2, #5
 800d1a4:	6a3a      	ldr	r2, [r7, #32]
 800d1a6:	440a      	add	r2, r1
 800d1a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d1b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	7e7b      	ldrb	r3, [r7, #25]
 800d1c2:	075b      	lsls	r3, r3, #29
 800d1c4:	69f9      	ldr	r1, [r7, #28]
 800d1c6:	0148      	lsls	r0, r1, #5
 800d1c8:	6a39      	ldr	r1, [r7, #32]
 800d1ca:	4401      	add	r1, r0
 800d1cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d1ea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	78db      	ldrb	r3, [r3, #3]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d004      	beq.n	800d1fe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1fa:	613b      	str	r3, [r7, #16]
 800d1fc:	e003      	b.n	800d206 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d204:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d20c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	015a      	lsls	r2, r3, #5
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	4413      	add	r3, r2
 800d216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d21a:	461a      	mov	r2, r3
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d220:	79fb      	ldrb	r3, [r7, #7]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d001      	beq.n	800d22a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	e04e      	b.n	800d2c8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	78db      	ldrb	r3, [r3, #3]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d149      	bne.n	800d2c6 <USB_HC_StartXfer+0x276>
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d045      	beq.n	800d2c6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	79db      	ldrb	r3, [r3, #7]
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d830      	bhi.n	800d2a4 <USB_HC_StartXfer+0x254>
 800d242:	a201      	add	r2, pc, #4	; (adr r2, 800d248 <USB_HC_StartXfer+0x1f8>)
 800d244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d248:	0800d259 	.word	0x0800d259
 800d24c:	0800d27d 	.word	0x0800d27d
 800d250:	0800d259 	.word	0x0800d259
 800d254:	0800d27d 	.word	0x0800d27d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	695b      	ldr	r3, [r3, #20]
 800d25c:	3303      	adds	r3, #3
 800d25e:	089b      	lsrs	r3, r3, #2
 800d260:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d262:	8afa      	ldrh	r2, [r7, #22]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d268:	b29b      	uxth	r3, r3
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d91c      	bls.n	800d2a8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	699b      	ldr	r3, [r3, #24]
 800d272:	f043 0220 	orr.w	r2, r3, #32
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	619a      	str	r2, [r3, #24]
        }
        break;
 800d27a:	e015      	b.n	800d2a8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	695b      	ldr	r3, [r3, #20]
 800d280:	3303      	adds	r3, #3
 800d282:	089b      	lsrs	r3, r3, #2
 800d284:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d286:	8afa      	ldrh	r2, [r7, #22]
 800d288:	6a3b      	ldr	r3, [r7, #32]
 800d28a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	b29b      	uxth	r3, r3
 800d292:	429a      	cmp	r2, r3
 800d294:	d90a      	bls.n	800d2ac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	619a      	str	r2, [r3, #24]
        }
        break;
 800d2a2:	e003      	b.n	800d2ac <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d2a4:	bf00      	nop
 800d2a6:	e002      	b.n	800d2ae <USB_HC_StartXfer+0x25e>
        break;
 800d2a8:	bf00      	nop
 800d2aa:	e000      	b.n	800d2ae <USB_HC_StartXfer+0x25e>
        break;
 800d2ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	68d9      	ldr	r1, [r3, #12]
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	785a      	ldrb	r2, [r3, #1]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	2000      	movs	r0, #0
 800d2be:	9000      	str	r0, [sp, #0]
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f7ff fb8d 	bl	800c9e0 <USB_WritePacket>
  }

  return HAL_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3728      	adds	r7, #40	; 0x28
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	1ff80000 	.word	0x1ff80000

0800d2d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2e6:	695b      	ldr	r3, [r3, #20]
 800d2e8:	b29b      	uxth	r3, r3
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3714      	adds	r7, #20
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d2f6:	b480      	push	{r7}
 800d2f8:	b089      	sub	sp, #36	; 0x24
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	460b      	mov	r3, r1
 800d300:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d306:	78fb      	ldrb	r3, [r7, #3]
 800d308:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d30a:	2300      	movs	r3, #0
 800d30c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	015a      	lsls	r2, r3, #5
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	4413      	add	r3, r2
 800d316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	0c9b      	lsrs	r3, r3, #18
 800d31e:	f003 0303 	and.w	r3, r3, #3
 800d322:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	015a      	lsls	r2, r3, #5
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	4413      	add	r3, r2
 800d32c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	0fdb      	lsrs	r3, r3, #31
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	f003 0320 	and.w	r3, r3, #32
 800d342:	2b20      	cmp	r3, #32
 800d344:	d104      	bne.n	800d350 <USB_HC_Halt+0x5a>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d101      	bne.n	800d350 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d34c:	2300      	movs	r3, #0
 800d34e:	e0e8      	b.n	800d522 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d002      	beq.n	800d35c <USB_HC_Halt+0x66>
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d173      	bne.n	800d444 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	4413      	add	r3, r2
 800d364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	697a      	ldr	r2, [r7, #20]
 800d36c:	0151      	lsls	r1, r2, #5
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	440a      	add	r2, r1
 800d372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d37a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	f003 0320 	and.w	r3, r3, #32
 800d384:	2b00      	cmp	r3, #0
 800d386:	f040 80cb 	bne.w	800d520 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d392:	2b00      	cmp	r3, #0
 800d394:	d143      	bne.n	800d41e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	015a      	lsls	r2, r3, #5
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	4413      	add	r3, r2
 800d39e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	697a      	ldr	r2, [r7, #20]
 800d3a6:	0151      	lsls	r1, r2, #5
 800d3a8:	69ba      	ldr	r2, [r7, #24]
 800d3aa:	440a      	add	r2, r1
 800d3ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	015a      	lsls	r2, r3, #5
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	4413      	add	r3, r2
 800d3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	697a      	ldr	r2, [r7, #20]
 800d3c6:	0151      	lsls	r1, r2, #5
 800d3c8:	69ba      	ldr	r2, [r7, #24]
 800d3ca:	440a      	add	r2, r1
 800d3cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	0151      	lsls	r1, r2, #5
 800d3e8:	69ba      	ldr	r2, [r7, #24]
 800d3ea:	440a      	add	r2, r1
 800d3ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d3f4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	61fb      	str	r3, [r7, #28]
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d402:	d81d      	bhi.n	800d440 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	015a      	lsls	r2, r3, #5
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	4413      	add	r3, r2
 800d40c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d41a:	d0ec      	beq.n	800d3f6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d41c:	e080      	b.n	800d520 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	015a      	lsls	r2, r3, #5
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	4413      	add	r3, r2
 800d426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	697a      	ldr	r2, [r7, #20]
 800d42e:	0151      	lsls	r1, r2, #5
 800d430:	69ba      	ldr	r2, [r7, #24]
 800d432:	440a      	add	r2, r1
 800d434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d43c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d43e:	e06f      	b.n	800d520 <USB_HC_Halt+0x22a>
            break;
 800d440:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d442:	e06d      	b.n	800d520 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	015a      	lsls	r2, r3, #5
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	4413      	add	r3, r2
 800d44c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	0151      	lsls	r1, r2, #5
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	440a      	add	r2, r1
 800d45a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d45e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d462:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d470:	2b00      	cmp	r3, #0
 800d472:	d143      	bne.n	800d4fc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	015a      	lsls	r2, r3, #5
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	4413      	add	r3, r2
 800d47c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	0151      	lsls	r1, r2, #5
 800d486:	69ba      	ldr	r2, [r7, #24]
 800d488:	440a      	add	r2, r1
 800d48a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d48e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d492:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	015a      	lsls	r2, r3, #5
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	4413      	add	r3, r2
 800d49c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	697a      	ldr	r2, [r7, #20]
 800d4a4:	0151      	lsls	r1, r2, #5
 800d4a6:	69ba      	ldr	r2, [r7, #24]
 800d4a8:	440a      	add	r2, r1
 800d4aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	015a      	lsls	r2, r3, #5
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	0151      	lsls	r1, r2, #5
 800d4c6:	69ba      	ldr	r2, [r7, #24]
 800d4c8:	440a      	add	r2, r1
 800d4ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4d2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	61fb      	str	r3, [r7, #28]
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4e0:	d81d      	bhi.n	800d51e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	015a      	lsls	r2, r3, #5
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4f8:	d0ec      	beq.n	800d4d4 <USB_HC_Halt+0x1de>
 800d4fa:	e011      	b.n	800d520 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	015a      	lsls	r2, r3, #5
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	4413      	add	r3, r2
 800d504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	0151      	lsls	r1, r2, #5
 800d50e:	69ba      	ldr	r2, [r7, #24]
 800d510:	440a      	add	r2, r1
 800d512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d516:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d51a:	6013      	str	r3, [r2, #0]
 800d51c:	e000      	b.n	800d520 <USB_HC_Halt+0x22a>
          break;
 800d51e:	bf00      	nop
    }
  }

  return HAL_OK;
 800d520:	2300      	movs	r3, #0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3724      	adds	r7, #36	; 0x24
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
	...

0800d530 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d530:	b480      	push	{r7}
 800d532:	b087      	sub	sp, #28
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	460b      	mov	r3, r1
 800d53a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d544:	2301      	movs	r3, #1
 800d546:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	04da      	lsls	r2, r3, #19
 800d54c:	4b15      	ldr	r3, [pc, #84]	; (800d5a4 <USB_DoPing+0x74>)
 800d54e:	4013      	ands	r3, r2
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	0151      	lsls	r1, r2, #5
 800d554:	697a      	ldr	r2, [r7, #20]
 800d556:	440a      	add	r2, r1
 800d558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d55c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d560:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	015a      	lsls	r2, r3, #5
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	4413      	add	r3, r2
 800d56a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d578:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d580:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	015a      	lsls	r2, r3, #5
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	4413      	add	r3, r2
 800d58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d58e:	461a      	mov	r2, r3
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	371c      	adds	r7, #28
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	1ff80000 	.word	0x1ff80000

0800d5a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f7ff f98e 	bl	800c8da <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d5be:	2110      	movs	r1, #16
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff f9c5 	bl	800c950 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff f9e8 	bl	800c99c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	613b      	str	r3, [r7, #16]
 800d5d0:	e01f      	b.n	800d612 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	015a      	lsls	r2, r3, #5
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	4413      	add	r3, r2
 800d5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	015a      	lsls	r2, r3, #5
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	4413      	add	r3, r2
 800d602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d606:	461a      	mov	r2, r3
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	3301      	adds	r3, #1
 800d610:	613b      	str	r3, [r7, #16]
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	2b0f      	cmp	r3, #15
 800d616:	d9dc      	bls.n	800d5d2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d618:	2300      	movs	r3, #0
 800d61a:	613b      	str	r3, [r7, #16]
 800d61c:	e034      	b.n	800d688 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	015a      	lsls	r2, r3, #5
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	4413      	add	r3, r2
 800d626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d634:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d63c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d644:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	015a      	lsls	r2, r3, #5
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	4413      	add	r3, r2
 800d64e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d652:	461a      	mov	r2, r3
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	3301      	adds	r3, #1
 800d65c:	617b      	str	r3, [r7, #20]
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d664:	d80c      	bhi.n	800d680 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	015a      	lsls	r2, r3, #5
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	4413      	add	r3, r2
 800d66e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d67c:	d0ec      	beq.n	800d658 <USB_StopHost+0xb0>
 800d67e:	e000      	b.n	800d682 <USB_StopHost+0xda>
        break;
 800d680:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	3301      	adds	r3, #1
 800d686:	613b      	str	r3, [r7, #16]
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	2b0f      	cmp	r3, #15
 800d68c:	d9c7      	bls.n	800d61e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d694:	461a      	mov	r2, r3
 800d696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d69a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7ff f907 	bl	800c8b8 <USB_EnableGlobalInt>

  return HAL_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d6b8:	4904      	ldr	r1, [pc, #16]	; (800d6cc <MX_FATFS_Init+0x18>)
 800d6ba:	4805      	ldr	r0, [pc, #20]	; (800d6d0 <MX_FATFS_Init+0x1c>)
 800d6bc:	f002 fbe8 	bl	800fe90 <FATFS_LinkDriver>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	4b03      	ldr	r3, [pc, #12]	; (800d6d4 <MX_FATFS_Init+0x20>)
 800d6c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d6c8:	bf00      	nop
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	20008d0c 	.word	0x20008d0c
 800d6d0:	08012da0 	.word	0x08012da0
 800d6d4:	20008d08 	.word	0x20008d08

0800d6d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d6e2:	f000 f87b 	bl	800d7dc <BSP_SD_IsDetected>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d001      	beq.n	800d6f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d6ec:	2302      	movs	r3, #2
 800d6ee:	e012      	b.n	800d716 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d6f0:	480b      	ldr	r0, [pc, #44]	; (800d720 <BSP_SD_Init+0x48>)
 800d6f2:	f7fb fb51 	bl	8008d98 <HAL_SD_Init>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d6fa:	79fb      	ldrb	r3, [r7, #7]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d109      	bne.n	800d714 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d704:	4806      	ldr	r0, [pc, #24]	; (800d720 <BSP_SD_Init+0x48>)
 800d706:	f7fb ff9f 	bl	8009648 <HAL_SD_ConfigWideBusOperation>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d710:	2301      	movs	r3, #1
 800d712:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d714:	79fb      	ldrb	r3, [r7, #7]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	20008748 	.word	0x20008748

0800d724 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d730:	2300      	movs	r3, #0
 800d732:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	68ba      	ldr	r2, [r7, #8]
 800d738:	68f9      	ldr	r1, [r7, #12]
 800d73a:	4806      	ldr	r0, [pc, #24]	; (800d754 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d73c:	f7fb fbe2 	bl	8008f04 <HAL_SD_ReadBlocks_DMA>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d746:	2301      	movs	r3, #1
 800d748:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	20008748 	.word	0x20008748

0800d758 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d764:	2300      	movs	r3, #0
 800d766:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	68f9      	ldr	r1, [r7, #12]
 800d76e:	4806      	ldr	r0, [pc, #24]	; (800d788 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d770:	f7fb fcaa 	bl	80090c8 <HAL_SD_WriteBlocks_DMA>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d77a:	2301      	movs	r3, #1
 800d77c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3718      	adds	r7, #24
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	20008748 	.word	0x20008748

0800d78c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d790:	4805      	ldr	r0, [pc, #20]	; (800d7a8 <BSP_SD_GetCardState+0x1c>)
 800d792:	f7fb fff3 	bl	800977c <HAL_SD_GetCardState>
 800d796:	4603      	mov	r3, r0
 800d798:	2b04      	cmp	r3, #4
 800d79a:	bf14      	ite	ne
 800d79c:	2301      	movne	r3, #1
 800d79e:	2300      	moveq	r3, #0
 800d7a0:	b2db      	uxtb	r3, r3
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20008748 	.word	0x20008748

0800d7ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d7b4:	6879      	ldr	r1, [r7, #4]
 800d7b6:	4803      	ldr	r0, [pc, #12]	; (800d7c4 <BSP_SD_GetCardInfo+0x18>)
 800d7b8:	f7fb ff1a 	bl	80095f0 <HAL_SD_GetCardInfo>
}
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	20008748 	.word	0x20008748

0800d7c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d7d0:	f000 f9b2 	bl	800db38 <BSP_SD_ReadCpltCallback>
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d7e6:	f000 f80b 	bl	800d800 <BSP_PlatformIsDetected>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d101      	bne.n	800d7f4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d7f4:	79fb      	ldrb	r3, [r7, #7]
 800d7f6:	b2db      	uxtb	r3, r3
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d806:	2301      	movs	r3, #1
 800d808:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d80a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d80e:	4806      	ldr	r0, [pc, #24]	; (800d828 <BSP_PlatformIsDetected+0x28>)
 800d810:	f7f6 fff0 	bl	80047f4 <HAL_GPIO_ReadPin>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d81a:	2300      	movs	r3, #0
 800d81c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d81e:	79fb      	ldrb	r3, [r7, #7]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	40020800 	.word	0x40020800

0800d82c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d834:	f002 fb78 	bl	800ff28 <osKernelSysTick>
 800d838:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d83a:	e006      	b.n	800d84a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d83c:	f7ff ffa6 	bl	800d78c <BSP_SD_GetCardState>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d101      	bne.n	800d84a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d846:	2300      	movs	r3, #0
 800d848:	e009      	b.n	800d85e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d84a:	f002 fb6d 	bl	800ff28 <osKernelSysTick>
 800d84e:	4602      	mov	r2, r0
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	429a      	cmp	r2, r3
 800d858:	d8f0      	bhi.n	800d83c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d85a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
	...

0800d868 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	4603      	mov	r3, r0
 800d870:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d872:	4b0b      	ldr	r3, [pc, #44]	; (800d8a0 <SD_CheckStatus+0x38>)
 800d874:	2201      	movs	r2, #1
 800d876:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d878:	f7ff ff88 	bl	800d78c <BSP_SD_GetCardState>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d107      	bne.n	800d892 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d882:	4b07      	ldr	r3, [pc, #28]	; (800d8a0 <SD_CheckStatus+0x38>)
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f023 0301 	bic.w	r3, r3, #1
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	4b04      	ldr	r3, [pc, #16]	; (800d8a0 <SD_CheckStatus+0x38>)
 800d890:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d892:	4b03      	ldr	r3, [pc, #12]	; (800d8a0 <SD_CheckStatus+0x38>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	b2db      	uxtb	r3, r3
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	20000009 	.word	0x20000009

0800d8a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d8a4:	b590      	push	{r4, r7, lr}
 800d8a6:	b087      	sub	sp, #28
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d8ae:	4b20      	ldr	r3, [pc, #128]	; (800d930 <SD_initialize+0x8c>)
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d8b4:	f002 fb2c 	bl	800ff10 <osKernelRunning>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d030      	beq.n	800d920 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d8be:	f7ff ff0b 	bl	800d6d8 <BSP_SD_Init>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d107      	bne.n	800d8d8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d8c8:	79fb      	ldrb	r3, [r7, #7]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff ffcc 	bl	800d868 <SD_CheckStatus>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	4b16      	ldr	r3, [pc, #88]	; (800d930 <SD_initialize+0x8c>)
 800d8d6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d8d8:	4b15      	ldr	r3, [pc, #84]	; (800d930 <SD_initialize+0x8c>)
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d01e      	beq.n	800d920 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d8e2:	4b14      	ldr	r3, [pc, #80]	; (800d934 <SD_initialize+0x90>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d10e      	bne.n	800d908 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d8ea:	4b13      	ldr	r3, [pc, #76]	; (800d938 <SD_initialize+0x94>)
 800d8ec:	f107 0408 	add.w	r4, r7, #8
 800d8f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d8f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d8f6:	f107 0308 	add.w	r3, r7, #8
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f002 fb83 	bl	8010008 <osMessageCreate>
 800d902:	4603      	mov	r3, r0
 800d904:	4a0b      	ldr	r2, [pc, #44]	; (800d934 <SD_initialize+0x90>)
 800d906:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d908:	4b0a      	ldr	r3, [pc, #40]	; (800d934 <SD_initialize+0x90>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d107      	bne.n	800d920 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d910:	4b07      	ldr	r3, [pc, #28]	; (800d930 <SD_initialize+0x8c>)
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	b2db      	uxtb	r3, r3
 800d916:	f043 0301 	orr.w	r3, r3, #1
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	4b04      	ldr	r3, [pc, #16]	; (800d930 <SD_initialize+0x8c>)
 800d91e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d920:	4b03      	ldr	r3, [pc, #12]	; (800d930 <SD_initialize+0x8c>)
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	b2db      	uxtb	r3, r3
}
 800d926:	4618      	mov	r0, r3
 800d928:	371c      	adds	r7, #28
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd90      	pop	{r4, r7, pc}
 800d92e:	bf00      	nop
 800d930:	20000009 	.word	0x20000009
 800d934:	2000031c 	.word	0x2000031c
 800d938:	08012d34 	.word	0x08012d34

0800d93c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	4618      	mov	r0, r3
 800d94a:	f7ff ff8d 	bl	800d868 <SD_CheckStatus>
 800d94e:	4603      	mov	r3, r0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08a      	sub	sp, #40	; 0x28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60b9      	str	r1, [r7, #8]
 800d960:	607a      	str	r2, [r7, #4]
 800d962:	603b      	str	r3, [r7, #0]
 800d964:	4603      	mov	r3, r0
 800d966:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d968:	2301      	movs	r3, #1
 800d96a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d96e:	f247 5030 	movw	r0, #30000	; 0x7530
 800d972:	f7ff ff5b 	bl	800d82c <SD_CheckStatusWithTimeout>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	da02      	bge.n	800d982 <SD_read+0x2a>
  {
    return res;
 800d97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d980:	e032      	b.n	800d9e8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d982:	683a      	ldr	r2, [r7, #0]
 800d984:	6879      	ldr	r1, [r7, #4]
 800d986:	68b8      	ldr	r0, [r7, #8]
 800d988:	f7ff fecc 	bl	800d724 <BSP_SD_ReadBlocks_DMA>
 800d98c:	4603      	mov	r3, r0
 800d98e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d996:	2b00      	cmp	r3, #0
 800d998:	d124      	bne.n	800d9e4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d99a:	4b15      	ldr	r3, [pc, #84]	; (800d9f0 <SD_read+0x98>)
 800d99c:	6819      	ldr	r1, [r3, #0]
 800d99e:	f107 0314 	add.w	r3, r7, #20
 800d9a2:	f247 5230 	movw	r2, #30000	; 0x7530
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f002 fb96 	bl	80100d8 <osMessageGet>

    if (event.status == osEventMessage)
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	2b10      	cmp	r3, #16
 800d9b0:	d118      	bne.n	800d9e4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d115      	bne.n	800d9e4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d9b8:	f002 fab6 	bl	800ff28 <osKernelSysTick>
 800d9bc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d9be:	e008      	b.n	800d9d2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d9c0:	f7ff fee4 	bl	800d78c <BSP_SD_GetCardState>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d103      	bne.n	800d9d2 <SD_read+0x7a>
              {
                res = RES_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d9d0:	e008      	b.n	800d9e4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d9d2:	f002 faa9 	bl	800ff28 <osKernelSysTick>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	6a3b      	ldr	r3, [r7, #32]
 800d9da:	1ad3      	subs	r3, r2, r3
 800d9dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d9ed      	bls.n	800d9c0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3728      	adds	r7, #40	; 0x28
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	2000031c 	.word	0x2000031c

0800d9f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b08a      	sub	sp, #40	; 0x28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60b9      	str	r1, [r7, #8]
 800d9fc:	607a      	str	r2, [r7, #4]
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da04:	2301      	movs	r3, #1
 800da06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800da0a:	f247 5030 	movw	r0, #30000	; 0x7530
 800da0e:	f7ff ff0d 	bl	800d82c <SD_CheckStatusWithTimeout>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	da02      	bge.n	800da1e <SD_write+0x2a>
  {
    return res;
 800da18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da1c:	e02e      	b.n	800da7c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	6879      	ldr	r1, [r7, #4]
 800da22:	68b8      	ldr	r0, [r7, #8]
 800da24:	f7ff fe98 	bl	800d758 <BSP_SD_WriteBlocks_DMA>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d124      	bne.n	800da78 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800da2e:	4b15      	ldr	r3, [pc, #84]	; (800da84 <SD_write+0x90>)
 800da30:	6819      	ldr	r1, [r3, #0]
 800da32:	f107 0314 	add.w	r3, r7, #20
 800da36:	f247 5230 	movw	r2, #30000	; 0x7530
 800da3a:	4618      	mov	r0, r3
 800da3c:	f002 fb4c 	bl	80100d8 <osMessageGet>

    if (event.status == osEventMessage)
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	2b10      	cmp	r3, #16
 800da44:	d118      	bne.n	800da78 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d115      	bne.n	800da78 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800da4c:	f002 fa6c 	bl	800ff28 <osKernelSysTick>
 800da50:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800da52:	e008      	b.n	800da66 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800da54:	f7ff fe9a 	bl	800d78c <BSP_SD_GetCardState>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d103      	bne.n	800da66 <SD_write+0x72>
          {
            res = RES_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800da64:	e008      	b.n	800da78 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800da66:	f002 fa5f 	bl	800ff28 <osKernelSysTick>
 800da6a:	4602      	mov	r2, r0
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	1ad3      	subs	r3, r2, r3
 800da70:	f247 522f 	movw	r2, #29999	; 0x752f
 800da74:	4293      	cmp	r3, r2
 800da76:	d9ed      	bls.n	800da54 <SD_write+0x60>
    }

  }
#endif

  return res;
 800da78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3728      	adds	r7, #40	; 0x28
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	2000031c 	.word	0x2000031c

0800da88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08c      	sub	sp, #48	; 0x30
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	4603      	mov	r3, r0
 800da90:	603a      	str	r2, [r7, #0]
 800da92:	71fb      	strb	r3, [r7, #7]
 800da94:	460b      	mov	r3, r1
 800da96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800da98:	2301      	movs	r3, #1
 800da9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800da9e:	4b25      	ldr	r3, [pc, #148]	; (800db34 <SD_ioctl+0xac>)
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	f003 0301 	and.w	r3, r3, #1
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d001      	beq.n	800dab0 <SD_ioctl+0x28>
 800daac:	2303      	movs	r3, #3
 800daae:	e03c      	b.n	800db2a <SD_ioctl+0xa2>

  switch (cmd)
 800dab0:	79bb      	ldrb	r3, [r7, #6]
 800dab2:	2b03      	cmp	r3, #3
 800dab4:	d834      	bhi.n	800db20 <SD_ioctl+0x98>
 800dab6:	a201      	add	r2, pc, #4	; (adr r2, 800dabc <SD_ioctl+0x34>)
 800dab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dabc:	0800dacd 	.word	0x0800dacd
 800dac0:	0800dad5 	.word	0x0800dad5
 800dac4:	0800daed 	.word	0x0800daed
 800dac8:	0800db07 	.word	0x0800db07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dad2:	e028      	b.n	800db26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dad4:	f107 030c 	add.w	r3, r7, #12
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff fe67 	bl	800d7ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800daea:	e01c      	b.n	800db26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800daec:	f107 030c 	add.w	r3, r7, #12
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff fe5b 	bl	800d7ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db04:	e00f      	b.n	800db26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800db06:	f107 030c 	add.w	r3, r7, #12
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7ff fe4e 	bl	800d7ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800db10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db12:	0a5a      	lsrs	r2, r3, #9
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800db18:	2300      	movs	r3, #0
 800db1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db1e:	e002      	b.n	800db26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800db20:	2304      	movs	r3, #4
 800db22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800db26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3730      	adds	r7, #48	; 0x30
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	20000009 	.word	0x20000009

0800db38 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800db3c:	4b04      	ldr	r3, [pc, #16]	; (800db50 <BSP_SD_ReadCpltCallback+0x18>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2200      	movs	r2, #0
 800db42:	2101      	movs	r1, #1
 800db44:	4618      	mov	r0, r3
 800db46:	f002 fa87 	bl	8010058 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800db4a:	bf00      	nop
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	2000031c 	.word	0x2000031c

0800db54 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800db54:	b590      	push	{r4, r7, lr}
 800db56:	b089      	sub	sp, #36	; 0x24
 800db58:	af04      	add	r7, sp, #16
 800db5a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800db5c:	2301      	movs	r3, #1
 800db5e:	2202      	movs	r2, #2
 800db60:	2102      	movs	r1, #2
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fcb8 	bl	800e4d8 <USBH_FindInterface>
 800db68:	4603      	mov	r3, r0
 800db6a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800db6c:	7bfb      	ldrb	r3, [r7, #15]
 800db6e:	2bff      	cmp	r3, #255	; 0xff
 800db70:	d002      	beq.n	800db78 <USBH_CDC_InterfaceInit+0x24>
 800db72:	7bfb      	ldrb	r3, [r7, #15]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d901      	bls.n	800db7c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800db78:	2302      	movs	r3, #2
 800db7a:	e13d      	b.n	800ddf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	4619      	mov	r1, r3
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 fc8d 	bl	800e4a0 <USBH_SelectInterface>
 800db86:	4603      	mov	r3, r0
 800db88:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800db8a:	7bbb      	ldrb	r3, [r7, #14]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800db90:	2302      	movs	r3, #2
 800db92:	e131      	b.n	800ddf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800db9a:	2050      	movs	r0, #80	; 0x50
 800db9c:	f004 ffbc 	bl	8012b18 <malloc>
 800dba0:	4603      	mov	r3, r0
 800dba2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbaa:	69db      	ldr	r3, [r3, #28]
 800dbac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	e11f      	b.n	800ddf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800dbb8:	2250      	movs	r2, #80	; 0x50
 800dbba:	2100      	movs	r1, #0
 800dbbc:	68b8      	ldr	r0, [r7, #8]
 800dbbe:	f004 ffc9 	bl	8012b54 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dbc2:	7bfb      	ldrb	r3, [r7, #15]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	211a      	movs	r1, #26
 800dbc8:	fb01 f303 	mul.w	r3, r1, r3
 800dbcc:	4413      	add	r3, r2
 800dbce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b25b      	sxtb	r3, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	da15      	bge.n	800dc06 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dbda:	7bfb      	ldrb	r3, [r7, #15]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	211a      	movs	r1, #26
 800dbe0:	fb01 f303 	mul.w	r3, r1, r3
 800dbe4:	4413      	add	r3, r2
 800dbe6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dbea:	781a      	ldrb	r2, [r3, #0]
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dbf0:	7bfb      	ldrb	r3, [r7, #15]
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	211a      	movs	r1, #26
 800dbf6:	fb01 f303 	mul.w	r3, r1, r3
 800dbfa:	4413      	add	r3, r2
 800dbfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dc00:	881a      	ldrh	r2, [r3, #0]
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	785b      	ldrb	r3, [r3, #1]
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f002 f890 	bl	800fd32 <USBH_AllocPipe>
 800dc12:	4603      	mov	r3, r0
 800dc14:	461a      	mov	r2, r3
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	7819      	ldrb	r1, [r3, #0]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	7858      	ldrb	r0, [r3, #1]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	8952      	ldrh	r2, [r2, #10]
 800dc32:	9202      	str	r2, [sp, #8]
 800dc34:	2203      	movs	r2, #3
 800dc36:	9201      	str	r2, [sp, #4]
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	4623      	mov	r3, r4
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f002 f848 	bl	800fcd4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f004 feb5 	bl	80129bc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dc52:	2300      	movs	r3, #0
 800dc54:	2200      	movs	r2, #0
 800dc56:	210a      	movs	r1, #10
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 fc3d 	bl	800e4d8 <USBH_FindInterface>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
 800dc64:	2bff      	cmp	r3, #255	; 0xff
 800dc66:	d002      	beq.n	800dc6e <USBH_CDC_InterfaceInit+0x11a>
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d901      	bls.n	800dc72 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dc6e:	2302      	movs	r3, #2
 800dc70:	e0c2      	b.n	800ddf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dc72:	7bfb      	ldrb	r3, [r7, #15]
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	211a      	movs	r1, #26
 800dc78:	fb01 f303 	mul.w	r3, r1, r3
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	b25b      	sxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	da16      	bge.n	800dcb8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dc8a:	7bfb      	ldrb	r3, [r7, #15]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	211a      	movs	r1, #26
 800dc90:	fb01 f303 	mul.w	r3, r1, r3
 800dc94:	4413      	add	r3, r2
 800dc96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dca0:	7bfb      	ldrb	r3, [r7, #15]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	211a      	movs	r1, #26
 800dca6:	fb01 f303 	mul.w	r3, r1, r3
 800dcaa:	4413      	add	r3, r2
 800dcac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dcb0:	881a      	ldrh	r2, [r3, #0]
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	835a      	strh	r2, [r3, #26]
 800dcb6:	e015      	b.n	800dce4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	211a      	movs	r1, #26
 800dcbe:	fb01 f303 	mul.w	r3, r1, r3
 800dcc2:	4413      	add	r3, r2
 800dcc4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dcc8:	781a      	ldrb	r2, [r3, #0]
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dcce:	7bfb      	ldrb	r3, [r7, #15]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	211a      	movs	r1, #26
 800dcd4:	fb01 f303 	mul.w	r3, r1, r3
 800dcd8:	4413      	add	r3, r2
 800dcda:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dcde:	881a      	ldrh	r2, [r3, #0]
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	211a      	movs	r1, #26
 800dcea:	fb01 f303 	mul.w	r3, r1, r3
 800dcee:	4413      	add	r3, r2
 800dcf0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	b25b      	sxtb	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	da16      	bge.n	800dd2a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	211a      	movs	r1, #26
 800dd02:	fb01 f303 	mul.w	r3, r1, r3
 800dd06:	4413      	add	r3, r2
 800dd08:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dd0c:	781a      	ldrb	r2, [r3, #0]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	211a      	movs	r1, #26
 800dd18:	fb01 f303 	mul.w	r3, r1, r3
 800dd1c:	4413      	add	r3, r2
 800dd1e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dd22:	881a      	ldrh	r2, [r3, #0]
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	835a      	strh	r2, [r3, #26]
 800dd28:	e015      	b.n	800dd56 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dd2a:	7bfb      	ldrb	r3, [r7, #15]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	211a      	movs	r1, #26
 800dd30:	fb01 f303 	mul.w	r3, r1, r3
 800dd34:	4413      	add	r3, r2
 800dd36:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dd3a:	781a      	ldrb	r2, [r3, #0]
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dd40:	7bfb      	ldrb	r3, [r7, #15]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	211a      	movs	r1, #26
 800dd46:	fb01 f303 	mul.w	r3, r1, r3
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dd50:	881a      	ldrh	r2, [r3, #0]
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	7b9b      	ldrb	r3, [r3, #14]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f001 ffe8 	bl	800fd32 <USBH_AllocPipe>
 800dd62:	4603      	mov	r3, r0
 800dd64:	461a      	mov	r2, r3
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	7bdb      	ldrb	r3, [r3, #15]
 800dd6e:	4619      	mov	r1, r3
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f001 ffde 	bl	800fd32 <USBH_AllocPipe>
 800dd76:	4603      	mov	r3, r0
 800dd78:	461a      	mov	r2, r3
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	7b59      	ldrb	r1, [r3, #13]
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	7b98      	ldrb	r0, [r3, #14]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd92:	68ba      	ldr	r2, [r7, #8]
 800dd94:	8b12      	ldrh	r2, [r2, #24]
 800dd96:	9202      	str	r2, [sp, #8]
 800dd98:	2202      	movs	r2, #2
 800dd9a:	9201      	str	r2, [sp, #4]
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	4623      	mov	r3, r4
 800dda0:	4602      	mov	r2, r0
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f001 ff96 	bl	800fcd4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	7b19      	ldrb	r1, [r3, #12]
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	7bd8      	ldrb	r0, [r3, #15]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	8b52      	ldrh	r2, [r2, #26]
 800ddc0:	9202      	str	r2, [sp, #8]
 800ddc2:	2202      	movs	r2, #2
 800ddc4:	9201      	str	r2, [sp, #4]
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	4623      	mov	r3, r4
 800ddca:	4602      	mov	r2, r0
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f001 ff81 	bl	800fcd4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	7b5b      	ldrb	r3, [r3, #13]
 800ddde:	2200      	movs	r2, #0
 800dde0:	4619      	mov	r1, r3
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f004 fdea 	bl	80129bc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	7b1b      	ldrb	r3, [r3, #12]
 800ddec:	2200      	movs	r2, #0
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f004 fde3 	bl	80129bc <USBH_LL_SetToggle>

  return USBH_OK;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3714      	adds	r7, #20
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd90      	pop	{r4, r7, pc}

0800de00 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de0e:	69db      	ldr	r3, [r3, #28]
 800de10:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00e      	beq.n	800de38 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	4619      	mov	r1, r3
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f001 ff76 	bl	800fd12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	4619      	mov	r1, r3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f001 ffa1 	bl	800fd74 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	7b1b      	ldrb	r3, [r3, #12]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00e      	beq.n	800de5e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	7b1b      	ldrb	r3, [r3, #12]
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f001 ff63 	bl	800fd12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	7b1b      	ldrb	r3, [r3, #12]
 800de50:	4619      	mov	r1, r3
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f001 ff8e 	bl	800fd74 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2200      	movs	r2, #0
 800de5c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	7b5b      	ldrb	r3, [r3, #13]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00e      	beq.n	800de84 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	7b5b      	ldrb	r3, [r3, #13]
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f001 ff50 	bl	800fd12 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	7b5b      	ldrb	r3, [r3, #13]
 800de76:	4619      	mov	r1, r3
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f001 ff7b 	bl	800fd74 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2200      	movs	r2, #0
 800de82:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de8a:	69db      	ldr	r3, [r3, #28]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00b      	beq.n	800dea8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de96:	69db      	ldr	r3, [r3, #28]
 800de98:	4618      	mov	r0, r3
 800de9a:	f004 fe45 	bl	8012b28 <free>
    phost->pActiveClass->pData = 0U;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dea4:	2200      	movs	r2, #0
 800dea6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b084      	sub	sp, #16
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dec0:	69db      	ldr	r3, [r3, #28]
 800dec2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3340      	adds	r3, #64	; 0x40
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f8b1 	bl	800e032 <GetLineCoding>
 800ded0:	4603      	mov	r3, r0
 800ded2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ded4:	7afb      	ldrb	r3, [r7, #11]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d105      	bne.n	800dee6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dee0:	2102      	movs	r1, #2
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dee6:	7afb      	ldrb	r3, [r7, #11]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800def8:	2301      	movs	r3, #1
 800defa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800defc:	2300      	movs	r3, #0
 800defe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800df10:	2b04      	cmp	r3, #4
 800df12:	d877      	bhi.n	800e004 <USBH_CDC_Process+0x114>
 800df14:	a201      	add	r2, pc, #4	; (adr r2, 800df1c <USBH_CDC_Process+0x2c>)
 800df16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df1a:	bf00      	nop
 800df1c:	0800df31 	.word	0x0800df31
 800df20:	0800df37 	.word	0x0800df37
 800df24:	0800df67 	.word	0x0800df67
 800df28:	0800dfdb 	.word	0x0800dfdb
 800df2c:	0800dfe9 	.word	0x0800dfe9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800df30:	2300      	movs	r3, #0
 800df32:	73fb      	strb	r3, [r7, #15]
      break;
 800df34:	e06d      	b.n	800e012 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df3a:	4619      	mov	r1, r3
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 f897 	bl	800e070 <SetLineCoding>
 800df42:	4603      	mov	r3, r0
 800df44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800df46:	7bbb      	ldrb	r3, [r7, #14]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d104      	bne.n	800df56 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2202      	movs	r2, #2
 800df50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800df54:	e058      	b.n	800e008 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d055      	beq.n	800e008 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2204      	movs	r2, #4
 800df60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800df64:	e050      	b.n	800e008 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	3340      	adds	r3, #64	; 0x40
 800df6a:	4619      	mov	r1, r3
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 f860 	bl	800e032 <GetLineCoding>
 800df72:	4603      	mov	r3, r0
 800df74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800df76:	7bbb      	ldrb	r3, [r7, #14]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d126      	bne.n	800dfca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df8e:	791b      	ldrb	r3, [r3, #4]
 800df90:	429a      	cmp	r2, r3
 800df92:	d13b      	bne.n	800e00c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df9e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d133      	bne.n	800e00c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d12b      	bne.n	800e00c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfbc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d124      	bne.n	800e00c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 f982 	bl	800e2cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dfc8:	e020      	b.n	800e00c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800dfca:	7bbb      	ldrb	r3, [r7, #14]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d01d      	beq.n	800e00c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2204      	movs	r2, #4
 800dfd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dfd8:	e018      	b.n	800e00c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f867 	bl	800e0ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 f8f6 	bl	800e1d2 <CDC_ProcessReception>
      break;
 800dfe6:	e014      	b.n	800e012 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800dfe8:	2100      	movs	r1, #0
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f001 f951 	bl	800f292 <USBH_ClrFeature>
 800dff0:	4603      	mov	r3, r0
 800dff2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dff4:	7bbb      	ldrb	r3, [r7, #14]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10a      	bne.n	800e010 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e002:	e005      	b.n	800e010 <USBH_CDC_Process+0x120>

    default:
      break;
 800e004:	bf00      	nop
 800e006:	e004      	b.n	800e012 <USBH_CDC_Process+0x122>
      break;
 800e008:	bf00      	nop
 800e00a:	e002      	b.n	800e012 <USBH_CDC_Process+0x122>
      break;
 800e00c:	bf00      	nop
 800e00e:	e000      	b.n	800e012 <USBH_CDC_Process+0x122>
      break;
 800e010:	bf00      	nop

  }

  return status;
 800e012:	7bfb      	ldrb	r3, [r7, #15]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	22a1      	movs	r2, #161	; 0xa1
 800e040:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2221      	movs	r2, #33	; 0x21
 800e046:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2207      	movs	r2, #7
 800e058:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	2207      	movs	r2, #7
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f001 faf6 	bl	800f652 <USBH_CtlReq>
 800e066:	4603      	mov	r3, r0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2221      	movs	r2, #33	; 0x21
 800e07e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2220      	movs	r2, #32
 800e084:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2207      	movs	r2, #7
 800e096:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	2207      	movs	r2, #7
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f001 fad7 	bl	800f652 <USBH_CtlReq>
 800e0a4:	4603      	mov	r3, r0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b086      	sub	sp, #24
 800e0b2:	af02      	add	r7, sp, #8
 800e0b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e0bc:	69db      	ldr	r3, [r3, #28]
 800e0be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d002      	beq.n	800e0d4 <CDC_ProcessTransmission+0x26>
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d023      	beq.n	800e11a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e0d2:	e07a      	b.n	800e1ca <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	8b12      	ldrh	r2, [r2, #24]
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d90b      	bls.n	800e0f8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	69d9      	ldr	r1, [r3, #28]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	8b1a      	ldrh	r2, [r3, #24]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	7b5b      	ldrb	r3, [r3, #13]
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	9000      	str	r0, [sp, #0]
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f001 fdac 	bl	800fc4e <USBH_BulkSendData>
 800e0f6:	e00b      	b.n	800e110 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e100:	b29a      	uxth	r2, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	7b5b      	ldrb	r3, [r3, #13]
 800e106:	2001      	movs	r0, #1
 800e108:	9000      	str	r0, [sp, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f001 fd9f 	bl	800fc4e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2202      	movs	r2, #2
 800e114:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e118:	e057      	b.n	800e1ca <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	7b5b      	ldrb	r3, [r3, #13]
 800e11e:	4619      	mov	r1, r3
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f004 fc21 	bl	8012968 <USBH_LL_GetURBState>
 800e126:	4603      	mov	r3, r0
 800e128:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e12a:	7afb      	ldrb	r3, [r7, #11]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d136      	bne.n	800e19e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e134:	68fa      	ldr	r2, [r7, #12]
 800e136:	8b12      	ldrh	r2, [r2, #24]
 800e138:	4293      	cmp	r3, r2
 800e13a:	d90e      	bls.n	800e15a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	8b12      	ldrh	r2, [r2, #24]
 800e144:	1a9a      	subs	r2, r3, r2
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	8b12      	ldrh	r2, [r2, #24]
 800e152:	441a      	add	r2, r3
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	61da      	str	r2, [r3, #28]
 800e158:	e002      	b.n	800e160 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	2b00      	cmp	r3, #0
 800e166:	d004      	beq.n	800e172 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2201      	movs	r2, #1
 800e16c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e170:	e006      	b.n	800e180 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 f892 	bl	800e2a4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2204      	movs	r2, #4
 800e184:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e194:	2200      	movs	r2, #0
 800e196:	4619      	mov	r1, r3
 800e198:	f001 ff5e 	bl	8010058 <osMessagePut>
      break;
 800e19c:	e014      	b.n	800e1c8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800e19e:	7afb      	ldrb	r3, [r7, #11]
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d111      	bne.n	800e1c8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2204      	movs	r2, #4
 800e1b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	f001 ff48 	bl	8010058 <osMessagePut>
      break;
 800e1c8:	bf00      	nop
  }
}
 800e1ca:	bf00      	nop
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b086      	sub	sp, #24
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1e0:	69db      	ldr	r3, [r3, #28]
 800e1e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e1ee:	2b03      	cmp	r3, #3
 800e1f0:	d002      	beq.n	800e1f8 <CDC_ProcessReception+0x26>
 800e1f2:	2b04      	cmp	r3, #4
 800e1f4:	d00e      	beq.n	800e214 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e1f6:	e051      	b.n	800e29c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	6a19      	ldr	r1, [r3, #32]
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	8b5a      	ldrh	r2, [r3, #26]
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	7b1b      	ldrb	r3, [r3, #12]
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f001 fd47 	bl	800fc98 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	2204      	movs	r2, #4
 800e20e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e212:	e043      	b.n	800e29c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	7b1b      	ldrb	r3, [r3, #12]
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f004 fba4 	bl	8012968 <USBH_LL_GetURBState>
 800e220:	4603      	mov	r3, r0
 800e222:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e224:	7cfb      	ldrb	r3, [r7, #19]
 800e226:	2b01      	cmp	r3, #1
 800e228:	d137      	bne.n	800e29a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	7b1b      	ldrb	r3, [r3, #12]
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f004 fb07 	bl	8012844 <USBH_LL_GetLastXferSize>
 800e236:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d016      	beq.n	800e270 <CDC_ProcessReception+0x9e>
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	8b5b      	ldrh	r3, [r3, #26]
 800e246:	461a      	mov	r2, r3
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d910      	bls.n	800e270 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	1ad2      	subs	r2, r2, r3
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	6a1a      	ldr	r2, [r3, #32]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	441a      	add	r2, r3
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	2203      	movs	r2, #3
 800e26a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e26e:	e006      	b.n	800e27e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	2200      	movs	r2, #0
 800e274:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 f81d 	bl	800e2b8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2204      	movs	r2, #4
 800e282:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e292:	2200      	movs	r2, #0
 800e294:	4619      	mov	r1, r3
 800e296:	f001 fedf 	bl	8010058 <osMessagePut>
      break;
 800e29a:	bf00      	nop
  }
}
 800e29c:	bf00      	nop
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e2ac:	bf00      	nop
 800e2ae:	370c      	adds	r7, #12
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e2c0:	bf00      	nop
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e2d4:	bf00      	nop
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e2e0:	b5b0      	push	{r4, r5, r7, lr}
 800e2e2:	b090      	sub	sp, #64	; 0x40
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d101      	bne.n	800e2f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e2f4:	2302      	movs	r3, #2
 800e2f6:	e04d      	b.n	800e394 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	79fa      	ldrb	r2, [r7, #7]
 800e2fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f000 f847 	bl	800e3a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2200      	movs	r2, #0
 800e31a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2200      	movs	r2, #0
 800e32a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d003      	beq.n	800e344 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	68ba      	ldr	r2, [r7, #8]
 800e340:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800e344:	4b15      	ldr	r3, [pc, #84]	; (800e39c <USBH_Init+0xbc>)
 800e346:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e34a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e34c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800e350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e354:	2100      	movs	r1, #0
 800e356:	4618      	mov	r0, r3
 800e358:	f001 fe56 	bl	8010008 <osMessageCreate>
 800e35c:	4602      	mov	r2, r0
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800e364:	4b0e      	ldr	r3, [pc, #56]	; (800e3a0 <USBH_Init+0xc0>)
 800e366:	f107 0414 	add.w	r4, r7, #20
 800e36a:	461d      	mov	r5, r3
 800e36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e370:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e374:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800e378:	f107 0314 	add.w	r3, r7, #20
 800e37c:	68f9      	ldr	r1, [r7, #12]
 800e37e:	4618      	mov	r0, r3
 800e380:	f001 fde2 	bl	800ff48 <osThreadCreate>
 800e384:	4602      	mov	r2, r0
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f004 f9a5 	bl	80126dc <USBH_LL_Init>

  return USBH_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3740      	adds	r7, #64	; 0x40
 800e398:	46bd      	mov	sp, r7
 800e39a:	bdb0      	pop	{r4, r5, r7, pc}
 800e39c:	08012d54 	.word	0x08012d54
 800e3a0:	08012d64 	.word	0x08012d64

0800e3a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	60fb      	str	r3, [r7, #12]
 800e3b4:	e009      	b.n	800e3ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	33e0      	adds	r3, #224	; 0xe0
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	60fb      	str	r3, [r7, #12]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2b0e      	cmp	r3, #14
 800e3ce:	d9f2      	bls.n	800e3b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	60fb      	str	r3, [r7, #12]
 800e3d4:	e009      	b.n	800e3ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	4413      	add	r3, r2
 800e3dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	60fb      	str	r3, [r7, #12]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3f0:	d3f1      	bcc.n	800e3d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2201      	movs	r2, #1
 800e402:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2201      	movs	r2, #1
 800e410:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2240      	movs	r2, #64	; 0x40
 800e416:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d016      	beq.n	800e48e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e466:	2b00      	cmp	r3, #0
 800e468:	d10e      	bne.n	800e488 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e470:	1c59      	adds	r1, r3, #1
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e478:	687a      	ldr	r2, [r7, #4]
 800e47a:	33de      	adds	r3, #222	; 0xde
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e482:	2300      	movs	r3, #0
 800e484:	73fb      	strb	r3, [r7, #15]
 800e486:	e004      	b.n	800e492 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e488:	2302      	movs	r3, #2
 800e48a:	73fb      	strb	r3, [r7, #15]
 800e48c:	e001      	b.n	800e492 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e48e:	2302      	movs	r3, #2
 800e490:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e492:	7bfb      	ldrb	r3, [r7, #15]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e4b6:	78fa      	ldrb	r2, [r7, #3]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d204      	bcs.n	800e4c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	78fa      	ldrb	r2, [r7, #3]
 800e4c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e4c4:	e001      	b.n	800e4ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e4c6:	2302      	movs	r3, #2
 800e4c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b087      	sub	sp, #28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	4608      	mov	r0, r1
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	70fb      	strb	r3, [r7, #3]
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	70bb      	strb	r3, [r7, #2]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e500:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e502:	e025      	b.n	800e550 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e504:	7dfb      	ldrb	r3, [r7, #23]
 800e506:	221a      	movs	r2, #26
 800e508:	fb02 f303 	mul.w	r3, r2, r3
 800e50c:	3308      	adds	r3, #8
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	4413      	add	r3, r2
 800e512:	3302      	adds	r3, #2
 800e514:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	795b      	ldrb	r3, [r3, #5]
 800e51a:	78fa      	ldrb	r2, [r7, #3]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d002      	beq.n	800e526 <USBH_FindInterface+0x4e>
 800e520:	78fb      	ldrb	r3, [r7, #3]
 800e522:	2bff      	cmp	r3, #255	; 0xff
 800e524:	d111      	bne.n	800e54a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e52a:	78ba      	ldrb	r2, [r7, #2]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d002      	beq.n	800e536 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e530:	78bb      	ldrb	r3, [r7, #2]
 800e532:	2bff      	cmp	r3, #255	; 0xff
 800e534:	d109      	bne.n	800e54a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e53a:	787a      	ldrb	r2, [r7, #1]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d002      	beq.n	800e546 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e540:	787b      	ldrb	r3, [r7, #1]
 800e542:	2bff      	cmp	r3, #255	; 0xff
 800e544:	d101      	bne.n	800e54a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e546:	7dfb      	ldrb	r3, [r7, #23]
 800e548:	e006      	b.n	800e558 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e54a:	7dfb      	ldrb	r3, [r7, #23]
 800e54c:	3301      	adds	r3, #1
 800e54e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e550:	7dfb      	ldrb	r3, [r7, #23]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d9d6      	bls.n	800e504 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e556:	23ff      	movs	r3, #255	; 0xff
}
 800e558:	4618      	mov	r0, r3
 800e55a:	371c      	adds	r7, #28
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f004 f8f1 	bl	8012754 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e572:	2101      	movs	r1, #1
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f004 fa0a 	bl	801298e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b088      	sub	sp, #32
 800e588:	af04      	add	r7, sp, #16
 800e58a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e58c:	2302      	movs	r3, #2
 800e58e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e590:	2300      	movs	r3, #0
 800e592:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d102      	bne.n	800e5a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2203      	movs	r2, #3
 800e5a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b0b      	cmp	r3, #11
 800e5ae:	f200 823c 	bhi.w	800ea2a <USBH_Process+0x4a6>
 800e5b2:	a201      	add	r2, pc, #4	; (adr r2, 800e5b8 <USBH_Process+0x34>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e5e9 	.word	0x0800e5e9
 800e5bc:	0800e637 	.word	0x0800e637
 800e5c0:	0800e6bb 	.word	0x0800e6bb
 800e5c4:	0800e9a9 	.word	0x0800e9a9
 800e5c8:	0800ea2b 	.word	0x0800ea2b
 800e5cc:	0800e77b 	.word	0x0800e77b
 800e5d0:	0800e933 	.word	0x0800e933
 800e5d4:	0800e7cd 	.word	0x0800e7cd
 800e5d8:	0800e809 	.word	0x0800e809
 800e5dc:	0800e843 	.word	0x0800e843
 800e5e0:	0800e88b 	.word	0x0800e88b
 800e5e4:	0800e991 	.word	0x0800e991
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 821c 	beq.w	800ea2e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e5fc:	20c8      	movs	r0, #200	; 0xc8
 800e5fe:	f004 fa0d 	bl	8012a1c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f004 f903 	bl	801280e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e62c:	2200      	movs	r2, #0
 800e62e:	4619      	mov	r1, r3
 800e630:	f001 fd12 	bl	8010058 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e634:	e1fb      	b.n	800ea2e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d107      	bne.n	800e650 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2200      	movs	r2, #0
 800e644:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2202      	movs	r2, #2
 800e64c:	701a      	strb	r2, [r3, #0]
 800e64e:	e025      	b.n	800e69c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e65a:	d914      	bls.n	800e686 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e662:	3301      	adds	r3, #1
 800e664:	b2da      	uxtb	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e672:	2b03      	cmp	r3, #3
 800e674:	d903      	bls.n	800e67e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	220d      	movs	r2, #13
 800e67a:	701a      	strb	r2, [r3, #0]
 800e67c:	e00e      	b.n	800e69c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2200      	movs	r2, #0
 800e682:	701a      	strb	r2, [r3, #0]
 800e684:	e00a      	b.n	800e69c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e68c:	f103 020a 	add.w	r2, r3, #10
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e696:	200a      	movs	r0, #10
 800e698:	f004 f9c0 	bl	8012a1c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	f001 fcd0 	bl	8010058 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e6b8:	e1c0      	b.n	800ea3c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d005      	beq.n	800e6d0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e6ca:	2104      	movs	r1, #4
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e6d0:	2064      	movs	r0, #100	; 0x64
 800e6d2:	f004 f9a3 	bl	8012a1c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f004 f872 	bl	80127c0 <USBH_LL_GetSpeed>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	461a      	mov	r2, r3
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2205      	movs	r2, #5
 800e6ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f001 fb1f 	bl	800fd32 <USBH_AllocPipe>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e6fc:	2180      	movs	r1, #128	; 0x80
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f001 fb17 	bl	800fd32 <USBH_AllocPipe>
 800e704:	4603      	mov	r3, r0
 800e706:	461a      	mov	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	7919      	ldrb	r1, [r3, #4]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e720:	b292      	uxth	r2, r2
 800e722:	9202      	str	r2, [sp, #8]
 800e724:	2200      	movs	r2, #0
 800e726:	9201      	str	r2, [sp, #4]
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	4603      	mov	r3, r0
 800e72c:	2280      	movs	r2, #128	; 0x80
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f001 fad0 	bl	800fcd4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	7959      	ldrb	r1, [r3, #5]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e748:	b292      	uxth	r2, r2
 800e74a:	9202      	str	r2, [sp, #8]
 800e74c:	2200      	movs	r2, #0
 800e74e:	9201      	str	r2, [sp, #4]
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	4603      	mov	r3, r0
 800e754:	2200      	movs	r2, #0
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f001 fabc 	bl	800fcd4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e770:	2200      	movs	r2, #0
 800e772:	4619      	mov	r1, r3
 800e774:	f001 fc70 	bl	8010058 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e778:	e160      	b.n	800ea3c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 f964 	bl	800ea48 <USBH_HandleEnum>
 800e780:	4603      	mov	r3, r0
 800e782:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e784:	7bbb      	ldrb	r3, [r7, #14]
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f040 8152 	bne.w	800ea32 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d103      	bne.n	800e7a8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2208      	movs	r2, #8
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	e002      	b.n	800e7ae <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2207      	movs	r2, #7
 800e7ac:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2205      	movs	r2, #5
 800e7b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	f001 fc47 	bl	8010058 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e7ca:	e132      	b.n	800ea32 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f000 812f 	beq.w	800ea36 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7de:	2101      	movs	r1, #1
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2208      	movs	r2, #8
 800e7e8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2205      	movs	r2, #5
 800e7ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7fe:	2200      	movs	r2, #0
 800e800:	4619      	mov	r1, r3
 800e802:	f001 fc29 	bl	8010058 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e806:	e116      	b.n	800ea36 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e80e:	b29b      	uxth	r3, r3
 800e810:	4619      	mov	r1, r3
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 fcf6 	bl	800f204 <USBH_SetCfg>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d102      	bne.n	800e824 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2209      	movs	r2, #9
 800e822:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2201      	movs	r2, #1
 800e828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e838:	2200      	movs	r2, #0
 800e83a:	4619      	mov	r1, r3
 800e83c:	f001 fc0c 	bl	8010058 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e840:	e0fc      	b.n	800ea3c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e848:	f003 0320 	and.w	r3, r3, #32
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00a      	beq.n	800e866 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e850:	2101      	movs	r1, #1
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 fcf9 	bl	800f24a <USBH_SetFeature>
 800e858:	4603      	mov	r3, r0
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d106      	bne.n	800e86c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	220a      	movs	r2, #10
 800e862:	701a      	strb	r2, [r3, #0]
 800e864:	e002      	b.n	800e86c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	220a      	movs	r2, #10
 800e86a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e880:	2200      	movs	r2, #0
 800e882:	4619      	mov	r1, r3
 800e884:	f001 fbe8 	bl	8010058 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e888:	e0d8      	b.n	800ea3c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e890:	2b00      	cmp	r3, #0
 800e892:	d03f      	beq.n	800e914 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e89c:	2300      	movs	r3, #0
 800e89e:	73fb      	strb	r3, [r7, #15]
 800e8a0:	e016      	b.n	800e8d0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e8a2:	7bfa      	ldrb	r2, [r7, #15]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	32de      	adds	r2, #222	; 0xde
 800e8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ac:	791a      	ldrb	r2, [r3, #4]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d108      	bne.n	800e8ca <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e8b8:	7bfa      	ldrb	r2, [r7, #15]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	32de      	adds	r2, #222	; 0xde
 800e8be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e8c8:	e005      	b.n	800e8d6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e8ca:	7bfb      	ldrb	r3, [r7, #15]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	73fb      	strb	r3, [r7, #15]
 800e8d0:	7bfb      	ldrb	r3, [r7, #15]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d0e5      	beq.n	800e8a2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d016      	beq.n	800e90e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8e6:	689b      	ldr	r3, [r3, #8]
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	4798      	blx	r3
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d109      	bne.n	800e906 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2206      	movs	r2, #6
 800e8f6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8fe:	2103      	movs	r1, #3
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	4798      	blx	r3
 800e904:	e006      	b.n	800e914 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	220d      	movs	r2, #13
 800e90a:	701a      	strb	r2, [r3, #0]
 800e90c:	e002      	b.n	800e914 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	220d      	movs	r2, #13
 800e912:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2205      	movs	r2, #5
 800e918:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e928:	2200      	movs	r2, #0
 800e92a:	4619      	mov	r1, r3
 800e92c:	f001 fb94 	bl	8010058 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e930:	e084      	b.n	800ea3c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d017      	beq.n	800e96c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	4798      	blx	r3
 800e948:	4603      	mov	r3, r0
 800e94a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e94c:	7bbb      	ldrb	r3, [r7, #14]
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	d103      	bne.n	800e95c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	220b      	movs	r2, #11
 800e958:	701a      	strb	r2, [r3, #0]
 800e95a:	e00a      	b.n	800e972 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800e95c:	7bbb      	ldrb	r3, [r7, #14]
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b02      	cmp	r3, #2
 800e962:	d106      	bne.n	800e972 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	220d      	movs	r2, #13
 800e968:	701a      	strb	r2, [r3, #0]
 800e96a:	e002      	b.n	800e972 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	220d      	movs	r2, #13
 800e970:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2205      	movs	r2, #5
 800e976:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e986:	2200      	movs	r2, #0
 800e988:	4619      	mov	r1, r3
 800e98a:	f001 fb65 	bl	8010058 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e98e:	e055      	b.n	800ea3c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e996:	2b00      	cmp	r3, #0
 800e998:	d04f      	beq.n	800ea3a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9a0:	695b      	ldr	r3, [r3, #20]
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	4798      	blx	r3
      }
      break;
 800e9a6:	e048      	b.n	800ea3a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f7ff fcf7 	bl	800e3a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d009      	beq.n	800e9d4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d005      	beq.n	800e9ea <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9e4:	2105      	movs	r1, #5
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d107      	bne.n	800ea06 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f7ff fdb0 	bl	800e564 <USBH_Start>
 800ea04:	e002      	b.n	800ea0c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f003 fea4 	bl	8012754 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2201      	movs	r2, #1
 800ea10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea20:	2200      	movs	r2, #0
 800ea22:	4619      	mov	r1, r3
 800ea24:	f001 fb18 	bl	8010058 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ea28:	e008      	b.n	800ea3c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800ea2a:	bf00      	nop
 800ea2c:	e006      	b.n	800ea3c <USBH_Process+0x4b8>
      break;
 800ea2e:	bf00      	nop
 800ea30:	e004      	b.n	800ea3c <USBH_Process+0x4b8>
      break;
 800ea32:	bf00      	nop
 800ea34:	e002      	b.n	800ea3c <USBH_Process+0x4b8>
    break;
 800ea36:	bf00      	nop
 800ea38:	e000      	b.n	800ea3c <USBH_Process+0x4b8>
      break;
 800ea3a:	bf00      	nop
  }
  return USBH_OK;
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3710      	adds	r7, #16
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop

0800ea48 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b088      	sub	sp, #32
 800ea4c:	af04      	add	r7, sp, #16
 800ea4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ea50:	2301      	movs	r3, #1
 800ea52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ea54:	2301      	movs	r3, #1
 800ea56:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	785b      	ldrb	r3, [r3, #1]
 800ea5c:	2b07      	cmp	r3, #7
 800ea5e:	f200 8208 	bhi.w	800ee72 <USBH_HandleEnum+0x42a>
 800ea62:	a201      	add	r2, pc, #4	; (adr r2, 800ea68 <USBH_HandleEnum+0x20>)
 800ea64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea68:	0800ea89 	.word	0x0800ea89
 800ea6c:	0800eb47 	.word	0x0800eb47
 800ea70:	0800ebb1 	.word	0x0800ebb1
 800ea74:	0800ec3f 	.word	0x0800ec3f
 800ea78:	0800eca9 	.word	0x0800eca9
 800ea7c:	0800ed19 	.word	0x0800ed19
 800ea80:	0800edb5 	.word	0x0800edb5
 800ea84:	0800ee33 	.word	0x0800ee33
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ea88:	2108      	movs	r1, #8
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 faea 	bl	800f064 <USBH_Get_DevDesc>
 800ea90:	4603      	mov	r3, r0
 800ea92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ea94:	7bbb      	ldrb	r3, [r7, #14]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d130      	bne.n	800eafc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	7919      	ldrb	r1, [r3, #4]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eabe:	b292      	uxth	r2, r2
 800eac0:	9202      	str	r2, [sp, #8]
 800eac2:	2200      	movs	r2, #0
 800eac4:	9201      	str	r2, [sp, #4]
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	4603      	mov	r3, r0
 800eaca:	2280      	movs	r2, #128	; 0x80
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f001 f901 	bl	800fcd4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	7959      	ldrb	r1, [r3, #5]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eae6:	b292      	uxth	r2, r2
 800eae8:	9202      	str	r2, [sp, #8]
 800eaea:	2200      	movs	r2, #0
 800eaec:	9201      	str	r2, [sp, #4]
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f001 f8ed 	bl	800fcd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800eafa:	e1bc      	b.n	800ee76 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eafc:	7bbb      	ldrb	r3, [r7, #14]
 800eafe:	2b03      	cmp	r3, #3
 800eb00:	f040 81b9 	bne.w	800ee76 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	b2da      	uxtb	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d903      	bls.n	800eb26 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	220d      	movs	r2, #13
 800eb22:	701a      	strb	r2, [r3, #0]
      break;
 800eb24:	e1a7      	b.n	800ee76 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	795b      	ldrb	r3, [r3, #5]
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f001 f921 	bl	800fd74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	791b      	ldrb	r3, [r3, #4]
 800eb36:	4619      	mov	r1, r3
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f001 f91b 	bl	800fd74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	701a      	strb	r2, [r3, #0]
      break;
 800eb44:	e197      	b.n	800ee76 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800eb46:	2112      	movs	r1, #18
 800eb48:	6878      	ldr	r0, [r7, #4]
 800eb4a:	f000 fa8b 	bl	800f064 <USBH_Get_DevDesc>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eb52:	7bbb      	ldrb	r3, [r7, #14]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d103      	bne.n	800eb60 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2202      	movs	r2, #2
 800eb5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800eb5e:	e18c      	b.n	800ee7a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb60:	7bbb      	ldrb	r3, [r7, #14]
 800eb62:	2b03      	cmp	r3, #3
 800eb64:	f040 8189 	bne.w	800ee7a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb6e:	3301      	adds	r3, #1
 800eb70:	b2da      	uxtb	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb7e:	2b03      	cmp	r3, #3
 800eb80:	d903      	bls.n	800eb8a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	220d      	movs	r2, #13
 800eb86:	701a      	strb	r2, [r3, #0]
      break;
 800eb88:	e177      	b.n	800ee7a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	795b      	ldrb	r3, [r3, #5]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f001 f8ef 	bl	800fd74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	791b      	ldrb	r3, [r3, #4]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f001 f8e9 	bl	800fd74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	701a      	strb	r2, [r3, #0]
      break;
 800ebae:	e164      	b.n	800ee7a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ebb0:	2101      	movs	r1, #1
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 fb02 	bl	800f1bc <USBH_SetAddress>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ebbc:	7bbb      	ldrb	r3, [r7, #14]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d132      	bne.n	800ec28 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ebc2:	2002      	movs	r0, #2
 800ebc4:	f003 ff2a 	bl	8012a1c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2203      	movs	r2, #3
 800ebd4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	7919      	ldrb	r1, [r3, #4]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ebea:	b292      	uxth	r2, r2
 800ebec:	9202      	str	r2, [sp, #8]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	9201      	str	r2, [sp, #4]
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2280      	movs	r2, #128	; 0x80
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f001 f86b 	bl	800fcd4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	7959      	ldrb	r1, [r3, #5]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ec12:	b292      	uxth	r2, r2
 800ec14:	9202      	str	r2, [sp, #8]
 800ec16:	2200      	movs	r2, #0
 800ec18:	9201      	str	r2, [sp, #4]
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	2200      	movs	r2, #0
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f001 f857 	bl	800fcd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ec26:	e12a      	b.n	800ee7e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec28:	7bbb      	ldrb	r3, [r7, #14]
 800ec2a:	2b03      	cmp	r3, #3
 800ec2c:	f040 8127 	bne.w	800ee7e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	220d      	movs	r2, #13
 800ec34:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	705a      	strb	r2, [r3, #1]
      break;
 800ec3c:	e11f      	b.n	800ee7e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ec3e:	2109      	movs	r1, #9
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 fa37 	bl	800f0b4 <USBH_Get_CfgDesc>
 800ec46:	4603      	mov	r3, r0
 800ec48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec4a:	7bbb      	ldrb	r3, [r7, #14]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d103      	bne.n	800ec58 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2204      	movs	r2, #4
 800ec54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ec56:	e114      	b.n	800ee82 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec58:	7bbb      	ldrb	r3, [r7, #14]
 800ec5a:	2b03      	cmp	r3, #3
 800ec5c:	f040 8111 	bne.w	800ee82 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec66:	3301      	adds	r3, #1
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec76:	2b03      	cmp	r3, #3
 800ec78:	d903      	bls.n	800ec82 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	220d      	movs	r2, #13
 800ec7e:	701a      	strb	r2, [r3, #0]
      break;
 800ec80:	e0ff      	b.n	800ee82 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	795b      	ldrb	r3, [r3, #5]
 800ec86:	4619      	mov	r1, r3
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f001 f873 	bl	800fd74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	791b      	ldrb	r3, [r3, #4]
 800ec92:	4619      	mov	r1, r3
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f001 f86d 	bl	800fd74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2200      	movs	r2, #0
 800eca4:	701a      	strb	r2, [r3, #0]
      break;
 800eca6:	e0ec      	b.n	800ee82 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ecae:	4619      	mov	r1, r3
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f9ff 	bl	800f0b4 <USBH_Get_CfgDesc>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ecba:	7bbb      	ldrb	r3, [r7, #14]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d103      	bne.n	800ecc8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2205      	movs	r2, #5
 800ecc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ecc6:	e0de      	b.n	800ee86 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ecc8:	7bbb      	ldrb	r3, [r7, #14]
 800ecca:	2b03      	cmp	r3, #3
 800eccc:	f040 80db 	bne.w	800ee86 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	d903      	bls.n	800ecf2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	220d      	movs	r2, #13
 800ecee:	701a      	strb	r2, [r3, #0]
      break;
 800ecf0:	e0c9      	b.n	800ee86 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	795b      	ldrb	r3, [r3, #5]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f001 f83b 	bl	800fd74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	791b      	ldrb	r3, [r3, #4]
 800ed02:	4619      	mov	r1, r3
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f001 f835 	bl	800fd74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	701a      	strb	r2, [r3, #0]
      break;
 800ed16:	e0b6      	b.n	800ee86 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d036      	beq.n	800ed90 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ed2e:	23ff      	movs	r3, #255	; 0xff
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f9e3 	bl	800f0fc <USBH_Get_StringDesc>
 800ed36:	4603      	mov	r3, r0
 800ed38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ed3a:	7bbb      	ldrb	r3, [r7, #14]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d111      	bne.n	800ed64 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2206      	movs	r2, #6
 800ed44:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2205      	movs	r2, #5
 800ed4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	f001 f97b 	bl	8010058 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ed62:	e092      	b.n	800ee8a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed64:	7bbb      	ldrb	r3, [r7, #14]
 800ed66:	2b03      	cmp	r3, #3
 800ed68:	f040 808f 	bne.w	800ee8a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2206      	movs	r2, #6
 800ed70:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2205      	movs	r2, #5
 800ed76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed86:	2200      	movs	r2, #0
 800ed88:	4619      	mov	r1, r3
 800ed8a:	f001 f965 	bl	8010058 <osMessagePut>
      break;
 800ed8e:	e07c      	b.n	800ee8a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2206      	movs	r2, #6
 800ed94:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2205      	movs	r2, #5
 800ed9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edaa:	2200      	movs	r2, #0
 800edac:	4619      	mov	r1, r3
 800edae:	f001 f953 	bl	8010058 <osMessagePut>
      break;
 800edb2:	e06a      	b.n	800ee8a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d027      	beq.n	800ee0e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800edca:	23ff      	movs	r3, #255	; 0xff
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f995 	bl	800f0fc <USBH_Get_StringDesc>
 800edd2:	4603      	mov	r3, r0
 800edd4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800edd6:	7bbb      	ldrb	r3, [r7, #14]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d103      	bne.n	800ede4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2207      	movs	r2, #7
 800ede0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ede2:	e054      	b.n	800ee8e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ede4:	7bbb      	ldrb	r3, [r7, #14]
 800ede6:	2b03      	cmp	r3, #3
 800ede8:	d151      	bne.n	800ee8e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2207      	movs	r2, #7
 800edee:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2205      	movs	r2, #5
 800edf4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ee04:	2200      	movs	r2, #0
 800ee06:	4619      	mov	r1, r3
 800ee08:	f001 f926 	bl	8010058 <osMessagePut>
      break;
 800ee0c:	e03f      	b.n	800ee8e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2207      	movs	r2, #7
 800ee12:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2205      	movs	r2, #5
 800ee18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ee28:	2200      	movs	r2, #0
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	f001 f914 	bl	8010058 <osMessagePut>
      break;
 800ee30:	e02d      	b.n	800ee8e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d017      	beq.n	800ee6c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ee48:	23ff      	movs	r3, #255	; 0xff
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 f956 	bl	800f0fc <USBH_Get_StringDesc>
 800ee50:	4603      	mov	r3, r0
 800ee52:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ee54:	7bbb      	ldrb	r3, [r7, #14]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d102      	bne.n	800ee60 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ee5e:	e018      	b.n	800ee92 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee60:	7bbb      	ldrb	r3, [r7, #14]
 800ee62:	2b03      	cmp	r3, #3
 800ee64:	d115      	bne.n	800ee92 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	73fb      	strb	r3, [r7, #15]
      break;
 800ee6a:	e012      	b.n	800ee92 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee70:	e00f      	b.n	800ee92 <USBH_HandleEnum+0x44a>

    default:
      break;
 800ee72:	bf00      	nop
 800ee74:	e00e      	b.n	800ee94 <USBH_HandleEnum+0x44c>
      break;
 800ee76:	bf00      	nop
 800ee78:	e00c      	b.n	800ee94 <USBH_HandleEnum+0x44c>
      break;
 800ee7a:	bf00      	nop
 800ee7c:	e00a      	b.n	800ee94 <USBH_HandleEnum+0x44c>
      break;
 800ee7e:	bf00      	nop
 800ee80:	e008      	b.n	800ee94 <USBH_HandleEnum+0x44c>
      break;
 800ee82:	bf00      	nop
 800ee84:	e006      	b.n	800ee94 <USBH_HandleEnum+0x44c>
      break;
 800ee86:	bf00      	nop
 800ee88:	e004      	b.n	800ee94 <USBH_HandleEnum+0x44c>
      break;
 800ee8a:	bf00      	nop
 800ee8c:	e002      	b.n	800ee94 <USBH_HandleEnum+0x44c>
      break;
 800ee8e:	bf00      	nop
 800ee90:	e000      	b.n	800ee94 <USBH_HandleEnum+0x44c>
      break;
 800ee92:	bf00      	nop
  }
  return Status;
 800ee94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop

0800eea0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	683a      	ldr	r2, [r7, #0]
 800eeae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800eeb2:	bf00      	nop
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b082      	sub	sp, #8
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eecc:	1c5a      	adds	r2, r3, #1
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 f804 	bl	800eee2 <USBH_HandleSof>
}
 800eeda:	bf00      	nop
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b082      	sub	sp, #8
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	2b0b      	cmp	r3, #11
 800eef2:	d10a      	bne.n	800ef0a <USBH_HandleSof+0x28>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d005      	beq.n	800ef0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef04:	699b      	ldr	r3, [r3, #24]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	4798      	blx	r3
  }
}
 800ef0a:	bf00      	nop
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b082      	sub	sp, #8
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ef36:	2200      	movs	r2, #0
 800ef38:	4619      	mov	r1, r3
 800ef3a:	f001 f88d 	bl	8010058 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ef3e:	bf00      	nop
}
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ef46:	b480      	push	{r7}
 800ef48:	b083      	sub	sp, #12
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ef56:	bf00      	nop
}
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2201      	movs	r2, #1
 800ef86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ef96:	2200      	movs	r2, #0
 800ef98:	4619      	mov	r1, r3
 800ef9a:	f001 f85d 	bl	8010058 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f003 fbde 	bl	801278a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	791b      	ldrb	r3, [r3, #4]
 800efd2:	4619      	mov	r1, r3
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 fecd 	bl	800fd74 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	795b      	ldrb	r3, [r3, #5]
 800efde:	4619      	mov	r1, r3
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 fec7 	bl	800fd74 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2201      	movs	r2, #1
 800efea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800effa:	2200      	movs	r2, #0
 800effc:	4619      	mov	r1, r3
 800effe:	f001 f82b 	bl	8010058 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3708      	adds	r7, #8
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800f01a:	f107 030c 	add.w	r3, r7, #12
 800f01e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f022:	4618      	mov	r0, r3
 800f024:	f001 f858 	bl	80100d8 <osMessageGet>
    if (event.status == osEventMessage)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2b10      	cmp	r3, #16
 800f02c:	d1f2      	bne.n	800f014 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7ff faa8 	bl	800e584 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f034:	e7ee      	b.n	800f014 <USBH_Process_OS+0x8>

0800f036 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b082      	sub	sp, #8
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2201      	movs	r2, #1
 800f042:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f052:	2200      	movs	r2, #0
 800f054:	4619      	mov	r1, r3
 800f056:	f000 ffff 	bl	8010058 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af02      	add	r7, sp, #8
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	460b      	mov	r3, r1
 800f06e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f076:	78fb      	ldrb	r3, [r7, #3]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	4613      	mov	r3, r2
 800f07e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f082:	2100      	movs	r1, #0
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 f864 	bl	800f152 <USBH_GetDescriptor>
 800f08a:	4603      	mov	r3, r0
 800f08c:	73fb      	strb	r3, [r7, #15]
 800f08e:	7bfb      	ldrb	r3, [r7, #15]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d10a      	bne.n	800f0aa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f0a0:	78fa      	ldrb	r2, [r7, #3]
 800f0a2:	b292      	uxth	r2, r2
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	f000 f918 	bl	800f2da <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3710      	adds	r7, #16
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af02      	add	r7, sp, #8
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	331c      	adds	r3, #28
 800f0c4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f0c6:	887b      	ldrh	r3, [r7, #2]
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 f83d 	bl	800f152 <USBH_GetDescriptor>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	72fb      	strb	r3, [r7, #11]
 800f0dc:	7afb      	ldrb	r3, [r7, #11]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d107      	bne.n	800f0f2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f0e8:	887a      	ldrh	r2, [r7, #2]
 800f0ea:	68f9      	ldr	r1, [r7, #12]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f000 f964 	bl	800f3ba <USBH_ParseCfgDesc>
  }

  return status;
 800f0f2:	7afb      	ldrb	r3, [r7, #11]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b088      	sub	sp, #32
 800f100:	af02      	add	r7, sp, #8
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	607a      	str	r2, [r7, #4]
 800f106:	461a      	mov	r2, r3
 800f108:	460b      	mov	r3, r1
 800f10a:	72fb      	strb	r3, [r7, #11]
 800f10c:	4613      	mov	r3, r2
 800f10e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f110:	7afb      	ldrb	r3, [r7, #11]
 800f112:	b29b      	uxth	r3, r3
 800f114:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f118:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f120:	893b      	ldrh	r3, [r7, #8]
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	460b      	mov	r3, r1
 800f126:	2100      	movs	r1, #0
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f000 f812 	bl	800f152 <USBH_GetDescriptor>
 800f12e:	4603      	mov	r3, r0
 800f130:	75fb      	strb	r3, [r7, #23]
 800f132:	7dfb      	ldrb	r3, [r7, #23]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d107      	bne.n	800f148 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f13e:	893a      	ldrh	r2, [r7, #8]
 800f140:	6879      	ldr	r1, [r7, #4]
 800f142:	4618      	mov	r0, r3
 800f144:	f000 fa37 	bl	800f5b6 <USBH_ParseStringDesc>
  }

  return status;
 800f148:	7dfb      	ldrb	r3, [r7, #23]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3718      	adds	r7, #24
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	60f8      	str	r0, [r7, #12]
 800f15a:	607b      	str	r3, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	72fb      	strb	r3, [r7, #11]
 800f160:	4613      	mov	r3, r2
 800f162:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	789b      	ldrb	r3, [r3, #2]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d11c      	bne.n	800f1a6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f16c:	7afb      	ldrb	r3, [r7, #11]
 800f16e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f172:	b2da      	uxtb	r2, r3
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2206      	movs	r2, #6
 800f17c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	893a      	ldrh	r2, [r7, #8]
 800f182:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f184:	893b      	ldrh	r3, [r7, #8]
 800f186:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f18a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f18e:	d104      	bne.n	800f19a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f240 4209 	movw	r2, #1033	; 0x409
 800f196:	829a      	strh	r2, [r3, #20]
 800f198:	e002      	b.n	800f1a0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2200      	movs	r2, #0
 800f19e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	8b3a      	ldrh	r2, [r7, #24]
 800f1a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f1a6:	8b3b      	ldrh	r3, [r7, #24]
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	6879      	ldr	r1, [r7, #4]
 800f1ac:	68f8      	ldr	r0, [r7, #12]
 800f1ae:	f000 fa50 	bl	800f652 <USBH_CtlReq>
 800f1b2:	4603      	mov	r3, r0
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	789b      	ldrb	r3, [r3, #2]
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d10f      	bne.n	800f1f0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2205      	movs	r2, #5
 800f1da:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f1dc:	78fb      	ldrb	r3, [r7, #3]
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fa2c 	bl	800f652 <USBH_CtlReq>
 800f1fa:	4603      	mov	r3, r0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3708      	adds	r7, #8
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	460b      	mov	r3, r1
 800f20e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	789b      	ldrb	r3, [r3, #2]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d10e      	bne.n	800f236 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2209      	movs	r2, #9
 800f222:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	887a      	ldrh	r2, [r7, #2]
 800f228:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f236:	2200      	movs	r2, #0
 800f238:	2100      	movs	r1, #0
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fa09 	bl	800f652 <USBH_CtlReq>
 800f240:	4603      	mov	r3, r0
}
 800f242:	4618      	mov	r0, r3
 800f244:	3708      	adds	r7, #8
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b082      	sub	sp, #8
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	460b      	mov	r3, r1
 800f254:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	789b      	ldrb	r3, [r3, #2]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d10f      	bne.n	800f27e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2203      	movs	r2, #3
 800f268:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f26a:	78fb      	ldrb	r3, [r7, #3]
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f27e:	2200      	movs	r2, #0
 800f280:	2100      	movs	r1, #0
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 f9e5 	bl	800f652 <USBH_CtlReq>
 800f288:	4603      	mov	r3, r0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3708      	adds	r7, #8
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b082      	sub	sp, #8
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
 800f29a:	460b      	mov	r3, r1
 800f29c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	789b      	ldrb	r3, [r3, #2]
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d10f      	bne.n	800f2c6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2202      	movs	r2, #2
 800f2aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f2b8:	78fb      	ldrb	r3, [r7, #3]
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 f9c1 	bl	800f652 <USBH_CtlReq>
 800f2d0:	4603      	mov	r3, r0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f2da:	b480      	push	{r7}
 800f2dc:	b085      	sub	sp, #20
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	60f8      	str	r0, [r7, #12]
 800f2e2:	60b9      	str	r1, [r7, #8]
 800f2e4:	4613      	mov	r3, r2
 800f2e6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	781a      	ldrb	r2, [r3, #0]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	785a      	ldrb	r2, [r3, #1]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	3302      	adds	r3, #2
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	3303      	adds	r3, #3
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	b29b      	uxth	r3, r3
 800f308:	021b      	lsls	r3, r3, #8
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	4313      	orrs	r3, r2
 800f30e:	b29a      	uxth	r2, r3
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	791a      	ldrb	r2, [r3, #4]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	795a      	ldrb	r2, [r3, #5]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	799a      	ldrb	r2, [r3, #6]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	79da      	ldrb	r2, [r3, #7]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f334:	88fb      	ldrh	r3, [r7, #6]
 800f336:	2b08      	cmp	r3, #8
 800f338:	d939      	bls.n	800f3ae <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	3308      	adds	r3, #8
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	b29a      	uxth	r2, r3
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	3309      	adds	r3, #9
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	b29b      	uxth	r3, r3
 800f34a:	021b      	lsls	r3, r3, #8
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	4313      	orrs	r3, r2
 800f350:	b29a      	uxth	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	330a      	adds	r3, #10
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	330b      	adds	r3, #11
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	b29b      	uxth	r3, r3
 800f366:	021b      	lsls	r3, r3, #8
 800f368:	b29b      	uxth	r3, r3
 800f36a:	4313      	orrs	r3, r2
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	330c      	adds	r3, #12
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	b29a      	uxth	r2, r3
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	330d      	adds	r3, #13
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	b29b      	uxth	r3, r3
 800f382:	021b      	lsls	r3, r3, #8
 800f384:	b29b      	uxth	r3, r3
 800f386:	4313      	orrs	r3, r2
 800f388:	b29a      	uxth	r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	7b9a      	ldrb	r2, [r3, #14]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	7bda      	ldrb	r2, [r3, #15]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	7c1a      	ldrb	r2, [r3, #16]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	7c5a      	ldrb	r2, [r3, #17]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	745a      	strb	r2, [r3, #17]
  }
}
 800f3ae:	bf00      	nop
 800f3b0:	3714      	adds	r7, #20
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr

0800f3ba <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b08a      	sub	sp, #40	; 0x28
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	60f8      	str	r0, [r7, #12]
 800f3c2:	60b9      	str	r1, [r7, #8]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	781a      	ldrb	r2, [r3, #0]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	785a      	ldrb	r2, [r3, #1]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	3302      	adds	r3, #2
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	3303      	adds	r3, #3
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	021b      	lsls	r3, r3, #8
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	4313      	orrs	r3, r2
 800f402:	b29a      	uxth	r2, r3
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	791a      	ldrb	r2, [r3, #4]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	795a      	ldrb	r2, [r3, #5]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	799a      	ldrb	r2, [r3, #6]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	79da      	ldrb	r2, [r3, #7]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	7a1a      	ldrb	r2, [r3, #8]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f430:	88fb      	ldrh	r3, [r7, #6]
 800f432:	2b09      	cmp	r3, #9
 800f434:	d95f      	bls.n	800f4f6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f436:	2309      	movs	r3, #9
 800f438:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f43a:	2300      	movs	r3, #0
 800f43c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f43e:	e051      	b.n	800f4e4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f440:	f107 0316 	add.w	r3, r7, #22
 800f444:	4619      	mov	r1, r3
 800f446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f448:	f000 f8e8 	bl	800f61c <USBH_GetNextDesc>
 800f44c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f450:	785b      	ldrb	r3, [r3, #1]
 800f452:	2b04      	cmp	r3, #4
 800f454:	d146      	bne.n	800f4e4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f456:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f45a:	221a      	movs	r2, #26
 800f45c:	fb02 f303 	mul.w	r3, r2, r3
 800f460:	3308      	adds	r3, #8
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	4413      	add	r3, r2
 800f466:	3302      	adds	r3, #2
 800f468:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f46a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f46c:	69f8      	ldr	r0, [r7, #28]
 800f46e:	f000 f846 	bl	800f4fe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f472:	2300      	movs	r3, #0
 800f474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f478:	2300      	movs	r3, #0
 800f47a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f47c:	e022      	b.n	800f4c4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f47e:	f107 0316 	add.w	r3, r7, #22
 800f482:	4619      	mov	r1, r3
 800f484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f486:	f000 f8c9 	bl	800f61c <USBH_GetNextDesc>
 800f48a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48e:	785b      	ldrb	r3, [r3, #1]
 800f490:	2b05      	cmp	r3, #5
 800f492:	d117      	bne.n	800f4c4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f498:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f49c:	3201      	adds	r2, #1
 800f49e:	00d2      	lsls	r2, r2, #3
 800f4a0:	211a      	movs	r1, #26
 800f4a2:	fb01 f303 	mul.w	r3, r1, r3
 800f4a6:	4413      	add	r3, r2
 800f4a8:	3308      	adds	r3, #8
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f4b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4b4:	69b8      	ldr	r0, [r7, #24]
 800f4b6:	f000 f851 	bl	800f55c <USBH_ParseEPDesc>
            ep_ix++;
 800f4ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f4be:	3301      	adds	r3, #1
 800f4c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	791b      	ldrb	r3, [r3, #4]
 800f4c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d204      	bcs.n	800f4da <USBH_ParseCfgDesc+0x120>
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	885a      	ldrh	r2, [r3, #2]
 800f4d4:	8afb      	ldrh	r3, [r7, #22]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d8d1      	bhi.n	800f47e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f4da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4de:	3301      	adds	r3, #1
 800f4e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f4e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d804      	bhi.n	800f4f6 <USBH_ParseCfgDesc+0x13c>
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	885a      	ldrh	r2, [r3, #2]
 800f4f0:	8afb      	ldrh	r3, [r7, #22]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d8a4      	bhi.n	800f440 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f4f6:	bf00      	nop
 800f4f8:	3728      	adds	r7, #40	; 0x28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f4fe:	b480      	push	{r7}
 800f500:	b083      	sub	sp, #12
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	781a      	ldrb	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	785a      	ldrb	r2, [r3, #1]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	789a      	ldrb	r2, [r3, #2]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	78da      	ldrb	r2, [r3, #3]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	791a      	ldrb	r2, [r3, #4]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	795a      	ldrb	r2, [r3, #5]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	799a      	ldrb	r2, [r3, #6]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	79da      	ldrb	r2, [r3, #7]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	7a1a      	ldrb	r2, [r3, #8]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	721a      	strb	r2, [r3, #8]
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	781a      	ldrb	r2, [r3, #0]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	785a      	ldrb	r2, [r3, #1]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	789a      	ldrb	r2, [r3, #2]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	78da      	ldrb	r2, [r3, #3]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	3304      	adds	r3, #4
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	3305      	adds	r3, #5
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	b29b      	uxth	r3, r3
 800f596:	021b      	lsls	r3, r3, #8
 800f598:	b29b      	uxth	r3, r3
 800f59a:	4313      	orrs	r3, r2
 800f59c:	b29a      	uxth	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	799a      	ldrb	r2, [r3, #6]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	719a      	strb	r2, [r3, #6]
}
 800f5aa:	bf00      	nop
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b087      	sub	sp, #28
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	60f8      	str	r0, [r7, #12]
 800f5be:	60b9      	str	r1, [r7, #8]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	2b03      	cmp	r3, #3
 800f5cc:	d120      	bne.n	800f610 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	1e9a      	subs	r2, r3, #2
 800f5d4:	88fb      	ldrh	r3, [r7, #6]
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	bf28      	it	cs
 800f5da:	4613      	movcs	r3, r2
 800f5dc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	3302      	adds	r3, #2
 800f5e2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	82fb      	strh	r3, [r7, #22]
 800f5e8:	e00b      	b.n	800f602 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f5ea:	8afb      	ldrh	r3, [r7, #22]
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	781a      	ldrb	r2, [r3, #0]
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f5fc:	8afb      	ldrh	r3, [r7, #22]
 800f5fe:	3302      	adds	r3, #2
 800f600:	82fb      	strh	r3, [r7, #22]
 800f602:	8afa      	ldrh	r2, [r7, #22]
 800f604:	8abb      	ldrh	r3, [r7, #20]
 800f606:	429a      	cmp	r2, r3
 800f608:	d3ef      	bcc.n	800f5ea <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	2200      	movs	r2, #0
 800f60e:	701a      	strb	r2, [r3, #0]
  }
}
 800f610:	bf00      	nop
 800f612:	371c      	adds	r7, #28
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b085      	sub	sp, #20
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	881a      	ldrh	r2, [r3, #0]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	b29b      	uxth	r3, r3
 800f630:	4413      	add	r3, r2
 800f632:	b29a      	uxth	r2, r3
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4413      	add	r3, r2
 800f642:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f644:	68fb      	ldr	r3, [r7, #12]
}
 800f646:	4618      	mov	r0, r3
 800f648:	3714      	adds	r7, #20
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr

0800f652 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b086      	sub	sp, #24
 800f656:	af00      	add	r7, sp, #0
 800f658:	60f8      	str	r0, [r7, #12]
 800f65a:	60b9      	str	r1, [r7, #8]
 800f65c:	4613      	mov	r3, r2
 800f65e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f660:	2301      	movs	r3, #1
 800f662:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	789b      	ldrb	r3, [r3, #2]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d002      	beq.n	800f672 <USBH_CtlReq+0x20>
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	d01d      	beq.n	800f6ac <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f670:	e043      	b.n	800f6fa <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	68ba      	ldr	r2, [r7, #8]
 800f676:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	88fa      	ldrh	r2, [r7, #6]
 800f67c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	2201      	movs	r2, #1
 800f682:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2202      	movs	r2, #2
 800f688:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f68a:	2301      	movs	r3, #1
 800f68c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2203      	movs	r2, #3
 800f692:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	f000 fcd7 	bl	8010058 <osMessagePut>
      break;
 800f6aa:	e026      	b.n	800f6fa <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f000 f829 	bl	800f704 <USBH_HandleControl>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f6b6:	7dfb      	ldrb	r3, [r7, #23]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d002      	beq.n	800f6c2 <USBH_CtlReq+0x70>
 800f6bc:	7dfb      	ldrb	r3, [r7, #23]
 800f6be:	2b03      	cmp	r3, #3
 800f6c0:	d106      	bne.n	800f6d0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	761a      	strb	r2, [r3, #24]
 800f6ce:	e005      	b.n	800f6dc <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f6d0:	7dfb      	ldrb	r3, [r7, #23]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d102      	bne.n	800f6dc <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	2203      	movs	r2, #3
 800f6e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	f000 fcb0 	bl	8010058 <osMessagePut>
      break;
 800f6f8:	bf00      	nop
  }
  return status;
 800f6fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3718      	adds	r7, #24
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af02      	add	r7, sp, #8
 800f70a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f70c:	2301      	movs	r3, #1
 800f70e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f710:	2300      	movs	r3, #0
 800f712:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	7e1b      	ldrb	r3, [r3, #24]
 800f718:	3b01      	subs	r3, #1
 800f71a:	2b0a      	cmp	r3, #10
 800f71c:	f200 8229 	bhi.w	800fb72 <USBH_HandleControl+0x46e>
 800f720:	a201      	add	r2, pc, #4	; (adr r2, 800f728 <USBH_HandleControl+0x24>)
 800f722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f726:	bf00      	nop
 800f728:	0800f755 	.word	0x0800f755
 800f72c:	0800f76f 	.word	0x0800f76f
 800f730:	0800f811 	.word	0x0800f811
 800f734:	0800f837 	.word	0x0800f837
 800f738:	0800f8c3 	.word	0x0800f8c3
 800f73c:	0800f8ed 	.word	0x0800f8ed
 800f740:	0800f9af 	.word	0x0800f9af
 800f744:	0800f9d1 	.word	0x0800f9d1
 800f748:	0800fa63 	.word	0x0800fa63
 800f74c:	0800fa89 	.word	0x0800fa89
 800f750:	0800fb1b 	.word	0x0800fb1b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f103 0110 	add.w	r1, r3, #16
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	795b      	ldrb	r3, [r3, #5]
 800f75e:	461a      	mov	r2, r3
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 fa17 	bl	800fb94 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2202      	movs	r2, #2
 800f76a:	761a      	strb	r2, [r3, #24]
      break;
 800f76c:	e20c      	b.n	800fb88 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	795b      	ldrb	r3, [r3, #5]
 800f772:	4619      	mov	r1, r3
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f003 f8f7 	bl	8012968 <USBH_LL_GetURBState>
 800f77a:	4603      	mov	r3, r0
 800f77c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f77e:	7bbb      	ldrb	r3, [r7, #14]
 800f780:	2b01      	cmp	r3, #1
 800f782:	d12c      	bne.n	800f7de <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	7c1b      	ldrb	r3, [r3, #16]
 800f788:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f78c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	8adb      	ldrh	r3, [r3, #22]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00a      	beq.n	800f7ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f796:	7b7b      	ldrb	r3, [r7, #13]
 800f798:	2b80      	cmp	r3, #128	; 0x80
 800f79a:	d103      	bne.n	800f7a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2203      	movs	r2, #3
 800f7a0:	761a      	strb	r2, [r3, #24]
 800f7a2:	e00d      	b.n	800f7c0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2205      	movs	r2, #5
 800f7a8:	761a      	strb	r2, [r3, #24]
 800f7aa:	e009      	b.n	800f7c0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f7ac:	7b7b      	ldrb	r3, [r7, #13]
 800f7ae:	2b80      	cmp	r3, #128	; 0x80
 800f7b0:	d103      	bne.n	800f7ba <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2209      	movs	r2, #9
 800f7b6:	761a      	strb	r2, [r3, #24]
 800f7b8:	e002      	b.n	800f7c0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2207      	movs	r2, #7
 800f7be:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2203      	movs	r2, #3
 800f7c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	f000 fc3e 	bl	8010058 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f7dc:	e1cb      	b.n	800fb76 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f7de:	7bbb      	ldrb	r3, [r7, #14]
 800f7e0:	2b04      	cmp	r3, #4
 800f7e2:	d003      	beq.n	800f7ec <USBH_HandleControl+0xe8>
 800f7e4:	7bbb      	ldrb	r3, [r7, #14]
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	f040 81c5 	bne.w	800fb76 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	220b      	movs	r2, #11
 800f7f0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2203      	movs	r2, #3
 800f7f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f806:	2200      	movs	r2, #0
 800f808:	4619      	mov	r1, r3
 800f80a:	f000 fc25 	bl	8010058 <osMessagePut>
      break;
 800f80e:	e1b2      	b.n	800fb76 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f816:	b29a      	uxth	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6899      	ldr	r1, [r3, #8]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	899a      	ldrh	r2, [r3, #12]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	791b      	ldrb	r3, [r3, #4]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 f9f2 	bl	800fc12 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2204      	movs	r2, #4
 800f832:	761a      	strb	r2, [r3, #24]
      break;
 800f834:	e1a8      	b.n	800fb88 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	791b      	ldrb	r3, [r3, #4]
 800f83a:	4619      	mov	r1, r3
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f003 f893 	bl	8012968 <USBH_LL_GetURBState>
 800f842:	4603      	mov	r3, r0
 800f844:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f846:	7bbb      	ldrb	r3, [r7, #14]
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d110      	bne.n	800f86e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2209      	movs	r2, #9
 800f850:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2203      	movs	r2, #3
 800f856:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f866:	2200      	movs	r2, #0
 800f868:	4619      	mov	r1, r3
 800f86a:	f000 fbf5 	bl	8010058 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f86e:	7bbb      	ldrb	r3, [r7, #14]
 800f870:	2b05      	cmp	r3, #5
 800f872:	d110      	bne.n	800f896 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f874:	2303      	movs	r3, #3
 800f876:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2203      	movs	r2, #3
 800f87c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f88c:	2200      	movs	r2, #0
 800f88e:	4619      	mov	r1, r3
 800f890:	f000 fbe2 	bl	8010058 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f894:	e171      	b.n	800fb7a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800f896:	7bbb      	ldrb	r3, [r7, #14]
 800f898:	2b04      	cmp	r3, #4
 800f89a:	f040 816e 	bne.w	800fb7a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	220b      	movs	r2, #11
 800f8a2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2203      	movs	r2, #3
 800f8a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	f000 fbcc 	bl	8010058 <osMessagePut>
      break;
 800f8c0:	e15b      	b.n	800fb7a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6899      	ldr	r1, [r3, #8]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	899a      	ldrh	r2, [r3, #12]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	795b      	ldrb	r3, [r3, #5]
 800f8ce:	2001      	movs	r0, #1
 800f8d0:	9000      	str	r0, [sp, #0]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 f978 	bl	800fbc8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2206      	movs	r2, #6
 800f8e8:	761a      	strb	r2, [r3, #24]
      break;
 800f8ea:	e14d      	b.n	800fb88 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	795b      	ldrb	r3, [r3, #5]
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f003 f838 	bl	8012968 <USBH_LL_GetURBState>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f8fc:	7bbb      	ldrb	r3, [r7, #14]
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d111      	bne.n	800f926 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2207      	movs	r2, #7
 800f906:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2203      	movs	r2, #3
 800f90c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f91c:	2200      	movs	r2, #0
 800f91e:	4619      	mov	r1, r3
 800f920:	f000 fb9a 	bl	8010058 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f924:	e12b      	b.n	800fb7e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800f926:	7bbb      	ldrb	r3, [r7, #14]
 800f928:	2b05      	cmp	r3, #5
 800f92a:	d113      	bne.n	800f954 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	220c      	movs	r2, #12
 800f930:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f932:	2303      	movs	r3, #3
 800f934:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2203      	movs	r2, #3
 800f93a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f94a:	2200      	movs	r2, #0
 800f94c:	4619      	mov	r1, r3
 800f94e:	f000 fb83 	bl	8010058 <osMessagePut>
      break;
 800f952:	e114      	b.n	800fb7e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f954:	7bbb      	ldrb	r3, [r7, #14]
 800f956:	2b02      	cmp	r3, #2
 800f958:	d111      	bne.n	800f97e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2205      	movs	r2, #5
 800f95e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2203      	movs	r2, #3
 800f964:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f974:	2200      	movs	r2, #0
 800f976:	4619      	mov	r1, r3
 800f978:	f000 fb6e 	bl	8010058 <osMessagePut>
      break;
 800f97c:	e0ff      	b.n	800fb7e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f97e:	7bbb      	ldrb	r3, [r7, #14]
 800f980:	2b04      	cmp	r3, #4
 800f982:	f040 80fc 	bne.w	800fb7e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	220b      	movs	r2, #11
 800f98a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f98c:	2302      	movs	r3, #2
 800f98e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2203      	movs	r2, #3
 800f994:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	f000 fb56 	bl	8010058 <osMessagePut>
      break;
 800f9ac:	e0e7      	b.n	800fb7e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	791b      	ldrb	r3, [r3, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 f92b 	bl	800fc12 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2208      	movs	r2, #8
 800f9cc:	761a      	strb	r2, [r3, #24]

      break;
 800f9ce:	e0db      	b.n	800fb88 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	791b      	ldrb	r3, [r3, #4]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f002 ffc6 	bl	8012968 <USBH_LL_GetURBState>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f9e0:	7bbb      	ldrb	r3, [r7, #14]
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d113      	bne.n	800fa0e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	220d      	movs	r2, #13
 800f9ea:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2203      	movs	r2, #3
 800f9f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa04:	2200      	movs	r2, #0
 800fa06:	4619      	mov	r1, r3
 800fa08:	f000 fb26 	bl	8010058 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fa0c:	e0b9      	b.n	800fb82 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800fa0e:	7bbb      	ldrb	r3, [r7, #14]
 800fa10:	2b04      	cmp	r3, #4
 800fa12:	d111      	bne.n	800fa38 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	220b      	movs	r2, #11
 800fa18:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2203      	movs	r2, #3
 800fa1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa2e:	2200      	movs	r2, #0
 800fa30:	4619      	mov	r1, r3
 800fa32:	f000 fb11 	bl	8010058 <osMessagePut>
      break;
 800fa36:	e0a4      	b.n	800fb82 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800fa38:	7bbb      	ldrb	r3, [r7, #14]
 800fa3a:	2b05      	cmp	r3, #5
 800fa3c:	f040 80a1 	bne.w	800fb82 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800fa40:	2303      	movs	r3, #3
 800fa42:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2203      	movs	r2, #3
 800fa48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa58:	2200      	movs	r2, #0
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	f000 fafc 	bl	8010058 <osMessagePut>
      break;
 800fa60:	e08f      	b.n	800fb82 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	795b      	ldrb	r3, [r3, #5]
 800fa66:	2201      	movs	r2, #1
 800fa68:	9200      	str	r2, [sp, #0]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	2100      	movs	r1, #0
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 f8aa 	bl	800fbc8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fa7a:	b29a      	uxth	r2, r3
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	220a      	movs	r2, #10
 800fa84:	761a      	strb	r2, [r3, #24]
      break;
 800fa86:	e07f      	b.n	800fb88 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	795b      	ldrb	r3, [r3, #5]
 800fa8c:	4619      	mov	r1, r3
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f002 ff6a 	bl	8012968 <USBH_LL_GetURBState>
 800fa94:	4603      	mov	r3, r0
 800fa96:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fa98:	7bbb      	ldrb	r3, [r7, #14]
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	d113      	bne.n	800fac6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	220d      	movs	r2, #13
 800faa6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2203      	movs	r2, #3
 800faac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fabc:	2200      	movs	r2, #0
 800fabe:	4619      	mov	r1, r3
 800fac0:	f000 faca 	bl	8010058 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fac4:	e05f      	b.n	800fb86 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fac6:	7bbb      	ldrb	r3, [r7, #14]
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d111      	bne.n	800faf0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2209      	movs	r2, #9
 800fad0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2203      	movs	r2, #3
 800fad6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fae6:	2200      	movs	r2, #0
 800fae8:	4619      	mov	r1, r3
 800faea:	f000 fab5 	bl	8010058 <osMessagePut>
      break;
 800faee:	e04a      	b.n	800fb86 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800faf0:	7bbb      	ldrb	r3, [r7, #14]
 800faf2:	2b04      	cmp	r3, #4
 800faf4:	d147      	bne.n	800fb86 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	220b      	movs	r2, #11
 800fafa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2203      	movs	r2, #3
 800fb00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fb10:	2200      	movs	r2, #0
 800fb12:	4619      	mov	r1, r3
 800fb14:	f000 faa0 	bl	8010058 <osMessagePut>
      break;
 800fb18:	e035      	b.n	800fb86 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	7e5b      	ldrb	r3, [r3, #25]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	765a      	strb	r2, [r3, #25]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7e5b      	ldrb	r3, [r3, #25]
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d806      	bhi.n	800fb3c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2201      	movs	r2, #1
 800fb32:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fb3a:	e025      	b.n	800fb88 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fb42:	2106      	movs	r1, #6
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	795b      	ldrb	r3, [r3, #5]
 800fb52:	4619      	mov	r1, r3
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f90d 	bl	800fd74 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	791b      	ldrb	r3, [r3, #4]
 800fb5e:	4619      	mov	r1, r3
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f907 	bl	800fd74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fb6c:	2302      	movs	r3, #2
 800fb6e:	73fb      	strb	r3, [r7, #15]
      break;
 800fb70:	e00a      	b.n	800fb88 <USBH_HandleControl+0x484>

    default:
      break;
 800fb72:	bf00      	nop
 800fb74:	e008      	b.n	800fb88 <USBH_HandleControl+0x484>
      break;
 800fb76:	bf00      	nop
 800fb78:	e006      	b.n	800fb88 <USBH_HandleControl+0x484>
      break;
 800fb7a:	bf00      	nop
 800fb7c:	e004      	b.n	800fb88 <USBH_HandleControl+0x484>
      break;
 800fb7e:	bf00      	nop
 800fb80:	e002      	b.n	800fb88 <USBH_HandleControl+0x484>
      break;
 800fb82:	bf00      	nop
 800fb84:	e000      	b.n	800fb88 <USBH_HandleControl+0x484>
      break;
 800fb86:	bf00      	nop
  }

  return status;
 800fb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop

0800fb94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b088      	sub	sp, #32
 800fb98:	af04      	add	r7, sp, #16
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fba2:	79f9      	ldrb	r1, [r7, #7]
 800fba4:	2300      	movs	r3, #0
 800fba6:	9303      	str	r3, [sp, #12]
 800fba8:	2308      	movs	r3, #8
 800fbaa:	9302      	str	r3, [sp, #8]
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f002 fea4 	bl	8012906 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fbbe:	2300      	movs	r3, #0
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3710      	adds	r7, #16
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af04      	add	r7, sp, #16
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	4611      	mov	r1, r2
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	460b      	mov	r3, r1
 800fbd8:	80fb      	strh	r3, [r7, #6]
 800fbda:	4613      	mov	r3, r2
 800fbdc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d001      	beq.n	800fbec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fbec:	7979      	ldrb	r1, [r7, #5]
 800fbee:	7e3b      	ldrb	r3, [r7, #24]
 800fbf0:	9303      	str	r3, [sp, #12]
 800fbf2:	88fb      	ldrh	r3, [r7, #6]
 800fbf4:	9302      	str	r3, [sp, #8]
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	9301      	str	r3, [sp, #4]
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	9300      	str	r3, [sp, #0]
 800fbfe:	2300      	movs	r3, #0
 800fc00:	2200      	movs	r2, #0
 800fc02:	68f8      	ldr	r0, [r7, #12]
 800fc04:	f002 fe7f 	bl	8012906 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3710      	adds	r7, #16
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}

0800fc12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fc12:	b580      	push	{r7, lr}
 800fc14:	b088      	sub	sp, #32
 800fc16:	af04      	add	r7, sp, #16
 800fc18:	60f8      	str	r0, [r7, #12]
 800fc1a:	60b9      	str	r1, [r7, #8]
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	461a      	mov	r2, r3
 800fc20:	460b      	mov	r3, r1
 800fc22:	80fb      	strh	r3, [r7, #6]
 800fc24:	4613      	mov	r3, r2
 800fc26:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc28:	7979      	ldrb	r1, [r7, #5]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	9303      	str	r3, [sp, #12]
 800fc2e:	88fb      	ldrh	r3, [r7, #6]
 800fc30:	9302      	str	r3, [sp, #8]
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	9301      	str	r3, [sp, #4]
 800fc36:	2301      	movs	r3, #1
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	68f8      	ldr	r0, [r7, #12]
 800fc40:	f002 fe61 	bl	8012906 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fc44:	2300      	movs	r3, #0

}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3710      	adds	r7, #16
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b088      	sub	sp, #32
 800fc52:	af04      	add	r7, sp, #16
 800fc54:	60f8      	str	r0, [r7, #12]
 800fc56:	60b9      	str	r1, [r7, #8]
 800fc58:	4611      	mov	r1, r2
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	80fb      	strh	r3, [r7, #6]
 800fc60:	4613      	mov	r3, r2
 800fc62:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d001      	beq.n	800fc72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc72:	7979      	ldrb	r1, [r7, #5]
 800fc74:	7e3b      	ldrb	r3, [r7, #24]
 800fc76:	9303      	str	r3, [sp, #12]
 800fc78:	88fb      	ldrh	r3, [r7, #6]
 800fc7a:	9302      	str	r3, [sp, #8]
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	9301      	str	r3, [sp, #4]
 800fc80:	2301      	movs	r3, #1
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	2302      	movs	r3, #2
 800fc86:	2200      	movs	r2, #0
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f002 fe3c 	bl	8012906 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b088      	sub	sp, #32
 800fc9c:	af04      	add	r7, sp, #16
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	4611      	mov	r1, r2
 800fca4:	461a      	mov	r2, r3
 800fca6:	460b      	mov	r3, r1
 800fca8:	80fb      	strh	r3, [r7, #6]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fcae:	7979      	ldrb	r1, [r7, #5]
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	9303      	str	r3, [sp, #12]
 800fcb4:	88fb      	ldrh	r3, [r7, #6]
 800fcb6:	9302      	str	r3, [sp, #8]
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	9301      	str	r3, [sp, #4]
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	2302      	movs	r3, #2
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f002 fe1e 	bl	8012906 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3710      	adds	r7, #16
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af04      	add	r7, sp, #16
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	4608      	mov	r0, r1
 800fcde:	4611      	mov	r1, r2
 800fce0:	461a      	mov	r2, r3
 800fce2:	4603      	mov	r3, r0
 800fce4:	70fb      	strb	r3, [r7, #3]
 800fce6:	460b      	mov	r3, r1
 800fce8:	70bb      	strb	r3, [r7, #2]
 800fcea:	4613      	mov	r3, r2
 800fcec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fcee:	7878      	ldrb	r0, [r7, #1]
 800fcf0:	78ba      	ldrb	r2, [r7, #2]
 800fcf2:	78f9      	ldrb	r1, [r7, #3]
 800fcf4:	8b3b      	ldrh	r3, [r7, #24]
 800fcf6:	9302      	str	r3, [sp, #8]
 800fcf8:	7d3b      	ldrb	r3, [r7, #20]
 800fcfa:	9301      	str	r3, [sp, #4]
 800fcfc:	7c3b      	ldrb	r3, [r7, #16]
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	4603      	mov	r3, r0
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f002 fdb1 	bl	801286a <USBH_LL_OpenPipe>

  return USBH_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3708      	adds	r7, #8
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fd12:	b580      	push	{r7, lr}
 800fd14:	b082      	sub	sp, #8
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800fd1e:	78fb      	ldrb	r3, [r7, #3]
 800fd20:	4619      	mov	r1, r3
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f002 fdd0 	bl	80128c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fd28:	2300      	movs	r3, #0
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3708      	adds	r7, #8
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b084      	sub	sp, #16
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 f836 	bl	800fdb0 <USBH_GetFreePipe>
 800fd44:	4603      	mov	r3, r0
 800fd46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fd48:	89fb      	ldrh	r3, [r7, #14]
 800fd4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d00a      	beq.n	800fd68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800fd52:	78fa      	ldrb	r2, [r7, #3]
 800fd54:	89fb      	ldrh	r3, [r7, #14]
 800fd56:	f003 030f 	and.w	r3, r3, #15
 800fd5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd5e:	6879      	ldr	r1, [r7, #4]
 800fd60:	33e0      	adds	r3, #224	; 0xe0
 800fd62:	009b      	lsls	r3, r3, #2
 800fd64:	440b      	add	r3, r1
 800fd66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fd68:	89fb      	ldrh	r3, [r7, #14]
 800fd6a:	b2db      	uxtb	r3, r3
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3710      	adds	r7, #16
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fd80:	78fb      	ldrb	r3, [r7, #3]
 800fd82:	2b0a      	cmp	r3, #10
 800fd84:	d80d      	bhi.n	800fda2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fd86:	78fb      	ldrb	r3, [r7, #3]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	33e0      	adds	r3, #224	; 0xe0
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	4413      	add	r3, r2
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	78fb      	ldrb	r3, [r7, #3]
 800fd94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fd98:	6879      	ldr	r1, [r7, #4]
 800fd9a:	33e0      	adds	r3, #224	; 0xe0
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	440b      	add	r3, r1
 800fda0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fda2:	2300      	movs	r3, #0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr

0800fdb0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b085      	sub	sp, #20
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	73fb      	strb	r3, [r7, #15]
 800fdc0:	e00f      	b.n	800fde2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fdc2:	7bfb      	ldrb	r3, [r7, #15]
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	33e0      	adds	r3, #224	; 0xe0
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d102      	bne.n	800fddc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800fdd6:	7bfb      	ldrb	r3, [r7, #15]
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	e007      	b.n	800fdec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
 800fdde:	3301      	adds	r3, #1
 800fde0:	73fb      	strb	r3, [r7, #15]
 800fde2:	7bfb      	ldrb	r3, [r7, #15]
 800fde4:	2b0a      	cmp	r3, #10
 800fde6:	d9ec      	bls.n	800fdc2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fde8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3714      	adds	r7, #20
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b087      	sub	sp, #28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	4613      	mov	r3, r2
 800fe04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fe06:	2301      	movs	r3, #1
 800fe08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fe0e:	4b1f      	ldr	r3, [pc, #124]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe10:	7a5b      	ldrb	r3, [r3, #9]
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d131      	bne.n	800fe7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fe18:	4b1c      	ldr	r3, [pc, #112]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe1a:	7a5b      	ldrb	r3, [r3, #9]
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	461a      	mov	r2, r3
 800fe20:	4b1a      	ldr	r3, [pc, #104]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe22:	2100      	movs	r1, #0
 800fe24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fe26:	4b19      	ldr	r3, [pc, #100]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe28:	7a5b      	ldrb	r3, [r3, #9]
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	4a17      	ldr	r2, [pc, #92]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	4413      	add	r3, r2
 800fe32:	68fa      	ldr	r2, [r7, #12]
 800fe34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fe36:	4b15      	ldr	r3, [pc, #84]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe38:	7a5b      	ldrb	r3, [r3, #9]
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	4b13      	ldr	r3, [pc, #76]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe40:	4413      	add	r3, r2
 800fe42:	79fa      	ldrb	r2, [r7, #7]
 800fe44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fe46:	4b11      	ldr	r3, [pc, #68]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe48:	7a5b      	ldrb	r3, [r3, #9]
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	1c5a      	adds	r2, r3, #1
 800fe4e:	b2d1      	uxtb	r1, r2
 800fe50:	4a0e      	ldr	r2, [pc, #56]	; (800fe8c <FATFS_LinkDriverEx+0x94>)
 800fe52:	7251      	strb	r1, [r2, #9]
 800fe54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fe56:	7dbb      	ldrb	r3, [r7, #22]
 800fe58:	3330      	adds	r3, #48	; 0x30
 800fe5a:	b2da      	uxtb	r2, r3
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	3301      	adds	r3, #1
 800fe64:	223a      	movs	r2, #58	; 0x3a
 800fe66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	3302      	adds	r3, #2
 800fe6c:	222f      	movs	r2, #47	; 0x2f
 800fe6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	3303      	adds	r3, #3
 800fe74:	2200      	movs	r2, #0
 800fe76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fe7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	371c      	adds	r7, #28
 800fe82:	46bd      	mov	sp, r7
 800fe84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	20000320 	.word	0x20000320

0800fe90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	6839      	ldr	r1, [r7, #0]
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7ff ffaa 	bl	800fdf8 <FATFS_LinkDriverEx>
 800fea4:	4603      	mov	r3, r0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}

0800feae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800feae:	b480      	push	{r7}
 800feb0:	b085      	sub	sp, #20
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	4603      	mov	r3, r0
 800feb6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800feb8:	2300      	movs	r3, #0
 800feba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800febc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fec0:	2b84      	cmp	r3, #132	; 0x84
 800fec2:	d005      	beq.n	800fed0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fec4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	4413      	add	r3, r2
 800fecc:	3303      	adds	r3, #3
 800fece:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fed0:	68fb      	ldr	r3, [r7, #12]
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr

0800fede <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fede:	b480      	push	{r7}
 800fee0:	b083      	sub	sp, #12
 800fee2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fee4:	f3ef 8305 	mrs	r3, IPSR
 800fee8:	607b      	str	r3, [r7, #4]
  return(result);
 800feea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800feec:	2b00      	cmp	r3, #0
 800feee:	bf14      	ite	ne
 800fef0:	2301      	movne	r3, #1
 800fef2:	2300      	moveq	r3, #0
 800fef4:	b2db      	uxtb	r3, r3
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	370c      	adds	r7, #12
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr

0800ff02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ff06:	f001 f95b 	bl	80111c0 <vTaskStartScheduler>
  
  return osOK;
 800ff0a:	2300      	movs	r3, #0
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800ff14:	f001 fdae 	bl	8011a74 <xTaskGetSchedulerState>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d101      	bne.n	800ff22 <osKernelRunning+0x12>
    return 0;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	e000      	b.n	800ff24 <osKernelRunning+0x14>
  else
    return 1;
 800ff22:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ff2c:	f7ff ffd7 	bl	800fede <inHandlerMode>
 800ff30:	4603      	mov	r3, r0
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d003      	beq.n	800ff3e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ff36:	f001 fa63 	bl	8011400 <xTaskGetTickCountFromISR>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	e002      	b.n	800ff44 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ff3e:	f001 fa4f 	bl	80113e0 <xTaskGetTickCount>
 800ff42:	4603      	mov	r3, r0
  }
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ff48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff4a:	b089      	sub	sp, #36	; 0x24
 800ff4c:	af04      	add	r7, sp, #16
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	695b      	ldr	r3, [r3, #20]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d020      	beq.n	800ff9c <osThreadCreate+0x54>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	699b      	ldr	r3, [r3, #24]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d01c      	beq.n	800ff9c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	685c      	ldr	r4, [r3, #4]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681d      	ldr	r5, [r3, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	691e      	ldr	r6, [r3, #16]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7ff ff9a 	bl	800feae <makeFreeRtosPriority>
 800ff7a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	695b      	ldr	r3, [r3, #20]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff84:	9202      	str	r2, [sp, #8]
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	9100      	str	r1, [sp, #0]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	4632      	mov	r2, r6
 800ff8e:	4629      	mov	r1, r5
 800ff90:	4620      	mov	r0, r4
 800ff92:	f000 ff39 	bl	8010e08 <xTaskCreateStatic>
 800ff96:	4603      	mov	r3, r0
 800ff98:	60fb      	str	r3, [r7, #12]
 800ff9a:	e01c      	b.n	800ffd6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	685c      	ldr	r4, [r3, #4]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ffa8:	b29e      	uxth	r6, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7ff ff7c 	bl	800feae <makeFreeRtosPriority>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	f107 030c 	add.w	r3, r7, #12
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	9200      	str	r2, [sp, #0]
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	4632      	mov	r2, r6
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f000 ff81 	bl	8010ece <xTaskCreate>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d001      	beq.n	800ffd6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e000      	b.n	800ffd8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3714      	adds	r7, #20
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ffe0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d001      	beq.n	800fff6 <osDelay+0x16>
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	e000      	b.n	800fff8 <osDelay+0x18>
 800fff6:	2301      	movs	r3, #1
 800fff8:	4618      	mov	r0, r3
 800fffa:	f001 f8ab 	bl	8011154 <vTaskDelay>
  
  return osOK;
 800fffe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010000:	4618      	mov	r0, r3
 8010002:	3710      	adds	r7, #16
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010008:	b590      	push	{r4, r7, lr}
 801000a:	b085      	sub	sp, #20
 801000c:	af02      	add	r7, sp, #8
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d011      	beq.n	801003e <osMessageCreate+0x36>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d00d      	beq.n	801003e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6818      	ldr	r0, [r3, #0]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6859      	ldr	r1, [r3, #4]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	689a      	ldr	r2, [r3, #8]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	2400      	movs	r4, #0
 8010034:	9400      	str	r4, [sp, #0]
 8010036:	f000 f9e1 	bl	80103fc <xQueueGenericCreateStatic>
 801003a:	4603      	mov	r3, r0
 801003c:	e008      	b.n	8010050 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6818      	ldr	r0, [r3, #0]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	2200      	movs	r2, #0
 8010048:	4619      	mov	r1, r3
 801004a:	f000 fa59 	bl	8010500 <xQueueGenericCreate>
 801004e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010050:	4618      	mov	r0, r3
 8010052:	370c      	adds	r7, #12
 8010054:	46bd      	mov	sp, r7
 8010056:	bd90      	pop	{r4, r7, pc}

08010058 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010064:	2300      	movs	r3, #0
 8010066:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d101      	bne.n	8010076 <osMessagePut+0x1e>
    ticks = 1;
 8010072:	2301      	movs	r3, #1
 8010074:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010076:	f7ff ff32 	bl	800fede <inHandlerMode>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d018      	beq.n	80100b2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010080:	f107 0210 	add.w	r2, r7, #16
 8010084:	f107 0108 	add.w	r1, r7, #8
 8010088:	2300      	movs	r3, #0
 801008a:	68f8      	ldr	r0, [r7, #12]
 801008c:	f000 fba0 	bl	80107d0 <xQueueGenericSendFromISR>
 8010090:	4603      	mov	r3, r0
 8010092:	2b01      	cmp	r3, #1
 8010094:	d001      	beq.n	801009a <osMessagePut+0x42>
      return osErrorOS;
 8010096:	23ff      	movs	r3, #255	; 0xff
 8010098:	e018      	b.n	80100cc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801009a:	693b      	ldr	r3, [r7, #16]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d014      	beq.n	80100ca <osMessagePut+0x72>
 80100a0:	4b0c      	ldr	r3, [pc, #48]	; (80100d4 <osMessagePut+0x7c>)
 80100a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100a6:	601a      	str	r2, [r3, #0]
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	e00b      	b.n	80100ca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80100b2:	f107 0108 	add.w	r1, r7, #8
 80100b6:	2300      	movs	r3, #0
 80100b8:	697a      	ldr	r2, [r7, #20]
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f000 fa82 	bl	80105c4 <xQueueGenericSend>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d001      	beq.n	80100ca <osMessagePut+0x72>
      return osErrorOS;
 80100c6:	23ff      	movs	r3, #255	; 0xff
 80100c8:	e000      	b.n	80100cc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3718      	adds	r7, #24
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	e000ed04 	.word	0xe000ed04

080100d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80100d8:	b590      	push	{r4, r7, lr}
 80100da:	b08b      	sub	sp, #44	; 0x2c
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80100e8:	2300      	movs	r3, #0
 80100ea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d10a      	bne.n	8010108 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80100f2:	2380      	movs	r3, #128	; 0x80
 80100f4:	617b      	str	r3, [r7, #20]
    return event;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	461c      	mov	r4, r3
 80100fa:	f107 0314 	add.w	r3, r7, #20
 80100fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010106:	e054      	b.n	80101b2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010108:	2300      	movs	r3, #0
 801010a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801010c:	2300      	movs	r3, #0
 801010e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010116:	d103      	bne.n	8010120 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801011c:	627b      	str	r3, [r7, #36]	; 0x24
 801011e:	e009      	b.n	8010134 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d006      	beq.n	8010134 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801012a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012c:	2b00      	cmp	r3, #0
 801012e:	d101      	bne.n	8010134 <osMessageGet+0x5c>
      ticks = 1;
 8010130:	2301      	movs	r3, #1
 8010132:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010134:	f7ff fed3 	bl	800fede <inHandlerMode>
 8010138:	4603      	mov	r3, r0
 801013a:	2b00      	cmp	r3, #0
 801013c:	d01c      	beq.n	8010178 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801013e:	f107 0220 	add.w	r2, r7, #32
 8010142:	f107 0314 	add.w	r3, r7, #20
 8010146:	3304      	adds	r3, #4
 8010148:	4619      	mov	r1, r3
 801014a:	68b8      	ldr	r0, [r7, #8]
 801014c:	f000 fcc6 	bl	8010adc <xQueueReceiveFromISR>
 8010150:	4603      	mov	r3, r0
 8010152:	2b01      	cmp	r3, #1
 8010154:	d102      	bne.n	801015c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010156:	2310      	movs	r3, #16
 8010158:	617b      	str	r3, [r7, #20]
 801015a:	e001      	b.n	8010160 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801015c:	2300      	movs	r3, #0
 801015e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010160:	6a3b      	ldr	r3, [r7, #32]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d01d      	beq.n	80101a2 <osMessageGet+0xca>
 8010166:	4b15      	ldr	r3, [pc, #84]	; (80101bc <osMessageGet+0xe4>)
 8010168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801016c:	601a      	str	r2, [r3, #0]
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	f3bf 8f6f 	isb	sy
 8010176:	e014      	b.n	80101a2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010178:	f107 0314 	add.w	r3, r7, #20
 801017c:	3304      	adds	r3, #4
 801017e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010180:	4619      	mov	r1, r3
 8010182:	68b8      	ldr	r0, [r7, #8]
 8010184:	f000 fbc4 	bl	8010910 <xQueueReceive>
 8010188:	4603      	mov	r3, r0
 801018a:	2b01      	cmp	r3, #1
 801018c:	d102      	bne.n	8010194 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801018e:	2310      	movs	r3, #16
 8010190:	617b      	str	r3, [r7, #20]
 8010192:	e006      	b.n	80101a2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010196:	2b00      	cmp	r3, #0
 8010198:	d101      	bne.n	801019e <osMessageGet+0xc6>
 801019a:	2300      	movs	r3, #0
 801019c:	e000      	b.n	80101a0 <osMessageGet+0xc8>
 801019e:	2340      	movs	r3, #64	; 0x40
 80101a0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	461c      	mov	r4, r3
 80101a6:	f107 0314 	add.w	r3, r7, #20
 80101aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80101ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80101b2:	68f8      	ldr	r0, [r7, #12]
 80101b4:	372c      	adds	r7, #44	; 0x2c
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd90      	pop	{r4, r7, pc}
 80101ba:	bf00      	nop
 80101bc:	e000ed04 	.word	0xe000ed04

080101c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f103 0208 	add.w	r2, r3, #8
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f103 0208 	add.w	r2, r3, #8
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f103 0208 	add.w	r2, r3, #8
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801020e:	bf00      	nop
 8010210:	370c      	adds	r7, #12
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr

0801021a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801021a:	b480      	push	{r7}
 801021c:	b085      	sub	sp, #20
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
 8010222:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	689a      	ldr	r2, [r3, #8]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	683a      	ldr	r2, [r7, #0]
 801023e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	683a      	ldr	r2, [r7, #0]
 8010244:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	1c5a      	adds	r2, r3, #1
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]
}
 8010256:	bf00      	nop
 8010258:	3714      	adds	r7, #20
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr

08010262 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010262:	b480      	push	{r7}
 8010264:	b085      	sub	sp, #20
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
 801026a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010278:	d103      	bne.n	8010282 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	691b      	ldr	r3, [r3, #16]
 801027e:	60fb      	str	r3, [r7, #12]
 8010280:	e00c      	b.n	801029c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	3308      	adds	r3, #8
 8010286:	60fb      	str	r3, [r7, #12]
 8010288:	e002      	b.n	8010290 <vListInsert+0x2e>
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	60fb      	str	r3, [r7, #12]
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	429a      	cmp	r2, r3
 801029a:	d2f6      	bcs.n	801028a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	685a      	ldr	r2, [r3, #4]
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	683a      	ldr	r2, [r7, #0]
 80102b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	687a      	ldr	r2, [r7, #4]
 80102bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	1c5a      	adds	r2, r3, #1
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	601a      	str	r2, [r3, #0]
}
 80102c8:	bf00      	nop
 80102ca:	3714      	adds	r7, #20
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	691b      	ldr	r3, [r3, #16]
 80102e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	6892      	ldr	r2, [r2, #8]
 80102ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	6852      	ldr	r2, [r2, #4]
 80102f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d103      	bne.n	8010308 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	689a      	ldr	r2, [r3, #8]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	1e5a      	subs	r2, r3, #1
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3714      	adds	r7, #20
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr

08010328 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d10c      	bne.n	8010356 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801033c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010340:	b672      	cpsid	i
 8010342:	f383 8811 	msr	BASEPRI, r3
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	f3bf 8f4f 	dsb	sy
 801034e:	b662      	cpsie	i
 8010350:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010352:	bf00      	nop
 8010354:	e7fe      	b.n	8010354 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010356:	f001 fda9 	bl	8011eac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681a      	ldr	r2, [r3, #0]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010362:	68f9      	ldr	r1, [r7, #12]
 8010364:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010366:	fb01 f303 	mul.w	r3, r1, r3
 801036a:	441a      	add	r2, r3
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2200      	movs	r2, #0
 8010374:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010386:	3b01      	subs	r3, #1
 8010388:	68f9      	ldr	r1, [r7, #12]
 801038a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801038c:	fb01 f303 	mul.w	r3, r1, r3
 8010390:	441a      	add	r2, r3
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	22ff      	movs	r2, #255	; 0xff
 801039a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	22ff      	movs	r2, #255	; 0xff
 80103a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d114      	bne.n	80103d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	691b      	ldr	r3, [r3, #16]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d01a      	beq.n	80103ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	3310      	adds	r3, #16
 80103b8:	4618      	mov	r0, r3
 80103ba:	f001 f995 	bl	80116e8 <xTaskRemoveFromEventList>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d012      	beq.n	80103ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80103c4:	4b0c      	ldr	r3, [pc, #48]	; (80103f8 <xQueueGenericReset+0xd0>)
 80103c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ca:	601a      	str	r2, [r3, #0]
 80103cc:	f3bf 8f4f 	dsb	sy
 80103d0:	f3bf 8f6f 	isb	sy
 80103d4:	e009      	b.n	80103ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	3310      	adds	r3, #16
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff fef0 	bl	80101c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	3324      	adds	r3, #36	; 0x24
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7ff feeb 	bl	80101c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80103ea:	f001 fd93 	bl	8011f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80103ee:	2301      	movs	r3, #1
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	e000ed04 	.word	0xe000ed04

080103fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b08e      	sub	sp, #56	; 0x38
 8010400:	af02      	add	r7, sp, #8
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
 8010408:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10c      	bne.n	801042a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8010410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010414:	b672      	cpsid	i
 8010416:	f383 8811 	msr	BASEPRI, r3
 801041a:	f3bf 8f6f 	isb	sy
 801041e:	f3bf 8f4f 	dsb	sy
 8010422:	b662      	cpsie	i
 8010424:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010426:	bf00      	nop
 8010428:	e7fe      	b.n	8010428 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d10c      	bne.n	801044a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8010430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010434:	b672      	cpsid	i
 8010436:	f383 8811 	msr	BASEPRI, r3
 801043a:	f3bf 8f6f 	isb	sy
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	b662      	cpsie	i
 8010444:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010446:	bf00      	nop
 8010448:	e7fe      	b.n	8010448 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <xQueueGenericCreateStatic+0x5a>
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d001      	beq.n	801045a <xQueueGenericCreateStatic+0x5e>
 8010456:	2301      	movs	r3, #1
 8010458:	e000      	b.n	801045c <xQueueGenericCreateStatic+0x60>
 801045a:	2300      	movs	r3, #0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d10c      	bne.n	801047a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8010460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010464:	b672      	cpsid	i
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	b662      	cpsie	i
 8010474:	623b      	str	r3, [r7, #32]
}
 8010476:	bf00      	nop
 8010478:	e7fe      	b.n	8010478 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d102      	bne.n	8010486 <xQueueGenericCreateStatic+0x8a>
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d101      	bne.n	801048a <xQueueGenericCreateStatic+0x8e>
 8010486:	2301      	movs	r3, #1
 8010488:	e000      	b.n	801048c <xQueueGenericCreateStatic+0x90>
 801048a:	2300      	movs	r3, #0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d10c      	bne.n	80104aa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8010490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010494:	b672      	cpsid	i
 8010496:	f383 8811 	msr	BASEPRI, r3
 801049a:	f3bf 8f6f 	isb	sy
 801049e:	f3bf 8f4f 	dsb	sy
 80104a2:	b662      	cpsie	i
 80104a4:	61fb      	str	r3, [r7, #28]
}
 80104a6:	bf00      	nop
 80104a8:	e7fe      	b.n	80104a8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80104aa:	2348      	movs	r3, #72	; 0x48
 80104ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	2b48      	cmp	r3, #72	; 0x48
 80104b2:	d00c      	beq.n	80104ce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80104b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b8:	b672      	cpsid	i
 80104ba:	f383 8811 	msr	BASEPRI, r3
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f3bf 8f4f 	dsb	sy
 80104c6:	b662      	cpsie	i
 80104c8:	61bb      	str	r3, [r7, #24]
}
 80104ca:	bf00      	nop
 80104cc:	e7fe      	b.n	80104cc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80104ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00d      	beq.n	80104f6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80104da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104dc:	2201      	movs	r2, #1
 80104de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80104e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80104e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	4613      	mov	r3, r2
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	68b9      	ldr	r1, [r7, #8]
 80104f0:	68f8      	ldr	r0, [r7, #12]
 80104f2:	f000 f847 	bl	8010584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80104f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3730      	adds	r7, #48	; 0x30
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}

08010500 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010500:	b580      	push	{r7, lr}
 8010502:	b08a      	sub	sp, #40	; 0x28
 8010504:	af02      	add	r7, sp, #8
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	4613      	mov	r3, r2
 801050c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10c      	bne.n	801052e <xQueueGenericCreate+0x2e>
	__asm volatile
 8010514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010518:	b672      	cpsid	i
 801051a:	f383 8811 	msr	BASEPRI, r3
 801051e:	f3bf 8f6f 	isb	sy
 8010522:	f3bf 8f4f 	dsb	sy
 8010526:	b662      	cpsie	i
 8010528:	613b      	str	r3, [r7, #16]
}
 801052a:	bf00      	nop
 801052c:	e7fe      	b.n	801052c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d102      	bne.n	801053a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010534:	2300      	movs	r3, #0
 8010536:	61fb      	str	r3, [r7, #28]
 8010538:	e004      	b.n	8010544 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	68ba      	ldr	r2, [r7, #8]
 801053e:	fb02 f303 	mul.w	r3, r2, r3
 8010542:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	3348      	adds	r3, #72	; 0x48
 8010548:	4618      	mov	r0, r3
 801054a:	f001 fddb 	bl	8012104 <pvPortMalloc>
 801054e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d011      	beq.n	801057a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	3348      	adds	r3, #72	; 0x48
 801055e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010568:	79fa      	ldrb	r2, [r7, #7]
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	4613      	mov	r3, r2
 8010570:	697a      	ldr	r2, [r7, #20]
 8010572:	68b9      	ldr	r1, [r7, #8]
 8010574:	68f8      	ldr	r0, [r7, #12]
 8010576:	f000 f805 	bl	8010584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801057a:	69bb      	ldr	r3, [r7, #24]
	}
 801057c:	4618      	mov	r0, r3
 801057e:	3720      	adds	r7, #32
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	607a      	str	r2, [r7, #4]
 8010590:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d103      	bne.n	80105a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010598:	69bb      	ldr	r3, [r7, #24]
 801059a:	69ba      	ldr	r2, [r7, #24]
 801059c:	601a      	str	r2, [r3, #0]
 801059e:	e002      	b.n	80105a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80105a0:	69bb      	ldr	r3, [r7, #24]
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	68ba      	ldr	r2, [r7, #8]
 80105b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80105b2:	2101      	movs	r1, #1
 80105b4:	69b8      	ldr	r0, [r7, #24]
 80105b6:	f7ff feb7 	bl	8010328 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80105ba:	bf00      	nop
 80105bc:	3710      	adds	r7, #16
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
	...

080105c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08e      	sub	sp, #56	; 0x38
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	607a      	str	r2, [r7, #4]
 80105d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80105d2:	2300      	movs	r3, #0
 80105d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80105da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10c      	bne.n	80105fa <xQueueGenericSend+0x36>
	__asm volatile
 80105e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e4:	b672      	cpsid	i
 80105e6:	f383 8811 	msr	BASEPRI, r3
 80105ea:	f3bf 8f6f 	isb	sy
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	b662      	cpsie	i
 80105f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80105f6:	bf00      	nop
 80105f8:	e7fe      	b.n	80105f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d103      	bne.n	8010608 <xQueueGenericSend+0x44>
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010604:	2b00      	cmp	r3, #0
 8010606:	d101      	bne.n	801060c <xQueueGenericSend+0x48>
 8010608:	2301      	movs	r3, #1
 801060a:	e000      	b.n	801060e <xQueueGenericSend+0x4a>
 801060c:	2300      	movs	r3, #0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10c      	bne.n	801062c <xQueueGenericSend+0x68>
	__asm volatile
 8010612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010616:	b672      	cpsid	i
 8010618:	f383 8811 	msr	BASEPRI, r3
 801061c:	f3bf 8f6f 	isb	sy
 8010620:	f3bf 8f4f 	dsb	sy
 8010624:	b662      	cpsie	i
 8010626:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010628:	bf00      	nop
 801062a:	e7fe      	b.n	801062a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	2b02      	cmp	r3, #2
 8010630:	d103      	bne.n	801063a <xQueueGenericSend+0x76>
 8010632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010636:	2b01      	cmp	r3, #1
 8010638:	d101      	bne.n	801063e <xQueueGenericSend+0x7a>
 801063a:	2301      	movs	r3, #1
 801063c:	e000      	b.n	8010640 <xQueueGenericSend+0x7c>
 801063e:	2300      	movs	r3, #0
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10c      	bne.n	801065e <xQueueGenericSend+0x9a>
	__asm volatile
 8010644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010648:	b672      	cpsid	i
 801064a:	f383 8811 	msr	BASEPRI, r3
 801064e:	f3bf 8f6f 	isb	sy
 8010652:	f3bf 8f4f 	dsb	sy
 8010656:	b662      	cpsie	i
 8010658:	623b      	str	r3, [r7, #32]
}
 801065a:	bf00      	nop
 801065c:	e7fe      	b.n	801065c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801065e:	f001 fa09 	bl	8011a74 <xTaskGetSchedulerState>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <xQueueGenericSend+0xaa>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d101      	bne.n	8010672 <xQueueGenericSend+0xae>
 801066e:	2301      	movs	r3, #1
 8010670:	e000      	b.n	8010674 <xQueueGenericSend+0xb0>
 8010672:	2300      	movs	r3, #0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d10c      	bne.n	8010692 <xQueueGenericSend+0xce>
	__asm volatile
 8010678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067c:	b672      	cpsid	i
 801067e:	f383 8811 	msr	BASEPRI, r3
 8010682:	f3bf 8f6f 	isb	sy
 8010686:	f3bf 8f4f 	dsb	sy
 801068a:	b662      	cpsie	i
 801068c:	61fb      	str	r3, [r7, #28]
}
 801068e:	bf00      	nop
 8010690:	e7fe      	b.n	8010690 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010692:	f001 fc0b 	bl	8011eac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801069a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801069c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801069e:	429a      	cmp	r2, r3
 80106a0:	d302      	bcc.n	80106a8 <xQueueGenericSend+0xe4>
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	2b02      	cmp	r3, #2
 80106a6:	d129      	bne.n	80106fc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80106a8:	683a      	ldr	r2, [r7, #0]
 80106aa:	68b9      	ldr	r1, [r7, #8]
 80106ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106ae:	f000 fa9b 	bl	8010be8 <prvCopyDataToQueue>
 80106b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d010      	beq.n	80106de <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106be:	3324      	adds	r3, #36	; 0x24
 80106c0:	4618      	mov	r0, r3
 80106c2:	f001 f811 	bl	80116e8 <xTaskRemoveFromEventList>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d013      	beq.n	80106f4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80106cc:	4b3f      	ldr	r3, [pc, #252]	; (80107cc <xQueueGenericSend+0x208>)
 80106ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106d2:	601a      	str	r2, [r3, #0]
 80106d4:	f3bf 8f4f 	dsb	sy
 80106d8:	f3bf 8f6f 	isb	sy
 80106dc:	e00a      	b.n	80106f4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80106de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d007      	beq.n	80106f4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80106e4:	4b39      	ldr	r3, [pc, #228]	; (80107cc <xQueueGenericSend+0x208>)
 80106e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106ea:	601a      	str	r2, [r3, #0]
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80106f4:	f001 fc0e 	bl	8011f14 <vPortExitCritical>
				return pdPASS;
 80106f8:	2301      	movs	r3, #1
 80106fa:	e063      	b.n	80107c4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d103      	bne.n	801070a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010702:	f001 fc07 	bl	8011f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010706:	2300      	movs	r3, #0
 8010708:	e05c      	b.n	80107c4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 801070a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801070c:	2b00      	cmp	r3, #0
 801070e:	d106      	bne.n	801071e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010710:	f107 0314 	add.w	r3, r7, #20
 8010714:	4618      	mov	r0, r3
 8010716:	f001 f84b 	bl	80117b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801071a:	2301      	movs	r3, #1
 801071c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801071e:	f001 fbf9 	bl	8011f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010722:	f000 fdb1 	bl	8011288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010726:	f001 fbc1 	bl	8011eac <vPortEnterCritical>
 801072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010730:	b25b      	sxtb	r3, r3
 8010732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010736:	d103      	bne.n	8010740 <xQueueGenericSend+0x17c>
 8010738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073a:	2200      	movs	r2, #0
 801073c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010746:	b25b      	sxtb	r3, r3
 8010748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801074c:	d103      	bne.n	8010756 <xQueueGenericSend+0x192>
 801074e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010750:	2200      	movs	r2, #0
 8010752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010756:	f001 fbdd 	bl	8011f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801075a:	1d3a      	adds	r2, r7, #4
 801075c:	f107 0314 	add.w	r3, r7, #20
 8010760:	4611      	mov	r1, r2
 8010762:	4618      	mov	r0, r3
 8010764:	f001 f83a 	bl	80117dc <xTaskCheckForTimeOut>
 8010768:	4603      	mov	r3, r0
 801076a:	2b00      	cmp	r3, #0
 801076c:	d124      	bne.n	80107b8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801076e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010770:	f000 fb32 	bl	8010dd8 <prvIsQueueFull>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d018      	beq.n	80107ac <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	3310      	adds	r3, #16
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	4611      	mov	r1, r2
 8010782:	4618      	mov	r0, r3
 8010784:	f000 ff8a 	bl	801169c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801078a:	f000 fabd 	bl	8010d08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801078e:	f000 fd89 	bl	80112a4 <xTaskResumeAll>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	f47f af7c 	bne.w	8010692 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801079a:	4b0c      	ldr	r3, [pc, #48]	; (80107cc <xQueueGenericSend+0x208>)
 801079c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107a0:	601a      	str	r2, [r3, #0]
 80107a2:	f3bf 8f4f 	dsb	sy
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	e772      	b.n	8010692 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80107ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107ae:	f000 faab 	bl	8010d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107b2:	f000 fd77 	bl	80112a4 <xTaskResumeAll>
 80107b6:	e76c      	b.n	8010692 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80107b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107ba:	f000 faa5 	bl	8010d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107be:	f000 fd71 	bl	80112a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80107c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3738      	adds	r7, #56	; 0x38
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	e000ed04 	.word	0xe000ed04

080107d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b08e      	sub	sp, #56	; 0x38
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
 80107dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10c      	bne.n	8010802 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80107e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ec:	b672      	cpsid	i
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
 80107fa:	b662      	cpsie	i
 80107fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80107fe:	bf00      	nop
 8010800:	e7fe      	b.n	8010800 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d103      	bne.n	8010810 <xQueueGenericSendFromISR+0x40>
 8010808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801080c:	2b00      	cmp	r3, #0
 801080e:	d101      	bne.n	8010814 <xQueueGenericSendFromISR+0x44>
 8010810:	2301      	movs	r3, #1
 8010812:	e000      	b.n	8010816 <xQueueGenericSendFromISR+0x46>
 8010814:	2300      	movs	r3, #0
 8010816:	2b00      	cmp	r3, #0
 8010818:	d10c      	bne.n	8010834 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	b672      	cpsid	i
 8010820:	f383 8811 	msr	BASEPRI, r3
 8010824:	f3bf 8f6f 	isb	sy
 8010828:	f3bf 8f4f 	dsb	sy
 801082c:	b662      	cpsie	i
 801082e:	623b      	str	r3, [r7, #32]
}
 8010830:	bf00      	nop
 8010832:	e7fe      	b.n	8010832 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	2b02      	cmp	r3, #2
 8010838:	d103      	bne.n	8010842 <xQueueGenericSendFromISR+0x72>
 801083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801083e:	2b01      	cmp	r3, #1
 8010840:	d101      	bne.n	8010846 <xQueueGenericSendFromISR+0x76>
 8010842:	2301      	movs	r3, #1
 8010844:	e000      	b.n	8010848 <xQueueGenericSendFromISR+0x78>
 8010846:	2300      	movs	r3, #0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10c      	bne.n	8010866 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 801084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010850:	b672      	cpsid	i
 8010852:	f383 8811 	msr	BASEPRI, r3
 8010856:	f3bf 8f6f 	isb	sy
 801085a:	f3bf 8f4f 	dsb	sy
 801085e:	b662      	cpsie	i
 8010860:	61fb      	str	r3, [r7, #28]
}
 8010862:	bf00      	nop
 8010864:	e7fe      	b.n	8010864 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010866:	f001 fc09 	bl	801207c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801086a:	f3ef 8211 	mrs	r2, BASEPRI
 801086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010872:	b672      	cpsid	i
 8010874:	f383 8811 	msr	BASEPRI, r3
 8010878:	f3bf 8f6f 	isb	sy
 801087c:	f3bf 8f4f 	dsb	sy
 8010880:	b662      	cpsie	i
 8010882:	61ba      	str	r2, [r7, #24]
 8010884:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010886:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010888:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010892:	429a      	cmp	r2, r3
 8010894:	d302      	bcc.n	801089c <xQueueGenericSendFromISR+0xcc>
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2b02      	cmp	r3, #2
 801089a:	d12c      	bne.n	80108f6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801089c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80108a6:	683a      	ldr	r2, [r7, #0]
 80108a8:	68b9      	ldr	r1, [r7, #8]
 80108aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108ac:	f000 f99c 	bl	8010be8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80108b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80108b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108b8:	d112      	bne.n	80108e0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d016      	beq.n	80108f0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c4:	3324      	adds	r3, #36	; 0x24
 80108c6:	4618      	mov	r0, r3
 80108c8:	f000 ff0e 	bl	80116e8 <xTaskRemoveFromEventList>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00e      	beq.n	80108f0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00b      	beq.n	80108f0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2201      	movs	r2, #1
 80108dc:	601a      	str	r2, [r3, #0]
 80108de:	e007      	b.n	80108f0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80108e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80108e4:	3301      	adds	r3, #1
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	b25a      	sxtb	r2, r3
 80108ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80108f0:	2301      	movs	r3, #1
 80108f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80108f4:	e001      	b.n	80108fa <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80108f6:	2300      	movs	r3, #0
 80108f8:	637b      	str	r3, [r7, #52]	; 0x34
 80108fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010904:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010908:	4618      	mov	r0, r3
 801090a:	3738      	adds	r7, #56	; 0x38
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b08c      	sub	sp, #48	; 0x30
 8010914:	af00      	add	r7, sp, #0
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	60b9      	str	r1, [r7, #8]
 801091a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801091c:	2300      	movs	r3, #0
 801091e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010926:	2b00      	cmp	r3, #0
 8010928:	d10c      	bne.n	8010944 <xQueueReceive+0x34>
	__asm volatile
 801092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092e:	b672      	cpsid	i
 8010930:	f383 8811 	msr	BASEPRI, r3
 8010934:	f3bf 8f6f 	isb	sy
 8010938:	f3bf 8f4f 	dsb	sy
 801093c:	b662      	cpsie	i
 801093e:	623b      	str	r3, [r7, #32]
}
 8010940:	bf00      	nop
 8010942:	e7fe      	b.n	8010942 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d103      	bne.n	8010952 <xQueueReceive+0x42>
 801094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801094e:	2b00      	cmp	r3, #0
 8010950:	d101      	bne.n	8010956 <xQueueReceive+0x46>
 8010952:	2301      	movs	r3, #1
 8010954:	e000      	b.n	8010958 <xQueueReceive+0x48>
 8010956:	2300      	movs	r3, #0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d10c      	bne.n	8010976 <xQueueReceive+0x66>
	__asm volatile
 801095c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010960:	b672      	cpsid	i
 8010962:	f383 8811 	msr	BASEPRI, r3
 8010966:	f3bf 8f6f 	isb	sy
 801096a:	f3bf 8f4f 	dsb	sy
 801096e:	b662      	cpsie	i
 8010970:	61fb      	str	r3, [r7, #28]
}
 8010972:	bf00      	nop
 8010974:	e7fe      	b.n	8010974 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010976:	f001 f87d 	bl	8011a74 <xTaskGetSchedulerState>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d102      	bne.n	8010986 <xQueueReceive+0x76>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d101      	bne.n	801098a <xQueueReceive+0x7a>
 8010986:	2301      	movs	r3, #1
 8010988:	e000      	b.n	801098c <xQueueReceive+0x7c>
 801098a:	2300      	movs	r3, #0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d10c      	bne.n	80109aa <xQueueReceive+0x9a>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010994:	b672      	cpsid	i
 8010996:	f383 8811 	msr	BASEPRI, r3
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	b662      	cpsie	i
 80109a4:	61bb      	str	r3, [r7, #24]
}
 80109a6:	bf00      	nop
 80109a8:	e7fe      	b.n	80109a8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109aa:	f001 fa7f 	bl	8011eac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d01f      	beq.n	80109fa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109ba:	68b9      	ldr	r1, [r7, #8]
 80109bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109be:	f000 f97d 	bl	8010cbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c4:	1e5a      	subs	r2, r3, #1
 80109c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109cc:	691b      	ldr	r3, [r3, #16]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00f      	beq.n	80109f2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d4:	3310      	adds	r3, #16
 80109d6:	4618      	mov	r0, r3
 80109d8:	f000 fe86 	bl	80116e8 <xTaskRemoveFromEventList>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d007      	beq.n	80109f2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80109e2:	4b3d      	ldr	r3, [pc, #244]	; (8010ad8 <xQueueReceive+0x1c8>)
 80109e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109e8:	601a      	str	r2, [r3, #0]
 80109ea:	f3bf 8f4f 	dsb	sy
 80109ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80109f2:	f001 fa8f 	bl	8011f14 <vPortExitCritical>
				return pdPASS;
 80109f6:	2301      	movs	r3, #1
 80109f8:	e069      	b.n	8010ace <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d103      	bne.n	8010a08 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a00:	f001 fa88 	bl	8011f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010a04:	2300      	movs	r3, #0
 8010a06:	e062      	b.n	8010ace <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d106      	bne.n	8010a1c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a0e:	f107 0310 	add.w	r3, r7, #16
 8010a12:	4618      	mov	r0, r3
 8010a14:	f000 fecc 	bl	80117b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a1c:	f001 fa7a 	bl	8011f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a20:	f000 fc32 	bl	8011288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a24:	f001 fa42 	bl	8011eac <vPortEnterCritical>
 8010a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a2e:	b25b      	sxtb	r3, r3
 8010a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a34:	d103      	bne.n	8010a3e <xQueueReceive+0x12e>
 8010a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a38:	2200      	movs	r2, #0
 8010a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a44:	b25b      	sxtb	r3, r3
 8010a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a4a:	d103      	bne.n	8010a54 <xQueueReceive+0x144>
 8010a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a54:	f001 fa5e 	bl	8011f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a58:	1d3a      	adds	r2, r7, #4
 8010a5a:	f107 0310 	add.w	r3, r7, #16
 8010a5e:	4611      	mov	r1, r2
 8010a60:	4618      	mov	r0, r3
 8010a62:	f000 febb 	bl	80117dc <xTaskCheckForTimeOut>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d123      	bne.n	8010ab4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a6e:	f000 f99d 	bl	8010dac <prvIsQueueEmpty>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d017      	beq.n	8010aa8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7a:	3324      	adds	r3, #36	; 0x24
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	4611      	mov	r1, r2
 8010a80:	4618      	mov	r0, r3
 8010a82:	f000 fe0b 	bl	801169c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a88:	f000 f93e 	bl	8010d08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010a8c:	f000 fc0a 	bl	80112a4 <xTaskResumeAll>
 8010a90:	4603      	mov	r3, r0
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d189      	bne.n	80109aa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8010a96:	4b10      	ldr	r3, [pc, #64]	; (8010ad8 <xQueueReceive+0x1c8>)
 8010a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a9c:	601a      	str	r2, [r3, #0]
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	e780      	b.n	80109aa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010aaa:	f000 f92d 	bl	8010d08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010aae:	f000 fbf9 	bl	80112a4 <xTaskResumeAll>
 8010ab2:	e77a      	b.n	80109aa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ab6:	f000 f927 	bl	8010d08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010aba:	f000 fbf3 	bl	80112a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ac0:	f000 f974 	bl	8010dac <prvIsQueueEmpty>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	f43f af6f 	beq.w	80109aa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010acc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3730      	adds	r7, #48	; 0x30
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	e000ed04 	.word	0xe000ed04

08010adc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b08e      	sub	sp, #56	; 0x38
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	60f8      	str	r0, [r7, #12]
 8010ae4:	60b9      	str	r1, [r7, #8]
 8010ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d10c      	bne.n	8010b0c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8010af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af6:	b672      	cpsid	i
 8010af8:	f383 8811 	msr	BASEPRI, r3
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	b662      	cpsie	i
 8010b06:	623b      	str	r3, [r7, #32]
}
 8010b08:	bf00      	nop
 8010b0a:	e7fe      	b.n	8010b0a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d103      	bne.n	8010b1a <xQueueReceiveFromISR+0x3e>
 8010b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d101      	bne.n	8010b1e <xQueueReceiveFromISR+0x42>
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e000      	b.n	8010b20 <xQueueReceiveFromISR+0x44>
 8010b1e:	2300      	movs	r3, #0
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d10c      	bne.n	8010b3e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8010b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b28:	b672      	cpsid	i
 8010b2a:	f383 8811 	msr	BASEPRI, r3
 8010b2e:	f3bf 8f6f 	isb	sy
 8010b32:	f3bf 8f4f 	dsb	sy
 8010b36:	b662      	cpsie	i
 8010b38:	61fb      	str	r3, [r7, #28]
}
 8010b3a:	bf00      	nop
 8010b3c:	e7fe      	b.n	8010b3c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b3e:	f001 fa9d 	bl	801207c <vPortValidateInterruptPriority>
	__asm volatile
 8010b42:	f3ef 8211 	mrs	r2, BASEPRI
 8010b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4a:	b672      	cpsid	i
 8010b4c:	f383 8811 	msr	BASEPRI, r3
 8010b50:	f3bf 8f6f 	isb	sy
 8010b54:	f3bf 8f4f 	dsb	sy
 8010b58:	b662      	cpsie	i
 8010b5a:	61ba      	str	r2, [r7, #24]
 8010b5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010b5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d02f      	beq.n	8010bce <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b78:	68b9      	ldr	r1, [r7, #8]
 8010b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b7c:	f000 f89e 	bl	8010cbc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b82:	1e5a      	subs	r2, r3, #1
 8010b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b90:	d112      	bne.n	8010bb8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b94:	691b      	ldr	r3, [r3, #16]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d016      	beq.n	8010bc8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9c:	3310      	adds	r3, #16
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f000 fda2 	bl	80116e8 <xTaskRemoveFromEventList>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d00e      	beq.n	8010bc8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d00b      	beq.n	8010bc8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	601a      	str	r2, [r3, #0]
 8010bb6:	e007      	b.n	8010bc8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	b25a      	sxtb	r2, r3
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	637b      	str	r3, [r7, #52]	; 0x34
 8010bcc:	e001      	b.n	8010bd2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8010bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	f383 8811 	msr	BASEPRI, r3
}
 8010bdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3738      	adds	r7, #56	; 0x38
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b086      	sub	sp, #24
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	60f8      	str	r0, [r7, #12]
 8010bf0:	60b9      	str	r1, [r7, #8]
 8010bf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d10d      	bne.n	8010c22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d14d      	bne.n	8010caa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	689b      	ldr	r3, [r3, #8]
 8010c12:	4618      	mov	r0, r3
 8010c14:	f000 ff4c 	bl	8011ab0 <xTaskPriorityDisinherit>
 8010c18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	609a      	str	r2, [r3, #8]
 8010c20:	e043      	b.n	8010caa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d119      	bne.n	8010c5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	6858      	ldr	r0, [r3, #4]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c30:	461a      	mov	r2, r3
 8010c32:	68b9      	ldr	r1, [r7, #8]
 8010c34:	f001 ff80 	bl	8012b38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	685a      	ldr	r2, [r3, #4]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c40:	441a      	add	r2, r3
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	685a      	ldr	r2, [r3, #4]
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d32b      	bcc.n	8010caa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	605a      	str	r2, [r3, #4]
 8010c5a:	e026      	b.n	8010caa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	68d8      	ldr	r0, [r3, #12]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c64:	461a      	mov	r2, r3
 8010c66:	68b9      	ldr	r1, [r7, #8]
 8010c68:	f001 ff66 	bl	8012b38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	68da      	ldr	r2, [r3, #12]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c74:	425b      	negs	r3, r3
 8010c76:	441a      	add	r2, r3
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	68da      	ldr	r2, [r3, #12]
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d207      	bcs.n	8010c98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	689a      	ldr	r2, [r3, #8]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c90:	425b      	negs	r3, r3
 8010c92:	441a      	add	r2, r3
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2b02      	cmp	r3, #2
 8010c9c:	d105      	bne.n	8010caa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d002      	beq.n	8010caa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	1c5a      	adds	r2, r3, #1
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010cb2:	697b      	ldr	r3, [r7, #20]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3718      	adds	r7, #24
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d018      	beq.n	8010d00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	68da      	ldr	r2, [r3, #12]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cd6:	441a      	add	r2, r3
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	68da      	ldr	r2, [r3, #12]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d303      	bcc.n	8010cf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	68d9      	ldr	r1, [r3, #12]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	6838      	ldr	r0, [r7, #0]
 8010cfc:	f001 ff1c 	bl	8012b38 <memcpy>
	}
}
 8010d00:	bf00      	nop
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}

08010d08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010d10:	f001 f8cc 	bl	8011eac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d1c:	e011      	b.n	8010d42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d012      	beq.n	8010d4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	3324      	adds	r3, #36	; 0x24
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f000 fcdc 	bl	80116e8 <xTaskRemoveFromEventList>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d001      	beq.n	8010d3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010d36:	f000 fdb7 	bl	80118a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010d3a:	7bfb      	ldrb	r3, [r7, #15]
 8010d3c:	3b01      	subs	r3, #1
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	dce9      	bgt.n	8010d1e <prvUnlockQueue+0x16>
 8010d4a:	e000      	b.n	8010d4e <prvUnlockQueue+0x46>
					break;
 8010d4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	22ff      	movs	r2, #255	; 0xff
 8010d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010d56:	f001 f8dd 	bl	8011f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010d5a:	f001 f8a7 	bl	8011eac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d66:	e011      	b.n	8010d8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	691b      	ldr	r3, [r3, #16]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d012      	beq.n	8010d96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	3310      	adds	r3, #16
 8010d74:	4618      	mov	r0, r3
 8010d76:	f000 fcb7 	bl	80116e8 <xTaskRemoveFromEventList>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d001      	beq.n	8010d84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010d80:	f000 fd92 	bl	80118a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010d84:	7bbb      	ldrb	r3, [r7, #14]
 8010d86:	3b01      	subs	r3, #1
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	dce9      	bgt.n	8010d68 <prvUnlockQueue+0x60>
 8010d94:	e000      	b.n	8010d98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010d96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	22ff      	movs	r2, #255	; 0xff
 8010d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010da0:	f001 f8b8 	bl	8011f14 <vPortExitCritical>
}
 8010da4:	bf00      	nop
 8010da6:	3710      	adds	r7, #16
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010db4:	f001 f87a 	bl	8011eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d102      	bne.n	8010dc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	60fb      	str	r3, [r7, #12]
 8010dc4:	e001      	b.n	8010dca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010dca:	f001 f8a3 	bl	8011f14 <vPortExitCritical>

	return xReturn;
 8010dce:	68fb      	ldr	r3, [r7, #12]
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3710      	adds	r7, #16
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b084      	sub	sp, #16
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010de0:	f001 f864 	bl	8011eac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d102      	bne.n	8010df6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010df0:	2301      	movs	r3, #1
 8010df2:	60fb      	str	r3, [r7, #12]
 8010df4:	e001      	b.n	8010dfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010df6:	2300      	movs	r3, #0
 8010df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010dfa:	f001 f88b 	bl	8011f14 <vPortExitCritical>

	return xReturn;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3710      	adds	r7, #16
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b08e      	sub	sp, #56	; 0x38
 8010e0c:	af04      	add	r7, sp, #16
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d10c      	bne.n	8010e36 <xTaskCreateStatic+0x2e>
	__asm volatile
 8010e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e20:	b672      	cpsid	i
 8010e22:	f383 8811 	msr	BASEPRI, r3
 8010e26:	f3bf 8f6f 	isb	sy
 8010e2a:	f3bf 8f4f 	dsb	sy
 8010e2e:	b662      	cpsie	i
 8010e30:	623b      	str	r3, [r7, #32]
}
 8010e32:	bf00      	nop
 8010e34:	e7fe      	b.n	8010e34 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d10c      	bne.n	8010e56 <xTaskCreateStatic+0x4e>
	__asm volatile
 8010e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e40:	b672      	cpsid	i
 8010e42:	f383 8811 	msr	BASEPRI, r3
 8010e46:	f3bf 8f6f 	isb	sy
 8010e4a:	f3bf 8f4f 	dsb	sy
 8010e4e:	b662      	cpsie	i
 8010e50:	61fb      	str	r3, [r7, #28]
}
 8010e52:	bf00      	nop
 8010e54:	e7fe      	b.n	8010e54 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010e56:	2358      	movs	r3, #88	; 0x58
 8010e58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	2b58      	cmp	r3, #88	; 0x58
 8010e5e:	d00c      	beq.n	8010e7a <xTaskCreateStatic+0x72>
	__asm volatile
 8010e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e64:	b672      	cpsid	i
 8010e66:	f383 8811 	msr	BASEPRI, r3
 8010e6a:	f3bf 8f6f 	isb	sy
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	b662      	cpsie	i
 8010e74:	61bb      	str	r3, [r7, #24]
}
 8010e76:	bf00      	nop
 8010e78:	e7fe      	b.n	8010e78 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010e7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d01e      	beq.n	8010ec0 <xTaskCreateStatic+0xb8>
 8010e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d01b      	beq.n	8010ec0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e94:	2202      	movs	r2, #2
 8010e96:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	9303      	str	r3, [sp, #12]
 8010e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea0:	9302      	str	r3, [sp, #8]
 8010ea2:	f107 0314 	add.w	r3, r7, #20
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	68b9      	ldr	r1, [r7, #8]
 8010eb2:	68f8      	ldr	r0, [r7, #12]
 8010eb4:	f000 f850 	bl	8010f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010eba:	f000 f8e1 	bl	8011080 <prvAddNewTaskToReadyList>
 8010ebe:	e001      	b.n	8010ec4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010ec4:	697b      	ldr	r3, [r7, #20]
	}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3728      	adds	r7, #40	; 0x28
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}

08010ece <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b08c      	sub	sp, #48	; 0x30
 8010ed2:	af04      	add	r7, sp, #16
 8010ed4:	60f8      	str	r0, [r7, #12]
 8010ed6:	60b9      	str	r1, [r7, #8]
 8010ed8:	603b      	str	r3, [r7, #0]
 8010eda:	4613      	mov	r3, r2
 8010edc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ede:	88fb      	ldrh	r3, [r7, #6]
 8010ee0:	009b      	lsls	r3, r3, #2
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f001 f90e 	bl	8012104 <pvPortMalloc>
 8010ee8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00e      	beq.n	8010f0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010ef0:	2058      	movs	r0, #88	; 0x58
 8010ef2:	f001 f907 	bl	8012104 <pvPortMalloc>
 8010ef6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010ef8:	69fb      	ldr	r3, [r7, #28]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d003      	beq.n	8010f06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	697a      	ldr	r2, [r7, #20]
 8010f02:	631a      	str	r2, [r3, #48]	; 0x30
 8010f04:	e005      	b.n	8010f12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010f06:	6978      	ldr	r0, [r7, #20]
 8010f08:	f001 f9cc 	bl	80122a4 <vPortFree>
 8010f0c:	e001      	b.n	8010f12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d017      	beq.n	8010f48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010f20:	88fa      	ldrh	r2, [r7, #6]
 8010f22:	2300      	movs	r3, #0
 8010f24:	9303      	str	r3, [sp, #12]
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	9302      	str	r3, [sp, #8]
 8010f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2c:	9301      	str	r3, [sp, #4]
 8010f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	68b9      	ldr	r1, [r7, #8]
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f000 f80e 	bl	8010f58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f3c:	69f8      	ldr	r0, [r7, #28]
 8010f3e:	f000 f89f 	bl	8011080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010f42:	2301      	movs	r3, #1
 8010f44:	61bb      	str	r3, [r7, #24]
 8010f46:	e002      	b.n	8010f4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010f4e:	69bb      	ldr	r3, [r7, #24]
	}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3720      	adds	r7, #32
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b088      	sub	sp, #32
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	607a      	str	r2, [r7, #4]
 8010f64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	461a      	mov	r2, r3
 8010f70:	21a5      	movs	r1, #165	; 0xa5
 8010f72:	f001 fdef 	bl	8012b54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f7a:	6879      	ldr	r1, [r7, #4]
 8010f7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010f80:	440b      	add	r3, r1
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	4413      	add	r3, r2
 8010f86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010f88:	69bb      	ldr	r3, [r7, #24]
 8010f8a:	f023 0307 	bic.w	r3, r3, #7
 8010f8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010f90:	69bb      	ldr	r3, [r7, #24]
 8010f92:	f003 0307 	and.w	r3, r3, #7
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d00c      	beq.n	8010fb4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8010f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f9e:	b672      	cpsid	i
 8010fa0:	f383 8811 	msr	BASEPRI, r3
 8010fa4:	f3bf 8f6f 	isb	sy
 8010fa8:	f3bf 8f4f 	dsb	sy
 8010fac:	b662      	cpsie	i
 8010fae:	617b      	str	r3, [r7, #20]
}
 8010fb0:	bf00      	nop
 8010fb2:	e7fe      	b.n	8010fb2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d01f      	beq.n	8010ffa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fba:	2300      	movs	r3, #0
 8010fbc:	61fb      	str	r3, [r7, #28]
 8010fbe:	e012      	b.n	8010fe6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010fc0:	68ba      	ldr	r2, [r7, #8]
 8010fc2:	69fb      	ldr	r3, [r7, #28]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	7819      	ldrb	r1, [r3, #0]
 8010fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	4413      	add	r3, r2
 8010fce:	3334      	adds	r3, #52	; 0x34
 8010fd0:	460a      	mov	r2, r1
 8010fd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010fd4:	68ba      	ldr	r2, [r7, #8]
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	4413      	add	r3, r2
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d006      	beq.n	8010fee <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	61fb      	str	r3, [r7, #28]
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	2b0f      	cmp	r3, #15
 8010fea:	d9e9      	bls.n	8010fc0 <prvInitialiseNewTask+0x68>
 8010fec:	e000      	b.n	8010ff0 <prvInitialiseNewTask+0x98>
			{
				break;
 8010fee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010ff8:	e003      	b.n	8011002 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011004:	2b06      	cmp	r3, #6
 8011006:	d901      	bls.n	801100c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011008:	2306      	movs	r3, #6
 801100a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801100c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011010:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011016:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101a:	2200      	movs	r2, #0
 801101c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801101e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011020:	3304      	adds	r3, #4
 8011022:	4618      	mov	r0, r3
 8011024:	f7ff f8ec 	bl	8010200 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102a:	3318      	adds	r3, #24
 801102c:	4618      	mov	r0, r3
 801102e:	f7ff f8e7 	bl	8010200 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103a:	f1c3 0207 	rsb	r2, r3, #7
 801103e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011046:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104a:	2200      	movs	r2, #0
 801104c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011050:	2200      	movs	r2, #0
 8011052:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011056:	2200      	movs	r2, #0
 8011058:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	68f9      	ldr	r1, [r7, #12]
 8011060:	69b8      	ldr	r0, [r7, #24]
 8011062:	f000 fe15 	bl	8011c90 <pxPortInitialiseStack>
 8011066:	4602      	mov	r2, r0
 8011068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106e:	2b00      	cmp	r3, #0
 8011070:	d002      	beq.n	8011078 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011076:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011078:	bf00      	nop
 801107a:	3720      	adds	r7, #32
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011088:	f000 ff10 	bl	8011eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801108c:	4b2a      	ldr	r3, [pc, #168]	; (8011138 <prvAddNewTaskToReadyList+0xb8>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3301      	adds	r3, #1
 8011092:	4a29      	ldr	r2, [pc, #164]	; (8011138 <prvAddNewTaskToReadyList+0xb8>)
 8011094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011096:	4b29      	ldr	r3, [pc, #164]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d109      	bne.n	80110b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801109e:	4a27      	ldr	r2, [pc, #156]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80110a4:	4b24      	ldr	r3, [pc, #144]	; (8011138 <prvAddNewTaskToReadyList+0xb8>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b01      	cmp	r3, #1
 80110aa:	d110      	bne.n	80110ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80110ac:	f000 fc22 	bl	80118f4 <prvInitialiseTaskLists>
 80110b0:	e00d      	b.n	80110ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80110b2:	4b23      	ldr	r3, [pc, #140]	; (8011140 <prvAddNewTaskToReadyList+0xc0>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d109      	bne.n	80110ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80110ba:	4b20      	ldr	r3, [pc, #128]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d802      	bhi.n	80110ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80110c8:	4a1c      	ldr	r2, [pc, #112]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80110ce:	4b1d      	ldr	r3, [pc, #116]	; (8011144 <prvAddNewTaskToReadyList+0xc4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	3301      	adds	r3, #1
 80110d4:	4a1b      	ldr	r2, [pc, #108]	; (8011144 <prvAddNewTaskToReadyList+0xc4>)
 80110d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110dc:	2201      	movs	r2, #1
 80110de:	409a      	lsls	r2, r3
 80110e0:	4b19      	ldr	r3, [pc, #100]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4313      	orrs	r3, r2
 80110e6:	4a18      	ldr	r2, [pc, #96]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 80110e8:	6013      	str	r3, [r2, #0]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ee:	4613      	mov	r3, r2
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	4413      	add	r3, r2
 80110f4:	009b      	lsls	r3, r3, #2
 80110f6:	4a15      	ldr	r2, [pc, #84]	; (801114c <prvAddNewTaskToReadyList+0xcc>)
 80110f8:	441a      	add	r2, r3
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	3304      	adds	r3, #4
 80110fe:	4619      	mov	r1, r3
 8011100:	4610      	mov	r0, r2
 8011102:	f7ff f88a 	bl	801021a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011106:	f000 ff05 	bl	8011f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801110a:	4b0d      	ldr	r3, [pc, #52]	; (8011140 <prvAddNewTaskToReadyList+0xc0>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00e      	beq.n	8011130 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011112:	4b0a      	ldr	r3, [pc, #40]	; (801113c <prvAddNewTaskToReadyList+0xbc>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801111c:	429a      	cmp	r2, r3
 801111e:	d207      	bcs.n	8011130 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011120:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <prvAddNewTaskToReadyList+0xd0>)
 8011122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011126:	601a      	str	r2, [r3, #0]
 8011128:	f3bf 8f4f 	dsb	sy
 801112c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	2000042c 	.word	0x2000042c
 801113c:	2000032c 	.word	0x2000032c
 8011140:	20000438 	.word	0x20000438
 8011144:	20000448 	.word	0x20000448
 8011148:	20000434 	.word	0x20000434
 801114c:	20000330 	.word	0x20000330
 8011150:	e000ed04 	.word	0xe000ed04

08011154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801115c:	2300      	movs	r3, #0
 801115e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d019      	beq.n	801119a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011166:	4b14      	ldr	r3, [pc, #80]	; (80111b8 <vTaskDelay+0x64>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00c      	beq.n	8011188 <vTaskDelay+0x34>
	__asm volatile
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	b672      	cpsid	i
 8011174:	f383 8811 	msr	BASEPRI, r3
 8011178:	f3bf 8f6f 	isb	sy
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	b662      	cpsie	i
 8011182:	60bb      	str	r3, [r7, #8]
}
 8011184:	bf00      	nop
 8011186:	e7fe      	b.n	8011186 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011188:	f000 f87e 	bl	8011288 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801118c:	2100      	movs	r1, #0
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 fd18 	bl	8011bc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011194:	f000 f886 	bl	80112a4 <xTaskResumeAll>
 8011198:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d107      	bne.n	80111b0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80111a0:	4b06      	ldr	r3, [pc, #24]	; (80111bc <vTaskDelay+0x68>)
 80111a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111a6:	601a      	str	r2, [r3, #0]
 80111a8:	f3bf 8f4f 	dsb	sy
 80111ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111b0:	bf00      	nop
 80111b2:	3710      	adds	r7, #16
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	20000454 	.word	0x20000454
 80111bc:	e000ed04 	.word	0xe000ed04

080111c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b08a      	sub	sp, #40	; 0x28
 80111c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80111c6:	2300      	movs	r3, #0
 80111c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80111ca:	2300      	movs	r3, #0
 80111cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80111ce:	463a      	mov	r2, r7
 80111d0:	1d39      	adds	r1, r7, #4
 80111d2:	f107 0308 	add.w	r3, r7, #8
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ef f9b0 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80111dc:	6839      	ldr	r1, [r7, #0]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	68ba      	ldr	r2, [r7, #8]
 80111e2:	9202      	str	r2, [sp, #8]
 80111e4:	9301      	str	r3, [sp, #4]
 80111e6:	2300      	movs	r3, #0
 80111e8:	9300      	str	r3, [sp, #0]
 80111ea:	2300      	movs	r3, #0
 80111ec:	460a      	mov	r2, r1
 80111ee:	4920      	ldr	r1, [pc, #128]	; (8011270 <vTaskStartScheduler+0xb0>)
 80111f0:	4820      	ldr	r0, [pc, #128]	; (8011274 <vTaskStartScheduler+0xb4>)
 80111f2:	f7ff fe09 	bl	8010e08 <xTaskCreateStatic>
 80111f6:	4603      	mov	r3, r0
 80111f8:	4a1f      	ldr	r2, [pc, #124]	; (8011278 <vTaskStartScheduler+0xb8>)
 80111fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80111fc:	4b1e      	ldr	r3, [pc, #120]	; (8011278 <vTaskStartScheduler+0xb8>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d002      	beq.n	801120a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011204:	2301      	movs	r3, #1
 8011206:	617b      	str	r3, [r7, #20]
 8011208:	e001      	b.n	801120e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801120a:	2300      	movs	r3, #0
 801120c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	2b01      	cmp	r3, #1
 8011212:	d118      	bne.n	8011246 <vTaskStartScheduler+0x86>
	__asm volatile
 8011214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011218:	b672      	cpsid	i
 801121a:	f383 8811 	msr	BASEPRI, r3
 801121e:	f3bf 8f6f 	isb	sy
 8011222:	f3bf 8f4f 	dsb	sy
 8011226:	b662      	cpsie	i
 8011228:	613b      	str	r3, [r7, #16]
}
 801122a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801122c:	4b13      	ldr	r3, [pc, #76]	; (801127c <vTaskStartScheduler+0xbc>)
 801122e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011232:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011234:	4b12      	ldr	r3, [pc, #72]	; (8011280 <vTaskStartScheduler+0xc0>)
 8011236:	2201      	movs	r2, #1
 8011238:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801123a:	4b12      	ldr	r3, [pc, #72]	; (8011284 <vTaskStartScheduler+0xc4>)
 801123c:	2200      	movs	r2, #0
 801123e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011240:	f000 fdb6 	bl	8011db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011244:	e010      	b.n	8011268 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801124c:	d10c      	bne.n	8011268 <vTaskStartScheduler+0xa8>
	__asm volatile
 801124e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011252:	b672      	cpsid	i
 8011254:	f383 8811 	msr	BASEPRI, r3
 8011258:	f3bf 8f6f 	isb	sy
 801125c:	f3bf 8f4f 	dsb	sy
 8011260:	b662      	cpsie	i
 8011262:	60fb      	str	r3, [r7, #12]
}
 8011264:	bf00      	nop
 8011266:	e7fe      	b.n	8011266 <vTaskStartScheduler+0xa6>
}
 8011268:	bf00      	nop
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	08012d80 	.word	0x08012d80
 8011274:	080118c1 	.word	0x080118c1
 8011278:	20000450 	.word	0x20000450
 801127c:	2000044c 	.word	0x2000044c
 8011280:	20000438 	.word	0x20000438
 8011284:	20000430 	.word	0x20000430

08011288 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011288:	b480      	push	{r7}
 801128a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801128c:	4b04      	ldr	r3, [pc, #16]	; (80112a0 <vTaskSuspendAll+0x18>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	3301      	adds	r3, #1
 8011292:	4a03      	ldr	r2, [pc, #12]	; (80112a0 <vTaskSuspendAll+0x18>)
 8011294:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011296:	bf00      	nop
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	20000454 	.word	0x20000454

080112a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80112aa:	2300      	movs	r3, #0
 80112ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80112ae:	2300      	movs	r3, #0
 80112b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80112b2:	4b42      	ldr	r3, [pc, #264]	; (80113bc <xTaskResumeAll+0x118>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d10c      	bne.n	80112d4 <xTaskResumeAll+0x30>
	__asm volatile
 80112ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112be:	b672      	cpsid	i
 80112c0:	f383 8811 	msr	BASEPRI, r3
 80112c4:	f3bf 8f6f 	isb	sy
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	b662      	cpsie	i
 80112ce:	603b      	str	r3, [r7, #0]
}
 80112d0:	bf00      	nop
 80112d2:	e7fe      	b.n	80112d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80112d4:	f000 fdea 	bl	8011eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80112d8:	4b38      	ldr	r3, [pc, #224]	; (80113bc <xTaskResumeAll+0x118>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	3b01      	subs	r3, #1
 80112de:	4a37      	ldr	r2, [pc, #220]	; (80113bc <xTaskResumeAll+0x118>)
 80112e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112e2:	4b36      	ldr	r3, [pc, #216]	; (80113bc <xTaskResumeAll+0x118>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d161      	bne.n	80113ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80112ea:	4b35      	ldr	r3, [pc, #212]	; (80113c0 <xTaskResumeAll+0x11c>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d05d      	beq.n	80113ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112f2:	e02e      	b.n	8011352 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112f4:	4b33      	ldr	r3, [pc, #204]	; (80113c4 <xTaskResumeAll+0x120>)
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	3318      	adds	r3, #24
 8011300:	4618      	mov	r0, r3
 8011302:	f7fe ffe7 	bl	80102d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	3304      	adds	r3, #4
 801130a:	4618      	mov	r0, r3
 801130c:	f7fe ffe2 	bl	80102d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011314:	2201      	movs	r2, #1
 8011316:	409a      	lsls	r2, r3
 8011318:	4b2b      	ldr	r3, [pc, #172]	; (80113c8 <xTaskResumeAll+0x124>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4313      	orrs	r3, r2
 801131e:	4a2a      	ldr	r2, [pc, #168]	; (80113c8 <xTaskResumeAll+0x124>)
 8011320:	6013      	str	r3, [r2, #0]
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011326:	4613      	mov	r3, r2
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	4413      	add	r3, r2
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	4a27      	ldr	r2, [pc, #156]	; (80113cc <xTaskResumeAll+0x128>)
 8011330:	441a      	add	r2, r3
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	3304      	adds	r3, #4
 8011336:	4619      	mov	r1, r3
 8011338:	4610      	mov	r0, r2
 801133a:	f7fe ff6e 	bl	801021a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011342:	4b23      	ldr	r3, [pc, #140]	; (80113d0 <xTaskResumeAll+0x12c>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011348:	429a      	cmp	r2, r3
 801134a:	d302      	bcc.n	8011352 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 801134c:	4b21      	ldr	r3, [pc, #132]	; (80113d4 <xTaskResumeAll+0x130>)
 801134e:	2201      	movs	r2, #1
 8011350:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011352:	4b1c      	ldr	r3, [pc, #112]	; (80113c4 <xTaskResumeAll+0x120>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d1cc      	bne.n	80112f4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d001      	beq.n	8011364 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011360:	f000 fb68 	bl	8011a34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011364:	4b1c      	ldr	r3, [pc, #112]	; (80113d8 <xTaskResumeAll+0x134>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d010      	beq.n	8011392 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011370:	f000 f858 	bl	8011424 <xTaskIncrementTick>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d002      	beq.n	8011380 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801137a:	4b16      	ldr	r3, [pc, #88]	; (80113d4 <xTaskResumeAll+0x130>)
 801137c:	2201      	movs	r2, #1
 801137e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	3b01      	subs	r3, #1
 8011384:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d1f1      	bne.n	8011370 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801138c:	4b12      	ldr	r3, [pc, #72]	; (80113d8 <xTaskResumeAll+0x134>)
 801138e:	2200      	movs	r2, #0
 8011390:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011392:	4b10      	ldr	r3, [pc, #64]	; (80113d4 <xTaskResumeAll+0x130>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d009      	beq.n	80113ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801139a:	2301      	movs	r3, #1
 801139c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801139e:	4b0f      	ldr	r3, [pc, #60]	; (80113dc <xTaskResumeAll+0x138>)
 80113a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a4:	601a      	str	r2, [r3, #0]
 80113a6:	f3bf 8f4f 	dsb	sy
 80113aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80113ae:	f000 fdb1 	bl	8011f14 <vPortExitCritical>

	return xAlreadyYielded;
 80113b2:	68bb      	ldr	r3, [r7, #8]
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3710      	adds	r7, #16
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	20000454 	.word	0x20000454
 80113c0:	2000042c 	.word	0x2000042c
 80113c4:	200003ec 	.word	0x200003ec
 80113c8:	20000434 	.word	0x20000434
 80113cc:	20000330 	.word	0x20000330
 80113d0:	2000032c 	.word	0x2000032c
 80113d4:	20000440 	.word	0x20000440
 80113d8:	2000043c 	.word	0x2000043c
 80113dc:	e000ed04 	.word	0xe000ed04

080113e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80113e6:	4b05      	ldr	r3, [pc, #20]	; (80113fc <xTaskGetTickCount+0x1c>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80113ec:	687b      	ldr	r3, [r7, #4]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	370c      	adds	r7, #12
 80113f2:	46bd      	mov	sp, r7
 80113f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f8:	4770      	bx	lr
 80113fa:	bf00      	nop
 80113fc:	20000430 	.word	0x20000430

08011400 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011406:	f000 fe39 	bl	801207c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801140a:	2300      	movs	r3, #0
 801140c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801140e:	4b04      	ldr	r3, [pc, #16]	; (8011420 <xTaskGetTickCountFromISR+0x20>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011414:	683b      	ldr	r3, [r7, #0]
}
 8011416:	4618      	mov	r0, r3
 8011418:	3708      	adds	r7, #8
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	20000430 	.word	0x20000430

08011424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801142a:	2300      	movs	r3, #0
 801142c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801142e:	4b4f      	ldr	r3, [pc, #316]	; (801156c <xTaskIncrementTick+0x148>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	f040 808a 	bne.w	801154c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011438:	4b4d      	ldr	r3, [pc, #308]	; (8011570 <xTaskIncrementTick+0x14c>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	3301      	adds	r3, #1
 801143e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011440:	4a4b      	ldr	r2, [pc, #300]	; (8011570 <xTaskIncrementTick+0x14c>)
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d122      	bne.n	8011492 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801144c:	4b49      	ldr	r3, [pc, #292]	; (8011574 <xTaskIncrementTick+0x150>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d00c      	beq.n	8011470 <xTaskIncrementTick+0x4c>
	__asm volatile
 8011456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145a:	b672      	cpsid	i
 801145c:	f383 8811 	msr	BASEPRI, r3
 8011460:	f3bf 8f6f 	isb	sy
 8011464:	f3bf 8f4f 	dsb	sy
 8011468:	b662      	cpsie	i
 801146a:	603b      	str	r3, [r7, #0]
}
 801146c:	bf00      	nop
 801146e:	e7fe      	b.n	801146e <xTaskIncrementTick+0x4a>
 8011470:	4b40      	ldr	r3, [pc, #256]	; (8011574 <xTaskIncrementTick+0x150>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	60fb      	str	r3, [r7, #12]
 8011476:	4b40      	ldr	r3, [pc, #256]	; (8011578 <xTaskIncrementTick+0x154>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	4a3e      	ldr	r2, [pc, #248]	; (8011574 <xTaskIncrementTick+0x150>)
 801147c:	6013      	str	r3, [r2, #0]
 801147e:	4a3e      	ldr	r2, [pc, #248]	; (8011578 <xTaskIncrementTick+0x154>)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	6013      	str	r3, [r2, #0]
 8011484:	4b3d      	ldr	r3, [pc, #244]	; (801157c <xTaskIncrementTick+0x158>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	3301      	adds	r3, #1
 801148a:	4a3c      	ldr	r2, [pc, #240]	; (801157c <xTaskIncrementTick+0x158>)
 801148c:	6013      	str	r3, [r2, #0]
 801148e:	f000 fad1 	bl	8011a34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011492:	4b3b      	ldr	r3, [pc, #236]	; (8011580 <xTaskIncrementTick+0x15c>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	693a      	ldr	r2, [r7, #16]
 8011498:	429a      	cmp	r2, r3
 801149a:	d348      	bcc.n	801152e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801149c:	4b35      	ldr	r3, [pc, #212]	; (8011574 <xTaskIncrementTick+0x150>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d104      	bne.n	80114b0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114a6:	4b36      	ldr	r3, [pc, #216]	; (8011580 <xTaskIncrementTick+0x15c>)
 80114a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114ac:	601a      	str	r2, [r3, #0]
					break;
 80114ae:	e03e      	b.n	801152e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114b0:	4b30      	ldr	r3, [pc, #192]	; (8011574 <xTaskIncrementTick+0x150>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80114c0:	693a      	ldr	r2, [r7, #16]
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d203      	bcs.n	80114d0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80114c8:	4a2d      	ldr	r2, [pc, #180]	; (8011580 <xTaskIncrementTick+0x15c>)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80114ce:	e02e      	b.n	801152e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	3304      	adds	r3, #4
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7fe fefd 	bl	80102d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d004      	beq.n	80114ec <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	3318      	adds	r3, #24
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fe fef4 	bl	80102d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f0:	2201      	movs	r2, #1
 80114f2:	409a      	lsls	r2, r3
 80114f4:	4b23      	ldr	r3, [pc, #140]	; (8011584 <xTaskIncrementTick+0x160>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4313      	orrs	r3, r2
 80114fa:	4a22      	ldr	r2, [pc, #136]	; (8011584 <xTaskIncrementTick+0x160>)
 80114fc:	6013      	str	r3, [r2, #0]
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011502:	4613      	mov	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	4413      	add	r3, r2
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	4a1f      	ldr	r2, [pc, #124]	; (8011588 <xTaskIncrementTick+0x164>)
 801150c:	441a      	add	r2, r3
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	3304      	adds	r3, #4
 8011512:	4619      	mov	r1, r3
 8011514:	4610      	mov	r0, r2
 8011516:	f7fe fe80 	bl	801021a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801151e:	4b1b      	ldr	r3, [pc, #108]	; (801158c <xTaskIncrementTick+0x168>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011524:	429a      	cmp	r2, r3
 8011526:	d3b9      	bcc.n	801149c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011528:	2301      	movs	r3, #1
 801152a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801152c:	e7b6      	b.n	801149c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801152e:	4b17      	ldr	r3, [pc, #92]	; (801158c <xTaskIncrementTick+0x168>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011534:	4914      	ldr	r1, [pc, #80]	; (8011588 <xTaskIncrementTick+0x164>)
 8011536:	4613      	mov	r3, r2
 8011538:	009b      	lsls	r3, r3, #2
 801153a:	4413      	add	r3, r2
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	440b      	add	r3, r1
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d907      	bls.n	8011556 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8011546:	2301      	movs	r3, #1
 8011548:	617b      	str	r3, [r7, #20]
 801154a:	e004      	b.n	8011556 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801154c:	4b10      	ldr	r3, [pc, #64]	; (8011590 <xTaskIncrementTick+0x16c>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	3301      	adds	r3, #1
 8011552:	4a0f      	ldr	r2, [pc, #60]	; (8011590 <xTaskIncrementTick+0x16c>)
 8011554:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011556:	4b0f      	ldr	r3, [pc, #60]	; (8011594 <xTaskIncrementTick+0x170>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d001      	beq.n	8011562 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801155e:	2301      	movs	r3, #1
 8011560:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011562:	697b      	ldr	r3, [r7, #20]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3718      	adds	r7, #24
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	20000454 	.word	0x20000454
 8011570:	20000430 	.word	0x20000430
 8011574:	200003e4 	.word	0x200003e4
 8011578:	200003e8 	.word	0x200003e8
 801157c:	20000444 	.word	0x20000444
 8011580:	2000044c 	.word	0x2000044c
 8011584:	20000434 	.word	0x20000434
 8011588:	20000330 	.word	0x20000330
 801158c:	2000032c 	.word	0x2000032c
 8011590:	2000043c 	.word	0x2000043c
 8011594:	20000440 	.word	0x20000440

08011598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b088      	sub	sp, #32
 801159c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801159e:	4b3a      	ldr	r3, [pc, #232]	; (8011688 <vTaskSwitchContext+0xf0>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80115a6:	4b39      	ldr	r3, [pc, #228]	; (801168c <vTaskSwitchContext+0xf4>)
 80115a8:	2201      	movs	r2, #1
 80115aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80115ac:	e068      	b.n	8011680 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80115ae:	4b37      	ldr	r3, [pc, #220]	; (801168c <vTaskSwitchContext+0xf4>)
 80115b0:	2200      	movs	r2, #0
 80115b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80115b4:	4b36      	ldr	r3, [pc, #216]	; (8011690 <vTaskSwitchContext+0xf8>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ba:	61fb      	str	r3, [r7, #28]
 80115bc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80115c0:	61bb      	str	r3, [r7, #24]
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	69ba      	ldr	r2, [r7, #24]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d111      	bne.n	80115f0 <vTaskSwitchContext+0x58>
 80115cc:	69fb      	ldr	r3, [r7, #28]
 80115ce:	3304      	adds	r3, #4
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	69ba      	ldr	r2, [r7, #24]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d10b      	bne.n	80115f0 <vTaskSwitchContext+0x58>
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	3308      	adds	r3, #8
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	69ba      	ldr	r2, [r7, #24]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d105      	bne.n	80115f0 <vTaskSwitchContext+0x58>
 80115e4:	69fb      	ldr	r3, [r7, #28]
 80115e6:	330c      	adds	r3, #12
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	69ba      	ldr	r2, [r7, #24]
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d008      	beq.n	8011602 <vTaskSwitchContext+0x6a>
 80115f0:	4b27      	ldr	r3, [pc, #156]	; (8011690 <vTaskSwitchContext+0xf8>)
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	4b26      	ldr	r3, [pc, #152]	; (8011690 <vTaskSwitchContext+0xf8>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	3334      	adds	r3, #52	; 0x34
 80115fa:	4619      	mov	r1, r3
 80115fc:	4610      	mov	r0, r2
 80115fe:	f7ee ff8a 	bl	8000516 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011602:	4b24      	ldr	r3, [pc, #144]	; (8011694 <vTaskSwitchContext+0xfc>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	fab3 f383 	clz	r3, r3
 801160e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011610:	7afb      	ldrb	r3, [r7, #11]
 8011612:	f1c3 031f 	rsb	r3, r3, #31
 8011616:	617b      	str	r3, [r7, #20]
 8011618:	491f      	ldr	r1, [pc, #124]	; (8011698 <vTaskSwitchContext+0x100>)
 801161a:	697a      	ldr	r2, [r7, #20]
 801161c:	4613      	mov	r3, r2
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	4413      	add	r3, r2
 8011622:	009b      	lsls	r3, r3, #2
 8011624:	440b      	add	r3, r1
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10c      	bne.n	8011646 <vTaskSwitchContext+0xae>
	__asm volatile
 801162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011630:	b672      	cpsid	i
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	b662      	cpsie	i
 8011640:	607b      	str	r3, [r7, #4]
}
 8011642:	bf00      	nop
 8011644:	e7fe      	b.n	8011644 <vTaskSwitchContext+0xac>
 8011646:	697a      	ldr	r2, [r7, #20]
 8011648:	4613      	mov	r3, r2
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	4413      	add	r3, r2
 801164e:	009b      	lsls	r3, r3, #2
 8011650:	4a11      	ldr	r2, [pc, #68]	; (8011698 <vTaskSwitchContext+0x100>)
 8011652:	4413      	add	r3, r2
 8011654:	613b      	str	r3, [r7, #16]
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	605a      	str	r2, [r3, #4]
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	685a      	ldr	r2, [r3, #4]
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	3308      	adds	r3, #8
 8011668:	429a      	cmp	r2, r3
 801166a:	d104      	bne.n	8011676 <vTaskSwitchContext+0xde>
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	685a      	ldr	r2, [r3, #4]
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	605a      	str	r2, [r3, #4]
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	4a04      	ldr	r2, [pc, #16]	; (8011690 <vTaskSwitchContext+0xf8>)
 801167e:	6013      	str	r3, [r2, #0]
}
 8011680:	bf00      	nop
 8011682:	3720      	adds	r7, #32
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	20000454 	.word	0x20000454
 801168c:	20000440 	.word	0x20000440
 8011690:	2000032c 	.word	0x2000032c
 8011694:	20000434 	.word	0x20000434
 8011698:	20000330 	.word	0x20000330

0801169c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d10c      	bne.n	80116c6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80116ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b0:	b672      	cpsid	i
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	b662      	cpsie	i
 80116c0:	60fb      	str	r3, [r7, #12]
}
 80116c2:	bf00      	nop
 80116c4:	e7fe      	b.n	80116c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80116c6:	4b07      	ldr	r3, [pc, #28]	; (80116e4 <vTaskPlaceOnEventList+0x48>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	3318      	adds	r3, #24
 80116cc:	4619      	mov	r1, r3
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f7fe fdc7 	bl	8010262 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80116d4:	2101      	movs	r1, #1
 80116d6:	6838      	ldr	r0, [r7, #0]
 80116d8:	f000 fa74 	bl	8011bc4 <prvAddCurrentTaskToDelayedList>
}
 80116dc:	bf00      	nop
 80116de:	3710      	adds	r7, #16
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	2000032c 	.word	0x2000032c

080116e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b086      	sub	sp, #24
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d10c      	bne.n	8011718 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80116fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011702:	b672      	cpsid	i
 8011704:	f383 8811 	msr	BASEPRI, r3
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	b662      	cpsie	i
 8011712:	60fb      	str	r3, [r7, #12]
}
 8011714:	bf00      	nop
 8011716:	e7fe      	b.n	8011716 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	3318      	adds	r3, #24
 801171c:	4618      	mov	r0, r3
 801171e:	f7fe fdd9 	bl	80102d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011722:	4b1d      	ldr	r3, [pc, #116]	; (8011798 <xTaskRemoveFromEventList+0xb0>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d11c      	bne.n	8011764 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	3304      	adds	r3, #4
 801172e:	4618      	mov	r0, r3
 8011730:	f7fe fdd0 	bl	80102d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011734:	693b      	ldr	r3, [r7, #16]
 8011736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011738:	2201      	movs	r2, #1
 801173a:	409a      	lsls	r2, r3
 801173c:	4b17      	ldr	r3, [pc, #92]	; (801179c <xTaskRemoveFromEventList+0xb4>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4313      	orrs	r3, r2
 8011742:	4a16      	ldr	r2, [pc, #88]	; (801179c <xTaskRemoveFromEventList+0xb4>)
 8011744:	6013      	str	r3, [r2, #0]
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801174a:	4613      	mov	r3, r2
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	4413      	add	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	4a13      	ldr	r2, [pc, #76]	; (80117a0 <xTaskRemoveFromEventList+0xb8>)
 8011754:	441a      	add	r2, r3
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	3304      	adds	r3, #4
 801175a:	4619      	mov	r1, r3
 801175c:	4610      	mov	r0, r2
 801175e:	f7fe fd5c 	bl	801021a <vListInsertEnd>
 8011762:	e005      	b.n	8011770 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	3318      	adds	r3, #24
 8011768:	4619      	mov	r1, r3
 801176a:	480e      	ldr	r0, [pc, #56]	; (80117a4 <xTaskRemoveFromEventList+0xbc>)
 801176c:	f7fe fd55 	bl	801021a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011774:	4b0c      	ldr	r3, [pc, #48]	; (80117a8 <xTaskRemoveFromEventList+0xc0>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801177a:	429a      	cmp	r2, r3
 801177c:	d905      	bls.n	801178a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801177e:	2301      	movs	r3, #1
 8011780:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011782:	4b0a      	ldr	r3, [pc, #40]	; (80117ac <xTaskRemoveFromEventList+0xc4>)
 8011784:	2201      	movs	r2, #1
 8011786:	601a      	str	r2, [r3, #0]
 8011788:	e001      	b.n	801178e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801178a:	2300      	movs	r3, #0
 801178c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801178e:	697b      	ldr	r3, [r7, #20]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	20000454 	.word	0x20000454
 801179c:	20000434 	.word	0x20000434
 80117a0:	20000330 	.word	0x20000330
 80117a4:	200003ec 	.word	0x200003ec
 80117a8:	2000032c 	.word	0x2000032c
 80117ac:	20000440 	.word	0x20000440

080117b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80117b8:	4b06      	ldr	r3, [pc, #24]	; (80117d4 <vTaskInternalSetTimeOutState+0x24>)
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80117c0:	4b05      	ldr	r3, [pc, #20]	; (80117d8 <vTaskInternalSetTimeOutState+0x28>)
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	605a      	str	r2, [r3, #4]
}
 80117c8:	bf00      	nop
 80117ca:	370c      	adds	r7, #12
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr
 80117d4:	20000444 	.word	0x20000444
 80117d8:	20000430 	.word	0x20000430

080117dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b088      	sub	sp, #32
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d10c      	bne.n	8011806 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80117ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f0:	b672      	cpsid	i
 80117f2:	f383 8811 	msr	BASEPRI, r3
 80117f6:	f3bf 8f6f 	isb	sy
 80117fa:	f3bf 8f4f 	dsb	sy
 80117fe:	b662      	cpsie	i
 8011800:	613b      	str	r3, [r7, #16]
}
 8011802:	bf00      	nop
 8011804:	e7fe      	b.n	8011804 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d10c      	bne.n	8011826 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801180c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011810:	b672      	cpsid	i
 8011812:	f383 8811 	msr	BASEPRI, r3
 8011816:	f3bf 8f6f 	isb	sy
 801181a:	f3bf 8f4f 	dsb	sy
 801181e:	b662      	cpsie	i
 8011820:	60fb      	str	r3, [r7, #12]
}
 8011822:	bf00      	nop
 8011824:	e7fe      	b.n	8011824 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8011826:	f000 fb41 	bl	8011eac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801182a:	4b1d      	ldr	r3, [pc, #116]	; (80118a0 <xTaskCheckForTimeOut+0xc4>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	69ba      	ldr	r2, [r7, #24]
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011842:	d102      	bne.n	801184a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011844:	2300      	movs	r3, #0
 8011846:	61fb      	str	r3, [r7, #28]
 8011848:	e023      	b.n	8011892 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	4b15      	ldr	r3, [pc, #84]	; (80118a4 <xTaskCheckForTimeOut+0xc8>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	429a      	cmp	r2, r3
 8011854:	d007      	beq.n	8011866 <xTaskCheckForTimeOut+0x8a>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	69ba      	ldr	r2, [r7, #24]
 801185c:	429a      	cmp	r2, r3
 801185e:	d302      	bcc.n	8011866 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011860:	2301      	movs	r3, #1
 8011862:	61fb      	str	r3, [r7, #28]
 8011864:	e015      	b.n	8011892 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	697a      	ldr	r2, [r7, #20]
 801186c:	429a      	cmp	r2, r3
 801186e:	d20b      	bcs.n	8011888 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	681a      	ldr	r2, [r3, #0]
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	1ad2      	subs	r2, r2, r3
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7ff ff97 	bl	80117b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011882:	2300      	movs	r3, #0
 8011884:	61fb      	str	r3, [r7, #28]
 8011886:	e004      	b.n	8011892 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	2200      	movs	r2, #0
 801188c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801188e:	2301      	movs	r3, #1
 8011890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011892:	f000 fb3f 	bl	8011f14 <vPortExitCritical>

	return xReturn;
 8011896:	69fb      	ldr	r3, [r7, #28]
}
 8011898:	4618      	mov	r0, r3
 801189a:	3720      	adds	r7, #32
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	20000430 	.word	0x20000430
 80118a4:	20000444 	.word	0x20000444

080118a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80118a8:	b480      	push	{r7}
 80118aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80118ac:	4b03      	ldr	r3, [pc, #12]	; (80118bc <vTaskMissedYield+0x14>)
 80118ae:	2201      	movs	r2, #1
 80118b0:	601a      	str	r2, [r3, #0]
}
 80118b2:	bf00      	nop
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr
 80118bc:	20000440 	.word	0x20000440

080118c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80118c8:	f000 f854 	bl	8011974 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80118cc:	4b07      	ldr	r3, [pc, #28]	; (80118ec <prvIdleTask+0x2c>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d907      	bls.n	80118e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80118d4:	4b06      	ldr	r3, [pc, #24]	; (80118f0 <prvIdleTask+0x30>)
 80118d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118da:	601a      	str	r2, [r3, #0]
 80118dc:	f3bf 8f4f 	dsb	sy
 80118e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80118e4:	f7ee fe10 	bl	8000508 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80118e8:	e7ee      	b.n	80118c8 <prvIdleTask+0x8>
 80118ea:	bf00      	nop
 80118ec:	20000330 	.word	0x20000330
 80118f0:	e000ed04 	.word	0xe000ed04

080118f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80118fa:	2300      	movs	r3, #0
 80118fc:	607b      	str	r3, [r7, #4]
 80118fe:	e00c      	b.n	801191a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	4613      	mov	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	4413      	add	r3, r2
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	4a12      	ldr	r2, [pc, #72]	; (8011954 <prvInitialiseTaskLists+0x60>)
 801190c:	4413      	add	r3, r2
 801190e:	4618      	mov	r0, r3
 8011910:	f7fe fc56 	bl	80101c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	3301      	adds	r3, #1
 8011918:	607b      	str	r3, [r7, #4]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2b06      	cmp	r3, #6
 801191e:	d9ef      	bls.n	8011900 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011920:	480d      	ldr	r0, [pc, #52]	; (8011958 <prvInitialiseTaskLists+0x64>)
 8011922:	f7fe fc4d 	bl	80101c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011926:	480d      	ldr	r0, [pc, #52]	; (801195c <prvInitialiseTaskLists+0x68>)
 8011928:	f7fe fc4a 	bl	80101c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801192c:	480c      	ldr	r0, [pc, #48]	; (8011960 <prvInitialiseTaskLists+0x6c>)
 801192e:	f7fe fc47 	bl	80101c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011932:	480c      	ldr	r0, [pc, #48]	; (8011964 <prvInitialiseTaskLists+0x70>)
 8011934:	f7fe fc44 	bl	80101c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011938:	480b      	ldr	r0, [pc, #44]	; (8011968 <prvInitialiseTaskLists+0x74>)
 801193a:	f7fe fc41 	bl	80101c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801193e:	4b0b      	ldr	r3, [pc, #44]	; (801196c <prvInitialiseTaskLists+0x78>)
 8011940:	4a05      	ldr	r2, [pc, #20]	; (8011958 <prvInitialiseTaskLists+0x64>)
 8011942:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011944:	4b0a      	ldr	r3, [pc, #40]	; (8011970 <prvInitialiseTaskLists+0x7c>)
 8011946:	4a05      	ldr	r2, [pc, #20]	; (801195c <prvInitialiseTaskLists+0x68>)
 8011948:	601a      	str	r2, [r3, #0]
}
 801194a:	bf00      	nop
 801194c:	3708      	adds	r7, #8
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}
 8011952:	bf00      	nop
 8011954:	20000330 	.word	0x20000330
 8011958:	200003bc 	.word	0x200003bc
 801195c:	200003d0 	.word	0x200003d0
 8011960:	200003ec 	.word	0x200003ec
 8011964:	20000400 	.word	0x20000400
 8011968:	20000418 	.word	0x20000418
 801196c:	200003e4 	.word	0x200003e4
 8011970:	200003e8 	.word	0x200003e8

08011974 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801197a:	e019      	b.n	80119b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801197c:	f000 fa96 	bl	8011eac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011980:	4b10      	ldr	r3, [pc, #64]	; (80119c4 <prvCheckTasksWaitingTermination+0x50>)
 8011982:	68db      	ldr	r3, [r3, #12]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	3304      	adds	r3, #4
 801198c:	4618      	mov	r0, r3
 801198e:	f7fe fca1 	bl	80102d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011992:	4b0d      	ldr	r3, [pc, #52]	; (80119c8 <prvCheckTasksWaitingTermination+0x54>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	3b01      	subs	r3, #1
 8011998:	4a0b      	ldr	r2, [pc, #44]	; (80119c8 <prvCheckTasksWaitingTermination+0x54>)
 801199a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801199c:	4b0b      	ldr	r3, [pc, #44]	; (80119cc <prvCheckTasksWaitingTermination+0x58>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	3b01      	subs	r3, #1
 80119a2:	4a0a      	ldr	r2, [pc, #40]	; (80119cc <prvCheckTasksWaitingTermination+0x58>)
 80119a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80119a6:	f000 fab5 	bl	8011f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f810 	bl	80119d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119b0:	4b06      	ldr	r3, [pc, #24]	; (80119cc <prvCheckTasksWaitingTermination+0x58>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1e1      	bne.n	801197c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80119b8:	bf00      	nop
 80119ba:	bf00      	nop
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	20000400 	.word	0x20000400
 80119c8:	2000042c 	.word	0x2000042c
 80119cc:	20000414 	.word	0x20000414

080119d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b084      	sub	sp, #16
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d108      	bne.n	80119f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119e6:	4618      	mov	r0, r3
 80119e8:	f000 fc5c 	bl	80122a4 <vPortFree>
				vPortFree( pxTCB );
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f000 fc59 	bl	80122a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80119f2:	e01a      	b.n	8011a2a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d103      	bne.n	8011a06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 fc50 	bl	80122a4 <vPortFree>
	}
 8011a04:	e011      	b.n	8011a2a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d00c      	beq.n	8011a2a <prvDeleteTCB+0x5a>
	__asm volatile
 8011a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a14:	b672      	cpsid	i
 8011a16:	f383 8811 	msr	BASEPRI, r3
 8011a1a:	f3bf 8f6f 	isb	sy
 8011a1e:	f3bf 8f4f 	dsb	sy
 8011a22:	b662      	cpsie	i
 8011a24:	60fb      	str	r3, [r7, #12]
}
 8011a26:	bf00      	nop
 8011a28:	e7fe      	b.n	8011a28 <prvDeleteTCB+0x58>
	}
 8011a2a:	bf00      	nop
 8011a2c:	3710      	adds	r7, #16
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
	...

08011a34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a34:	b480      	push	{r7}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a3a:	4b0c      	ldr	r3, [pc, #48]	; (8011a6c <prvResetNextTaskUnblockTime+0x38>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d104      	bne.n	8011a4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a44:	4b0a      	ldr	r3, [pc, #40]	; (8011a70 <prvResetNextTaskUnblockTime+0x3c>)
 8011a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a4c:	e008      	b.n	8011a60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a4e:	4b07      	ldr	r3, [pc, #28]	; (8011a6c <prvResetNextTaskUnblockTime+0x38>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	68db      	ldr	r3, [r3, #12]
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	4a04      	ldr	r2, [pc, #16]	; (8011a70 <prvResetNextTaskUnblockTime+0x3c>)
 8011a5e:	6013      	str	r3, [r2, #0]
}
 8011a60:	bf00      	nop
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr
 8011a6c:	200003e4 	.word	0x200003e4
 8011a70:	2000044c 	.word	0x2000044c

08011a74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011a7a:	4b0b      	ldr	r3, [pc, #44]	; (8011aa8 <xTaskGetSchedulerState+0x34>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d102      	bne.n	8011a88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011a82:	2301      	movs	r3, #1
 8011a84:	607b      	str	r3, [r7, #4]
 8011a86:	e008      	b.n	8011a9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a88:	4b08      	ldr	r3, [pc, #32]	; (8011aac <xTaskGetSchedulerState+0x38>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d102      	bne.n	8011a96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011a90:	2302      	movs	r3, #2
 8011a92:	607b      	str	r3, [r7, #4]
 8011a94:	e001      	b.n	8011a9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011a96:	2300      	movs	r3, #0
 8011a98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011a9a:	687b      	ldr	r3, [r7, #4]
	}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr
 8011aa8:	20000438 	.word	0x20000438
 8011aac:	20000454 	.word	0x20000454

08011ab0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011abc:	2300      	movs	r3, #0
 8011abe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d072      	beq.n	8011bac <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011ac6:	4b3c      	ldr	r3, [pc, #240]	; (8011bb8 <xTaskPriorityDisinherit+0x108>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	693a      	ldr	r2, [r7, #16]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d00c      	beq.n	8011aea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad4:	b672      	cpsid	i
 8011ad6:	f383 8811 	msr	BASEPRI, r3
 8011ada:	f3bf 8f6f 	isb	sy
 8011ade:	f3bf 8f4f 	dsb	sy
 8011ae2:	b662      	cpsie	i
 8011ae4:	60fb      	str	r3, [r7, #12]
}
 8011ae6:	bf00      	nop
 8011ae8:	e7fe      	b.n	8011ae8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d10c      	bne.n	8011b0c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8011af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af6:	b672      	cpsid	i
 8011af8:	f383 8811 	msr	BASEPRI, r3
 8011afc:	f3bf 8f6f 	isb	sy
 8011b00:	f3bf 8f4f 	dsb	sy
 8011b04:	b662      	cpsie	i
 8011b06:	60bb      	str	r3, [r7, #8]
}
 8011b08:	bf00      	nop
 8011b0a:	e7fe      	b.n	8011b0a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b10:	1e5a      	subs	r2, r3, #1
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d044      	beq.n	8011bac <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d140      	bne.n	8011bac <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	3304      	adds	r3, #4
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fe fbd0 	bl	80102d4 <uxListRemove>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d115      	bne.n	8011b66 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b3e:	491f      	ldr	r1, [pc, #124]	; (8011bbc <xTaskPriorityDisinherit+0x10c>)
 8011b40:	4613      	mov	r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	009b      	lsls	r3, r3, #2
 8011b48:	440b      	add	r3, r1
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d10a      	bne.n	8011b66 <xTaskPriorityDisinherit+0xb6>
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b54:	2201      	movs	r2, #1
 8011b56:	fa02 f303 	lsl.w	r3, r2, r3
 8011b5a:	43da      	mvns	r2, r3
 8011b5c:	4b18      	ldr	r3, [pc, #96]	; (8011bc0 <xTaskPriorityDisinherit+0x110>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	4013      	ands	r3, r2
 8011b62:	4a17      	ldr	r2, [pc, #92]	; (8011bc0 <xTaskPriorityDisinherit+0x110>)
 8011b64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b72:	f1c3 0207 	rsb	r2, r3, #7
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7e:	2201      	movs	r2, #1
 8011b80:	409a      	lsls	r2, r3
 8011b82:	4b0f      	ldr	r3, [pc, #60]	; (8011bc0 <xTaskPriorityDisinherit+0x110>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4313      	orrs	r3, r2
 8011b88:	4a0d      	ldr	r2, [pc, #52]	; (8011bc0 <xTaskPriorityDisinherit+0x110>)
 8011b8a:	6013      	str	r3, [r2, #0]
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b90:	4613      	mov	r3, r2
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	4413      	add	r3, r2
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	4a08      	ldr	r2, [pc, #32]	; (8011bbc <xTaskPriorityDisinherit+0x10c>)
 8011b9a:	441a      	add	r2, r3
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	3304      	adds	r3, #4
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	f7fe fb39 	bl	801021a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011bac:	697b      	ldr	r3, [r7, #20]
	}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	2000032c 	.word	0x2000032c
 8011bbc:	20000330 	.word	0x20000330
 8011bc0:	20000434 	.word	0x20000434

08011bc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011bce:	4b29      	ldr	r3, [pc, #164]	; (8011c74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011bd4:	4b28      	ldr	r3, [pc, #160]	; (8011c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	3304      	adds	r3, #4
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fe fb7a 	bl	80102d4 <uxListRemove>
 8011be0:	4603      	mov	r3, r0
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d10b      	bne.n	8011bfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011be6:	4b24      	ldr	r3, [pc, #144]	; (8011c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bec:	2201      	movs	r2, #1
 8011bee:	fa02 f303 	lsl.w	r3, r2, r3
 8011bf2:	43da      	mvns	r2, r3
 8011bf4:	4b21      	ldr	r3, [pc, #132]	; (8011c7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4013      	ands	r3, r2
 8011bfa:	4a20      	ldr	r2, [pc, #128]	; (8011c7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011bfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c04:	d10a      	bne.n	8011c1c <prvAddCurrentTaskToDelayedList+0x58>
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d007      	beq.n	8011c1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c0c:	4b1a      	ldr	r3, [pc, #104]	; (8011c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	3304      	adds	r3, #4
 8011c12:	4619      	mov	r1, r3
 8011c14:	481a      	ldr	r0, [pc, #104]	; (8011c80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011c16:	f7fe fb00 	bl	801021a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c1a:	e026      	b.n	8011c6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c1c:	68fa      	ldr	r2, [r7, #12]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	4413      	add	r3, r2
 8011c22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c24:	4b14      	ldr	r3, [pc, #80]	; (8011c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	68ba      	ldr	r2, [r7, #8]
 8011c2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c2c:	68ba      	ldr	r2, [r7, #8]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d209      	bcs.n	8011c48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c34:	4b13      	ldr	r3, [pc, #76]	; (8011c84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	4b0f      	ldr	r3, [pc, #60]	; (8011c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	3304      	adds	r3, #4
 8011c3e:	4619      	mov	r1, r3
 8011c40:	4610      	mov	r0, r2
 8011c42:	f7fe fb0e 	bl	8010262 <vListInsert>
}
 8011c46:	e010      	b.n	8011c6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c48:	4b0f      	ldr	r3, [pc, #60]	; (8011c88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011c4a:	681a      	ldr	r2, [r3, #0]
 8011c4c:	4b0a      	ldr	r3, [pc, #40]	; (8011c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	3304      	adds	r3, #4
 8011c52:	4619      	mov	r1, r3
 8011c54:	4610      	mov	r0, r2
 8011c56:	f7fe fb04 	bl	8010262 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c5a:	4b0c      	ldr	r3, [pc, #48]	; (8011c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	68ba      	ldr	r2, [r7, #8]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d202      	bcs.n	8011c6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011c64:	4a09      	ldr	r2, [pc, #36]	; (8011c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	6013      	str	r3, [r2, #0]
}
 8011c6a:	bf00      	nop
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	20000430 	.word	0x20000430
 8011c78:	2000032c 	.word	0x2000032c
 8011c7c:	20000434 	.word	0x20000434
 8011c80:	20000418 	.word	0x20000418
 8011c84:	200003e8 	.word	0x200003e8
 8011c88:	200003e4 	.word	0x200003e4
 8011c8c:	2000044c 	.word	0x2000044c

08011c90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011c90:	b480      	push	{r7}
 8011c92:	b085      	sub	sp, #20
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	3b04      	subs	r3, #4
 8011ca0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	3b04      	subs	r3, #4
 8011cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	f023 0201 	bic.w	r2, r3, #1
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	3b04      	subs	r3, #4
 8011cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011cc0:	4a0c      	ldr	r2, [pc, #48]	; (8011cf4 <pxPortInitialiseStack+0x64>)
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	3b14      	subs	r3, #20
 8011cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	3b04      	subs	r3, #4
 8011cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f06f 0202 	mvn.w	r2, #2
 8011cde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	3b20      	subs	r3, #32
 8011ce4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3714      	adds	r7, #20
 8011cec:	46bd      	mov	sp, r7
 8011cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf2:	4770      	bx	lr
 8011cf4:	08011cf9 	.word	0x08011cf9

08011cf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011d02:	4b14      	ldr	r3, [pc, #80]	; (8011d54 <prvTaskExitError+0x5c>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d0a:	d00c      	beq.n	8011d26 <prvTaskExitError+0x2e>
	__asm volatile
 8011d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d10:	b672      	cpsid	i
 8011d12:	f383 8811 	msr	BASEPRI, r3
 8011d16:	f3bf 8f6f 	isb	sy
 8011d1a:	f3bf 8f4f 	dsb	sy
 8011d1e:	b662      	cpsie	i
 8011d20:	60fb      	str	r3, [r7, #12]
}
 8011d22:	bf00      	nop
 8011d24:	e7fe      	b.n	8011d24 <prvTaskExitError+0x2c>
	__asm volatile
 8011d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2a:	b672      	cpsid	i
 8011d2c:	f383 8811 	msr	BASEPRI, r3
 8011d30:	f3bf 8f6f 	isb	sy
 8011d34:	f3bf 8f4f 	dsb	sy
 8011d38:	b662      	cpsie	i
 8011d3a:	60bb      	str	r3, [r7, #8]
}
 8011d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d3e:	bf00      	nop
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d0fc      	beq.n	8011d40 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d46:	bf00      	nop
 8011d48:	bf00      	nop
 8011d4a:	3714      	adds	r7, #20
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr
 8011d54:	2000002c 	.word	0x2000002c
	...

08011d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011d60:	4b07      	ldr	r3, [pc, #28]	; (8011d80 <pxCurrentTCBConst2>)
 8011d62:	6819      	ldr	r1, [r3, #0]
 8011d64:	6808      	ldr	r0, [r1, #0]
 8011d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6a:	f380 8809 	msr	PSP, r0
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f04f 0000 	mov.w	r0, #0
 8011d76:	f380 8811 	msr	BASEPRI, r0
 8011d7a:	4770      	bx	lr
 8011d7c:	f3af 8000 	nop.w

08011d80 <pxCurrentTCBConst2>:
 8011d80:	2000032c 	.word	0x2000032c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011d84:	bf00      	nop
 8011d86:	bf00      	nop

08011d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011d88:	4808      	ldr	r0, [pc, #32]	; (8011dac <prvPortStartFirstTask+0x24>)
 8011d8a:	6800      	ldr	r0, [r0, #0]
 8011d8c:	6800      	ldr	r0, [r0, #0]
 8011d8e:	f380 8808 	msr	MSP, r0
 8011d92:	f04f 0000 	mov.w	r0, #0
 8011d96:	f380 8814 	msr	CONTROL, r0
 8011d9a:	b662      	cpsie	i
 8011d9c:	b661      	cpsie	f
 8011d9e:	f3bf 8f4f 	dsb	sy
 8011da2:	f3bf 8f6f 	isb	sy
 8011da6:	df00      	svc	0
 8011da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011daa:	bf00      	nop
 8011dac:	e000ed08 	.word	0xe000ed08

08011db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b084      	sub	sp, #16
 8011db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011db6:	4b37      	ldr	r3, [pc, #220]	; (8011e94 <xPortStartScheduler+0xe4>)
 8011db8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	22ff      	movs	r2, #255	; 0xff
 8011dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	b2db      	uxtb	r3, r3
 8011dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011dd0:	78fb      	ldrb	r3, [r7, #3]
 8011dd2:	b2db      	uxtb	r3, r3
 8011dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011dd8:	b2da      	uxtb	r2, r3
 8011dda:	4b2f      	ldr	r3, [pc, #188]	; (8011e98 <xPortStartScheduler+0xe8>)
 8011ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011dde:	4b2f      	ldr	r3, [pc, #188]	; (8011e9c <xPortStartScheduler+0xec>)
 8011de0:	2207      	movs	r2, #7
 8011de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011de4:	e009      	b.n	8011dfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011de6:	4b2d      	ldr	r3, [pc, #180]	; (8011e9c <xPortStartScheduler+0xec>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	3b01      	subs	r3, #1
 8011dec:	4a2b      	ldr	r2, [pc, #172]	; (8011e9c <xPortStartScheduler+0xec>)
 8011dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011df0:	78fb      	ldrb	r3, [r7, #3]
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	005b      	lsls	r3, r3, #1
 8011df6:	b2db      	uxtb	r3, r3
 8011df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011dfa:	78fb      	ldrb	r3, [r7, #3]
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e02:	2b80      	cmp	r3, #128	; 0x80
 8011e04:	d0ef      	beq.n	8011de6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011e06:	4b25      	ldr	r3, [pc, #148]	; (8011e9c <xPortStartScheduler+0xec>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	f1c3 0307 	rsb	r3, r3, #7
 8011e0e:	2b04      	cmp	r3, #4
 8011e10:	d00c      	beq.n	8011e2c <xPortStartScheduler+0x7c>
	__asm volatile
 8011e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e16:	b672      	cpsid	i
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	b662      	cpsie	i
 8011e26:	60bb      	str	r3, [r7, #8]
}
 8011e28:	bf00      	nop
 8011e2a:	e7fe      	b.n	8011e2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011e2c:	4b1b      	ldr	r3, [pc, #108]	; (8011e9c <xPortStartScheduler+0xec>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	021b      	lsls	r3, r3, #8
 8011e32:	4a1a      	ldr	r2, [pc, #104]	; (8011e9c <xPortStartScheduler+0xec>)
 8011e34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011e36:	4b19      	ldr	r3, [pc, #100]	; (8011e9c <xPortStartScheduler+0xec>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011e3e:	4a17      	ldr	r2, [pc, #92]	; (8011e9c <xPortStartScheduler+0xec>)
 8011e40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	b2da      	uxtb	r2, r3
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011e4a:	4b15      	ldr	r3, [pc, #84]	; (8011ea0 <xPortStartScheduler+0xf0>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	4a14      	ldr	r2, [pc, #80]	; (8011ea0 <xPortStartScheduler+0xf0>)
 8011e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011e54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011e56:	4b12      	ldr	r3, [pc, #72]	; (8011ea0 <xPortStartScheduler+0xf0>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4a11      	ldr	r2, [pc, #68]	; (8011ea0 <xPortStartScheduler+0xf0>)
 8011e5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011e60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011e62:	f000 f8dd 	bl	8012020 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011e66:	4b0f      	ldr	r3, [pc, #60]	; (8011ea4 <xPortStartScheduler+0xf4>)
 8011e68:	2200      	movs	r2, #0
 8011e6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011e6c:	f000 f8fc 	bl	8012068 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011e70:	4b0d      	ldr	r3, [pc, #52]	; (8011ea8 <xPortStartScheduler+0xf8>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4a0c      	ldr	r2, [pc, #48]	; (8011ea8 <xPortStartScheduler+0xf8>)
 8011e76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011e7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011e7c:	f7ff ff84 	bl	8011d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011e80:	f7ff fb8a 	bl	8011598 <vTaskSwitchContext>
	prvTaskExitError();
 8011e84:	f7ff ff38 	bl	8011cf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011e88:	2300      	movs	r3, #0
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3710      	adds	r7, #16
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	e000e400 	.word	0xe000e400
 8011e98:	20000458 	.word	0x20000458
 8011e9c:	2000045c 	.word	0x2000045c
 8011ea0:	e000ed20 	.word	0xe000ed20
 8011ea4:	2000002c 	.word	0x2000002c
 8011ea8:	e000ef34 	.word	0xe000ef34

08011eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
	__asm volatile
 8011eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb6:	b672      	cpsid	i
 8011eb8:	f383 8811 	msr	BASEPRI, r3
 8011ebc:	f3bf 8f6f 	isb	sy
 8011ec0:	f3bf 8f4f 	dsb	sy
 8011ec4:	b662      	cpsie	i
 8011ec6:	607b      	str	r3, [r7, #4]
}
 8011ec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011eca:	4b10      	ldr	r3, [pc, #64]	; (8011f0c <vPortEnterCritical+0x60>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	4a0e      	ldr	r2, [pc, #56]	; (8011f0c <vPortEnterCritical+0x60>)
 8011ed2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011ed4:	4b0d      	ldr	r3, [pc, #52]	; (8011f0c <vPortEnterCritical+0x60>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2b01      	cmp	r3, #1
 8011eda:	d111      	bne.n	8011f00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011edc:	4b0c      	ldr	r3, [pc, #48]	; (8011f10 <vPortEnterCritical+0x64>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d00c      	beq.n	8011f00 <vPortEnterCritical+0x54>
	__asm volatile
 8011ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eea:	b672      	cpsid	i
 8011eec:	f383 8811 	msr	BASEPRI, r3
 8011ef0:	f3bf 8f6f 	isb	sy
 8011ef4:	f3bf 8f4f 	dsb	sy
 8011ef8:	b662      	cpsie	i
 8011efa:	603b      	str	r3, [r7, #0]
}
 8011efc:	bf00      	nop
 8011efe:	e7fe      	b.n	8011efe <vPortEnterCritical+0x52>
	}
}
 8011f00:	bf00      	nop
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr
 8011f0c:	2000002c 	.word	0x2000002c
 8011f10:	e000ed04 	.word	0xe000ed04

08011f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011f1a:	4b13      	ldr	r3, [pc, #76]	; (8011f68 <vPortExitCritical+0x54>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d10c      	bne.n	8011f3c <vPortExitCritical+0x28>
	__asm volatile
 8011f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f26:	b672      	cpsid	i
 8011f28:	f383 8811 	msr	BASEPRI, r3
 8011f2c:	f3bf 8f6f 	isb	sy
 8011f30:	f3bf 8f4f 	dsb	sy
 8011f34:	b662      	cpsie	i
 8011f36:	607b      	str	r3, [r7, #4]
}
 8011f38:	bf00      	nop
 8011f3a:	e7fe      	b.n	8011f3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011f3c:	4b0a      	ldr	r3, [pc, #40]	; (8011f68 <vPortExitCritical+0x54>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	3b01      	subs	r3, #1
 8011f42:	4a09      	ldr	r2, [pc, #36]	; (8011f68 <vPortExitCritical+0x54>)
 8011f44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011f46:	4b08      	ldr	r3, [pc, #32]	; (8011f68 <vPortExitCritical+0x54>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d105      	bne.n	8011f5a <vPortExitCritical+0x46>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	f383 8811 	msr	BASEPRI, r3
}
 8011f58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011f5a:	bf00      	nop
 8011f5c:	370c      	adds	r7, #12
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop
 8011f68:	2000002c 	.word	0x2000002c
 8011f6c:	00000000 	.word	0x00000000

08011f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011f70:	f3ef 8009 	mrs	r0, PSP
 8011f74:	f3bf 8f6f 	isb	sy
 8011f78:	4b15      	ldr	r3, [pc, #84]	; (8011fd0 <pxCurrentTCBConst>)
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	f01e 0f10 	tst.w	lr, #16
 8011f80:	bf08      	it	eq
 8011f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8a:	6010      	str	r0, [r2, #0]
 8011f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011f94:	b672      	cpsid	i
 8011f96:	f380 8811 	msr	BASEPRI, r0
 8011f9a:	f3bf 8f4f 	dsb	sy
 8011f9e:	f3bf 8f6f 	isb	sy
 8011fa2:	b662      	cpsie	i
 8011fa4:	f7ff faf8 	bl	8011598 <vTaskSwitchContext>
 8011fa8:	f04f 0000 	mov.w	r0, #0
 8011fac:	f380 8811 	msr	BASEPRI, r0
 8011fb0:	bc09      	pop	{r0, r3}
 8011fb2:	6819      	ldr	r1, [r3, #0]
 8011fb4:	6808      	ldr	r0, [r1, #0]
 8011fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fba:	f01e 0f10 	tst.w	lr, #16
 8011fbe:	bf08      	it	eq
 8011fc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011fc4:	f380 8809 	msr	PSP, r0
 8011fc8:	f3bf 8f6f 	isb	sy
 8011fcc:	4770      	bx	lr
 8011fce:	bf00      	nop

08011fd0 <pxCurrentTCBConst>:
 8011fd0:	2000032c 	.word	0x2000032c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011fd4:	bf00      	nop
 8011fd6:	bf00      	nop

08011fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8011fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe2:	b672      	cpsid	i
 8011fe4:	f383 8811 	msr	BASEPRI, r3
 8011fe8:	f3bf 8f6f 	isb	sy
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	b662      	cpsie	i
 8011ff2:	607b      	str	r3, [r7, #4]
}
 8011ff4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011ff6:	f7ff fa15 	bl	8011424 <xTaskIncrementTick>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d003      	beq.n	8012008 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012000:	4b06      	ldr	r3, [pc, #24]	; (801201c <SysTick_Handler+0x44>)
 8012002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	2300      	movs	r3, #0
 801200a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	f383 8811 	msr	BASEPRI, r3
}
 8012012:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012014:	bf00      	nop
 8012016:	3708      	adds	r7, #8
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	e000ed04 	.word	0xe000ed04

08012020 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012020:	b480      	push	{r7}
 8012022:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012024:	4b0b      	ldr	r3, [pc, #44]	; (8012054 <vPortSetupTimerInterrupt+0x34>)
 8012026:	2200      	movs	r2, #0
 8012028:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801202a:	4b0b      	ldr	r3, [pc, #44]	; (8012058 <vPortSetupTimerInterrupt+0x38>)
 801202c:	2200      	movs	r2, #0
 801202e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012030:	4b0a      	ldr	r3, [pc, #40]	; (801205c <vPortSetupTimerInterrupt+0x3c>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	4a0a      	ldr	r2, [pc, #40]	; (8012060 <vPortSetupTimerInterrupt+0x40>)
 8012036:	fba2 2303 	umull	r2, r3, r2, r3
 801203a:	099b      	lsrs	r3, r3, #6
 801203c:	4a09      	ldr	r2, [pc, #36]	; (8012064 <vPortSetupTimerInterrupt+0x44>)
 801203e:	3b01      	subs	r3, #1
 8012040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012042:	4b04      	ldr	r3, [pc, #16]	; (8012054 <vPortSetupTimerInterrupt+0x34>)
 8012044:	2207      	movs	r2, #7
 8012046:	601a      	str	r2, [r3, #0]
}
 8012048:	bf00      	nop
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	e000e010 	.word	0xe000e010
 8012058:	e000e018 	.word	0xe000e018
 801205c:	20000000 	.word	0x20000000
 8012060:	10624dd3 	.word	0x10624dd3
 8012064:	e000e014 	.word	0xe000e014

08012068 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012068:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012078 <vPortEnableVFP+0x10>
 801206c:	6801      	ldr	r1, [r0, #0]
 801206e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012072:	6001      	str	r1, [r0, #0]
 8012074:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012076:	bf00      	nop
 8012078:	e000ed88 	.word	0xe000ed88

0801207c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012082:	f3ef 8305 	mrs	r3, IPSR
 8012086:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	2b0f      	cmp	r3, #15
 801208c:	d916      	bls.n	80120bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801208e:	4a19      	ldr	r2, [pc, #100]	; (80120f4 <vPortValidateInterruptPriority+0x78>)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	4413      	add	r3, r2
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012098:	4b17      	ldr	r3, [pc, #92]	; (80120f8 <vPortValidateInterruptPriority+0x7c>)
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	7afa      	ldrb	r2, [r7, #11]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d20c      	bcs.n	80120bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80120a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a6:	b672      	cpsid	i
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	b662      	cpsie	i
 80120b6:	607b      	str	r3, [r7, #4]
}
 80120b8:	bf00      	nop
 80120ba:	e7fe      	b.n	80120ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80120bc:	4b0f      	ldr	r3, [pc, #60]	; (80120fc <vPortValidateInterruptPriority+0x80>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80120c4:	4b0e      	ldr	r3, [pc, #56]	; (8012100 <vPortValidateInterruptPriority+0x84>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d90c      	bls.n	80120e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80120cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d0:	b672      	cpsid	i
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	b662      	cpsie	i
 80120e0:	603b      	str	r3, [r7, #0]
}
 80120e2:	bf00      	nop
 80120e4:	e7fe      	b.n	80120e4 <vPortValidateInterruptPriority+0x68>
	}
 80120e6:	bf00      	nop
 80120e8:	3714      	adds	r7, #20
 80120ea:	46bd      	mov	sp, r7
 80120ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f0:	4770      	bx	lr
 80120f2:	bf00      	nop
 80120f4:	e000e3f0 	.word	0xe000e3f0
 80120f8:	20000458 	.word	0x20000458
 80120fc:	e000ed0c 	.word	0xe000ed0c
 8012100:	2000045c 	.word	0x2000045c

08012104 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b08a      	sub	sp, #40	; 0x28
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801210c:	2300      	movs	r3, #0
 801210e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012110:	f7ff f8ba 	bl	8011288 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012114:	4b5e      	ldr	r3, [pc, #376]	; (8012290 <pvPortMalloc+0x18c>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d101      	bne.n	8012120 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801211c:	f000 f920 	bl	8012360 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012120:	4b5c      	ldr	r3, [pc, #368]	; (8012294 <pvPortMalloc+0x190>)
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	4013      	ands	r3, r2
 8012128:	2b00      	cmp	r3, #0
 801212a:	f040 8092 	bne.w	8012252 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d01f      	beq.n	8012174 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012134:	2208      	movs	r2, #8
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	4413      	add	r3, r2
 801213a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f003 0307 	and.w	r3, r3, #7
 8012142:	2b00      	cmp	r3, #0
 8012144:	d016      	beq.n	8012174 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f023 0307 	bic.w	r3, r3, #7
 801214c:	3308      	adds	r3, #8
 801214e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f003 0307 	and.w	r3, r3, #7
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00c      	beq.n	8012174 <pvPortMalloc+0x70>
	__asm volatile
 801215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215e:	b672      	cpsid	i
 8012160:	f383 8811 	msr	BASEPRI, r3
 8012164:	f3bf 8f6f 	isb	sy
 8012168:	f3bf 8f4f 	dsb	sy
 801216c:	b662      	cpsie	i
 801216e:	617b      	str	r3, [r7, #20]
}
 8012170:	bf00      	nop
 8012172:	e7fe      	b.n	8012172 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d06b      	beq.n	8012252 <pvPortMalloc+0x14e>
 801217a:	4b47      	ldr	r3, [pc, #284]	; (8012298 <pvPortMalloc+0x194>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	429a      	cmp	r2, r3
 8012182:	d866      	bhi.n	8012252 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012184:	4b45      	ldr	r3, [pc, #276]	; (801229c <pvPortMalloc+0x198>)
 8012186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012188:	4b44      	ldr	r3, [pc, #272]	; (801229c <pvPortMalloc+0x198>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801218e:	e004      	b.n	801219a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	687a      	ldr	r2, [r7, #4]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d903      	bls.n	80121ac <pvPortMalloc+0xa8>
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d1f1      	bne.n	8012190 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80121ac:	4b38      	ldr	r3, [pc, #224]	; (8012290 <pvPortMalloc+0x18c>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121b2:	429a      	cmp	r2, r3
 80121b4:	d04d      	beq.n	8012252 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80121b6:	6a3b      	ldr	r3, [r7, #32]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	2208      	movs	r2, #8
 80121bc:	4413      	add	r3, r2
 80121be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80121c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80121c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ca:	685a      	ldr	r2, [r3, #4]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	1ad2      	subs	r2, r2, r3
 80121d0:	2308      	movs	r3, #8
 80121d2:	005b      	lsls	r3, r3, #1
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d921      	bls.n	801221c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80121d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	4413      	add	r3, r2
 80121de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	f003 0307 	and.w	r3, r3, #7
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d00c      	beq.n	8012204 <pvPortMalloc+0x100>
	__asm volatile
 80121ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ee:	b672      	cpsid	i
 80121f0:	f383 8811 	msr	BASEPRI, r3
 80121f4:	f3bf 8f6f 	isb	sy
 80121f8:	f3bf 8f4f 	dsb	sy
 80121fc:	b662      	cpsie	i
 80121fe:	613b      	str	r3, [r7, #16]
}
 8012200:	bf00      	nop
 8012202:	e7fe      	b.n	8012202 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012206:	685a      	ldr	r2, [r3, #4]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	1ad2      	subs	r2, r2, r3
 801220c:	69bb      	ldr	r3, [r7, #24]
 801220e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012216:	69b8      	ldr	r0, [r7, #24]
 8012218:	f000 f904 	bl	8012424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801221c:	4b1e      	ldr	r3, [pc, #120]	; (8012298 <pvPortMalloc+0x194>)
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	4a1c      	ldr	r2, [pc, #112]	; (8012298 <pvPortMalloc+0x194>)
 8012228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801222a:	4b1b      	ldr	r3, [pc, #108]	; (8012298 <pvPortMalloc+0x194>)
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	4b1c      	ldr	r3, [pc, #112]	; (80122a0 <pvPortMalloc+0x19c>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	429a      	cmp	r2, r3
 8012234:	d203      	bcs.n	801223e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012236:	4b18      	ldr	r3, [pc, #96]	; (8012298 <pvPortMalloc+0x194>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4a19      	ldr	r2, [pc, #100]	; (80122a0 <pvPortMalloc+0x19c>)
 801223c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	4b14      	ldr	r3, [pc, #80]	; (8012294 <pvPortMalloc+0x190>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	431a      	orrs	r2, r3
 8012248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224e:	2200      	movs	r2, #0
 8012250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012252:	f7ff f827 	bl	80112a4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d101      	bne.n	8012260 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801225c:	f7ee f966 	bl	800052c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	f003 0307 	and.w	r3, r3, #7
 8012266:	2b00      	cmp	r3, #0
 8012268:	d00c      	beq.n	8012284 <pvPortMalloc+0x180>
	__asm volatile
 801226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226e:	b672      	cpsid	i
 8012270:	f383 8811 	msr	BASEPRI, r3
 8012274:	f3bf 8f6f 	isb	sy
 8012278:	f3bf 8f4f 	dsb	sy
 801227c:	b662      	cpsie	i
 801227e:	60fb      	str	r3, [r7, #12]
}
 8012280:	bf00      	nop
 8012282:	e7fe      	b.n	8012282 <pvPortMalloc+0x17e>
	return pvReturn;
 8012284:	69fb      	ldr	r3, [r7, #28]
}
 8012286:	4618      	mov	r0, r3
 8012288:	3728      	adds	r7, #40	; 0x28
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	20008468 	.word	0x20008468
 8012294:	20008474 	.word	0x20008474
 8012298:	2000846c 	.word	0x2000846c
 801229c:	20008460 	.word	0x20008460
 80122a0:	20008470 	.word	0x20008470

080122a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d04c      	beq.n	8012350 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80122b6:	2308      	movs	r3, #8
 80122b8:	425b      	negs	r3, r3
 80122ba:	697a      	ldr	r2, [r7, #20]
 80122bc:	4413      	add	r3, r2
 80122be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	685a      	ldr	r2, [r3, #4]
 80122c8:	4b23      	ldr	r3, [pc, #140]	; (8012358 <vPortFree+0xb4>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4013      	ands	r3, r2
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d10c      	bne.n	80122ec <vPortFree+0x48>
	__asm volatile
 80122d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d6:	b672      	cpsid	i
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	b662      	cpsie	i
 80122e6:	60fb      	str	r3, [r7, #12]
}
 80122e8:	bf00      	nop
 80122ea:	e7fe      	b.n	80122ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80122ec:	693b      	ldr	r3, [r7, #16]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d00c      	beq.n	801230e <vPortFree+0x6a>
	__asm volatile
 80122f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f8:	b672      	cpsid	i
 80122fa:	f383 8811 	msr	BASEPRI, r3
 80122fe:	f3bf 8f6f 	isb	sy
 8012302:	f3bf 8f4f 	dsb	sy
 8012306:	b662      	cpsie	i
 8012308:	60bb      	str	r3, [r7, #8]
}
 801230a:	bf00      	nop
 801230c:	e7fe      	b.n	801230c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	685a      	ldr	r2, [r3, #4]
 8012312:	4b11      	ldr	r3, [pc, #68]	; (8012358 <vPortFree+0xb4>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	4013      	ands	r3, r2
 8012318:	2b00      	cmp	r3, #0
 801231a:	d019      	beq.n	8012350 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d115      	bne.n	8012350 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	685a      	ldr	r2, [r3, #4]
 8012328:	4b0b      	ldr	r3, [pc, #44]	; (8012358 <vPortFree+0xb4>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	43db      	mvns	r3, r3
 801232e:	401a      	ands	r2, r3
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012334:	f7fe ffa8 	bl	8011288 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	685a      	ldr	r2, [r3, #4]
 801233c:	4b07      	ldr	r3, [pc, #28]	; (801235c <vPortFree+0xb8>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4413      	add	r3, r2
 8012342:	4a06      	ldr	r2, [pc, #24]	; (801235c <vPortFree+0xb8>)
 8012344:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012346:	6938      	ldr	r0, [r7, #16]
 8012348:	f000 f86c 	bl	8012424 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801234c:	f7fe ffaa 	bl	80112a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012350:	bf00      	nop
 8012352:	3718      	adds	r7, #24
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	20008474 	.word	0x20008474
 801235c:	2000846c 	.word	0x2000846c

08012360 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012360:	b480      	push	{r7}
 8012362:	b085      	sub	sp, #20
 8012364:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801236a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801236c:	4b27      	ldr	r3, [pc, #156]	; (801240c <prvHeapInit+0xac>)
 801236e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f003 0307 	and.w	r3, r3, #7
 8012376:	2b00      	cmp	r3, #0
 8012378:	d00c      	beq.n	8012394 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	3307      	adds	r3, #7
 801237e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	f023 0307 	bic.w	r3, r3, #7
 8012386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012388:	68ba      	ldr	r2, [r7, #8]
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	4a1f      	ldr	r2, [pc, #124]	; (801240c <prvHeapInit+0xac>)
 8012390:	4413      	add	r3, r2
 8012392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012398:	4a1d      	ldr	r2, [pc, #116]	; (8012410 <prvHeapInit+0xb0>)
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801239e:	4b1c      	ldr	r3, [pc, #112]	; (8012410 <prvHeapInit+0xb0>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	68ba      	ldr	r2, [r7, #8]
 80123a8:	4413      	add	r3, r2
 80123aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80123ac:	2208      	movs	r2, #8
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	1a9b      	subs	r3, r3, r2
 80123b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f023 0307 	bic.w	r3, r3, #7
 80123ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	4a15      	ldr	r2, [pc, #84]	; (8012414 <prvHeapInit+0xb4>)
 80123c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80123c2:	4b14      	ldr	r3, [pc, #80]	; (8012414 <prvHeapInit+0xb4>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	2200      	movs	r2, #0
 80123c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80123ca:	4b12      	ldr	r3, [pc, #72]	; (8012414 <prvHeapInit+0xb4>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	2200      	movs	r2, #0
 80123d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	1ad2      	subs	r2, r2, r3
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80123e0:	4b0c      	ldr	r3, [pc, #48]	; (8012414 <prvHeapInit+0xb4>)
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	4a0a      	ldr	r2, [pc, #40]	; (8012418 <prvHeapInit+0xb8>)
 80123ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	4a09      	ldr	r2, [pc, #36]	; (801241c <prvHeapInit+0xbc>)
 80123f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80123f8:	4b09      	ldr	r3, [pc, #36]	; (8012420 <prvHeapInit+0xc0>)
 80123fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80123fe:	601a      	str	r2, [r3, #0]
}
 8012400:	bf00      	nop
 8012402:	3714      	adds	r7, #20
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr
 801240c:	20000460 	.word	0x20000460
 8012410:	20008460 	.word	0x20008460
 8012414:	20008468 	.word	0x20008468
 8012418:	20008470 	.word	0x20008470
 801241c:	2000846c 	.word	0x2000846c
 8012420:	20008474 	.word	0x20008474

08012424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801242c:	4b28      	ldr	r3, [pc, #160]	; (80124d0 <prvInsertBlockIntoFreeList+0xac>)
 801242e:	60fb      	str	r3, [r7, #12]
 8012430:	e002      	b.n	8012438 <prvInsertBlockIntoFreeList+0x14>
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	60fb      	str	r3, [r7, #12]
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	429a      	cmp	r2, r3
 8012440:	d8f7      	bhi.n	8012432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	685b      	ldr	r3, [r3, #4]
 801244a:	68ba      	ldr	r2, [r7, #8]
 801244c:	4413      	add	r3, r2
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	429a      	cmp	r2, r3
 8012452:	d108      	bne.n	8012466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	685a      	ldr	r2, [r3, #4]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	441a      	add	r2, r3
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	68ba      	ldr	r2, [r7, #8]
 8012470:	441a      	add	r2, r3
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	429a      	cmp	r2, r3
 8012478:	d118      	bne.n	80124ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	4b15      	ldr	r3, [pc, #84]	; (80124d4 <prvInsertBlockIntoFreeList+0xb0>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	429a      	cmp	r2, r3
 8012484:	d00d      	beq.n	80124a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	685a      	ldr	r2, [r3, #4]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	441a      	add	r2, r3
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	601a      	str	r2, [r3, #0]
 80124a0:	e008      	b.n	80124b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80124a2:	4b0c      	ldr	r3, [pc, #48]	; (80124d4 <prvInsertBlockIntoFreeList+0xb0>)
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	601a      	str	r2, [r3, #0]
 80124aa:	e003      	b.n	80124b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d002      	beq.n	80124c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	687a      	ldr	r2, [r7, #4]
 80124c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124c2:	bf00      	nop
 80124c4:	3714      	adds	r7, #20
 80124c6:	46bd      	mov	sp, r7
 80124c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124cc:	4770      	bx	lr
 80124ce:	bf00      	nop
 80124d0:	20008460 	.word	0x20008460
 80124d4:	20008468 	.word	0x20008468

080124d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80124dc:	2201      	movs	r2, #1
 80124de:	490e      	ldr	r1, [pc, #56]	; (8012518 <MX_USB_HOST_Init+0x40>)
 80124e0:	480e      	ldr	r0, [pc, #56]	; (801251c <MX_USB_HOST_Init+0x44>)
 80124e2:	f7fb fefd 	bl	800e2e0 <USBH_Init>
 80124e6:	4603      	mov	r3, r0
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d001      	beq.n	80124f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80124ec:	f7ef fab8 	bl	8001a60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80124f0:	490b      	ldr	r1, [pc, #44]	; (8012520 <MX_USB_HOST_Init+0x48>)
 80124f2:	480a      	ldr	r0, [pc, #40]	; (801251c <MX_USB_HOST_Init+0x44>)
 80124f4:	f7fb ffaa 	bl	800e44c <USBH_RegisterClass>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d001      	beq.n	8012502 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80124fe:	f7ef faaf 	bl	8001a60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012502:	4806      	ldr	r0, [pc, #24]	; (801251c <MX_USB_HOST_Init+0x44>)
 8012504:	f7fc f82e 	bl	800e564 <USBH_Start>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d001      	beq.n	8012512 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801250e:	f7ef faa7 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012512:	bf00      	nop
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	08012525 	.word	0x08012525
 801251c:	20009174 	.word	0x20009174
 8012520:	2000000c 	.word	0x2000000c

08012524 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
 801252c:	460b      	mov	r3, r1
 801252e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012530:	78fb      	ldrb	r3, [r7, #3]
 8012532:	3b01      	subs	r3, #1
 8012534:	2b04      	cmp	r3, #4
 8012536:	d819      	bhi.n	801256c <USBH_UserProcess+0x48>
 8012538:	a201      	add	r2, pc, #4	; (adr r2, 8012540 <USBH_UserProcess+0x1c>)
 801253a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801253e:	bf00      	nop
 8012540:	0801256d 	.word	0x0801256d
 8012544:	0801255d 	.word	0x0801255d
 8012548:	0801256d 	.word	0x0801256d
 801254c:	08012565 	.word	0x08012565
 8012550:	08012555 	.word	0x08012555
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012554:	4b09      	ldr	r3, [pc, #36]	; (801257c <USBH_UserProcess+0x58>)
 8012556:	2203      	movs	r2, #3
 8012558:	701a      	strb	r2, [r3, #0]
  break;
 801255a:	e008      	b.n	801256e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801255c:	4b07      	ldr	r3, [pc, #28]	; (801257c <USBH_UserProcess+0x58>)
 801255e:	2202      	movs	r2, #2
 8012560:	701a      	strb	r2, [r3, #0]
  break;
 8012562:	e004      	b.n	801256e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012564:	4b05      	ldr	r3, [pc, #20]	; (801257c <USBH_UserProcess+0x58>)
 8012566:	2201      	movs	r2, #1
 8012568:	701a      	strb	r2, [r3, #0]
  break;
 801256a:	e000      	b.n	801256e <USBH_UserProcess+0x4a>

  default:
  break;
 801256c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801256e:	bf00      	nop
 8012570:	370c      	adds	r7, #12
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop
 801257c:	20008478 	.word	0x20008478

08012580 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08a      	sub	sp, #40	; 0x28
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012588:	f107 0314 	add.w	r3, r7, #20
 801258c:	2200      	movs	r2, #0
 801258e:	601a      	str	r2, [r3, #0]
 8012590:	605a      	str	r2, [r3, #4]
 8012592:	609a      	str	r2, [r3, #8]
 8012594:	60da      	str	r2, [r3, #12]
 8012596:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80125a0:	d13c      	bne.n	801261c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80125a2:	4b20      	ldr	r3, [pc, #128]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 80125a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125a6:	4a1f      	ldr	r2, [pc, #124]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 80125a8:	f043 0301 	orr.w	r3, r3, #1
 80125ac:	6313      	str	r3, [r2, #48]	; 0x30
 80125ae:	4b1d      	ldr	r3, [pc, #116]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 80125b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125b2:	f003 0301 	and.w	r3, r3, #1
 80125b6:	613b      	str	r3, [r7, #16]
 80125b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80125ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80125be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80125c0:	2302      	movs	r3, #2
 80125c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80125c8:	2303      	movs	r3, #3
 80125ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80125cc:	230a      	movs	r3, #10
 80125ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125d0:	f107 0314 	add.w	r3, r7, #20
 80125d4:	4619      	mov	r1, r3
 80125d6:	4814      	ldr	r0, [pc, #80]	; (8012628 <HAL_HCD_MspInit+0xa8>)
 80125d8:	f7f1 ff60 	bl	800449c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80125dc:	4b11      	ldr	r3, [pc, #68]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 80125de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125e0:	4a10      	ldr	r2, [pc, #64]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 80125e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125e6:	6353      	str	r3, [r2, #52]	; 0x34
 80125e8:	4b0e      	ldr	r3, [pc, #56]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 80125ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125f0:	60fb      	str	r3, [r7, #12]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	4b0b      	ldr	r3, [pc, #44]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 80125f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125f8:	4a0a      	ldr	r2, [pc, #40]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 80125fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80125fe:	6453      	str	r3, [r2, #68]	; 0x44
 8012600:	4b08      	ldr	r3, [pc, #32]	; (8012624 <HAL_HCD_MspInit+0xa4>)
 8012602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012608:	60bb      	str	r3, [r7, #8]
 801260a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801260c:	2200      	movs	r2, #0
 801260e:	2105      	movs	r1, #5
 8012610:	2043      	movs	r0, #67	; 0x43
 8012612:	f7f0 fec5 	bl	80033a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012616:	2043      	movs	r0, #67	; 0x43
 8012618:	f7f0 fede 	bl	80033d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801261c:	bf00      	nop
 801261e:	3728      	adds	r7, #40	; 0x28
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}
 8012624:	40023800 	.word	0x40023800
 8012628:	40020000 	.word	0x40020000

0801262c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b082      	sub	sp, #8
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801263a:	4618      	mov	r0, r3
 801263c:	f7fc fc3f 	bl	800eebe <USBH_LL_IncTimer>
}
 8012640:	bf00      	nop
 8012642:	3708      	adds	r7, #8
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012656:	4618      	mov	r0, r3
 8012658:	f7fc fc83 	bl	800ef62 <USBH_LL_Connect>
}
 801265c:	bf00      	nop
 801265e:	3708      	adds	r7, #8
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012672:	4618      	mov	r0, r3
 8012674:	f7fc fc98 	bl	800efa8 <USBH_LL_Disconnect>
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	460b      	mov	r3, r1
 801268a:	70fb      	strb	r3, [r7, #3]
 801268c:	4613      	mov	r3, r2
 801268e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012696:	4618      	mov	r0, r3
 8012698:	f7fc fccd 	bl	800f036 <USBH_LL_NotifyURBChange>
#endif
}
 801269c:	bf00      	nop
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fc fc2d 	bl	800ef12 <USBH_LL_PortEnabled>
}
 80126b8:	bf00      	nop
 80126ba:	3708      	adds	r7, #8
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fc fc39 	bl	800ef46 <USBH_LL_PortDisabled>
}
 80126d4:	bf00      	nop
 80126d6:	3708      	adds	r7, #8
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}

080126dc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	d12a      	bne.n	8012744 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80126ee:	4a18      	ldr	r2, [pc, #96]	; (8012750 <USBH_LL_Init+0x74>)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	4a15      	ldr	r2, [pc, #84]	; (8012750 <USBH_LL_Init+0x74>)
 80126fa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80126fe:	4b14      	ldr	r3, [pc, #80]	; (8012750 <USBH_LL_Init+0x74>)
 8012700:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012704:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012706:	4b12      	ldr	r3, [pc, #72]	; (8012750 <USBH_LL_Init+0x74>)
 8012708:	2208      	movs	r2, #8
 801270a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801270c:	4b10      	ldr	r3, [pc, #64]	; (8012750 <USBH_LL_Init+0x74>)
 801270e:	2201      	movs	r2, #1
 8012710:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012712:	4b0f      	ldr	r3, [pc, #60]	; (8012750 <USBH_LL_Init+0x74>)
 8012714:	2200      	movs	r2, #0
 8012716:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012718:	4b0d      	ldr	r3, [pc, #52]	; (8012750 <USBH_LL_Init+0x74>)
 801271a:	2202      	movs	r2, #2
 801271c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801271e:	4b0c      	ldr	r3, [pc, #48]	; (8012750 <USBH_LL_Init+0x74>)
 8012720:	2200      	movs	r2, #0
 8012722:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012724:	480a      	ldr	r0, [pc, #40]	; (8012750 <USBH_LL_Init+0x74>)
 8012726:	f7f2 f8b0 	bl	800488a <HAL_HCD_Init>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d001      	beq.n	8012734 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012730:	f7ef f996 	bl	8001a60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012734:	4806      	ldr	r0, [pc, #24]	; (8012750 <USBH_LL_Init+0x74>)
 8012736:	f7f2 fc8d 	bl	8005054 <HAL_HCD_GetCurrentFrame>
 801273a:	4603      	mov	r3, r0
 801273c:	4619      	mov	r1, r3
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7fc fbae 	bl	800eea0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012744:	2300      	movs	r3, #0
}
 8012746:	4618      	mov	r0, r3
 8012748:	3708      	adds	r7, #8
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	20009558 	.word	0x20009558

08012754 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b084      	sub	sp, #16
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801275c:	2300      	movs	r3, #0
 801275e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012760:	2300      	movs	r3, #0
 8012762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801276a:	4618      	mov	r0, r3
 801276c:	f7f2 fbfc 	bl	8004f68 <HAL_HCD_Start>
 8012770:	4603      	mov	r3, r0
 8012772:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012774:	7bfb      	ldrb	r3, [r7, #15]
 8012776:	4618      	mov	r0, r3
 8012778:	f000 f95c 	bl	8012a34 <USBH_Get_USB_Status>
 801277c:	4603      	mov	r3, r0
 801277e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012780:	7bbb      	ldrb	r3, [r7, #14]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}

0801278a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b084      	sub	sp, #16
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012792:	2300      	movs	r3, #0
 8012794:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012796:	2300      	movs	r3, #0
 8012798:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7f2 fc04 	bl	8004fae <HAL_HCD_Stop>
 80127a6:	4603      	mov	r3, r0
 80127a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80127aa:	7bfb      	ldrb	r3, [r7, #15]
 80127ac:	4618      	mov	r0, r3
 80127ae:	f000 f941 	bl	8012a34 <USBH_Get_USB_Status>
 80127b2:	4603      	mov	r3, r0
 80127b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3710      	adds	r7, #16
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80127c8:	2301      	movs	r3, #1
 80127ca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7f2 fc4c 	bl	8005070 <HAL_HCD_GetCurrentSpeed>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d00c      	beq.n	80127f8 <USBH_LL_GetSpeed+0x38>
 80127de:	2b02      	cmp	r3, #2
 80127e0:	d80d      	bhi.n	80127fe <USBH_LL_GetSpeed+0x3e>
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d002      	beq.n	80127ec <USBH_LL_GetSpeed+0x2c>
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d003      	beq.n	80127f2 <USBH_LL_GetSpeed+0x32>
 80127ea:	e008      	b.n	80127fe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80127ec:	2300      	movs	r3, #0
 80127ee:	73fb      	strb	r3, [r7, #15]
    break;
 80127f0:	e008      	b.n	8012804 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80127f2:	2301      	movs	r3, #1
 80127f4:	73fb      	strb	r3, [r7, #15]
    break;
 80127f6:	e005      	b.n	8012804 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80127f8:	2302      	movs	r3, #2
 80127fa:	73fb      	strb	r3, [r7, #15]
    break;
 80127fc:	e002      	b.n	8012804 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80127fe:	2301      	movs	r3, #1
 8012800:	73fb      	strb	r3, [r7, #15]
    break;
 8012802:	bf00      	nop
  }
  return  speed;
 8012804:	7bfb      	ldrb	r3, [r7, #15]
}
 8012806:	4618      	mov	r0, r3
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}

0801280e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801280e:	b580      	push	{r7, lr}
 8012810:	b084      	sub	sp, #16
 8012812:	af00      	add	r7, sp, #0
 8012814:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012816:	2300      	movs	r3, #0
 8012818:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801281a:	2300      	movs	r3, #0
 801281c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012824:	4618      	mov	r0, r3
 8012826:	f7f2 fbdf 	bl	8004fe8 <HAL_HCD_ResetPort>
 801282a:	4603      	mov	r3, r0
 801282c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801282e:	7bfb      	ldrb	r3, [r7, #15]
 8012830:	4618      	mov	r0, r3
 8012832:	f000 f8ff 	bl	8012a34 <USBH_Get_USB_Status>
 8012836:	4603      	mov	r3, r0
 8012838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801283a:	7bbb      	ldrb	r3, [r7, #14]
}
 801283c:	4618      	mov	r0, r3
 801283e:	3710      	adds	r7, #16
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	460b      	mov	r3, r1
 801284e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012856:	78fa      	ldrb	r2, [r7, #3]
 8012858:	4611      	mov	r1, r2
 801285a:	4618      	mov	r0, r3
 801285c:	f7f2 fbe6 	bl	800502c <HAL_HCD_HC_GetXferCount>
 8012860:	4603      	mov	r3, r0
}
 8012862:	4618      	mov	r0, r3
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}

0801286a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801286a:	b590      	push	{r4, r7, lr}
 801286c:	b089      	sub	sp, #36	; 0x24
 801286e:	af04      	add	r7, sp, #16
 8012870:	6078      	str	r0, [r7, #4]
 8012872:	4608      	mov	r0, r1
 8012874:	4611      	mov	r1, r2
 8012876:	461a      	mov	r2, r3
 8012878:	4603      	mov	r3, r0
 801287a:	70fb      	strb	r3, [r7, #3]
 801287c:	460b      	mov	r3, r1
 801287e:	70bb      	strb	r3, [r7, #2]
 8012880:	4613      	mov	r3, r2
 8012882:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012884:	2300      	movs	r3, #0
 8012886:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012888:	2300      	movs	r3, #0
 801288a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012892:	787c      	ldrb	r4, [r7, #1]
 8012894:	78ba      	ldrb	r2, [r7, #2]
 8012896:	78f9      	ldrb	r1, [r7, #3]
 8012898:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801289a:	9302      	str	r3, [sp, #8]
 801289c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80128a0:	9301      	str	r3, [sp, #4]
 80128a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	4623      	mov	r3, r4
 80128aa:	f7f2 f850 	bl	800494e <HAL_HCD_HC_Init>
 80128ae:	4603      	mov	r3, r0
 80128b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80128b2:	7bfb      	ldrb	r3, [r7, #15]
 80128b4:	4618      	mov	r0, r3
 80128b6:	f000 f8bd 	bl	8012a34 <USBH_Get_USB_Status>
 80128ba:	4603      	mov	r3, r0
 80128bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128be:	7bbb      	ldrb	r3, [r7, #14]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3714      	adds	r7, #20
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd90      	pop	{r4, r7, pc}

080128c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	460b      	mov	r3, r1
 80128d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128d4:	2300      	movs	r3, #0
 80128d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80128d8:	2300      	movs	r3, #0
 80128da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80128e2:	78fa      	ldrb	r2, [r7, #3]
 80128e4:	4611      	mov	r1, r2
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7f2 f8c0 	bl	8004a6c <HAL_HCD_HC_Halt>
 80128ec:	4603      	mov	r3, r0
 80128ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80128f0:	7bfb      	ldrb	r3, [r7, #15]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f000 f89e 	bl	8012a34 <USBH_Get_USB_Status>
 80128f8:	4603      	mov	r3, r0
 80128fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012906:	b590      	push	{r4, r7, lr}
 8012908:	b089      	sub	sp, #36	; 0x24
 801290a:	af04      	add	r7, sp, #16
 801290c:	6078      	str	r0, [r7, #4]
 801290e:	4608      	mov	r0, r1
 8012910:	4611      	mov	r1, r2
 8012912:	461a      	mov	r2, r3
 8012914:	4603      	mov	r3, r0
 8012916:	70fb      	strb	r3, [r7, #3]
 8012918:	460b      	mov	r3, r1
 801291a:	70bb      	strb	r3, [r7, #2]
 801291c:	4613      	mov	r3, r2
 801291e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012920:	2300      	movs	r3, #0
 8012922:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012924:	2300      	movs	r3, #0
 8012926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801292e:	787c      	ldrb	r4, [r7, #1]
 8012930:	78ba      	ldrb	r2, [r7, #2]
 8012932:	78f9      	ldrb	r1, [r7, #3]
 8012934:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012938:	9303      	str	r3, [sp, #12]
 801293a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801293c:	9302      	str	r3, [sp, #8]
 801293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012940:	9301      	str	r3, [sp, #4]
 8012942:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012946:	9300      	str	r3, [sp, #0]
 8012948:	4623      	mov	r3, r4
 801294a:	f7f2 f8b3 	bl	8004ab4 <HAL_HCD_HC_SubmitRequest>
 801294e:	4603      	mov	r3, r0
 8012950:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012952:	7bfb      	ldrb	r3, [r7, #15]
 8012954:	4618      	mov	r0, r3
 8012956:	f000 f86d 	bl	8012a34 <USBH_Get_USB_Status>
 801295a:	4603      	mov	r3, r0
 801295c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801295e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012960:	4618      	mov	r0, r3
 8012962:	3714      	adds	r7, #20
 8012964:	46bd      	mov	sp, r7
 8012966:	bd90      	pop	{r4, r7, pc}

08012968 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b082      	sub	sp, #8
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	460b      	mov	r3, r1
 8012972:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801297a:	78fa      	ldrb	r2, [r7, #3]
 801297c:	4611      	mov	r1, r2
 801297e:	4618      	mov	r0, r3
 8012980:	f7f2 fb40 	bl	8005004 <HAL_HCD_HC_GetURBState>
 8012984:	4603      	mov	r3, r0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3708      	adds	r7, #8
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}

0801298e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801298e:	b580      	push	{r7, lr}
 8012990:	b082      	sub	sp, #8
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]
 8012996:	460b      	mov	r3, r1
 8012998:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d103      	bne.n	80129ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80129a4:	78fb      	ldrb	r3, [r7, #3]
 80129a6:	4618      	mov	r0, r3
 80129a8:	f000 f870 	bl	8012a8c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80129ac:	20c8      	movs	r0, #200	; 0xc8
 80129ae:	f7f0 f993 	bl	8002cd8 <HAL_Delay>
  return USBH_OK;
 80129b2:	2300      	movs	r3, #0
}
 80129b4:	4618      	mov	r0, r3
 80129b6:	3708      	adds	r7, #8
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}

080129bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80129bc:	b480      	push	{r7}
 80129be:	b085      	sub	sp, #20
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	460b      	mov	r3, r1
 80129c6:	70fb      	strb	r3, [r7, #3]
 80129c8:	4613      	mov	r3, r2
 80129ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80129d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80129d4:	78fb      	ldrb	r3, [r7, #3]
 80129d6:	68fa      	ldr	r2, [r7, #12]
 80129d8:	212c      	movs	r1, #44	; 0x2c
 80129da:	fb01 f303 	mul.w	r3, r1, r3
 80129de:	4413      	add	r3, r2
 80129e0:	333b      	adds	r3, #59	; 0x3b
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d009      	beq.n	80129fc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80129e8:	78fb      	ldrb	r3, [r7, #3]
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	212c      	movs	r1, #44	; 0x2c
 80129ee:	fb01 f303 	mul.w	r3, r1, r3
 80129f2:	4413      	add	r3, r2
 80129f4:	3354      	adds	r3, #84	; 0x54
 80129f6:	78ba      	ldrb	r2, [r7, #2]
 80129f8:	701a      	strb	r2, [r3, #0]
 80129fa:	e008      	b.n	8012a0e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80129fc:	78fb      	ldrb	r3, [r7, #3]
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	212c      	movs	r1, #44	; 0x2c
 8012a02:	fb01 f303 	mul.w	r3, r1, r3
 8012a06:	4413      	add	r3, r2
 8012a08:	3355      	adds	r3, #85	; 0x55
 8012a0a:	78ba      	ldrb	r2, [r7, #2]
 8012a0c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3714      	adds	r7, #20
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr

08012a1c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7f0 f957 	bl	8002cd8 <HAL_Delay>
}
 8012a2a:	bf00      	nop
 8012a2c:	3708      	adds	r7, #8
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}
	...

08012a34 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b085      	sub	sp, #20
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012a42:	79fb      	ldrb	r3, [r7, #7]
 8012a44:	2b03      	cmp	r3, #3
 8012a46:	d817      	bhi.n	8012a78 <USBH_Get_USB_Status+0x44>
 8012a48:	a201      	add	r2, pc, #4	; (adr r2, 8012a50 <USBH_Get_USB_Status+0x1c>)
 8012a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a4e:	bf00      	nop
 8012a50:	08012a61 	.word	0x08012a61
 8012a54:	08012a67 	.word	0x08012a67
 8012a58:	08012a6d 	.word	0x08012a6d
 8012a5c:	08012a73 	.word	0x08012a73
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012a60:	2300      	movs	r3, #0
 8012a62:	73fb      	strb	r3, [r7, #15]
    break;
 8012a64:	e00b      	b.n	8012a7e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012a66:	2302      	movs	r3, #2
 8012a68:	73fb      	strb	r3, [r7, #15]
    break;
 8012a6a:	e008      	b.n	8012a7e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a70:	e005      	b.n	8012a7e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012a72:	2302      	movs	r3, #2
 8012a74:	73fb      	strb	r3, [r7, #15]
    break;
 8012a76:	e002      	b.n	8012a7e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012a78:	2302      	movs	r3, #2
 8012a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8012a7c:	bf00      	nop
  }
  return usb_status;
 8012a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3714      	adds	r7, #20
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr

08012a8c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b084      	sub	sp, #16
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	4603      	mov	r3, r0
 8012a94:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012a96:	79fb      	ldrb	r3, [r7, #7]
 8012a98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012a9a:	79fb      	ldrb	r3, [r7, #7]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d102      	bne.n	8012aa6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	73fb      	strb	r3, [r7, #15]
 8012aa4:	e001      	b.n	8012aaa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8012aaa:	7bfb      	ldrb	r3, [r7, #15]
 8012aac:	461a      	mov	r2, r3
 8012aae:	2120      	movs	r1, #32
 8012ab0:	4803      	ldr	r0, [pc, #12]	; (8012ac0 <MX_DriverVbusFS+0x34>)
 8012ab2:	f7f1 feb7 	bl	8004824 <HAL_GPIO_WritePin>
}
 8012ab6:	bf00      	nop
 8012ab8:	3710      	adds	r7, #16
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	40020c00 	.word	0x40020c00

08012ac4 <__errno>:
 8012ac4:	4b01      	ldr	r3, [pc, #4]	; (8012acc <__errno+0x8>)
 8012ac6:	6818      	ldr	r0, [r3, #0]
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop
 8012acc:	20000030 	.word	0x20000030

08012ad0 <__libc_init_array>:
 8012ad0:	b570      	push	{r4, r5, r6, lr}
 8012ad2:	4d0d      	ldr	r5, [pc, #52]	; (8012b08 <__libc_init_array+0x38>)
 8012ad4:	4c0d      	ldr	r4, [pc, #52]	; (8012b0c <__libc_init_array+0x3c>)
 8012ad6:	1b64      	subs	r4, r4, r5
 8012ad8:	10a4      	asrs	r4, r4, #2
 8012ada:	2600      	movs	r6, #0
 8012adc:	42a6      	cmp	r6, r4
 8012ade:	d109      	bne.n	8012af4 <__libc_init_array+0x24>
 8012ae0:	4d0b      	ldr	r5, [pc, #44]	; (8012b10 <__libc_init_array+0x40>)
 8012ae2:	4c0c      	ldr	r4, [pc, #48]	; (8012b14 <__libc_init_array+0x44>)
 8012ae4:	f000 f906 	bl	8012cf4 <_init>
 8012ae8:	1b64      	subs	r4, r4, r5
 8012aea:	10a4      	asrs	r4, r4, #2
 8012aec:	2600      	movs	r6, #0
 8012aee:	42a6      	cmp	r6, r4
 8012af0:	d105      	bne.n	8012afe <__libc_init_array+0x2e>
 8012af2:	bd70      	pop	{r4, r5, r6, pc}
 8012af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012af8:	4798      	blx	r3
 8012afa:	3601      	adds	r6, #1
 8012afc:	e7ee      	b.n	8012adc <__libc_init_array+0xc>
 8012afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b02:	4798      	blx	r3
 8012b04:	3601      	adds	r6, #1
 8012b06:	e7f2      	b.n	8012aee <__libc_init_array+0x1e>
 8012b08:	08012dbc 	.word	0x08012dbc
 8012b0c:	08012dbc 	.word	0x08012dbc
 8012b10:	08012dbc 	.word	0x08012dbc
 8012b14:	08012dc0 	.word	0x08012dc0

08012b18 <malloc>:
 8012b18:	4b02      	ldr	r3, [pc, #8]	; (8012b24 <malloc+0xc>)
 8012b1a:	4601      	mov	r1, r0
 8012b1c:	6818      	ldr	r0, [r3, #0]
 8012b1e:	f000 b871 	b.w	8012c04 <_malloc_r>
 8012b22:	bf00      	nop
 8012b24:	20000030 	.word	0x20000030

08012b28 <free>:
 8012b28:	4b02      	ldr	r3, [pc, #8]	; (8012b34 <free+0xc>)
 8012b2a:	4601      	mov	r1, r0
 8012b2c:	6818      	ldr	r0, [r3, #0]
 8012b2e:	f000 b819 	b.w	8012b64 <_free_r>
 8012b32:	bf00      	nop
 8012b34:	20000030 	.word	0x20000030

08012b38 <memcpy>:
 8012b38:	440a      	add	r2, r1
 8012b3a:	4291      	cmp	r1, r2
 8012b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012b40:	d100      	bne.n	8012b44 <memcpy+0xc>
 8012b42:	4770      	bx	lr
 8012b44:	b510      	push	{r4, lr}
 8012b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b4e:	4291      	cmp	r1, r2
 8012b50:	d1f9      	bne.n	8012b46 <memcpy+0xe>
 8012b52:	bd10      	pop	{r4, pc}

08012b54 <memset>:
 8012b54:	4402      	add	r2, r0
 8012b56:	4603      	mov	r3, r0
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d100      	bne.n	8012b5e <memset+0xa>
 8012b5c:	4770      	bx	lr
 8012b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8012b62:	e7f9      	b.n	8012b58 <memset+0x4>

08012b64 <_free_r>:
 8012b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b66:	2900      	cmp	r1, #0
 8012b68:	d048      	beq.n	8012bfc <_free_r+0x98>
 8012b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b6e:	9001      	str	r0, [sp, #4]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	f1a1 0404 	sub.w	r4, r1, #4
 8012b76:	bfb8      	it	lt
 8012b78:	18e4      	addlt	r4, r4, r3
 8012b7a:	f000 f8ad 	bl	8012cd8 <__malloc_lock>
 8012b7e:	4a20      	ldr	r2, [pc, #128]	; (8012c00 <_free_r+0x9c>)
 8012b80:	9801      	ldr	r0, [sp, #4]
 8012b82:	6813      	ldr	r3, [r2, #0]
 8012b84:	4615      	mov	r5, r2
 8012b86:	b933      	cbnz	r3, 8012b96 <_free_r+0x32>
 8012b88:	6063      	str	r3, [r4, #4]
 8012b8a:	6014      	str	r4, [r2, #0]
 8012b8c:	b003      	add	sp, #12
 8012b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b92:	f000 b8a7 	b.w	8012ce4 <__malloc_unlock>
 8012b96:	42a3      	cmp	r3, r4
 8012b98:	d90b      	bls.n	8012bb2 <_free_r+0x4e>
 8012b9a:	6821      	ldr	r1, [r4, #0]
 8012b9c:	1862      	adds	r2, r4, r1
 8012b9e:	4293      	cmp	r3, r2
 8012ba0:	bf04      	itt	eq
 8012ba2:	681a      	ldreq	r2, [r3, #0]
 8012ba4:	685b      	ldreq	r3, [r3, #4]
 8012ba6:	6063      	str	r3, [r4, #4]
 8012ba8:	bf04      	itt	eq
 8012baa:	1852      	addeq	r2, r2, r1
 8012bac:	6022      	streq	r2, [r4, #0]
 8012bae:	602c      	str	r4, [r5, #0]
 8012bb0:	e7ec      	b.n	8012b8c <_free_r+0x28>
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	b10b      	cbz	r3, 8012bbc <_free_r+0x58>
 8012bb8:	42a3      	cmp	r3, r4
 8012bba:	d9fa      	bls.n	8012bb2 <_free_r+0x4e>
 8012bbc:	6811      	ldr	r1, [r2, #0]
 8012bbe:	1855      	adds	r5, r2, r1
 8012bc0:	42a5      	cmp	r5, r4
 8012bc2:	d10b      	bne.n	8012bdc <_free_r+0x78>
 8012bc4:	6824      	ldr	r4, [r4, #0]
 8012bc6:	4421      	add	r1, r4
 8012bc8:	1854      	adds	r4, r2, r1
 8012bca:	42a3      	cmp	r3, r4
 8012bcc:	6011      	str	r1, [r2, #0]
 8012bce:	d1dd      	bne.n	8012b8c <_free_r+0x28>
 8012bd0:	681c      	ldr	r4, [r3, #0]
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	6053      	str	r3, [r2, #4]
 8012bd6:	4421      	add	r1, r4
 8012bd8:	6011      	str	r1, [r2, #0]
 8012bda:	e7d7      	b.n	8012b8c <_free_r+0x28>
 8012bdc:	d902      	bls.n	8012be4 <_free_r+0x80>
 8012bde:	230c      	movs	r3, #12
 8012be0:	6003      	str	r3, [r0, #0]
 8012be2:	e7d3      	b.n	8012b8c <_free_r+0x28>
 8012be4:	6825      	ldr	r5, [r4, #0]
 8012be6:	1961      	adds	r1, r4, r5
 8012be8:	428b      	cmp	r3, r1
 8012bea:	bf04      	itt	eq
 8012bec:	6819      	ldreq	r1, [r3, #0]
 8012bee:	685b      	ldreq	r3, [r3, #4]
 8012bf0:	6063      	str	r3, [r4, #4]
 8012bf2:	bf04      	itt	eq
 8012bf4:	1949      	addeq	r1, r1, r5
 8012bf6:	6021      	streq	r1, [r4, #0]
 8012bf8:	6054      	str	r4, [r2, #4]
 8012bfa:	e7c7      	b.n	8012b8c <_free_r+0x28>
 8012bfc:	b003      	add	sp, #12
 8012bfe:	bd30      	pop	{r4, r5, pc}
 8012c00:	2000847c 	.word	0x2000847c

08012c04 <_malloc_r>:
 8012c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c06:	1ccd      	adds	r5, r1, #3
 8012c08:	f025 0503 	bic.w	r5, r5, #3
 8012c0c:	3508      	adds	r5, #8
 8012c0e:	2d0c      	cmp	r5, #12
 8012c10:	bf38      	it	cc
 8012c12:	250c      	movcc	r5, #12
 8012c14:	2d00      	cmp	r5, #0
 8012c16:	4606      	mov	r6, r0
 8012c18:	db01      	blt.n	8012c1e <_malloc_r+0x1a>
 8012c1a:	42a9      	cmp	r1, r5
 8012c1c:	d903      	bls.n	8012c26 <_malloc_r+0x22>
 8012c1e:	230c      	movs	r3, #12
 8012c20:	6033      	str	r3, [r6, #0]
 8012c22:	2000      	movs	r0, #0
 8012c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c26:	f000 f857 	bl	8012cd8 <__malloc_lock>
 8012c2a:	4921      	ldr	r1, [pc, #132]	; (8012cb0 <_malloc_r+0xac>)
 8012c2c:	680a      	ldr	r2, [r1, #0]
 8012c2e:	4614      	mov	r4, r2
 8012c30:	b99c      	cbnz	r4, 8012c5a <_malloc_r+0x56>
 8012c32:	4f20      	ldr	r7, [pc, #128]	; (8012cb4 <_malloc_r+0xb0>)
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	b923      	cbnz	r3, 8012c42 <_malloc_r+0x3e>
 8012c38:	4621      	mov	r1, r4
 8012c3a:	4630      	mov	r0, r6
 8012c3c:	f000 f83c 	bl	8012cb8 <_sbrk_r>
 8012c40:	6038      	str	r0, [r7, #0]
 8012c42:	4629      	mov	r1, r5
 8012c44:	4630      	mov	r0, r6
 8012c46:	f000 f837 	bl	8012cb8 <_sbrk_r>
 8012c4a:	1c43      	adds	r3, r0, #1
 8012c4c:	d123      	bne.n	8012c96 <_malloc_r+0x92>
 8012c4e:	230c      	movs	r3, #12
 8012c50:	6033      	str	r3, [r6, #0]
 8012c52:	4630      	mov	r0, r6
 8012c54:	f000 f846 	bl	8012ce4 <__malloc_unlock>
 8012c58:	e7e3      	b.n	8012c22 <_malloc_r+0x1e>
 8012c5a:	6823      	ldr	r3, [r4, #0]
 8012c5c:	1b5b      	subs	r3, r3, r5
 8012c5e:	d417      	bmi.n	8012c90 <_malloc_r+0x8c>
 8012c60:	2b0b      	cmp	r3, #11
 8012c62:	d903      	bls.n	8012c6c <_malloc_r+0x68>
 8012c64:	6023      	str	r3, [r4, #0]
 8012c66:	441c      	add	r4, r3
 8012c68:	6025      	str	r5, [r4, #0]
 8012c6a:	e004      	b.n	8012c76 <_malloc_r+0x72>
 8012c6c:	6863      	ldr	r3, [r4, #4]
 8012c6e:	42a2      	cmp	r2, r4
 8012c70:	bf0c      	ite	eq
 8012c72:	600b      	streq	r3, [r1, #0]
 8012c74:	6053      	strne	r3, [r2, #4]
 8012c76:	4630      	mov	r0, r6
 8012c78:	f000 f834 	bl	8012ce4 <__malloc_unlock>
 8012c7c:	f104 000b 	add.w	r0, r4, #11
 8012c80:	1d23      	adds	r3, r4, #4
 8012c82:	f020 0007 	bic.w	r0, r0, #7
 8012c86:	1ac2      	subs	r2, r0, r3
 8012c88:	d0cc      	beq.n	8012c24 <_malloc_r+0x20>
 8012c8a:	1a1b      	subs	r3, r3, r0
 8012c8c:	50a3      	str	r3, [r4, r2]
 8012c8e:	e7c9      	b.n	8012c24 <_malloc_r+0x20>
 8012c90:	4622      	mov	r2, r4
 8012c92:	6864      	ldr	r4, [r4, #4]
 8012c94:	e7cc      	b.n	8012c30 <_malloc_r+0x2c>
 8012c96:	1cc4      	adds	r4, r0, #3
 8012c98:	f024 0403 	bic.w	r4, r4, #3
 8012c9c:	42a0      	cmp	r0, r4
 8012c9e:	d0e3      	beq.n	8012c68 <_malloc_r+0x64>
 8012ca0:	1a21      	subs	r1, r4, r0
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	f000 f808 	bl	8012cb8 <_sbrk_r>
 8012ca8:	3001      	adds	r0, #1
 8012caa:	d1dd      	bne.n	8012c68 <_malloc_r+0x64>
 8012cac:	e7cf      	b.n	8012c4e <_malloc_r+0x4a>
 8012cae:	bf00      	nop
 8012cb0:	2000847c 	.word	0x2000847c
 8012cb4:	20008480 	.word	0x20008480

08012cb8 <_sbrk_r>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	4d06      	ldr	r5, [pc, #24]	; (8012cd4 <_sbrk_r+0x1c>)
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	4608      	mov	r0, r1
 8012cc2:	602b      	str	r3, [r5, #0]
 8012cc4:	f7ef ff6a 	bl	8002b9c <_sbrk>
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	d102      	bne.n	8012cd2 <_sbrk_r+0x1a>
 8012ccc:	682b      	ldr	r3, [r5, #0]
 8012cce:	b103      	cbz	r3, 8012cd2 <_sbrk_r+0x1a>
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}
 8012cd4:	2000985c 	.word	0x2000985c

08012cd8 <__malloc_lock>:
 8012cd8:	4801      	ldr	r0, [pc, #4]	; (8012ce0 <__malloc_lock+0x8>)
 8012cda:	f000 b809 	b.w	8012cf0 <__retarget_lock_acquire_recursive>
 8012cde:	bf00      	nop
 8012ce0:	20009864 	.word	0x20009864

08012ce4 <__malloc_unlock>:
 8012ce4:	4801      	ldr	r0, [pc, #4]	; (8012cec <__malloc_unlock+0x8>)
 8012ce6:	f000 b804 	b.w	8012cf2 <__retarget_lock_release_recursive>
 8012cea:	bf00      	nop
 8012cec:	20009864 	.word	0x20009864

08012cf0 <__retarget_lock_acquire_recursive>:
 8012cf0:	4770      	bx	lr

08012cf2 <__retarget_lock_release_recursive>:
 8012cf2:	4770      	bx	lr

08012cf4 <_init>:
 8012cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cf6:	bf00      	nop
 8012cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cfa:	bc08      	pop	{r3}
 8012cfc:	469e      	mov	lr, r3
 8012cfe:	4770      	bx	lr

08012d00 <_fini>:
 8012d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d02:	bf00      	nop
 8012d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d06:	bc08      	pop	{r3}
 8012d08:	469e      	mov	lr, r3
 8012d0a:	4770      	bx	lr
