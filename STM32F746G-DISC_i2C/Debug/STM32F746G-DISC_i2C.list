
STM32F746G-DISC_i2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006c60  08006c60  00016c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800707c  0800707c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007084  08007084  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800708c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  200001dc  08007268  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08007268  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eea  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002404  00000000  00000000  000310f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00033500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00034380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b54  00000000  00000000  000350e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001111b  00000000  00000000  0005bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecfb3  00000000  00000000  0006cd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159d0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd8  00000000  00000000  00159d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c44 	.word	0x08006c44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006c44 	.word	0x08006c44

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f023 030f 	bic.w	r3, r3, #15
 8000ef6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	f043 030c 	orr.w	r3, r3, #12
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	723b      	strb	r3, [r7, #8]
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	727b      	strb	r3, [r7, #9]
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	f043 030c 	orr.w	r3, r3, #12
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	72bb      	strb	r3, [r7, #10]
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <lcd16x2_i2c_sendCommand+0x60>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <lcd16x2_i2c_sendCommand+0x64>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	f107 0208 	add.w	r2, r7, #8
 8000f2e:	23c8      	movs	r3, #200	; 0xc8
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2304      	movs	r3, #4
 8000f34:	f001 f800 	bl	8001f38 <HAL_I2C_Master_Transmit>
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200001f8 	.word	0x200001f8
 8000f44:	200001fc 	.word	0x200001fc

08000f48 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f023 030f 	bic.w	r3, r3, #15
 8000f5e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	f043 030d 	orr.w	r3, r3, #13
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	723b      	strb	r3, [r7, #8]
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	f043 0309 	orr.w	r3, r3, #9
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	727b      	strb	r3, [r7, #9]
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f043 030d 	orr.w	r3, r3, #13
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	72bb      	strb	r3, [r7, #10]
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	f043 0309 	orr.w	r3, r3, #9
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <lcd16x2_i2c_sendData+0x60>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <lcd16x2_i2c_sendData+0x64>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b299      	uxth	r1, r3
 8000f92:	f107 0208 	add.w	r2, r7, #8
 8000f96:	23c8      	movs	r3, #200	; 0xc8
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	f000 ffcc 	bl	8001f38 <HAL_I2C_Master_Transmit>
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001f8 	.word	0x200001f8
 8000fac:	200001fc 	.word	0x200001fc

08000fb0 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000fb8:	2032      	movs	r0, #50	; 0x32
 8000fba:	f000 fc61 	bl	8001880 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000fbe:	4a30      	ldr	r2, [pc, #192]	; (8001080 <lcd16x2_i2c_init+0xd0>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <lcd16x2_i2c_init+0xd0>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fcc:	2205      	movs	r2, #5
 8000fce:	214e      	movs	r1, #78	; 0x4e
 8000fd0:	f001 f8a6 	bl	8002120 <HAL_I2C_IsDeviceReady>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d010      	beq.n	8000ffc <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <lcd16x2_i2c_init+0xd0>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fe2:	2205      	movs	r2, #5
 8000fe4:	217e      	movs	r1, #126	; 0x7e
 8000fe6:	f001 f89b 	bl	8002120 <HAL_I2C_IsDeviceReady>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e040      	b.n	8001076 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <lcd16x2_i2c_init+0xd4>)
 8000ff6:	227e      	movs	r2, #126	; 0x7e
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	e002      	b.n	8001002 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <lcd16x2_i2c_init+0xd4>)
 8000ffe:	224e      	movs	r2, #78	; 0x4e
 8001000:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8001002:	202d      	movs	r0, #45	; 0x2d
 8001004:	f000 fc3c 	bl	8001880 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8001008:	2030      	movs	r0, #48	; 0x30
 800100a:	f7ff ff69 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 800100e:	2005      	movs	r0, #5
 8001010:	f000 fc36 	bl	8001880 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001014:	2030      	movs	r0, #48	; 0x30
 8001016:	f7ff ff63 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fc30 	bl	8001880 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001020:	2030      	movs	r0, #48	; 0x30
 8001022:	f7ff ff5d 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001026:	2008      	movs	r0, #8
 8001028:	f000 fc2a 	bl	8001880 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 800102c:	2020      	movs	r0, #32
 800102e:	f7ff ff57 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001032:	2008      	movs	r0, #8
 8001034:	f000 fc24 	bl	8001880 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001038:	2028      	movs	r0, #40	; 0x28
 800103a:	f7ff ff51 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f000 fc1e 	bl	8001880 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001044:	2008      	movs	r0, #8
 8001046:	f7ff ff4b 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fc18 	bl	8001880 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff ff45 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 fc12 	bl	8001880 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 800105c:	2006      	movs	r0, #6
 800105e:	f7ff ff3f 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 fc0c 	bl	8001880 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001068:	200c      	movs	r0, #12
 800106a:	f7ff ff39 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800106e:	2003      	movs	r0, #3
 8001070:	f000 fc06 	bl	8001880 <HAL_Delay>

  return true;
 8001074:	2301      	movs	r3, #1
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001f8 	.word	0x200001f8
 8001084:	200001fc 	.word	0x200001fc

08001088 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d108      	bne.n	80010b8 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ac:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff15 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 80010b6:	e007      	b.n	80010c8 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010be:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff0c 	bl	8000ee0 <lcd16x2_i2c_sendCommand>
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 80010d0:	b40f      	push	{r0, r1, r2, r3}
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b089      	sub	sp, #36	; 0x24
 80010d6:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80010d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010dc:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fb98 	bl	800481c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	77fb      	strb	r3, [r7, #31]
 80010f0:	e00b      	b.n	800110a <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 80010f2:	7ffb      	ldrb	r3, [r7, #31]
 80010f4:	f107 0220 	add.w	r2, r7, #32
 80010f8:	4413      	add	r3, r2
 80010fa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff22 	bl	8000f48 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001104:	7ffb      	ldrb	r3, [r7, #31]
 8001106:	3301      	adds	r3, #1
 8001108:	77fb      	strb	r3, [r7, #31]
 800110a:	7ffc      	ldrb	r4, [r7, #31]
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f87d 	bl	8000210 <strlen>
 8001116:	4603      	mov	r3, r0
 8001118:	429c      	cmp	r4, r3
 800111a:	d202      	bcs.n	8001122 <lcd16x2_i2c_printf+0x52>
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	2b0f      	cmp	r3, #15
 8001120:	d9e7      	bls.n	80010f2 <lcd16x2_i2c_printf+0x22>
  }
}
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800112c:	b004      	add	sp, #16
 800112e:	4770      	bx	lr

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f000 fb76 	bl	8001826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113a:	f000 f83f 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113e:	f000 f90d 	bl	800135c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001142:	f000 f8cb 	bl	80012dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
 if(lcd16x2_i2c_init(&hi2c1)){
 8001146:	4818      	ldr	r0, [pc, #96]	; (80011a8 <main+0x78>)
 8001148:	f7ff ff32 	bl	8000fb0 <lcd16x2_i2c_init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <main+0x2c>
	 HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	2102      	movs	r1, #2
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <main+0x7c>)
 8001158:	f000 fe44 	bl	8001de4 <HAL_GPIO_WritePin>
 }
 lcd16x2_i2c_clear;
 lcd16x2_i2c_setCursor(0,0);
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff ff92 	bl	8001088 <lcd16x2_i2c_setCursor>
 lcd16x2_i2c_printf("T: %.2f D: %.2f",15.5,2.16);
 8001164:	a30c      	add	r3, pc, #48	; (adr r3, 8001198 <main+0x68>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	e9cd 2300 	strd	r2, r3, [sp]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <main+0x80>)
 8001174:	480f      	ldr	r0, [pc, #60]	; (80011b4 <main+0x84>)
 8001176:	f7ff ffab 	bl	80010d0 <lcd16x2_i2c_printf>
 lcd16x2_i2c_setCursor(1,0);
 800117a:	2100      	movs	r1, #0
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ff83 	bl	8001088 <lcd16x2_i2c_setCursor>
 lcd16x2_i2c_printf("H: %.2f C: %.2d",50.26,800);
 8001182:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	a305      	add	r3, pc, #20	; (adr r3, 80011a0 <main+0x70>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <main+0x88>)
 8001190:	f7ff ff9e 	bl	80010d0 <lcd16x2_i2c_printf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001194:	e7fe      	b.n	8001194 <main+0x64>
 8001196:	bf00      	nop
 8001198:	147ae148 	.word	0x147ae148
 800119c:	400147ae 	.word	0x400147ae
 80011a0:	ae147ae1 	.word	0xae147ae1
 80011a4:	40492147 	.word	0x40492147
 80011a8:	2000020c 	.word	0x2000020c
 80011ac:	40022000 	.word	0x40022000
 80011b0:	402f0000 	.word	0x402f0000
 80011b4:	08006c60 	.word	0x08006c60
 80011b8:	08006c70 	.word	0x08006c70

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0b4      	sub	sp, #208	; 0xd0
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011c6:	2230      	movs	r2, #48	; 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fe9e 	bl	8003f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2284      	movs	r2, #132	; 0x84
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 fe8f 	bl	8003f0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <SystemClock_Config+0x118>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a38      	ldr	r2, [pc, #224]	; (80012d4 <SystemClock_Config+0x118>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <SystemClock_Config+0x118>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <SystemClock_Config+0x11c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <SystemClock_Config+0x11c>)
 800120c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <SystemClock_Config+0x11c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800121e:	2301      	movs	r3, #1
 8001220:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001232:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800123a:	2319      	movs	r3, #25
 800123c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001240:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001244:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800124e:	2309      	movs	r3, #9
 8001250:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fac5 	bl	80027e8 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001264:	f000 f8e2 	bl	800142c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001268:	f001 fa6e 	bl	8002748 <HAL_PWREx_EnableOverDrive>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001272:	f000 f8db 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001288:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800128c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001294:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001298:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800129c:	2106      	movs	r1, #6
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fd46 	bl	8002d30 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80012aa:	f000 f8bf 	bl	800142c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 ff2b 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x110>
  {
    Error_Handler();
 80012c8:	f000 f8b0 	bl	800142c <Error_Handler>
  }
}
 80012cc:	bf00      	nop
 80012ce:	37d0      	adds	r7, #208	; 0xd0
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000

080012dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_I2C1_Init+0x74>)
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <MX_I2C1_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_I2C1_Init+0x74>)
 80012e8:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <MX_I2C1_Init+0x7c>)
 80012ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_I2C1_Init+0x74>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_I2C1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_I2C1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_I2C1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <MX_I2C1_Init+0x74>)
 8001318:	f000 fd7e 	bl	8001e18 <HAL_I2C_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001322:	f000 f883 	bl	800142c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4809      	ldr	r0, [pc, #36]	; (8001350 <MX_I2C1_Init+0x74>)
 800132a:	f001 f975 	bl	8002618 <HAL_I2CEx_ConfigAnalogFilter>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001334:	f000 f87a 	bl	800142c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_I2C1_Init+0x74>)
 800133c:	f001 f9b7 	bl	80026ae <HAL_I2CEx_ConfigDigitalFilter>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 f871 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000020c 	.word	0x2000020c
 8001354:	40005400 	.word	0x40005400
 8001358:	00c0eaff 	.word	0x00c0eaff

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <MX_GPIO_Init+0xa4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <MX_GPIO_Init+0xa4>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_GPIO_Init+0xa4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_GPIO_Init+0xa4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <MX_GPIO_Init+0xa4>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_GPIO_Init+0xa4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_GPIO_Init+0xa4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a16      	ldr	r2, [pc, #88]	; (8001400 <MX_GPIO_Init+0xa4>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_GPIO_Init+0xa4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_GPIO_Init+0xa4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <MX_GPIO_Init+0xa4>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_GPIO_Init+0xa4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2102      	movs	r1, #2
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <MX_GPIO_Init+0xa8>)
 80013d8:	f000 fd04 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013dc:	2302      	movs	r3, #2
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_GPIO_Init+0xa8>)
 80013f4:	f000 fb4a 	bl	8001a8c <HAL_GPIO_Init>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141a:	f000 fa11 	bl	8001840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010000 	.word	0x40010000

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x44>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_MspInit+0x44>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_MspInit+0x44>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_MspInit+0x44>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_MspInit+0x44>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x44>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_I2C_MspInit+0x7c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d128      	bne.n	80014f4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c0:	2312      	movs	r3, #18
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014cc:	2304      	movs	r3, #4
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <HAL_I2C_MspInit+0x84>)
 80014d8:	f000 fad8 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_I2C_MspInit+0x80>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40005400 	.word	0x40005400
 8001500:	40023800 	.word	0x40023800
 8001504:	40020400 	.word	0x40020400

08001508 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	2019      	movs	r0, #25
 800151e:	f000 fa8b 	bl	8001a38 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001522:	2019      	movs	r0, #25
 8001524:	f000 faa4 	bl	8001a70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_InitTick+0xa0>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	4a1e      	ldr	r2, [pc, #120]	; (80015a8 <HAL_InitTick+0xa0>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6453      	str	r3, [r2, #68]	; 0x44
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_InitTick+0xa0>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fdb2 	bl	80030b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001550:	f001 fd9c 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 8001554:	4603      	mov	r3, r0
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <HAL_InitTick+0xa4>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0c9b      	lsrs	r3, r3, #18
 8001564:	3b01      	subs	r3, #1
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_InitTick+0xa8>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_InitTick+0xac>)
 800156c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_InitTick+0xa8>)
 8001570:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001574:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_InitTick+0xa8>)
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_InitTick+0xa8>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_InitTick+0xa8>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <HAL_InitTick+0xa8>)
 800158a:	f002 f9b5 	bl	80038f8 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <HAL_InitTick+0xa8>)
 8001596:	f002 fa11 	bl	80039bc <HAL_TIM_Base_Start_IT>
 800159a:	4603      	mov	r3, r0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	20000258 	.word	0x20000258
 80015b4:	40010000 	.word	0x40010000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001616:	f002 fa49 	bl	8003aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000258 	.word	0x20000258

08001624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	return 1;
 8001628:	2301      	movs	r3, #1
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_kill>:

int _kill(int pid, int sig)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800163e:	f002 fc3b 	bl	8003eb8 <__errno>
 8001642:	4603      	mov	r3, r0
 8001644:	2216      	movs	r2, #22
 8001646:	601a      	str	r2, [r3, #0]
	return -1;
 8001648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <_exit>:

void _exit (int status)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800165c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ffe7 	bl	8001634 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001666:	e7fe      	b.n	8001666 <_exit+0x12>

08001668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e00a      	b.n	8001690 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800167a:	f3af 8000 	nop.w
 800167e:	4601      	mov	r1, r0
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	429a      	cmp	r2, r3
 8001696:	dbf0      	blt.n	800167a <_read+0x12>
	}

return len;
 8001698:	687b      	ldr	r3, [r7, #4]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	e009      	b.n	80016c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf1      	blt.n	80016b4 <_write+0x12>
	}
	return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_close>:

int _close(int file)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
	return -1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001702:	605a      	str	r2, [r3, #4]
	return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_isatty>:

int _isatty(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	return 1;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
	return 0;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <_sbrk+0x5c>)
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <_sbrk+0x60>)
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <_sbrk+0x64>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <_sbrk+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d207      	bcs.n	8001784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001774:	f002 fba0 	bl	8003eb8 <__errno>
 8001778:	4603      	mov	r3, r0
 800177a:	220c      	movs	r2, #12
 800177c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001782:	e009      	b.n	8001798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <_sbrk+0x64>)
 8001794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20050000 	.word	0x20050000
 80017a4:	00000400 	.word	0x00000400
 80017a8:	20000200 	.word	0x20000200
 80017ac:	200002b8 	.word	0x200002b8

080017b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f0:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017fe:	f7ff ffd7 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f002 fb5f 	bl	8003ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff fc93 	bl	8001130 <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001818:	0800708c 	.word	0x0800708c
  ldr r2, =_sbss
 800181c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001820:	200002b8 	.word	0x200002b8

08001824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC_IRQHandler>

08001826 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182a:	2003      	movs	r0, #3
 800182c:	f000 f8f9 	bl	8001a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001830:	200f      	movs	r0, #15
 8001832:	f7ff fe69 	bl	8001508 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001836:	f7ff fdff 	bl	8001438 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008
 8001864:	200002a4 	.word	0x200002a4

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	200002a4 	.word	0x200002a4

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <__NVIC_SetPriorityGrouping+0x40>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x40>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00
 800190c:	05fa0000 	.word	0x05fa0000

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff4c 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4a:	f7ff ff61 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	6978      	ldr	r0, [r7, #20]
 8001a56:	f7ff ffb1 	bl	80019bc <NVIC_EncodePriority>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff80 	bl	8001968 <__NVIC_SetPriority>
}
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff54 	bl	800192c <__NVIC_EnableIRQ>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e175      	b.n	8001d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8164 	bne.w	8001d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d00b      	beq.n	8001aea <HAL_GPIO_Init+0x5e>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ade:	2b11      	cmp	r3, #17
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x100>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80be 	beq.w	8001d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c2e:	4a61      	ldr	r2, [pc, #388]	; (8001db4 <HAL_GPIO_Init+0x328>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d037      	beq.n	8001cca <HAL_GPIO_Init+0x23e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <HAL_GPIO_Init+0x330>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d031      	beq.n	8001cc6 <HAL_GPIO_Init+0x23a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a56      	ldr	r2, [pc, #344]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d02b      	beq.n	8001cc2 <HAL_GPIO_Init+0x236>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a55      	ldr	r2, [pc, #340]	; (8001dc4 <HAL_GPIO_Init+0x338>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d025      	beq.n	8001cbe <HAL_GPIO_Init+0x232>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_GPIO_Init+0x33c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01f      	beq.n	8001cba <HAL_GPIO_Init+0x22e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <HAL_GPIO_Init+0x340>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d019      	beq.n	8001cb6 <HAL_GPIO_Init+0x22a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <HAL_GPIO_Init+0x344>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a51      	ldr	r2, [pc, #324]	; (8001dd4 <HAL_GPIO_Init+0x348>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00d      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a50      	ldr	r2, [pc, #320]	; (8001dd8 <HAL_GPIO_Init+0x34c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001ca2:	2309      	movs	r3, #9
 8001ca4:	e012      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	e010      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001caa:	2308      	movs	r3, #8
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cdc:	4935      	ldr	r1, [pc, #212]	; (8001db4 <HAL_GPIO_Init+0x328>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0e:	4a34      	ldr	r2, [pc, #208]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <HAL_GPIO_Init+0x354>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f ae86 	bls.w	8001aac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40021400 	.word	0x40021400
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40021c00 	.word	0x40021c00
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40022400 	.word	0x40022400
 8001de0:	40013c00 	.word	0x40013c00

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e00:	e003      	b.n	8001e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	041a      	lsls	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	619a      	str	r2, [r3, #24]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fb1e 	bl	8001480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2224      	movs	r2, #36	; 0x24
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e006      	b.n	8001ea0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d104      	bne.n	8001eb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6859      	ldr	r1, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_I2C_Init+0x11c>)
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	ea42 0103 	orr.w	r1, r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	021a      	lsls	r2, r3, #8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69d9      	ldr	r1, [r3, #28]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	02008000 	.word	0x02008000

08001f38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	461a      	mov	r2, r3
 8001f44:	460b      	mov	r3, r1
 8001f46:	817b      	strh	r3, [r7, #10]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	f040 80da 	bne.w	800210e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2C_Master_Transmit+0x30>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e0d3      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f70:	f7ff fc7a 	bl	8001868 <HAL_GetTick>
 8001f74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2319      	movs	r3, #25
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f9f8 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0be      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2221      	movs	r2, #33	; 0x21
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	893a      	ldrh	r2, [r7, #8]
 8001fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2bff      	cmp	r3, #255	; 0xff
 8001fc2:	d90e      	bls.n	8001fe2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	22ff      	movs	r2, #255	; 0xff
 8001fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	8979      	ldrh	r1, [r7, #10]
 8001fd2:	4b51      	ldr	r3, [pc, #324]	; (8002118 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 faee 	bl	80025bc <I2C_TransferConfig>
 8001fe0:	e06c      	b.n	80020bc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	4b48      	ldr	r3, [pc, #288]	; (8002118 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fadd 	bl	80025bc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002002:	e05b      	b.n	80020bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	6a39      	ldr	r1, [r7, #32]
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f9f5 	bl	80023f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e07b      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d034      	beq.n	80020bc <HAL_I2C_Master_Transmit+0x184>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002056:	2b00      	cmp	r3, #0
 8002058:	d130      	bne.n	80020bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	2200      	movs	r2, #0
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f987 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e04d      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2bff      	cmp	r3, #255	; 0xff
 800207c:	d90e      	bls.n	800209c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	22ff      	movs	r2, #255	; 0xff
 8002082:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	b2da      	uxtb	r2, r3
 800208a:	8979      	ldrh	r1, [r7, #10]
 800208c:	2300      	movs	r3, #0
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fa91 	bl	80025bc <I2C_TransferConfig>
 800209a:	e00f      	b.n	80020bc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fa80 	bl	80025bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d19e      	bne.n	8002004 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f9d4 	bl	8002478 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e01a      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2220      	movs	r2, #32
 80020e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_I2C_Master_Transmit+0x1e4>)
 80020ee:	400b      	ands	r3, r1
 80020f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	80002000 	.word	0x80002000
 800211c:	fe00e800 	.word	0xfe00e800

08002120 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	460b      	mov	r3, r1
 800212e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b20      	cmp	r3, #32
 800213e:	f040 80ef 	bne.w	8002320 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800214c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002150:	d101      	bne.n	8002156 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002152:	2302      	movs	r3, #2
 8002154:	e0e5      	b.n	8002322 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_I2C_IsDeviceReady+0x44>
 8002160:	2302      	movs	r3, #2
 8002162:	e0de      	b.n	8002322 <HAL_I2C_IsDeviceReady+0x202>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2224      	movs	r2, #36	; 0x24
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_I2C_IsDeviceReady+0x6e>
 8002182:	897b      	ldrh	r3, [r7, #10]
 8002184:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_I2C_IsDeviceReady+0x20c>)
 800218a:	4313      	orrs	r3, r2
 800218c:	e004      	b.n	8002198 <HAL_I2C_IsDeviceReady+0x78>
 800218e:	897b      	ldrh	r3, [r7, #10]
 8002190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002194:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800219e:	f7ff fb63 	bl	8001868 <HAL_GetTick>
 80021a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b10      	cmp	r3, #16
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021d0:	e034      	b.n	800223c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d8:	d01a      	beq.n	8002210 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021da:	f7ff fb45 	bl	8001868 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d302      	bcc.n	80021f0 <HAL_I2C_IsDeviceReady+0xd0>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e088      	b.n	8002322 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b20      	cmp	r3, #32
 800221c:	bf0c      	ite	eq
 800221e:	2301      	moveq	r3, #1
 8002220:	2300      	movne	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b10      	cmp	r3, #16
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_I2C_IsDeviceReady+0x128>
 8002242:	7fbb      	ldrb	r3, [r7, #30]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0c4      	beq.n	80021d2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b10      	cmp	r3, #16
 8002254:	d01a      	beq.n	800228c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	2120      	movs	r1, #32
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f889 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e058      	b.n	8002322 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2220      	movs	r2, #32
 8002276:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e04a      	b.n	8002322 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	2120      	movs	r1, #32
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f86e 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e03d      	b.n	8002322 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2210      	movs	r2, #16
 80022ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2220      	movs	r2, #32
 80022b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d118      	bne.n	80022f0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	2120      	movs	r1, #32
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f84d 	bl	8002378 <I2C_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e01c      	b.n	8002322 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2220      	movs	r2, #32
 80022ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	f63f af3d 	bhi.w	800217a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002320:	2302      	movs	r3, #2
  }
}
 8002322:	4618      	mov	r0, r3
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	02002000 	.word	0x02002000

08002330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d103      	bne.n	800234e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d007      	beq.n	800236c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	619a      	str	r2, [r3, #24]
  }
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002388:	e022      	b.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002390:	d01e      	beq.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002392:	f7ff fa69 	bl	8001868 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d302      	bcc.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d113      	bne.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e00f      	b.n	80023f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4013      	ands	r3, r2
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d0cd      	beq.n	800238a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002404:	e02c      	b.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f870 	bl	80024f0 <I2C_IsAcknowledgeFailed>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e02a      	b.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002420:	d01e      	beq.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002422:	f7ff fa21 	bl	8001868 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d113      	bne.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e007      	b.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d1cb      	bne.n	8002406 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002484:	e028      	b.n	80024d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f830 	bl	80024f0 <I2C_IsAcknowledgeFailed>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e026      	b.n	80024e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249a:	f7ff f9e5 	bl	8001868 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d302      	bcc.n	80024b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d113      	bne.n	80024d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e007      	b.n	80024e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d1cf      	bne.n	8002486 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b10      	cmp	r3, #16
 8002508:	d151      	bne.n	80025ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800250a:	e022      	b.n	8002552 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002512:	d01e      	beq.n	8002552 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002514:	f7ff f9a8 	bl	8001868 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	429a      	cmp	r2, r3
 8002522:	d302      	bcc.n	800252a <I2C_IsAcknowledgeFailed+0x3a>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d113      	bne.n	8002552 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e02e      	b.n	80025b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b20      	cmp	r3, #32
 800255e:	d1d5      	bne.n	800250c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7ff fedd 	bl	8002330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8002582:	400b      	ands	r3, r1
 8002584:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f043 0204 	orr.w	r2, r3, #4
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	fe00e800 	.word	0xfe00e800

080025bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	817b      	strh	r3, [r7, #10]
 80025ca:	4613      	mov	r3, r2
 80025cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	0d5b      	lsrs	r3, r3, #21
 80025d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <I2C_TransferConfig+0x58>)
 80025de:	430b      	orrs	r3, r1
 80025e0:	43db      	mvns	r3, r3
 80025e2:	ea02 0103 	and.w	r1, r2, r3
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ec:	7a7b      	ldrb	r3, [r7, #9]
 80025ee:	041b      	lsls	r3, r3, #16
 80025f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	03ff63ff 	.word	0x03ff63ff

08002618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b20      	cmp	r3, #32
 800262c:	d138      	bne.n	80026a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002638:	2302      	movs	r3, #2
 800263a:	e032      	b.n	80026a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800266a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d139      	bne.n	8002738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e033      	b.n	800273a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2224      	movs	r2, #36	; 0x24
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	e000      	b.n	800273a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002738:	2302      	movs	r3, #2
  }
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002776:	f7ff f877 	bl	8001868 <HAL_GetTick>
 800277a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800277c:	e009      	b.n	8002792 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800277e:	f7ff f873 	bl	8001868 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278c:	d901      	bls.n	8002792 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e022      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d1ee      	bne.n	800277e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ac:	f7ff f85c 	bl	8001868 <HAL_GetTick>
 80027b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027b2:	e009      	b.n	80027c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027b4:	f7ff f858 	bl	8001868 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c2:	d901      	bls.n	80027c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e007      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027d4:	d1ee      	bne.n	80027b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000

080027e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e291      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8087 	beq.w	800291a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800280c:	4b96      	ldr	r3, [pc, #600]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00c      	beq.n	8002832 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002818:	4b93      	ldr	r3, [pc, #588]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d112      	bne.n	800284a <HAL_RCC_OscConfig+0x62>
 8002824:	4b90      	ldr	r3, [pc, #576]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d10b      	bne.n	800284a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002832:	4b8d      	ldr	r3, [pc, #564]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06c      	beq.n	8002918 <HAL_RCC_OscConfig+0x130>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d168      	bne.n	8002918 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e26b      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x7a>
 8002854:	4b84      	ldr	r3, [pc, #528]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a83      	ldr	r2, [pc, #524]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e02e      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x9c>
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b7c      	ldr	r3, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7b      	ldr	r2, [pc, #492]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e01d      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0xc0>
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a75      	ldr	r2, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a72      	ldr	r2, [pc, #456]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 80028a8:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6b      	ldr	r2, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe ffce 	bl	8001868 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7fe ffca 	bl	8001868 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e21f      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe8>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe ffba 	bl	8001868 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe ffb6 	bl	8001868 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e20b      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x110>
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d069      	beq.n	80029fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002932:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b08      	cmp	r3, #8
 800293c:	d11c      	bne.n	8002978 <HAL_RCC_OscConfig+0x190>
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x17a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e1df      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	493d      	ldr	r1, [pc, #244]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	e040      	b.n	80029fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe ff6c 	bl	8001868 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe ff68 	bl	8001868 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1bd      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4929      	ldr	r1, [pc, #164]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
 80029c6:	e018      	b.n	80029fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe ff48 	bl	8001868 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe ff44 	bl	8001868 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e199      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d038      	beq.n	8002a78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe ff25 	bl	8001868 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe ff21 	bl	8001868 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e176      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x23a>
 8002a40:	e01a      	b.n	8002a78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe ff0b 	bl	8001868 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a56:	f7fe ff07 	bl	8001868 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d903      	bls.n	8002a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e15c      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
 8002a68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	4b91      	ldr	r3, [pc, #580]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ee      	bne.n	8002a56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a4 	beq.w	8002bce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a86:	4b8b      	ldr	r3, [pc, #556]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b88      	ldr	r3, [pc, #544]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a87      	ldr	r2, [pc, #540]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b85      	ldr	r3, [pc, #532]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4b82      	ldr	r3, [pc, #520]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002aba:	4b7f      	ldr	r3, [pc, #508]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7e      	ldr	r2, [pc, #504]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fecf 	bl	8001868 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe fecb 	bl	8001868 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e120      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae0:	4b75      	ldr	r3, [pc, #468]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x31a>
 8002af4:	4b6f      	ldr	r3, [pc, #444]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a6e      	ldr	r2, [pc, #440]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	e02d      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x33c>
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a69      	ldr	r2, [pc, #420]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	4b67      	ldr	r3, [pc, #412]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a66      	ldr	r2, [pc, #408]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
 8002b22:	e01c      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x35e>
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a60      	ldr	r2, [pc, #384]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a5d      	ldr	r2, [pc, #372]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	e00b      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b46:	4b5b      	ldr	r3, [pc, #364]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a5a      	ldr	r2, [pc, #360]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d015      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe fe7f 	bl	8001868 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fe7b 	bl	8001868 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0ce      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RCC_OscConfig+0x386>
 8002b90:	e014      	b.n	8002bbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7fe fe69 	bl	8001868 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fe65 	bl	8001868 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	4b40      	ldr	r3, [pc, #256]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80a4 	beq.w	8002d20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd8:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d06b      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d149      	bne.n	8002c80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fe36 	bl	8001868 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fe32 	bl	8001868 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e087      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	4313      	orrs	r3, r2
 8002c44:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fe06 	bl	8001868 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fe02 	bl	8001868 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e057      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x478>
 8002c7e:	e04f      	b.n	8002d20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fdec 	bl	8001868 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe fde8 	bl	8001868 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e03d      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca6:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4ac>
 8002cb2:	e035      	b.n	8002d20 <HAL_RCC_OscConfig+0x538>
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_RCC_OscConfig+0x544>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d028      	beq.n	8002d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d121      	bne.n	8002d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d11a      	bne.n	8002d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cf2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d111      	bne.n	8002d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	3b01      	subs	r3, #1
 8002d06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0d0      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d910      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d56:	4b67      	ldr	r3, [pc, #412]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 020f 	bic.w	r2, r3, #15
 8002d5e:	4965      	ldr	r1, [pc, #404]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d66:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0b8      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d90:	4b59      	ldr	r3, [pc, #356]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a52      	ldr	r2, [pc, #328]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002db2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	494d      	ldr	r1, [pc, #308]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d040      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e07f      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e073      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06b      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 0203 	bic.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4936      	ldr	r1, [pc, #216]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fe fd20 	bl	8001868 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe fd1c 	bl	8001868 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e053      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 020c 	and.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d1eb      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d210      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	4922      	ldr	r1, [pc, #136]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e032      	b.n	8002eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eae:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec2:	f000 f821 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	490a      	ldr	r1, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x1cc>)
 8002ed4:	5ccb      	ldrb	r3, [r1, r3]
 8002ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1d0>)
 8002edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1d4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fb10 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08006c80 	.word	0x08006c80
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000004 	.word	0x20000004

08002f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f08:	b5b0      	push	{r4, r5, r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f0e:	2100      	movs	r1, #0
 8002f10:	6079      	str	r1, [r7, #4]
 8002f12:	2100      	movs	r1, #0
 8002f14:	60f9      	str	r1, [r7, #12]
 8002f16:	2100      	movs	r1, #0
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1e:	4952      	ldr	r1, [pc, #328]	; (8003068 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f20:	6889      	ldr	r1, [r1, #8]
 8002f22:	f001 010c 	and.w	r1, r1, #12
 8002f26:	2908      	cmp	r1, #8
 8002f28:	d00d      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x3e>
 8002f2a:	2908      	cmp	r1, #8
 8002f2c:	f200 8094 	bhi.w	8003058 <HAL_RCC_GetSysClockFreq+0x150>
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0x32>
 8002f34:	2904      	cmp	r1, #4
 8002f36:	d003      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x38>
 8002f38:	e08e      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_GetSysClockFreq+0x164>)
 8002f3c:	60bb      	str	r3, [r7, #8]
      break;
 8002f3e:	e08e      	b.n	800305e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f40:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f42:	60bb      	str	r3, [r7, #8]
      break;
 8002f44:	e08b      	b.n	800305e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f46:	4948      	ldr	r1, [pc, #288]	; (8003068 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f48:	6849      	ldr	r1, [r1, #4]
 8002f4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f4e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f50:	4945      	ldr	r1, [pc, #276]	; (8003068 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f52:	6849      	ldr	r1, [r1, #4]
 8002f54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f58:	2900      	cmp	r1, #0
 8002f5a:	d024      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5c:	4942      	ldr	r1, [pc, #264]	; (8003068 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f5e:	6849      	ldr	r1, [r1, #4]
 8002f60:	0989      	lsrs	r1, r1, #6
 8002f62:	4608      	mov	r0, r1
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f6c:	f04f 0500 	mov.w	r5, #0
 8002f70:	ea00 0204 	and.w	r2, r0, r4
 8002f74:	ea01 0305 	and.w	r3, r1, r5
 8002f78:	493d      	ldr	r1, [pc, #244]	; (8003070 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f7a:	fb01 f003 	mul.w	r0, r1, r3
 8002f7e:	2100      	movs	r1, #0
 8002f80:	fb01 f102 	mul.w	r1, r1, r2
 8002f84:	1844      	adds	r4, r0, r1
 8002f86:	493a      	ldr	r1, [pc, #232]	; (8003070 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f88:	fba2 0101 	umull	r0, r1, r2, r1
 8002f8c:	1863      	adds	r3, r4, r1
 8002f8e:	4619      	mov	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	f7fd fe26 	bl	8000be8 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e04a      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	461a      	mov	r2, r3
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	ea02 0400 	and.w	r4, r2, r0
 8002fbe:	ea03 0501 	and.w	r5, r3, r1
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	014b      	lsls	r3, r1, #5
 8002fd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fd4:	0142      	lsls	r2, r0, #5
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	1b00      	subs	r0, r0, r4
 8002fdc:	eb61 0105 	sbc.w	r1, r1, r5
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	018b      	lsls	r3, r1, #6
 8002fea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fee:	0182      	lsls	r2, r0, #6
 8002ff0:	1a12      	subs	r2, r2, r0
 8002ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	00d9      	lsls	r1, r3, #3
 8003000:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003004:	00d0      	lsls	r0, r2, #3
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	1912      	adds	r2, r2, r4
 800300c:	eb45 0303 	adc.w	r3, r5, r3
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	0299      	lsls	r1, r3, #10
 800301a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800301e:	0290      	lsls	r0, r2, #10
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	461a      	mov	r2, r3
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	f7fd fdda 	bl	8000be8 <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4613      	mov	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RCC_GetSysClockFreq+0x160>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	3301      	adds	r3, #1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	60bb      	str	r3, [r7, #8]
      break;
 8003056:	e002      	b.n	800305e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_RCC_GetSysClockFreq+0x164>)
 800305a:	60bb      	str	r3, [r7, #8]
      break;
 800305c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305e:	68bb      	ldr	r3, [r7, #8]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bdb0      	pop	{r4, r5, r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	00f42400 	.word	0x00f42400
 8003070:	017d7840 	.word	0x017d7840

08003074 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_GetHCLKFreq+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000000 	.word	0x20000000

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003090:	f7ff fff0 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0b5b      	lsrs	r3, r3, #13
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4903      	ldr	r1, [pc, #12]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	08006c90 	.word	0x08006c90

080030b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	220f      	movs	r2, #15
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_RCC_GetClockConfig+0x5c>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0203 	and.w	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_RCC_GetClockConfig+0x5c>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_RCC_GetClockConfig+0x5c>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_GetClockConfig+0x5c>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	08db      	lsrs	r3, r3, #3
 80030ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_RCC_GetClockConfig+0x60>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	601a      	str	r2, [r3, #0]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800
 8003114:	40023c00 	.word	0x40023c00

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d012      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003140:	4b69      	ldr	r3, [pc, #420]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a68      	ldr	r2, [pc, #416]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003146:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800314a:	6093      	str	r3, [r2, #8]
 800314c:	4b66      	ldr	r3, [pc, #408]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	4964      	ldr	r1, [pc, #400]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d017      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003172:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003180:	4959      	ldr	r1, [pc, #356]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003190:	d101      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003192:	2301      	movs	r3, #1
 8003194:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d017      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ae:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	494a      	ldr	r1, [pc, #296]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031cc:	d101      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031da:	2301      	movs	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 808b 	beq.w	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	4a39      	ldr	r2, [pc, #228]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003206:	6413      	str	r3, [r2, #64]	; 0x40
 8003208:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a34      	ldr	r2, [pc, #208]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800321a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fe fb22 	bl	8001868 <HAL_GetTick>
 8003224:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003228:	f7fe fb1e 	bl	8001868 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e357      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d035      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	429a      	cmp	r2, r3
 8003262:	d02e      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a1a      	ldr	r2, [pc, #104]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003284:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003286:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d114      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fae6 	bl	8001868 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329e:	e00a      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7fe fae2 	bl	8001868 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e319      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ee      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ce:	d111      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032de:	400b      	ands	r3, r1
 80032e0:	4901      	ldr	r1, [pc, #4]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
 80032e6:	e00b      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40007000 	.word	0x40007000
 80032f0:	0ffffcff 	.word	0x0ffffcff
 80032f4:	4bb1      	ldr	r3, [pc, #708]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4ab0      	ldr	r2, [pc, #704]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032fe:	6093      	str	r3, [r2, #8]
 8003300:	4bae      	ldr	r3, [pc, #696]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330c:	49ab      	ldr	r1, [pc, #684]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d010      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800331e:	4ba7      	ldr	r3, [pc, #668]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003324:	4aa5      	ldr	r2, [pc, #660]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800332e:	4ba3      	ldr	r3, [pc, #652]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003330:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	49a0      	ldr	r1, [pc, #640]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800334c:	4b9b      	ldr	r3, [pc, #620]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800335a:	4998      	ldr	r1, [pc, #608]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800336e:	4b93      	ldr	r3, [pc, #588]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800337c:	498f      	ldr	r1, [pc, #572]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003390:	4b8a      	ldr	r3, [pc, #552]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339e:	4987      	ldr	r1, [pc, #540]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033b2:	4b82      	ldr	r3, [pc, #520]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	497e      	ldr	r1, [pc, #504]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033d4:	4b79      	ldr	r3, [pc, #484]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	f023 0203 	bic.w	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4976      	ldr	r1, [pc, #472]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033f6:	4b71      	ldr	r3, [pc, #452]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	f023 020c 	bic.w	r2, r3, #12
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003404:	496d      	ldr	r1, [pc, #436]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800341a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	4965      	ldr	r1, [pc, #404]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800343a:	4b60      	ldr	r3, [pc, #384]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003448:	495c      	ldr	r1, [pc, #368]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800345c:	4b57      	ldr	r3, [pc, #348]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	4954      	ldr	r1, [pc, #336]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800347e:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	494b      	ldr	r1, [pc, #300]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034a0:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ae:	4943      	ldr	r1, [pc, #268]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034c2:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d0:	493a      	ldr	r1, [pc, #232]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f2:	4932      	ldr	r1, [pc, #200]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d011      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003506:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003514:	4929      	ldr	r1, [pc, #164]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003524:	d101      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003536:	2301      	movs	r3, #1
 8003538:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	4919      	ldr	r1, [pc, #100]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003578:	4910      	ldr	r1, [pc, #64]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d006      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80d9 	beq.w	8003746 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800359a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800359e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fe f962 	bl	8001868 <HAL_GetTick>
 80035a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035a6:	e00b      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a8:	f7fe f95e 	bl	8001868 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d904      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e197      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035c0:	4b6c      	ldr	r3, [pc, #432]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ed      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d021      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11d      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035e0:	4b64      	ldr	r3, [pc, #400]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035ee:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f4:	0e1b      	lsrs	r3, r3, #24
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	019a      	lsls	r2, r3, #6
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	071b      	lsls	r3, r3, #28
 8003614:	4957      	ldr	r1, [pc, #348]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d02e      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003646:	d129      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003648:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	0c1b      	lsrs	r3, r3, #16
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365c:	0f1b      	lsrs	r3, r3, #28
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	019a      	lsls	r2, r3, #6
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	431a      	orrs	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	071b      	lsls	r3, r3, #28
 800367c:	493d      	ldr	r1, [pc, #244]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003684:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368a:	f023 021f 	bic.w	r2, r3, #31
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	3b01      	subs	r3, #1
 8003694:	4937      	ldr	r1, [pc, #220]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01d      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ae:	0e1b      	lsrs	r3, r3, #24
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036b6:	4b2f      	ldr	r3, [pc, #188]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036bc:	0f1b      	lsrs	r3, r3, #28
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	019a      	lsls	r2, r3, #6
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	431a      	orrs	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	071b      	lsls	r3, r3, #28
 80036dc:	4925      	ldr	r1, [pc, #148]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d011      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	019a      	lsls	r2, r3, #6
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	061b      	lsls	r3, r3, #24
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	071b      	lsls	r3, r3, #28
 800370c:	4919      	ldr	r1, [pc, #100]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003714:	4b17      	ldr	r3, [pc, #92]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a16      	ldr	r2, [pc, #88]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800371e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003720:	f7fe f8a2 	bl	8001868 <HAL_GetTick>
 8003724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003728:	f7fe f89e 	bl	8001868 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	; 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0d7      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800373a:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b01      	cmp	r3, #1
 800374a:	f040 80cd 	bne.w	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a08      	ldr	r2, [pc, #32]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003758:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375a:	f7fe f885 	bl	8001868 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003762:	f7fe f881 	bl	8001868 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b64      	cmp	r3, #100	; 0x64
 800376e:	d903      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0ba      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003774:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003778:	4b5e      	ldr	r3, [pc, #376]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003784:	d0ed      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d02e      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d12a      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037ae:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037bc:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	0f1b      	lsrs	r3, r3, #28
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	019a      	lsls	r2, r3, #6
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	041b      	lsls	r3, r3, #16
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	061b      	lsls	r3, r3, #24
 80037dc:	431a      	orrs	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	071b      	lsls	r3, r3, #28
 80037e2:	4944      	ldr	r1, [pc, #272]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037ea:	4b42      	ldr	r3, [pc, #264]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	3b01      	subs	r3, #1
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	493d      	ldr	r1, [pc, #244]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d022      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003818:	d11d      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	0e1b      	lsrs	r3, r3, #24
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	0f1b      	lsrs	r3, r3, #28
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	019a      	lsls	r2, r3, #6
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	431a      	orrs	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	061b      	lsls	r3, r3, #24
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	071b      	lsls	r3, r3, #28
 800384e:	4929      	ldr	r1, [pc, #164]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d028      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003862:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003870:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	019a      	lsls	r2, r3, #6
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	431a      	orrs	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	071b      	lsls	r3, r3, #28
 8003896:	4917      	ldr	r1, [pc, #92]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800389e:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	4911      	ldr	r1, [pc, #68]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0e      	ldr	r2, [pc, #56]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c0:	f7fd ffd2 	bl	8001868 <HAL_GetTick>
 80038c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038c8:	f7fd ffce 	bl	8001868 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e007      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e6:	d1ef      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800

080038f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e049      	b.n	800399e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f841 	bl	80039a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f000 fa00 	bl	8003d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d001      	beq.n	80039d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e054      	b.n	8003a7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <HAL_TIM_Base_Start_IT+0xd0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fe:	d01d      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_TIM_Base_Start_IT+0xe0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x80>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d115      	bne.n	8003a68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xec>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d015      	beq.n	8003a7a <HAL_TIM_Base_Start_IT+0xbe>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d011      	beq.n	8003a7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a66:	e008      	b.n	8003a7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e000      	b.n	8003a7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40010400 	.word	0x40010400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40001800 	.word	0x40001800
 8003aa8:	00010007 	.word	0x00010007

08003aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0202 	mvn.w	r2, #2
 8003ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f905 	bl	8003cfe <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8f7 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f908 	bl	8003d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d122      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0204 	mvn.w	r2, #4
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8db 	bl	8003cfe <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8cd 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8de 	bl	8003d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d122      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d11b      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8b1 	bl	8003cfe <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8a3 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f8b4 	bl	8003d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d122      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d11b      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0210 	mvn.w	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f887 	bl	8003cfe <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f879 	bl	8003cea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f88a 	bl	8003d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0201 	mvn.w	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd fbec 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f91a 	bl	8003e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f90d 	bl	8003ea4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d10e      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca2:	2b40      	cmp	r3, #64	; 0x40
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f838 	bl	8003d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d107      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0220 	mvn.w	r2, #32
 8003cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8cd 	bl	8003e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a40      	ldr	r2, [pc, #256]	; (8003e50 <TIM_Base_SetConfig+0x114>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d00f      	beq.n	8003d7c <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3d      	ldr	r2, [pc, #244]	; (8003e54 <TIM_Base_SetConfig+0x118>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a3c      	ldr	r2, [pc, #240]	; (8003e58 <TIM_Base_SetConfig+0x11c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d007      	beq.n	8003d7c <TIM_Base_SetConfig+0x40>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a3b      	ldr	r2, [pc, #236]	; (8003e5c <TIM_Base_SetConfig+0x120>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3a      	ldr	r2, [pc, #232]	; (8003e60 <TIM_Base_SetConfig+0x124>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d108      	bne.n	8003d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <TIM_Base_SetConfig+0x114>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d02b      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d027      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <TIM_Base_SetConfig+0x118>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d023      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <TIM_Base_SetConfig+0x11c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01f      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2a      	ldr	r2, [pc, #168]	; (8003e5c <TIM_Base_SetConfig+0x120>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01b      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <TIM_Base_SetConfig+0x124>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d017      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a28      	ldr	r2, [pc, #160]	; (8003e64 <TIM_Base_SetConfig+0x128>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <TIM_Base_SetConfig+0x12c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00f      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a26      	ldr	r2, [pc, #152]	; (8003e6c <TIM_Base_SetConfig+0x130>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00b      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a25      	ldr	r2, [pc, #148]	; (8003e70 <TIM_Base_SetConfig+0x134>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a24      	ldr	r2, [pc, #144]	; (8003e74 <TIM_Base_SetConfig+0x138>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d003      	beq.n	8003dee <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a23      	ldr	r2, [pc, #140]	; (8003e78 <TIM_Base_SetConfig+0x13c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d108      	bne.n	8003e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <TIM_Base_SetConfig+0x114>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0xf8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <TIM_Base_SetConfig+0x124>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d103      	bne.n	8003e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	615a      	str	r2, [r3, #20]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40010000 	.word	0x40010000
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800
 8003e5c:	40000c00 	.word	0x40000c00
 8003e60:	40010400 	.word	0x40010400
 8003e64:	40014000 	.word	0x40014000
 8003e68:	40014400 	.word	0x40014400
 8003e6c:	40014800 	.word	0x40014800
 8003e70:	40001800 	.word	0x40001800
 8003e74:	40001c00 	.word	0x40001c00
 8003e78:	40002000 	.word	0x40002000

08003e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <__errno>:
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <__errno+0x8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2000000c 	.word	0x2000000c

08003ec4 <__libc_init_array>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	4d0d      	ldr	r5, [pc, #52]	; (8003efc <__libc_init_array+0x38>)
 8003ec8:	4c0d      	ldr	r4, [pc, #52]	; (8003f00 <__libc_init_array+0x3c>)
 8003eca:	1b64      	subs	r4, r4, r5
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	2600      	movs	r6, #0
 8003ed0:	42a6      	cmp	r6, r4
 8003ed2:	d109      	bne.n	8003ee8 <__libc_init_array+0x24>
 8003ed4:	4d0b      	ldr	r5, [pc, #44]	; (8003f04 <__libc_init_array+0x40>)
 8003ed6:	4c0c      	ldr	r4, [pc, #48]	; (8003f08 <__libc_init_array+0x44>)
 8003ed8:	f002 feb4 	bl	8006c44 <_init>
 8003edc:	1b64      	subs	r4, r4, r5
 8003ede:	10a4      	asrs	r4, r4, #2
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	42a6      	cmp	r6, r4
 8003ee4:	d105      	bne.n	8003ef2 <__libc_init_array+0x2e>
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eec:	4798      	blx	r3
 8003eee:	3601      	adds	r6, #1
 8003ef0:	e7ee      	b.n	8003ed0 <__libc_init_array+0xc>
 8003ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef6:	4798      	blx	r3
 8003ef8:	3601      	adds	r6, #1
 8003efa:	e7f2      	b.n	8003ee2 <__libc_init_array+0x1e>
 8003efc:	08007084 	.word	0x08007084
 8003f00:	08007084 	.word	0x08007084
 8003f04:	08007084 	.word	0x08007084
 8003f08:	08007088 	.word	0x08007088

08003f0c <memset>:
 8003f0c:	4402      	add	r2, r0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d100      	bne.n	8003f16 <memset+0xa>
 8003f14:	4770      	bx	lr
 8003f16:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1a:	e7f9      	b.n	8003f10 <memset+0x4>

08003f1c <__cvt>:
 8003f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	ec55 4b10 	vmov	r4, r5, d0
 8003f24:	2d00      	cmp	r5, #0
 8003f26:	460e      	mov	r6, r1
 8003f28:	4619      	mov	r1, r3
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	bfbb      	ittet	lt
 8003f2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f32:	461d      	movlt	r5, r3
 8003f34:	2300      	movge	r3, #0
 8003f36:	232d      	movlt	r3, #45	; 0x2d
 8003f38:	700b      	strb	r3, [r1, #0]
 8003f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f40:	4691      	mov	r9, r2
 8003f42:	f023 0820 	bic.w	r8, r3, #32
 8003f46:	bfbc      	itt	lt
 8003f48:	4622      	movlt	r2, r4
 8003f4a:	4614      	movlt	r4, r2
 8003f4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f50:	d005      	beq.n	8003f5e <__cvt+0x42>
 8003f52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f56:	d100      	bne.n	8003f5a <__cvt+0x3e>
 8003f58:	3601      	adds	r6, #1
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	e000      	b.n	8003f60 <__cvt+0x44>
 8003f5e:	2103      	movs	r1, #3
 8003f60:	ab03      	add	r3, sp, #12
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	ab02      	add	r3, sp, #8
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	ec45 4b10 	vmov	d0, r4, r5
 8003f6c:	4653      	mov	r3, sl
 8003f6e:	4632      	mov	r2, r6
 8003f70:	f000 fcea 	bl	8004948 <_dtoa_r>
 8003f74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f78:	4607      	mov	r7, r0
 8003f7a:	d102      	bne.n	8003f82 <__cvt+0x66>
 8003f7c:	f019 0f01 	tst.w	r9, #1
 8003f80:	d022      	beq.n	8003fc8 <__cvt+0xac>
 8003f82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f86:	eb07 0906 	add.w	r9, r7, r6
 8003f8a:	d110      	bne.n	8003fae <__cvt+0x92>
 8003f8c:	783b      	ldrb	r3, [r7, #0]
 8003f8e:	2b30      	cmp	r3, #48	; 0x30
 8003f90:	d10a      	bne.n	8003fa8 <__cvt+0x8c>
 8003f92:	2200      	movs	r2, #0
 8003f94:	2300      	movs	r3, #0
 8003f96:	4620      	mov	r0, r4
 8003f98:	4629      	mov	r1, r5
 8003f9a:	f7fc fdb5 	bl	8000b08 <__aeabi_dcmpeq>
 8003f9e:	b918      	cbnz	r0, 8003fa8 <__cvt+0x8c>
 8003fa0:	f1c6 0601 	rsb	r6, r6, #1
 8003fa4:	f8ca 6000 	str.w	r6, [sl]
 8003fa8:	f8da 3000 	ldr.w	r3, [sl]
 8003fac:	4499      	add	r9, r3
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	f7fc fda7 	bl	8000b08 <__aeabi_dcmpeq>
 8003fba:	b108      	cbz	r0, 8003fc0 <__cvt+0xa4>
 8003fbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003fc0:	2230      	movs	r2, #48	; 0x30
 8003fc2:	9b03      	ldr	r3, [sp, #12]
 8003fc4:	454b      	cmp	r3, r9
 8003fc6:	d307      	bcc.n	8003fd8 <__cvt+0xbc>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fcc:	1bdb      	subs	r3, r3, r7
 8003fce:	4638      	mov	r0, r7
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	b004      	add	sp, #16
 8003fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd8:	1c59      	adds	r1, r3, #1
 8003fda:	9103      	str	r1, [sp, #12]
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e7f0      	b.n	8003fc2 <__cvt+0xa6>

08003fe0 <__exponent>:
 8003fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2900      	cmp	r1, #0
 8003fe6:	bfb8      	it	lt
 8003fe8:	4249      	neglt	r1, r1
 8003fea:	f803 2b02 	strb.w	r2, [r3], #2
 8003fee:	bfb4      	ite	lt
 8003ff0:	222d      	movlt	r2, #45	; 0x2d
 8003ff2:	222b      	movge	r2, #43	; 0x2b
 8003ff4:	2909      	cmp	r1, #9
 8003ff6:	7042      	strb	r2, [r0, #1]
 8003ff8:	dd2a      	ble.n	8004050 <__exponent+0x70>
 8003ffa:	f10d 0407 	add.w	r4, sp, #7
 8003ffe:	46a4      	mov	ip, r4
 8004000:	270a      	movs	r7, #10
 8004002:	46a6      	mov	lr, r4
 8004004:	460a      	mov	r2, r1
 8004006:	fb91 f6f7 	sdiv	r6, r1, r7
 800400a:	fb07 1516 	mls	r5, r7, r6, r1
 800400e:	3530      	adds	r5, #48	; 0x30
 8004010:	2a63      	cmp	r2, #99	; 0x63
 8004012:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004016:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800401a:	4631      	mov	r1, r6
 800401c:	dcf1      	bgt.n	8004002 <__exponent+0x22>
 800401e:	3130      	adds	r1, #48	; 0x30
 8004020:	f1ae 0502 	sub.w	r5, lr, #2
 8004024:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004028:	1c44      	adds	r4, r0, #1
 800402a:	4629      	mov	r1, r5
 800402c:	4561      	cmp	r1, ip
 800402e:	d30a      	bcc.n	8004046 <__exponent+0x66>
 8004030:	f10d 0209 	add.w	r2, sp, #9
 8004034:	eba2 020e 	sub.w	r2, r2, lr
 8004038:	4565      	cmp	r5, ip
 800403a:	bf88      	it	hi
 800403c:	2200      	movhi	r2, #0
 800403e:	4413      	add	r3, r2
 8004040:	1a18      	subs	r0, r3, r0
 8004042:	b003      	add	sp, #12
 8004044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800404e:	e7ed      	b.n	800402c <__exponent+0x4c>
 8004050:	2330      	movs	r3, #48	; 0x30
 8004052:	3130      	adds	r1, #48	; 0x30
 8004054:	7083      	strb	r3, [r0, #2]
 8004056:	70c1      	strb	r1, [r0, #3]
 8004058:	1d03      	adds	r3, r0, #4
 800405a:	e7f1      	b.n	8004040 <__exponent+0x60>

0800405c <_printf_float>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	ed2d 8b02 	vpush	{d8}
 8004064:	b08d      	sub	sp, #52	; 0x34
 8004066:	460c      	mov	r4, r1
 8004068:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800406c:	4616      	mov	r6, r2
 800406e:	461f      	mov	r7, r3
 8004070:	4605      	mov	r5, r0
 8004072:	f001 fa55 	bl	8005520 <_localeconv_r>
 8004076:	f8d0 a000 	ldr.w	sl, [r0]
 800407a:	4650      	mov	r0, sl
 800407c:	f7fc f8c8 	bl	8000210 <strlen>
 8004080:	2300      	movs	r3, #0
 8004082:	930a      	str	r3, [sp, #40]	; 0x28
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	9305      	str	r3, [sp, #20]
 8004088:	f8d8 3000 	ldr.w	r3, [r8]
 800408c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004090:	3307      	adds	r3, #7
 8004092:	f023 0307 	bic.w	r3, r3, #7
 8004096:	f103 0208 	add.w	r2, r3, #8
 800409a:	f8c8 2000 	str.w	r2, [r8]
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80040aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040ae:	9307      	str	r3, [sp, #28]
 80040b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80040b4:	ee08 0a10 	vmov	s16, r0
 80040b8:	4b9f      	ldr	r3, [pc, #636]	; (8004338 <_printf_float+0x2dc>)
 80040ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040c2:	f7fc fd53 	bl	8000b6c <__aeabi_dcmpun>
 80040c6:	bb88      	cbnz	r0, 800412c <_printf_float+0xd0>
 80040c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040cc:	4b9a      	ldr	r3, [pc, #616]	; (8004338 <_printf_float+0x2dc>)
 80040ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d2:	f7fc fd2d 	bl	8000b30 <__aeabi_dcmple>
 80040d6:	bb48      	cbnz	r0, 800412c <_printf_float+0xd0>
 80040d8:	2200      	movs	r2, #0
 80040da:	2300      	movs	r3, #0
 80040dc:	4640      	mov	r0, r8
 80040de:	4649      	mov	r1, r9
 80040e0:	f7fc fd1c 	bl	8000b1c <__aeabi_dcmplt>
 80040e4:	b110      	cbz	r0, 80040ec <_printf_float+0x90>
 80040e6:	232d      	movs	r3, #45	; 0x2d
 80040e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ec:	4b93      	ldr	r3, [pc, #588]	; (800433c <_printf_float+0x2e0>)
 80040ee:	4894      	ldr	r0, [pc, #592]	; (8004340 <_printf_float+0x2e4>)
 80040f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80040f4:	bf94      	ite	ls
 80040f6:	4698      	movls	r8, r3
 80040f8:	4680      	movhi	r8, r0
 80040fa:	2303      	movs	r3, #3
 80040fc:	6123      	str	r3, [r4, #16]
 80040fe:	9b05      	ldr	r3, [sp, #20]
 8004100:	f023 0204 	bic.w	r2, r3, #4
 8004104:	6022      	str	r2, [r4, #0]
 8004106:	f04f 0900 	mov.w	r9, #0
 800410a:	9700      	str	r7, [sp, #0]
 800410c:	4633      	mov	r3, r6
 800410e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004110:	4621      	mov	r1, r4
 8004112:	4628      	mov	r0, r5
 8004114:	f000 f9d8 	bl	80044c8 <_printf_common>
 8004118:	3001      	adds	r0, #1
 800411a:	f040 8090 	bne.w	800423e <_printf_float+0x1e2>
 800411e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004122:	b00d      	add	sp, #52	; 0x34
 8004124:	ecbd 8b02 	vpop	{d8}
 8004128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	4640      	mov	r0, r8
 8004132:	4649      	mov	r1, r9
 8004134:	f7fc fd1a 	bl	8000b6c <__aeabi_dcmpun>
 8004138:	b140      	cbz	r0, 800414c <_printf_float+0xf0>
 800413a:	464b      	mov	r3, r9
 800413c:	2b00      	cmp	r3, #0
 800413e:	bfbc      	itt	lt
 8004140:	232d      	movlt	r3, #45	; 0x2d
 8004142:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004146:	487f      	ldr	r0, [pc, #508]	; (8004344 <_printf_float+0x2e8>)
 8004148:	4b7f      	ldr	r3, [pc, #508]	; (8004348 <_printf_float+0x2ec>)
 800414a:	e7d1      	b.n	80040f0 <_printf_float+0x94>
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004152:	9206      	str	r2, [sp, #24]
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	d13f      	bne.n	80041d8 <_printf_float+0x17c>
 8004158:	2306      	movs	r3, #6
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	9b05      	ldr	r3, [sp, #20]
 800415e:	6861      	ldr	r1, [r4, #4]
 8004160:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004164:	2300      	movs	r3, #0
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	ab0a      	add	r3, sp, #40	; 0x28
 800416a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800416e:	ab09      	add	r3, sp, #36	; 0x24
 8004170:	ec49 8b10 	vmov	d0, r8, r9
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6022      	str	r2, [r4, #0]
 8004178:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800417c:	4628      	mov	r0, r5
 800417e:	f7ff fecd 	bl	8003f1c <__cvt>
 8004182:	9b06      	ldr	r3, [sp, #24]
 8004184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004186:	2b47      	cmp	r3, #71	; 0x47
 8004188:	4680      	mov	r8, r0
 800418a:	d108      	bne.n	800419e <_printf_float+0x142>
 800418c:	1cc8      	adds	r0, r1, #3
 800418e:	db02      	blt.n	8004196 <_printf_float+0x13a>
 8004190:	6863      	ldr	r3, [r4, #4]
 8004192:	4299      	cmp	r1, r3
 8004194:	dd41      	ble.n	800421a <_printf_float+0x1be>
 8004196:	f1ab 0b02 	sub.w	fp, fp, #2
 800419a:	fa5f fb8b 	uxtb.w	fp, fp
 800419e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041a2:	d820      	bhi.n	80041e6 <_printf_float+0x18a>
 80041a4:	3901      	subs	r1, #1
 80041a6:	465a      	mov	r2, fp
 80041a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041ac:	9109      	str	r1, [sp, #36]	; 0x24
 80041ae:	f7ff ff17 	bl	8003fe0 <__exponent>
 80041b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041b4:	1813      	adds	r3, r2, r0
 80041b6:	2a01      	cmp	r2, #1
 80041b8:	4681      	mov	r9, r0
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	dc02      	bgt.n	80041c4 <_printf_float+0x168>
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	07d2      	lsls	r2, r2, #31
 80041c2:	d501      	bpl.n	80041c8 <_printf_float+0x16c>
 80041c4:	3301      	adds	r3, #1
 80041c6:	6123      	str	r3, [r4, #16]
 80041c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d09c      	beq.n	800410a <_printf_float+0xae>
 80041d0:	232d      	movs	r3, #45	; 0x2d
 80041d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d6:	e798      	b.n	800410a <_printf_float+0xae>
 80041d8:	9a06      	ldr	r2, [sp, #24]
 80041da:	2a47      	cmp	r2, #71	; 0x47
 80041dc:	d1be      	bne.n	800415c <_printf_float+0x100>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1bc      	bne.n	800415c <_printf_float+0x100>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e7b9      	b.n	800415a <_printf_float+0xfe>
 80041e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80041ea:	d118      	bne.n	800421e <_printf_float+0x1c2>
 80041ec:	2900      	cmp	r1, #0
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	dd0b      	ble.n	800420a <_printf_float+0x1ae>
 80041f2:	6121      	str	r1, [r4, #16]
 80041f4:	b913      	cbnz	r3, 80041fc <_printf_float+0x1a0>
 80041f6:	6822      	ldr	r2, [r4, #0]
 80041f8:	07d0      	lsls	r0, r2, #31
 80041fa:	d502      	bpl.n	8004202 <_printf_float+0x1a6>
 80041fc:	3301      	adds	r3, #1
 80041fe:	440b      	add	r3, r1
 8004200:	6123      	str	r3, [r4, #16]
 8004202:	65a1      	str	r1, [r4, #88]	; 0x58
 8004204:	f04f 0900 	mov.w	r9, #0
 8004208:	e7de      	b.n	80041c8 <_printf_float+0x16c>
 800420a:	b913      	cbnz	r3, 8004212 <_printf_float+0x1b6>
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	07d2      	lsls	r2, r2, #31
 8004210:	d501      	bpl.n	8004216 <_printf_float+0x1ba>
 8004212:	3302      	adds	r3, #2
 8004214:	e7f4      	b.n	8004200 <_printf_float+0x1a4>
 8004216:	2301      	movs	r3, #1
 8004218:	e7f2      	b.n	8004200 <_printf_float+0x1a4>
 800421a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800421e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004220:	4299      	cmp	r1, r3
 8004222:	db05      	blt.n	8004230 <_printf_float+0x1d4>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	6121      	str	r1, [r4, #16]
 8004228:	07d8      	lsls	r0, r3, #31
 800422a:	d5ea      	bpl.n	8004202 <_printf_float+0x1a6>
 800422c:	1c4b      	adds	r3, r1, #1
 800422e:	e7e7      	b.n	8004200 <_printf_float+0x1a4>
 8004230:	2900      	cmp	r1, #0
 8004232:	bfd4      	ite	le
 8004234:	f1c1 0202 	rsble	r2, r1, #2
 8004238:	2201      	movgt	r2, #1
 800423a:	4413      	add	r3, r2
 800423c:	e7e0      	b.n	8004200 <_printf_float+0x1a4>
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	055a      	lsls	r2, r3, #21
 8004242:	d407      	bmi.n	8004254 <_printf_float+0x1f8>
 8004244:	6923      	ldr	r3, [r4, #16]
 8004246:	4642      	mov	r2, r8
 8004248:	4631      	mov	r1, r6
 800424a:	4628      	mov	r0, r5
 800424c:	47b8      	blx	r7
 800424e:	3001      	adds	r0, #1
 8004250:	d12c      	bne.n	80042ac <_printf_float+0x250>
 8004252:	e764      	b.n	800411e <_printf_float+0xc2>
 8004254:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004258:	f240 80e0 	bls.w	800441c <_printf_float+0x3c0>
 800425c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004260:	2200      	movs	r2, #0
 8004262:	2300      	movs	r3, #0
 8004264:	f7fc fc50 	bl	8000b08 <__aeabi_dcmpeq>
 8004268:	2800      	cmp	r0, #0
 800426a:	d034      	beq.n	80042d6 <_printf_float+0x27a>
 800426c:	4a37      	ldr	r2, [pc, #220]	; (800434c <_printf_float+0x2f0>)
 800426e:	2301      	movs	r3, #1
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f af51 	beq.w	800411e <_printf_float+0xc2>
 800427c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004280:	429a      	cmp	r2, r3
 8004282:	db02      	blt.n	800428a <_printf_float+0x22e>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	07d8      	lsls	r0, r3, #31
 8004288:	d510      	bpl.n	80042ac <_printf_float+0x250>
 800428a:	ee18 3a10 	vmov	r3, s16
 800428e:	4652      	mov	r2, sl
 8004290:	4631      	mov	r1, r6
 8004292:	4628      	mov	r0, r5
 8004294:	47b8      	blx	r7
 8004296:	3001      	adds	r0, #1
 8004298:	f43f af41 	beq.w	800411e <_printf_float+0xc2>
 800429c:	f04f 0800 	mov.w	r8, #0
 80042a0:	f104 091a 	add.w	r9, r4, #26
 80042a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	4543      	cmp	r3, r8
 80042aa:	dc09      	bgt.n	80042c0 <_printf_float+0x264>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	079b      	lsls	r3, r3, #30
 80042b0:	f100 8105 	bmi.w	80044be <_printf_float+0x462>
 80042b4:	68e0      	ldr	r0, [r4, #12]
 80042b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042b8:	4298      	cmp	r0, r3
 80042ba:	bfb8      	it	lt
 80042bc:	4618      	movlt	r0, r3
 80042be:	e730      	b.n	8004122 <_printf_float+0xc6>
 80042c0:	2301      	movs	r3, #1
 80042c2:	464a      	mov	r2, r9
 80042c4:	4631      	mov	r1, r6
 80042c6:	4628      	mov	r0, r5
 80042c8:	47b8      	blx	r7
 80042ca:	3001      	adds	r0, #1
 80042cc:	f43f af27 	beq.w	800411e <_printf_float+0xc2>
 80042d0:	f108 0801 	add.w	r8, r8, #1
 80042d4:	e7e6      	b.n	80042a4 <_printf_float+0x248>
 80042d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dc39      	bgt.n	8004350 <_printf_float+0x2f4>
 80042dc:	4a1b      	ldr	r2, [pc, #108]	; (800434c <_printf_float+0x2f0>)
 80042de:	2301      	movs	r3, #1
 80042e0:	4631      	mov	r1, r6
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b8      	blx	r7
 80042e6:	3001      	adds	r0, #1
 80042e8:	f43f af19 	beq.w	800411e <_printf_float+0xc2>
 80042ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042f0:	4313      	orrs	r3, r2
 80042f2:	d102      	bne.n	80042fa <_printf_float+0x29e>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	07d9      	lsls	r1, r3, #31
 80042f8:	d5d8      	bpl.n	80042ac <_printf_float+0x250>
 80042fa:	ee18 3a10 	vmov	r3, s16
 80042fe:	4652      	mov	r2, sl
 8004300:	4631      	mov	r1, r6
 8004302:	4628      	mov	r0, r5
 8004304:	47b8      	blx	r7
 8004306:	3001      	adds	r0, #1
 8004308:	f43f af09 	beq.w	800411e <_printf_float+0xc2>
 800430c:	f04f 0900 	mov.w	r9, #0
 8004310:	f104 0a1a 	add.w	sl, r4, #26
 8004314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004316:	425b      	negs	r3, r3
 8004318:	454b      	cmp	r3, r9
 800431a:	dc01      	bgt.n	8004320 <_printf_float+0x2c4>
 800431c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800431e:	e792      	b.n	8004246 <_printf_float+0x1ea>
 8004320:	2301      	movs	r3, #1
 8004322:	4652      	mov	r2, sl
 8004324:	4631      	mov	r1, r6
 8004326:	4628      	mov	r0, r5
 8004328:	47b8      	blx	r7
 800432a:	3001      	adds	r0, #1
 800432c:	f43f aef7 	beq.w	800411e <_printf_float+0xc2>
 8004330:	f109 0901 	add.w	r9, r9, #1
 8004334:	e7ee      	b.n	8004314 <_printf_float+0x2b8>
 8004336:	bf00      	nop
 8004338:	7fefffff 	.word	0x7fefffff
 800433c:	08006c9c 	.word	0x08006c9c
 8004340:	08006ca0 	.word	0x08006ca0
 8004344:	08006ca8 	.word	0x08006ca8
 8004348:	08006ca4 	.word	0x08006ca4
 800434c:	08006cac 	.word	0x08006cac
 8004350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004354:	429a      	cmp	r2, r3
 8004356:	bfa8      	it	ge
 8004358:	461a      	movge	r2, r3
 800435a:	2a00      	cmp	r2, #0
 800435c:	4691      	mov	r9, r2
 800435e:	dc37      	bgt.n	80043d0 <_printf_float+0x374>
 8004360:	f04f 0b00 	mov.w	fp, #0
 8004364:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004368:	f104 021a 	add.w	r2, r4, #26
 800436c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800436e:	9305      	str	r3, [sp, #20]
 8004370:	eba3 0309 	sub.w	r3, r3, r9
 8004374:	455b      	cmp	r3, fp
 8004376:	dc33      	bgt.n	80043e0 <_printf_float+0x384>
 8004378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800437c:	429a      	cmp	r2, r3
 800437e:	db3b      	blt.n	80043f8 <_printf_float+0x39c>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	07da      	lsls	r2, r3, #31
 8004384:	d438      	bmi.n	80043f8 <_printf_float+0x39c>
 8004386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004388:	9b05      	ldr	r3, [sp, #20]
 800438a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	eba2 0901 	sub.w	r9, r2, r1
 8004392:	4599      	cmp	r9, r3
 8004394:	bfa8      	it	ge
 8004396:	4699      	movge	r9, r3
 8004398:	f1b9 0f00 	cmp.w	r9, #0
 800439c:	dc35      	bgt.n	800440a <_printf_float+0x3ae>
 800439e:	f04f 0800 	mov.w	r8, #0
 80043a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043a6:	f104 0a1a 	add.w	sl, r4, #26
 80043aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	eba3 0309 	sub.w	r3, r3, r9
 80043b4:	4543      	cmp	r3, r8
 80043b6:	f77f af79 	ble.w	80042ac <_printf_float+0x250>
 80043ba:	2301      	movs	r3, #1
 80043bc:	4652      	mov	r2, sl
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f aeaa 	beq.w	800411e <_printf_float+0xc2>
 80043ca:	f108 0801 	add.w	r8, r8, #1
 80043ce:	e7ec      	b.n	80043aa <_printf_float+0x34e>
 80043d0:	4613      	mov	r3, r2
 80043d2:	4631      	mov	r1, r6
 80043d4:	4642      	mov	r2, r8
 80043d6:	4628      	mov	r0, r5
 80043d8:	47b8      	blx	r7
 80043da:	3001      	adds	r0, #1
 80043dc:	d1c0      	bne.n	8004360 <_printf_float+0x304>
 80043de:	e69e      	b.n	800411e <_printf_float+0xc2>
 80043e0:	2301      	movs	r3, #1
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	9205      	str	r2, [sp, #20]
 80043e8:	47b8      	blx	r7
 80043ea:	3001      	adds	r0, #1
 80043ec:	f43f ae97 	beq.w	800411e <_printf_float+0xc2>
 80043f0:	9a05      	ldr	r2, [sp, #20]
 80043f2:	f10b 0b01 	add.w	fp, fp, #1
 80043f6:	e7b9      	b.n	800436c <_printf_float+0x310>
 80043f8:	ee18 3a10 	vmov	r3, s16
 80043fc:	4652      	mov	r2, sl
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	d1be      	bne.n	8004386 <_printf_float+0x32a>
 8004408:	e689      	b.n	800411e <_printf_float+0xc2>
 800440a:	9a05      	ldr	r2, [sp, #20]
 800440c:	464b      	mov	r3, r9
 800440e:	4442      	add	r2, r8
 8004410:	4631      	mov	r1, r6
 8004412:	4628      	mov	r0, r5
 8004414:	47b8      	blx	r7
 8004416:	3001      	adds	r0, #1
 8004418:	d1c1      	bne.n	800439e <_printf_float+0x342>
 800441a:	e680      	b.n	800411e <_printf_float+0xc2>
 800441c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800441e:	2a01      	cmp	r2, #1
 8004420:	dc01      	bgt.n	8004426 <_printf_float+0x3ca>
 8004422:	07db      	lsls	r3, r3, #31
 8004424:	d538      	bpl.n	8004498 <_printf_float+0x43c>
 8004426:	2301      	movs	r3, #1
 8004428:	4642      	mov	r2, r8
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	47b8      	blx	r7
 8004430:	3001      	adds	r0, #1
 8004432:	f43f ae74 	beq.w	800411e <_printf_float+0xc2>
 8004436:	ee18 3a10 	vmov	r3, s16
 800443a:	4652      	mov	r2, sl
 800443c:	4631      	mov	r1, r6
 800443e:	4628      	mov	r0, r5
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	f43f ae6b 	beq.w	800411e <_printf_float+0xc2>
 8004448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800444c:	2200      	movs	r2, #0
 800444e:	2300      	movs	r3, #0
 8004450:	f7fc fb5a 	bl	8000b08 <__aeabi_dcmpeq>
 8004454:	b9d8      	cbnz	r0, 800448e <_printf_float+0x432>
 8004456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004458:	f108 0201 	add.w	r2, r8, #1
 800445c:	3b01      	subs	r3, #1
 800445e:	4631      	mov	r1, r6
 8004460:	4628      	mov	r0, r5
 8004462:	47b8      	blx	r7
 8004464:	3001      	adds	r0, #1
 8004466:	d10e      	bne.n	8004486 <_printf_float+0x42a>
 8004468:	e659      	b.n	800411e <_printf_float+0xc2>
 800446a:	2301      	movs	r3, #1
 800446c:	4652      	mov	r2, sl
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	47b8      	blx	r7
 8004474:	3001      	adds	r0, #1
 8004476:	f43f ae52 	beq.w	800411e <_printf_float+0xc2>
 800447a:	f108 0801 	add.w	r8, r8, #1
 800447e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	4543      	cmp	r3, r8
 8004484:	dcf1      	bgt.n	800446a <_printf_float+0x40e>
 8004486:	464b      	mov	r3, r9
 8004488:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800448c:	e6dc      	b.n	8004248 <_printf_float+0x1ec>
 800448e:	f04f 0800 	mov.w	r8, #0
 8004492:	f104 0a1a 	add.w	sl, r4, #26
 8004496:	e7f2      	b.n	800447e <_printf_float+0x422>
 8004498:	2301      	movs	r3, #1
 800449a:	4642      	mov	r2, r8
 800449c:	e7df      	b.n	800445e <_printf_float+0x402>
 800449e:	2301      	movs	r3, #1
 80044a0:	464a      	mov	r2, r9
 80044a2:	4631      	mov	r1, r6
 80044a4:	4628      	mov	r0, r5
 80044a6:	47b8      	blx	r7
 80044a8:	3001      	adds	r0, #1
 80044aa:	f43f ae38 	beq.w	800411e <_printf_float+0xc2>
 80044ae:	f108 0801 	add.w	r8, r8, #1
 80044b2:	68e3      	ldr	r3, [r4, #12]
 80044b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044b6:	1a5b      	subs	r3, r3, r1
 80044b8:	4543      	cmp	r3, r8
 80044ba:	dcf0      	bgt.n	800449e <_printf_float+0x442>
 80044bc:	e6fa      	b.n	80042b4 <_printf_float+0x258>
 80044be:	f04f 0800 	mov.w	r8, #0
 80044c2:	f104 0919 	add.w	r9, r4, #25
 80044c6:	e7f4      	b.n	80044b2 <_printf_float+0x456>

080044c8 <_printf_common>:
 80044c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044cc:	4616      	mov	r6, r2
 80044ce:	4699      	mov	r9, r3
 80044d0:	688a      	ldr	r2, [r1, #8]
 80044d2:	690b      	ldr	r3, [r1, #16]
 80044d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044d8:	4293      	cmp	r3, r2
 80044da:	bfb8      	it	lt
 80044dc:	4613      	movlt	r3, r2
 80044de:	6033      	str	r3, [r6, #0]
 80044e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e4:	4607      	mov	r7, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	b10a      	cbz	r2, 80044ee <_printf_common+0x26>
 80044ea:	3301      	adds	r3, #1
 80044ec:	6033      	str	r3, [r6, #0]
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	0699      	lsls	r1, r3, #26
 80044f2:	bf42      	ittt	mi
 80044f4:	6833      	ldrmi	r3, [r6, #0]
 80044f6:	3302      	addmi	r3, #2
 80044f8:	6033      	strmi	r3, [r6, #0]
 80044fa:	6825      	ldr	r5, [r4, #0]
 80044fc:	f015 0506 	ands.w	r5, r5, #6
 8004500:	d106      	bne.n	8004510 <_printf_common+0x48>
 8004502:	f104 0a19 	add.w	sl, r4, #25
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	6832      	ldr	r2, [r6, #0]
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	42ab      	cmp	r3, r5
 800450e:	dc26      	bgt.n	800455e <_printf_common+0x96>
 8004510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004514:	1e13      	subs	r3, r2, #0
 8004516:	6822      	ldr	r2, [r4, #0]
 8004518:	bf18      	it	ne
 800451a:	2301      	movne	r3, #1
 800451c:	0692      	lsls	r2, r2, #26
 800451e:	d42b      	bmi.n	8004578 <_printf_common+0xb0>
 8004520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004524:	4649      	mov	r1, r9
 8004526:	4638      	mov	r0, r7
 8004528:	47c0      	blx	r8
 800452a:	3001      	adds	r0, #1
 800452c:	d01e      	beq.n	800456c <_printf_common+0xa4>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	68e5      	ldr	r5, [r4, #12]
 8004532:	6832      	ldr	r2, [r6, #0]
 8004534:	f003 0306 	and.w	r3, r3, #6
 8004538:	2b04      	cmp	r3, #4
 800453a:	bf08      	it	eq
 800453c:	1aad      	subeq	r5, r5, r2
 800453e:	68a3      	ldr	r3, [r4, #8]
 8004540:	6922      	ldr	r2, [r4, #16]
 8004542:	bf0c      	ite	eq
 8004544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004548:	2500      	movne	r5, #0
 800454a:	4293      	cmp	r3, r2
 800454c:	bfc4      	itt	gt
 800454e:	1a9b      	subgt	r3, r3, r2
 8004550:	18ed      	addgt	r5, r5, r3
 8004552:	2600      	movs	r6, #0
 8004554:	341a      	adds	r4, #26
 8004556:	42b5      	cmp	r5, r6
 8004558:	d11a      	bne.n	8004590 <_printf_common+0xc8>
 800455a:	2000      	movs	r0, #0
 800455c:	e008      	b.n	8004570 <_printf_common+0xa8>
 800455e:	2301      	movs	r3, #1
 8004560:	4652      	mov	r2, sl
 8004562:	4649      	mov	r1, r9
 8004564:	4638      	mov	r0, r7
 8004566:	47c0      	blx	r8
 8004568:	3001      	adds	r0, #1
 800456a:	d103      	bne.n	8004574 <_printf_common+0xac>
 800456c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004574:	3501      	adds	r5, #1
 8004576:	e7c6      	b.n	8004506 <_printf_common+0x3e>
 8004578:	18e1      	adds	r1, r4, r3
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	2030      	movs	r0, #48	; 0x30
 800457e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004582:	4422      	add	r2, r4
 8004584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800458c:	3302      	adds	r3, #2
 800458e:	e7c7      	b.n	8004520 <_printf_common+0x58>
 8004590:	2301      	movs	r3, #1
 8004592:	4622      	mov	r2, r4
 8004594:	4649      	mov	r1, r9
 8004596:	4638      	mov	r0, r7
 8004598:	47c0      	blx	r8
 800459a:	3001      	adds	r0, #1
 800459c:	d0e6      	beq.n	800456c <_printf_common+0xa4>
 800459e:	3601      	adds	r6, #1
 80045a0:	e7d9      	b.n	8004556 <_printf_common+0x8e>
	...

080045a4 <_printf_i>:
 80045a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045a8:	460c      	mov	r4, r1
 80045aa:	4691      	mov	r9, r2
 80045ac:	7e27      	ldrb	r7, [r4, #24]
 80045ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045b0:	2f78      	cmp	r7, #120	; 0x78
 80045b2:	4680      	mov	r8, r0
 80045b4:	469a      	mov	sl, r3
 80045b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ba:	d807      	bhi.n	80045cc <_printf_i+0x28>
 80045bc:	2f62      	cmp	r7, #98	; 0x62
 80045be:	d80a      	bhi.n	80045d6 <_printf_i+0x32>
 80045c0:	2f00      	cmp	r7, #0
 80045c2:	f000 80d8 	beq.w	8004776 <_printf_i+0x1d2>
 80045c6:	2f58      	cmp	r7, #88	; 0x58
 80045c8:	f000 80a3 	beq.w	8004712 <_printf_i+0x16e>
 80045cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045d4:	e03a      	b.n	800464c <_printf_i+0xa8>
 80045d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045da:	2b15      	cmp	r3, #21
 80045dc:	d8f6      	bhi.n	80045cc <_printf_i+0x28>
 80045de:	a001      	add	r0, pc, #4	; (adr r0, 80045e4 <_printf_i+0x40>)
 80045e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	08004651 	.word	0x08004651
 80045ec:	080045cd 	.word	0x080045cd
 80045f0:	080045cd 	.word	0x080045cd
 80045f4:	080045cd 	.word	0x080045cd
 80045f8:	080045cd 	.word	0x080045cd
 80045fc:	08004651 	.word	0x08004651
 8004600:	080045cd 	.word	0x080045cd
 8004604:	080045cd 	.word	0x080045cd
 8004608:	080045cd 	.word	0x080045cd
 800460c:	080045cd 	.word	0x080045cd
 8004610:	0800475d 	.word	0x0800475d
 8004614:	08004681 	.word	0x08004681
 8004618:	0800473f 	.word	0x0800473f
 800461c:	080045cd 	.word	0x080045cd
 8004620:	080045cd 	.word	0x080045cd
 8004624:	0800477f 	.word	0x0800477f
 8004628:	080045cd 	.word	0x080045cd
 800462c:	08004681 	.word	0x08004681
 8004630:	080045cd 	.word	0x080045cd
 8004634:	080045cd 	.word	0x080045cd
 8004638:	08004747 	.word	0x08004747
 800463c:	680b      	ldr	r3, [r1, #0]
 800463e:	1d1a      	adds	r2, r3, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	600a      	str	r2, [r1, #0]
 8004644:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800464c:	2301      	movs	r3, #1
 800464e:	e0a3      	b.n	8004798 <_printf_i+0x1f4>
 8004650:	6825      	ldr	r5, [r4, #0]
 8004652:	6808      	ldr	r0, [r1, #0]
 8004654:	062e      	lsls	r6, r5, #24
 8004656:	f100 0304 	add.w	r3, r0, #4
 800465a:	d50a      	bpl.n	8004672 <_printf_i+0xce>
 800465c:	6805      	ldr	r5, [r0, #0]
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	2d00      	cmp	r5, #0
 8004662:	da03      	bge.n	800466c <_printf_i+0xc8>
 8004664:	232d      	movs	r3, #45	; 0x2d
 8004666:	426d      	negs	r5, r5
 8004668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800466c:	485e      	ldr	r0, [pc, #376]	; (80047e8 <_printf_i+0x244>)
 800466e:	230a      	movs	r3, #10
 8004670:	e019      	b.n	80046a6 <_printf_i+0x102>
 8004672:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004676:	6805      	ldr	r5, [r0, #0]
 8004678:	600b      	str	r3, [r1, #0]
 800467a:	bf18      	it	ne
 800467c:	b22d      	sxthne	r5, r5
 800467e:	e7ef      	b.n	8004660 <_printf_i+0xbc>
 8004680:	680b      	ldr	r3, [r1, #0]
 8004682:	6825      	ldr	r5, [r4, #0]
 8004684:	1d18      	adds	r0, r3, #4
 8004686:	6008      	str	r0, [r1, #0]
 8004688:	0628      	lsls	r0, r5, #24
 800468a:	d501      	bpl.n	8004690 <_printf_i+0xec>
 800468c:	681d      	ldr	r5, [r3, #0]
 800468e:	e002      	b.n	8004696 <_printf_i+0xf2>
 8004690:	0669      	lsls	r1, r5, #25
 8004692:	d5fb      	bpl.n	800468c <_printf_i+0xe8>
 8004694:	881d      	ldrh	r5, [r3, #0]
 8004696:	4854      	ldr	r0, [pc, #336]	; (80047e8 <_printf_i+0x244>)
 8004698:	2f6f      	cmp	r7, #111	; 0x6f
 800469a:	bf0c      	ite	eq
 800469c:	2308      	moveq	r3, #8
 800469e:	230a      	movne	r3, #10
 80046a0:	2100      	movs	r1, #0
 80046a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046a6:	6866      	ldr	r6, [r4, #4]
 80046a8:	60a6      	str	r6, [r4, #8]
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	bfa2      	ittt	ge
 80046ae:	6821      	ldrge	r1, [r4, #0]
 80046b0:	f021 0104 	bicge.w	r1, r1, #4
 80046b4:	6021      	strge	r1, [r4, #0]
 80046b6:	b90d      	cbnz	r5, 80046bc <_printf_i+0x118>
 80046b8:	2e00      	cmp	r6, #0
 80046ba:	d04d      	beq.n	8004758 <_printf_i+0x1b4>
 80046bc:	4616      	mov	r6, r2
 80046be:	fbb5 f1f3 	udiv	r1, r5, r3
 80046c2:	fb03 5711 	mls	r7, r3, r1, r5
 80046c6:	5dc7      	ldrb	r7, [r0, r7]
 80046c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046cc:	462f      	mov	r7, r5
 80046ce:	42bb      	cmp	r3, r7
 80046d0:	460d      	mov	r5, r1
 80046d2:	d9f4      	bls.n	80046be <_printf_i+0x11a>
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d10b      	bne.n	80046f0 <_printf_i+0x14c>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	07df      	lsls	r7, r3, #31
 80046dc:	d508      	bpl.n	80046f0 <_printf_i+0x14c>
 80046de:	6923      	ldr	r3, [r4, #16]
 80046e0:	6861      	ldr	r1, [r4, #4]
 80046e2:	4299      	cmp	r1, r3
 80046e4:	bfde      	ittt	le
 80046e6:	2330      	movle	r3, #48	; 0x30
 80046e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80046f0:	1b92      	subs	r2, r2, r6
 80046f2:	6122      	str	r2, [r4, #16]
 80046f4:	f8cd a000 	str.w	sl, [sp]
 80046f8:	464b      	mov	r3, r9
 80046fa:	aa03      	add	r2, sp, #12
 80046fc:	4621      	mov	r1, r4
 80046fe:	4640      	mov	r0, r8
 8004700:	f7ff fee2 	bl	80044c8 <_printf_common>
 8004704:	3001      	adds	r0, #1
 8004706:	d14c      	bne.n	80047a2 <_printf_i+0x1fe>
 8004708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800470c:	b004      	add	sp, #16
 800470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004712:	4835      	ldr	r0, [pc, #212]	; (80047e8 <_printf_i+0x244>)
 8004714:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	680e      	ldr	r6, [r1, #0]
 800471c:	061f      	lsls	r7, r3, #24
 800471e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004722:	600e      	str	r6, [r1, #0]
 8004724:	d514      	bpl.n	8004750 <_printf_i+0x1ac>
 8004726:	07d9      	lsls	r1, r3, #31
 8004728:	bf44      	itt	mi
 800472a:	f043 0320 	orrmi.w	r3, r3, #32
 800472e:	6023      	strmi	r3, [r4, #0]
 8004730:	b91d      	cbnz	r5, 800473a <_printf_i+0x196>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	f023 0320 	bic.w	r3, r3, #32
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	2310      	movs	r3, #16
 800473c:	e7b0      	b.n	80046a0 <_printf_i+0xfc>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	f043 0320 	orr.w	r3, r3, #32
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	2378      	movs	r3, #120	; 0x78
 8004748:	4828      	ldr	r0, [pc, #160]	; (80047ec <_printf_i+0x248>)
 800474a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800474e:	e7e3      	b.n	8004718 <_printf_i+0x174>
 8004750:	065e      	lsls	r6, r3, #25
 8004752:	bf48      	it	mi
 8004754:	b2ad      	uxthmi	r5, r5
 8004756:	e7e6      	b.n	8004726 <_printf_i+0x182>
 8004758:	4616      	mov	r6, r2
 800475a:	e7bb      	b.n	80046d4 <_printf_i+0x130>
 800475c:	680b      	ldr	r3, [r1, #0]
 800475e:	6826      	ldr	r6, [r4, #0]
 8004760:	6960      	ldr	r0, [r4, #20]
 8004762:	1d1d      	adds	r5, r3, #4
 8004764:	600d      	str	r5, [r1, #0]
 8004766:	0635      	lsls	r5, r6, #24
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	d501      	bpl.n	8004770 <_printf_i+0x1cc>
 800476c:	6018      	str	r0, [r3, #0]
 800476e:	e002      	b.n	8004776 <_printf_i+0x1d2>
 8004770:	0671      	lsls	r1, r6, #25
 8004772:	d5fb      	bpl.n	800476c <_printf_i+0x1c8>
 8004774:	8018      	strh	r0, [r3, #0]
 8004776:	2300      	movs	r3, #0
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	4616      	mov	r6, r2
 800477c:	e7ba      	b.n	80046f4 <_printf_i+0x150>
 800477e:	680b      	ldr	r3, [r1, #0]
 8004780:	1d1a      	adds	r2, r3, #4
 8004782:	600a      	str	r2, [r1, #0]
 8004784:	681e      	ldr	r6, [r3, #0]
 8004786:	6862      	ldr	r2, [r4, #4]
 8004788:	2100      	movs	r1, #0
 800478a:	4630      	mov	r0, r6
 800478c:	f7fb fd48 	bl	8000220 <memchr>
 8004790:	b108      	cbz	r0, 8004796 <_printf_i+0x1f2>
 8004792:	1b80      	subs	r0, r0, r6
 8004794:	6060      	str	r0, [r4, #4]
 8004796:	6863      	ldr	r3, [r4, #4]
 8004798:	6123      	str	r3, [r4, #16]
 800479a:	2300      	movs	r3, #0
 800479c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a0:	e7a8      	b.n	80046f4 <_printf_i+0x150>
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	4632      	mov	r2, r6
 80047a6:	4649      	mov	r1, r9
 80047a8:	4640      	mov	r0, r8
 80047aa:	47d0      	blx	sl
 80047ac:	3001      	adds	r0, #1
 80047ae:	d0ab      	beq.n	8004708 <_printf_i+0x164>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	079b      	lsls	r3, r3, #30
 80047b4:	d413      	bmi.n	80047de <_printf_i+0x23a>
 80047b6:	68e0      	ldr	r0, [r4, #12]
 80047b8:	9b03      	ldr	r3, [sp, #12]
 80047ba:	4298      	cmp	r0, r3
 80047bc:	bfb8      	it	lt
 80047be:	4618      	movlt	r0, r3
 80047c0:	e7a4      	b.n	800470c <_printf_i+0x168>
 80047c2:	2301      	movs	r3, #1
 80047c4:	4632      	mov	r2, r6
 80047c6:	4649      	mov	r1, r9
 80047c8:	4640      	mov	r0, r8
 80047ca:	47d0      	blx	sl
 80047cc:	3001      	adds	r0, #1
 80047ce:	d09b      	beq.n	8004708 <_printf_i+0x164>
 80047d0:	3501      	adds	r5, #1
 80047d2:	68e3      	ldr	r3, [r4, #12]
 80047d4:	9903      	ldr	r1, [sp, #12]
 80047d6:	1a5b      	subs	r3, r3, r1
 80047d8:	42ab      	cmp	r3, r5
 80047da:	dcf2      	bgt.n	80047c2 <_printf_i+0x21e>
 80047dc:	e7eb      	b.n	80047b6 <_printf_i+0x212>
 80047de:	2500      	movs	r5, #0
 80047e0:	f104 0619 	add.w	r6, r4, #25
 80047e4:	e7f5      	b.n	80047d2 <_printf_i+0x22e>
 80047e6:	bf00      	nop
 80047e8:	08006cae 	.word	0x08006cae
 80047ec:	08006cbf 	.word	0x08006cbf

080047f0 <_vsiprintf_r>:
 80047f0:	b500      	push	{lr}
 80047f2:	b09b      	sub	sp, #108	; 0x6c
 80047f4:	9100      	str	r1, [sp, #0]
 80047f6:	9104      	str	r1, [sp, #16]
 80047f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047fc:	9105      	str	r1, [sp, #20]
 80047fe:	9102      	str	r1, [sp, #8]
 8004800:	4905      	ldr	r1, [pc, #20]	; (8004818 <_vsiprintf_r+0x28>)
 8004802:	9103      	str	r1, [sp, #12]
 8004804:	4669      	mov	r1, sp
 8004806:	f001 fb39 	bl	8005e7c <_svfiprintf_r>
 800480a:	9b00      	ldr	r3, [sp, #0]
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	b01b      	add	sp, #108	; 0x6c
 8004812:	f85d fb04 	ldr.w	pc, [sp], #4
 8004816:	bf00      	nop
 8004818:	ffff0208 	.word	0xffff0208

0800481c <vsiprintf>:
 800481c:	4613      	mov	r3, r2
 800481e:	460a      	mov	r2, r1
 8004820:	4601      	mov	r1, r0
 8004822:	4802      	ldr	r0, [pc, #8]	; (800482c <vsiprintf+0x10>)
 8004824:	6800      	ldr	r0, [r0, #0]
 8004826:	f7ff bfe3 	b.w	80047f0 <_vsiprintf_r>
 800482a:	bf00      	nop
 800482c:	2000000c 	.word	0x2000000c

08004830 <quorem>:
 8004830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	6903      	ldr	r3, [r0, #16]
 8004836:	690c      	ldr	r4, [r1, #16]
 8004838:	42a3      	cmp	r3, r4
 800483a:	4607      	mov	r7, r0
 800483c:	f2c0 8081 	blt.w	8004942 <quorem+0x112>
 8004840:	3c01      	subs	r4, #1
 8004842:	f101 0814 	add.w	r8, r1, #20
 8004846:	f100 0514 	add.w	r5, r0, #20
 800484a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004854:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004858:	3301      	adds	r3, #1
 800485a:	429a      	cmp	r2, r3
 800485c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004860:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004864:	fbb2 f6f3 	udiv	r6, r2, r3
 8004868:	d331      	bcc.n	80048ce <quorem+0x9e>
 800486a:	f04f 0e00 	mov.w	lr, #0
 800486e:	4640      	mov	r0, r8
 8004870:	46ac      	mov	ip, r5
 8004872:	46f2      	mov	sl, lr
 8004874:	f850 2b04 	ldr.w	r2, [r0], #4
 8004878:	b293      	uxth	r3, r2
 800487a:	fb06 e303 	mla	r3, r6, r3, lr
 800487e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004882:	b29b      	uxth	r3, r3
 8004884:	ebaa 0303 	sub.w	r3, sl, r3
 8004888:	0c12      	lsrs	r2, r2, #16
 800488a:	f8dc a000 	ldr.w	sl, [ip]
 800488e:	fb06 e202 	mla	r2, r6, r2, lr
 8004892:	fa13 f38a 	uxtah	r3, r3, sl
 8004896:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800489a:	fa1f fa82 	uxth.w	sl, r2
 800489e:	f8dc 2000 	ldr.w	r2, [ip]
 80048a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80048a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048b0:	4581      	cmp	r9, r0
 80048b2:	f84c 3b04 	str.w	r3, [ip], #4
 80048b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80048ba:	d2db      	bcs.n	8004874 <quorem+0x44>
 80048bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80048c0:	b92b      	cbnz	r3, 80048ce <quorem+0x9e>
 80048c2:	9b01      	ldr	r3, [sp, #4]
 80048c4:	3b04      	subs	r3, #4
 80048c6:	429d      	cmp	r5, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	d32e      	bcc.n	800492a <quorem+0xfa>
 80048cc:	613c      	str	r4, [r7, #16]
 80048ce:	4638      	mov	r0, r7
 80048d0:	f001 f8be 	bl	8005a50 <__mcmp>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	db24      	blt.n	8004922 <quorem+0xf2>
 80048d8:	3601      	adds	r6, #1
 80048da:	4628      	mov	r0, r5
 80048dc:	f04f 0c00 	mov.w	ip, #0
 80048e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80048e4:	f8d0 e000 	ldr.w	lr, [r0]
 80048e8:	b293      	uxth	r3, r2
 80048ea:	ebac 0303 	sub.w	r3, ip, r3
 80048ee:	0c12      	lsrs	r2, r2, #16
 80048f0:	fa13 f38e 	uxtah	r3, r3, lr
 80048f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004902:	45c1      	cmp	r9, r8
 8004904:	f840 3b04 	str.w	r3, [r0], #4
 8004908:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800490c:	d2e8      	bcs.n	80048e0 <quorem+0xb0>
 800490e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004912:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004916:	b922      	cbnz	r2, 8004922 <quorem+0xf2>
 8004918:	3b04      	subs	r3, #4
 800491a:	429d      	cmp	r5, r3
 800491c:	461a      	mov	r2, r3
 800491e:	d30a      	bcc.n	8004936 <quorem+0x106>
 8004920:	613c      	str	r4, [r7, #16]
 8004922:	4630      	mov	r0, r6
 8004924:	b003      	add	sp, #12
 8004926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	3b04      	subs	r3, #4
 800492e:	2a00      	cmp	r2, #0
 8004930:	d1cc      	bne.n	80048cc <quorem+0x9c>
 8004932:	3c01      	subs	r4, #1
 8004934:	e7c7      	b.n	80048c6 <quorem+0x96>
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	3b04      	subs	r3, #4
 800493a:	2a00      	cmp	r2, #0
 800493c:	d1f0      	bne.n	8004920 <quorem+0xf0>
 800493e:	3c01      	subs	r4, #1
 8004940:	e7eb      	b.n	800491a <quorem+0xea>
 8004942:	2000      	movs	r0, #0
 8004944:	e7ee      	b.n	8004924 <quorem+0xf4>
	...

08004948 <_dtoa_r>:
 8004948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494c:	ed2d 8b02 	vpush	{d8}
 8004950:	ec57 6b10 	vmov	r6, r7, d0
 8004954:	b095      	sub	sp, #84	; 0x54
 8004956:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004958:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800495c:	9105      	str	r1, [sp, #20]
 800495e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004962:	4604      	mov	r4, r0
 8004964:	9209      	str	r2, [sp, #36]	; 0x24
 8004966:	930f      	str	r3, [sp, #60]	; 0x3c
 8004968:	b975      	cbnz	r5, 8004988 <_dtoa_r+0x40>
 800496a:	2010      	movs	r0, #16
 800496c:	f000 fddc 	bl	8005528 <malloc>
 8004970:	4602      	mov	r2, r0
 8004972:	6260      	str	r0, [r4, #36]	; 0x24
 8004974:	b920      	cbnz	r0, 8004980 <_dtoa_r+0x38>
 8004976:	4bb2      	ldr	r3, [pc, #712]	; (8004c40 <_dtoa_r+0x2f8>)
 8004978:	21ea      	movs	r1, #234	; 0xea
 800497a:	48b2      	ldr	r0, [pc, #712]	; (8004c44 <_dtoa_r+0x2fc>)
 800497c:	f001 fb8e 	bl	800609c <__assert_func>
 8004980:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004984:	6005      	str	r5, [r0, #0]
 8004986:	60c5      	str	r5, [r0, #12]
 8004988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	b151      	cbz	r1, 80049a4 <_dtoa_r+0x5c>
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	604a      	str	r2, [r1, #4]
 8004992:	2301      	movs	r3, #1
 8004994:	4093      	lsls	r3, r2
 8004996:	608b      	str	r3, [r1, #8]
 8004998:	4620      	mov	r0, r4
 800499a:	f000 fe1b 	bl	80055d4 <_Bfree>
 800499e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	1e3b      	subs	r3, r7, #0
 80049a6:	bfb9      	ittee	lt
 80049a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80049ac:	9303      	strlt	r3, [sp, #12]
 80049ae:	2300      	movge	r3, #0
 80049b0:	f8c8 3000 	strge.w	r3, [r8]
 80049b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80049b8:	4ba3      	ldr	r3, [pc, #652]	; (8004c48 <_dtoa_r+0x300>)
 80049ba:	bfbc      	itt	lt
 80049bc:	2201      	movlt	r2, #1
 80049be:	f8c8 2000 	strlt.w	r2, [r8]
 80049c2:	ea33 0309 	bics.w	r3, r3, r9
 80049c6:	d11b      	bne.n	8004a00 <_dtoa_r+0xb8>
 80049c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049d4:	4333      	orrs	r3, r6
 80049d6:	f000 857a 	beq.w	80054ce <_dtoa_r+0xb86>
 80049da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049dc:	b963      	cbnz	r3, 80049f8 <_dtoa_r+0xb0>
 80049de:	4b9b      	ldr	r3, [pc, #620]	; (8004c4c <_dtoa_r+0x304>)
 80049e0:	e024      	b.n	8004a2c <_dtoa_r+0xe4>
 80049e2:	4b9b      	ldr	r3, [pc, #620]	; (8004c50 <_dtoa_r+0x308>)
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	9800      	ldr	r0, [sp, #0]
 80049ee:	b015      	add	sp, #84	; 0x54
 80049f0:	ecbd 8b02 	vpop	{d8}
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	4b94      	ldr	r3, [pc, #592]	; (8004c4c <_dtoa_r+0x304>)
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	3303      	adds	r3, #3
 80049fe:	e7f3      	b.n	80049e8 <_dtoa_r+0xa0>
 8004a00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a04:	2200      	movs	r2, #0
 8004a06:	ec51 0b17 	vmov	r0, r1, d7
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004a10:	f7fc f87a 	bl	8000b08 <__aeabi_dcmpeq>
 8004a14:	4680      	mov	r8, r0
 8004a16:	b158      	cbz	r0, 8004a30 <_dtoa_r+0xe8>
 8004a18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8551 	beq.w	80054c8 <_dtoa_r+0xb80>
 8004a26:	488b      	ldr	r0, [pc, #556]	; (8004c54 <_dtoa_r+0x30c>)
 8004a28:	6018      	str	r0, [r3, #0]
 8004a2a:	1e43      	subs	r3, r0, #1
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	e7dd      	b.n	80049ec <_dtoa_r+0xa4>
 8004a30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004a34:	aa12      	add	r2, sp, #72	; 0x48
 8004a36:	a913      	add	r1, sp, #76	; 0x4c
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f001 f8ad 	bl	8005b98 <__d2b>
 8004a3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004a42:	4683      	mov	fp, r0
 8004a44:	2d00      	cmp	r5, #0
 8004a46:	d07c      	beq.n	8004b42 <_dtoa_r+0x1fa>
 8004a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004a56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004a5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004a5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a62:	4b7d      	ldr	r3, [pc, #500]	; (8004c58 <_dtoa_r+0x310>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	4630      	mov	r0, r6
 8004a68:	4639      	mov	r1, r7
 8004a6a:	f7fb fc2d 	bl	80002c8 <__aeabi_dsub>
 8004a6e:	a36e      	add	r3, pc, #440	; (adr r3, 8004c28 <_dtoa_r+0x2e0>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f7fb fde0 	bl	8000638 <__aeabi_dmul>
 8004a78:	a36d      	add	r3, pc, #436	; (adr r3, 8004c30 <_dtoa_r+0x2e8>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fc25 	bl	80002cc <__adddf3>
 8004a82:	4606      	mov	r6, r0
 8004a84:	4628      	mov	r0, r5
 8004a86:	460f      	mov	r7, r1
 8004a88:	f7fb fd6c 	bl	8000564 <__aeabi_i2d>
 8004a8c:	a36a      	add	r3, pc, #424	; (adr r3, 8004c38 <_dtoa_r+0x2f0>)
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f7fb fdd1 	bl	8000638 <__aeabi_dmul>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	f7fb fc15 	bl	80002cc <__adddf3>
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460f      	mov	r7, r1
 8004aa6:	f7fc f877 	bl	8000b98 <__aeabi_d2iz>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	4682      	mov	sl, r0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	4639      	mov	r1, r7
 8004ab4:	f7fc f832 	bl	8000b1c <__aeabi_dcmplt>
 8004ab8:	b148      	cbz	r0, 8004ace <_dtoa_r+0x186>
 8004aba:	4650      	mov	r0, sl
 8004abc:	f7fb fd52 	bl	8000564 <__aeabi_i2d>
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	f7fc f820 	bl	8000b08 <__aeabi_dcmpeq>
 8004ac8:	b908      	cbnz	r0, 8004ace <_dtoa_r+0x186>
 8004aca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ace:	f1ba 0f16 	cmp.w	sl, #22
 8004ad2:	d854      	bhi.n	8004b7e <_dtoa_r+0x236>
 8004ad4:	4b61      	ldr	r3, [pc, #388]	; (8004c5c <_dtoa_r+0x314>)
 8004ad6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ae2:	f7fc f81b 	bl	8000b1c <__aeabi_dcmplt>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d04b      	beq.n	8004b82 <_dtoa_r+0x23a>
 8004aea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004aee:	2300      	movs	r3, #0
 8004af0:	930e      	str	r3, [sp, #56]	; 0x38
 8004af2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004af4:	1b5d      	subs	r5, r3, r5
 8004af6:	1e6b      	subs	r3, r5, #1
 8004af8:	9304      	str	r3, [sp, #16]
 8004afa:	bf43      	ittte	mi
 8004afc:	2300      	movmi	r3, #0
 8004afe:	f1c5 0801 	rsbmi	r8, r5, #1
 8004b02:	9304      	strmi	r3, [sp, #16]
 8004b04:	f04f 0800 	movpl.w	r8, #0
 8004b08:	f1ba 0f00 	cmp.w	sl, #0
 8004b0c:	db3b      	blt.n	8004b86 <_dtoa_r+0x23e>
 8004b0e:	9b04      	ldr	r3, [sp, #16]
 8004b10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004b14:	4453      	add	r3, sl
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9306      	str	r3, [sp, #24]
 8004b1c:	9b05      	ldr	r3, [sp, #20]
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	d869      	bhi.n	8004bf6 <_dtoa_r+0x2ae>
 8004b22:	2b05      	cmp	r3, #5
 8004b24:	bfc4      	itt	gt
 8004b26:	3b04      	subgt	r3, #4
 8004b28:	9305      	strgt	r3, [sp, #20]
 8004b2a:	9b05      	ldr	r3, [sp, #20]
 8004b2c:	f1a3 0302 	sub.w	r3, r3, #2
 8004b30:	bfcc      	ite	gt
 8004b32:	2500      	movgt	r5, #0
 8004b34:	2501      	movle	r5, #1
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d869      	bhi.n	8004c0e <_dtoa_r+0x2c6>
 8004b3a:	e8df f003 	tbb	[pc, r3]
 8004b3e:	4e2c      	.short	0x4e2c
 8004b40:	5a4c      	.short	0x5a4c
 8004b42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004b46:	441d      	add	r5, r3
 8004b48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	bfc1      	itttt	gt
 8004b50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004b58:	fa09 f303 	lslgt.w	r3, r9, r3
 8004b5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b60:	bfda      	itte	le
 8004b62:	f1c3 0320 	rsble	r3, r3, #32
 8004b66:	fa06 f003 	lslle.w	r0, r6, r3
 8004b6a:	4318      	orrgt	r0, r3
 8004b6c:	f7fb fcea 	bl	8000544 <__aeabi_ui2d>
 8004b70:	2301      	movs	r3, #1
 8004b72:	4606      	mov	r6, r0
 8004b74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004b78:	3d01      	subs	r5, #1
 8004b7a:	9310      	str	r3, [sp, #64]	; 0x40
 8004b7c:	e771      	b.n	8004a62 <_dtoa_r+0x11a>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e7b6      	b.n	8004af0 <_dtoa_r+0x1a8>
 8004b82:	900e      	str	r0, [sp, #56]	; 0x38
 8004b84:	e7b5      	b.n	8004af2 <_dtoa_r+0x1aa>
 8004b86:	f1ca 0300 	rsb	r3, sl, #0
 8004b8a:	9306      	str	r3, [sp, #24]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	eba8 080a 	sub.w	r8, r8, sl
 8004b92:	930d      	str	r3, [sp, #52]	; 0x34
 8004b94:	e7c2      	b.n	8004b1c <_dtoa_r+0x1d4>
 8004b96:	2300      	movs	r3, #0
 8004b98:	9308      	str	r3, [sp, #32]
 8004b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	dc39      	bgt.n	8004c14 <_dtoa_r+0x2cc>
 8004ba0:	f04f 0901 	mov.w	r9, #1
 8004ba4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ba8:	464b      	mov	r3, r9
 8004baa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004bae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	6042      	str	r2, [r0, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	f102 0614 	add.w	r6, r2, #20
 8004bba:	429e      	cmp	r6, r3
 8004bbc:	6841      	ldr	r1, [r0, #4]
 8004bbe:	d92f      	bls.n	8004c20 <_dtoa_r+0x2d8>
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f000 fcc7 	bl	8005554 <_Balloc>
 8004bc6:	9000      	str	r0, [sp, #0]
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d14b      	bne.n	8004c64 <_dtoa_r+0x31c>
 8004bcc:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <_dtoa_r+0x318>)
 8004bce:	4602      	mov	r2, r0
 8004bd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004bd4:	e6d1      	b.n	800497a <_dtoa_r+0x32>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e7de      	b.n	8004b98 <_dtoa_r+0x250>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9308      	str	r3, [sp, #32]
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be0:	eb0a 0903 	add.w	r9, sl, r3
 8004be4:	f109 0301 	add.w	r3, r9, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	bfb8      	it	lt
 8004bee:	2301      	movlt	r3, #1
 8004bf0:	e7dd      	b.n	8004bae <_dtoa_r+0x266>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e7f2      	b.n	8004bdc <_dtoa_r+0x294>
 8004bf6:	2501      	movs	r5, #1
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	9305      	str	r3, [sp, #20]
 8004bfc:	9508      	str	r5, [sp, #32]
 8004bfe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c08:	2312      	movs	r3, #18
 8004c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c0c:	e7cf      	b.n	8004bae <_dtoa_r+0x266>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	9308      	str	r3, [sp, #32]
 8004c12:	e7f4      	b.n	8004bfe <_dtoa_r+0x2b6>
 8004c14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004c18:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c1c:	464b      	mov	r3, r9
 8004c1e:	e7c6      	b.n	8004bae <_dtoa_r+0x266>
 8004c20:	3101      	adds	r1, #1
 8004c22:	6041      	str	r1, [r0, #4]
 8004c24:	0052      	lsls	r2, r2, #1
 8004c26:	e7c6      	b.n	8004bb6 <_dtoa_r+0x26e>
 8004c28:	636f4361 	.word	0x636f4361
 8004c2c:	3fd287a7 	.word	0x3fd287a7
 8004c30:	8b60c8b3 	.word	0x8b60c8b3
 8004c34:	3fc68a28 	.word	0x3fc68a28
 8004c38:	509f79fb 	.word	0x509f79fb
 8004c3c:	3fd34413 	.word	0x3fd34413
 8004c40:	08006cdd 	.word	0x08006cdd
 8004c44:	08006cf4 	.word	0x08006cf4
 8004c48:	7ff00000 	.word	0x7ff00000
 8004c4c:	08006cd9 	.word	0x08006cd9
 8004c50:	08006cd0 	.word	0x08006cd0
 8004c54:	08006cad 	.word	0x08006cad
 8004c58:	3ff80000 	.word	0x3ff80000
 8004c5c:	08006df0 	.word	0x08006df0
 8004c60:	08006d53 	.word	0x08006d53
 8004c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c66:	9a00      	ldr	r2, [sp, #0]
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	9b01      	ldr	r3, [sp, #4]
 8004c6c:	2b0e      	cmp	r3, #14
 8004c6e:	f200 80ad 	bhi.w	8004dcc <_dtoa_r+0x484>
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	f000 80aa 	beq.w	8004dcc <_dtoa_r+0x484>
 8004c78:	f1ba 0f00 	cmp.w	sl, #0
 8004c7c:	dd36      	ble.n	8004cec <_dtoa_r+0x3a4>
 8004c7e:	4ac3      	ldr	r2, [pc, #780]	; (8004f8c <_dtoa_r+0x644>)
 8004c80:	f00a 030f 	and.w	r3, sl, #15
 8004c84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c88:	ed93 7b00 	vldr	d7, [r3]
 8004c8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004c90:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004c94:	eeb0 8a47 	vmov.f32	s16, s14
 8004c98:	eef0 8a67 	vmov.f32	s17, s15
 8004c9c:	d016      	beq.n	8004ccc <_dtoa_r+0x384>
 8004c9e:	4bbc      	ldr	r3, [pc, #752]	; (8004f90 <_dtoa_r+0x648>)
 8004ca0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ca4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ca8:	f7fb fdf0 	bl	800088c <__aeabi_ddiv>
 8004cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cb0:	f007 070f 	and.w	r7, r7, #15
 8004cb4:	2503      	movs	r5, #3
 8004cb6:	4eb6      	ldr	r6, [pc, #728]	; (8004f90 <_dtoa_r+0x648>)
 8004cb8:	b957      	cbnz	r7, 8004cd0 <_dtoa_r+0x388>
 8004cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cbe:	ec53 2b18 	vmov	r2, r3, d8
 8004cc2:	f7fb fde3 	bl	800088c <__aeabi_ddiv>
 8004cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cca:	e029      	b.n	8004d20 <_dtoa_r+0x3d8>
 8004ccc:	2502      	movs	r5, #2
 8004cce:	e7f2      	b.n	8004cb6 <_dtoa_r+0x36e>
 8004cd0:	07f9      	lsls	r1, r7, #31
 8004cd2:	d508      	bpl.n	8004ce6 <_dtoa_r+0x39e>
 8004cd4:	ec51 0b18 	vmov	r0, r1, d8
 8004cd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cdc:	f7fb fcac 	bl	8000638 <__aeabi_dmul>
 8004ce0:	ec41 0b18 	vmov	d8, r0, r1
 8004ce4:	3501      	adds	r5, #1
 8004ce6:	107f      	asrs	r7, r7, #1
 8004ce8:	3608      	adds	r6, #8
 8004cea:	e7e5      	b.n	8004cb8 <_dtoa_r+0x370>
 8004cec:	f000 80a6 	beq.w	8004e3c <_dtoa_r+0x4f4>
 8004cf0:	f1ca 0600 	rsb	r6, sl, #0
 8004cf4:	4ba5      	ldr	r3, [pc, #660]	; (8004f8c <_dtoa_r+0x644>)
 8004cf6:	4fa6      	ldr	r7, [pc, #664]	; (8004f90 <_dtoa_r+0x648>)
 8004cf8:	f006 020f 	and.w	r2, r6, #15
 8004cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d08:	f7fb fc96 	bl	8000638 <__aeabi_dmul>
 8004d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d10:	1136      	asrs	r6, r6, #4
 8004d12:	2300      	movs	r3, #0
 8004d14:	2502      	movs	r5, #2
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	f040 8085 	bne.w	8004e26 <_dtoa_r+0x4de>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1d2      	bne.n	8004cc6 <_dtoa_r+0x37e>
 8004d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 808c 	beq.w	8004e40 <_dtoa_r+0x4f8>
 8004d28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004d2c:	4b99      	ldr	r3, [pc, #612]	; (8004f94 <_dtoa_r+0x64c>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4630      	mov	r0, r6
 8004d32:	4639      	mov	r1, r7
 8004d34:	f7fb fef2 	bl	8000b1c <__aeabi_dcmplt>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	f000 8081 	beq.w	8004e40 <_dtoa_r+0x4f8>
 8004d3e:	9b01      	ldr	r3, [sp, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d07d      	beq.n	8004e40 <_dtoa_r+0x4f8>
 8004d44:	f1b9 0f00 	cmp.w	r9, #0
 8004d48:	dd3c      	ble.n	8004dc4 <_dtoa_r+0x47c>
 8004d4a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004d4e:	9307      	str	r3, [sp, #28]
 8004d50:	2200      	movs	r2, #0
 8004d52:	4b91      	ldr	r3, [pc, #580]	; (8004f98 <_dtoa_r+0x650>)
 8004d54:	4630      	mov	r0, r6
 8004d56:	4639      	mov	r1, r7
 8004d58:	f7fb fc6e 	bl	8000638 <__aeabi_dmul>
 8004d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d60:	3501      	adds	r5, #1
 8004d62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004d66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f7fb fbfa 	bl	8000564 <__aeabi_i2d>
 8004d70:	4632      	mov	r2, r6
 8004d72:	463b      	mov	r3, r7
 8004d74:	f7fb fc60 	bl	8000638 <__aeabi_dmul>
 8004d78:	4b88      	ldr	r3, [pc, #544]	; (8004f9c <_dtoa_r+0x654>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f7fb faa6 	bl	80002cc <__adddf3>
 8004d80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d88:	9303      	str	r3, [sp, #12]
 8004d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d15c      	bne.n	8004e4a <_dtoa_r+0x502>
 8004d90:	4b83      	ldr	r3, [pc, #524]	; (8004fa0 <_dtoa_r+0x658>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	4630      	mov	r0, r6
 8004d96:	4639      	mov	r1, r7
 8004d98:	f7fb fa96 	bl	80002c8 <__aeabi_dsub>
 8004d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004da0:	4606      	mov	r6, r0
 8004da2:	460f      	mov	r7, r1
 8004da4:	f7fb fed8 	bl	8000b58 <__aeabi_dcmpgt>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	f040 8296 	bne.w	80052da <_dtoa_r+0x992>
 8004dae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004db2:	4630      	mov	r0, r6
 8004db4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004db8:	4639      	mov	r1, r7
 8004dba:	f7fb feaf 	bl	8000b1c <__aeabi_dcmplt>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	f040 8288 	bne.w	80052d4 <_dtoa_r+0x98c>
 8004dc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f2c0 8158 	blt.w	8005084 <_dtoa_r+0x73c>
 8004dd4:	f1ba 0f0e 	cmp.w	sl, #14
 8004dd8:	f300 8154 	bgt.w	8005084 <_dtoa_r+0x73c>
 8004ddc:	4b6b      	ldr	r3, [pc, #428]	; (8004f8c <_dtoa_r+0x644>)
 8004dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004de2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f280 80e3 	bge.w	8004fb4 <_dtoa_r+0x66c>
 8004dee:	9b01      	ldr	r3, [sp, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f300 80df 	bgt.w	8004fb4 <_dtoa_r+0x66c>
 8004df6:	f040 826d 	bne.w	80052d4 <_dtoa_r+0x98c>
 8004dfa:	4b69      	ldr	r3, [pc, #420]	; (8004fa0 <_dtoa_r+0x658>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4640      	mov	r0, r8
 8004e00:	4649      	mov	r1, r9
 8004e02:	f7fb fc19 	bl	8000638 <__aeabi_dmul>
 8004e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e0a:	f7fb fe9b 	bl	8000b44 <__aeabi_dcmpge>
 8004e0e:	9e01      	ldr	r6, [sp, #4]
 8004e10:	4637      	mov	r7, r6
 8004e12:	2800      	cmp	r0, #0
 8004e14:	f040 8243 	bne.w	800529e <_dtoa_r+0x956>
 8004e18:	9d00      	ldr	r5, [sp, #0]
 8004e1a:	2331      	movs	r3, #49	; 0x31
 8004e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8004e20:	f10a 0a01 	add.w	sl, sl, #1
 8004e24:	e23f      	b.n	80052a6 <_dtoa_r+0x95e>
 8004e26:	07f2      	lsls	r2, r6, #31
 8004e28:	d505      	bpl.n	8004e36 <_dtoa_r+0x4ee>
 8004e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2e:	f7fb fc03 	bl	8000638 <__aeabi_dmul>
 8004e32:	3501      	adds	r5, #1
 8004e34:	2301      	movs	r3, #1
 8004e36:	1076      	asrs	r6, r6, #1
 8004e38:	3708      	adds	r7, #8
 8004e3a:	e76c      	b.n	8004d16 <_dtoa_r+0x3ce>
 8004e3c:	2502      	movs	r5, #2
 8004e3e:	e76f      	b.n	8004d20 <_dtoa_r+0x3d8>
 8004e40:	9b01      	ldr	r3, [sp, #4]
 8004e42:	f8cd a01c 	str.w	sl, [sp, #28]
 8004e46:	930c      	str	r3, [sp, #48]	; 0x30
 8004e48:	e78d      	b.n	8004d66 <_dtoa_r+0x41e>
 8004e4a:	9900      	ldr	r1, [sp, #0]
 8004e4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e50:	4b4e      	ldr	r3, [pc, #312]	; (8004f8c <_dtoa_r+0x644>)
 8004e52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e56:	4401      	add	r1, r0
 8004e58:	9102      	str	r1, [sp, #8]
 8004e5a:	9908      	ldr	r1, [sp, #32]
 8004e5c:	eeb0 8a47 	vmov.f32	s16, s14
 8004e60:	eef0 8a67 	vmov.f32	s17, s15
 8004e64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d045      	beq.n	8004efc <_dtoa_r+0x5b4>
 8004e70:	494c      	ldr	r1, [pc, #304]	; (8004fa4 <_dtoa_r+0x65c>)
 8004e72:	2000      	movs	r0, #0
 8004e74:	f7fb fd0a 	bl	800088c <__aeabi_ddiv>
 8004e78:	ec53 2b18 	vmov	r2, r3, d8
 8004e7c:	f7fb fa24 	bl	80002c8 <__aeabi_dsub>
 8004e80:	9d00      	ldr	r5, [sp, #0]
 8004e82:	ec41 0b18 	vmov	d8, r0, r1
 8004e86:	4639      	mov	r1, r7
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f7fb fe85 	bl	8000b98 <__aeabi_d2iz>
 8004e8e:	900c      	str	r0, [sp, #48]	; 0x30
 8004e90:	f7fb fb68 	bl	8000564 <__aeabi_i2d>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	f7fb fa14 	bl	80002c8 <__aeabi_dsub>
 8004ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea2:	3330      	adds	r3, #48	; 0x30
 8004ea4:	f805 3b01 	strb.w	r3, [r5], #1
 8004ea8:	ec53 2b18 	vmov	r2, r3, d8
 8004eac:	4606      	mov	r6, r0
 8004eae:	460f      	mov	r7, r1
 8004eb0:	f7fb fe34 	bl	8000b1c <__aeabi_dcmplt>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d165      	bne.n	8004f84 <_dtoa_r+0x63c>
 8004eb8:	4632      	mov	r2, r6
 8004eba:	463b      	mov	r3, r7
 8004ebc:	4935      	ldr	r1, [pc, #212]	; (8004f94 <_dtoa_r+0x64c>)
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7fb fa02 	bl	80002c8 <__aeabi_dsub>
 8004ec4:	ec53 2b18 	vmov	r2, r3, d8
 8004ec8:	f7fb fe28 	bl	8000b1c <__aeabi_dcmplt>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	f040 80b9 	bne.w	8005044 <_dtoa_r+0x6fc>
 8004ed2:	9b02      	ldr	r3, [sp, #8]
 8004ed4:	429d      	cmp	r5, r3
 8004ed6:	f43f af75 	beq.w	8004dc4 <_dtoa_r+0x47c>
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <_dtoa_r+0x650>)
 8004edc:	ec51 0b18 	vmov	r0, r1, d8
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f7fb fba9 	bl	8000638 <__aeabi_dmul>
 8004ee6:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <_dtoa_r+0x650>)
 8004ee8:	ec41 0b18 	vmov	d8, r0, r1
 8004eec:	2200      	movs	r2, #0
 8004eee:	4630      	mov	r0, r6
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	f7fb fba1 	bl	8000638 <__aeabi_dmul>
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460f      	mov	r7, r1
 8004efa:	e7c4      	b.n	8004e86 <_dtoa_r+0x53e>
 8004efc:	ec51 0b17 	vmov	r0, r1, d7
 8004f00:	f7fb fb9a 	bl	8000638 <__aeabi_dmul>
 8004f04:	9b02      	ldr	r3, [sp, #8]
 8004f06:	9d00      	ldr	r5, [sp, #0]
 8004f08:	930c      	str	r3, [sp, #48]	; 0x30
 8004f0a:	ec41 0b18 	vmov	d8, r0, r1
 8004f0e:	4639      	mov	r1, r7
 8004f10:	4630      	mov	r0, r6
 8004f12:	f7fb fe41 	bl	8000b98 <__aeabi_d2iz>
 8004f16:	9011      	str	r0, [sp, #68]	; 0x44
 8004f18:	f7fb fb24 	bl	8000564 <__aeabi_i2d>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4630      	mov	r0, r6
 8004f22:	4639      	mov	r1, r7
 8004f24:	f7fb f9d0 	bl	80002c8 <__aeabi_dsub>
 8004f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f2a:	3330      	adds	r3, #48	; 0x30
 8004f2c:	f805 3b01 	strb.w	r3, [r5], #1
 8004f30:	9b02      	ldr	r3, [sp, #8]
 8004f32:	429d      	cmp	r5, r3
 8004f34:	4606      	mov	r6, r0
 8004f36:	460f      	mov	r7, r1
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	d134      	bne.n	8004fa8 <_dtoa_r+0x660>
 8004f3e:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <_dtoa_r+0x65c>)
 8004f40:	ec51 0b18 	vmov	r0, r1, d8
 8004f44:	f7fb f9c2 	bl	80002cc <__adddf3>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	4639      	mov	r1, r7
 8004f50:	f7fb fe02 	bl	8000b58 <__aeabi_dcmpgt>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d175      	bne.n	8005044 <_dtoa_r+0x6fc>
 8004f58:	ec53 2b18 	vmov	r2, r3, d8
 8004f5c:	4911      	ldr	r1, [pc, #68]	; (8004fa4 <_dtoa_r+0x65c>)
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7fb f9b2 	bl	80002c8 <__aeabi_dsub>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4630      	mov	r0, r6
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	f7fb fdd6 	bl	8000b1c <__aeabi_dcmplt>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f43f af27 	beq.w	8004dc4 <_dtoa_r+0x47c>
 8004f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f78:	1e6b      	subs	r3, r5, #1
 8004f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8004f7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d0f8      	beq.n	8004f76 <_dtoa_r+0x62e>
 8004f84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004f88:	e04a      	b.n	8005020 <_dtoa_r+0x6d8>
 8004f8a:	bf00      	nop
 8004f8c:	08006df0 	.word	0x08006df0
 8004f90:	08006dc8 	.word	0x08006dc8
 8004f94:	3ff00000 	.word	0x3ff00000
 8004f98:	40240000 	.word	0x40240000
 8004f9c:	401c0000 	.word	0x401c0000
 8004fa0:	40140000 	.word	0x40140000
 8004fa4:	3fe00000 	.word	0x3fe00000
 8004fa8:	4baf      	ldr	r3, [pc, #700]	; (8005268 <_dtoa_r+0x920>)
 8004faa:	f7fb fb45 	bl	8000638 <__aeabi_dmul>
 8004fae:	4606      	mov	r6, r0
 8004fb0:	460f      	mov	r7, r1
 8004fb2:	e7ac      	b.n	8004f0e <_dtoa_r+0x5c6>
 8004fb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004fb8:	9d00      	ldr	r5, [sp, #0]
 8004fba:	4642      	mov	r2, r8
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb fc63 	bl	800088c <__aeabi_ddiv>
 8004fc6:	f7fb fde7 	bl	8000b98 <__aeabi_d2iz>
 8004fca:	9002      	str	r0, [sp, #8]
 8004fcc:	f7fb faca 	bl	8000564 <__aeabi_i2d>
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	f7fb fb30 	bl	8000638 <__aeabi_dmul>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4630      	mov	r0, r6
 8004fde:	4639      	mov	r1, r7
 8004fe0:	f7fb f972 	bl	80002c8 <__aeabi_dsub>
 8004fe4:	9e02      	ldr	r6, [sp, #8]
 8004fe6:	9f01      	ldr	r7, [sp, #4]
 8004fe8:	3630      	adds	r6, #48	; 0x30
 8004fea:	f805 6b01 	strb.w	r6, [r5], #1
 8004fee:	9e00      	ldr	r6, [sp, #0]
 8004ff0:	1bae      	subs	r6, r5, r6
 8004ff2:	42b7      	cmp	r7, r6
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	d137      	bne.n	800506a <_dtoa_r+0x722>
 8004ffa:	f7fb f967 	bl	80002cc <__adddf3>
 8004ffe:	4642      	mov	r2, r8
 8005000:	464b      	mov	r3, r9
 8005002:	4606      	mov	r6, r0
 8005004:	460f      	mov	r7, r1
 8005006:	f7fb fda7 	bl	8000b58 <__aeabi_dcmpgt>
 800500a:	b9c8      	cbnz	r0, 8005040 <_dtoa_r+0x6f8>
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	4630      	mov	r0, r6
 8005012:	4639      	mov	r1, r7
 8005014:	f7fb fd78 	bl	8000b08 <__aeabi_dcmpeq>
 8005018:	b110      	cbz	r0, 8005020 <_dtoa_r+0x6d8>
 800501a:	9b02      	ldr	r3, [sp, #8]
 800501c:	07d9      	lsls	r1, r3, #31
 800501e:	d40f      	bmi.n	8005040 <_dtoa_r+0x6f8>
 8005020:	4620      	mov	r0, r4
 8005022:	4659      	mov	r1, fp
 8005024:	f000 fad6 	bl	80055d4 <_Bfree>
 8005028:	2300      	movs	r3, #0
 800502a:	702b      	strb	r3, [r5, #0]
 800502c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800502e:	f10a 0001 	add.w	r0, sl, #1
 8005032:	6018      	str	r0, [r3, #0]
 8005034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005036:	2b00      	cmp	r3, #0
 8005038:	f43f acd8 	beq.w	80049ec <_dtoa_r+0xa4>
 800503c:	601d      	str	r5, [r3, #0]
 800503e:	e4d5      	b.n	80049ec <_dtoa_r+0xa4>
 8005040:	f8cd a01c 	str.w	sl, [sp, #28]
 8005044:	462b      	mov	r3, r5
 8005046:	461d      	mov	r5, r3
 8005048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800504c:	2a39      	cmp	r2, #57	; 0x39
 800504e:	d108      	bne.n	8005062 <_dtoa_r+0x71a>
 8005050:	9a00      	ldr	r2, [sp, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d1f7      	bne.n	8005046 <_dtoa_r+0x6fe>
 8005056:	9a07      	ldr	r2, [sp, #28]
 8005058:	9900      	ldr	r1, [sp, #0]
 800505a:	3201      	adds	r2, #1
 800505c:	9207      	str	r2, [sp, #28]
 800505e:	2230      	movs	r2, #48	; 0x30
 8005060:	700a      	strb	r2, [r1, #0]
 8005062:	781a      	ldrb	r2, [r3, #0]
 8005064:	3201      	adds	r2, #1
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e78c      	b.n	8004f84 <_dtoa_r+0x63c>
 800506a:	4b7f      	ldr	r3, [pc, #508]	; (8005268 <_dtoa_r+0x920>)
 800506c:	2200      	movs	r2, #0
 800506e:	f7fb fae3 	bl	8000638 <__aeabi_dmul>
 8005072:	2200      	movs	r2, #0
 8005074:	2300      	movs	r3, #0
 8005076:	4606      	mov	r6, r0
 8005078:	460f      	mov	r7, r1
 800507a:	f7fb fd45 	bl	8000b08 <__aeabi_dcmpeq>
 800507e:	2800      	cmp	r0, #0
 8005080:	d09b      	beq.n	8004fba <_dtoa_r+0x672>
 8005082:	e7cd      	b.n	8005020 <_dtoa_r+0x6d8>
 8005084:	9a08      	ldr	r2, [sp, #32]
 8005086:	2a00      	cmp	r2, #0
 8005088:	f000 80c4 	beq.w	8005214 <_dtoa_r+0x8cc>
 800508c:	9a05      	ldr	r2, [sp, #20]
 800508e:	2a01      	cmp	r2, #1
 8005090:	f300 80a8 	bgt.w	80051e4 <_dtoa_r+0x89c>
 8005094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005096:	2a00      	cmp	r2, #0
 8005098:	f000 80a0 	beq.w	80051dc <_dtoa_r+0x894>
 800509c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050a0:	9e06      	ldr	r6, [sp, #24]
 80050a2:	4645      	mov	r5, r8
 80050a4:	9a04      	ldr	r2, [sp, #16]
 80050a6:	2101      	movs	r1, #1
 80050a8:	441a      	add	r2, r3
 80050aa:	4620      	mov	r0, r4
 80050ac:	4498      	add	r8, r3
 80050ae:	9204      	str	r2, [sp, #16]
 80050b0:	f000 fb4c 	bl	800574c <__i2b>
 80050b4:	4607      	mov	r7, r0
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	dd0b      	ble.n	80050d2 <_dtoa_r+0x78a>
 80050ba:	9b04      	ldr	r3, [sp, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dd08      	ble.n	80050d2 <_dtoa_r+0x78a>
 80050c0:	42ab      	cmp	r3, r5
 80050c2:	9a04      	ldr	r2, [sp, #16]
 80050c4:	bfa8      	it	ge
 80050c6:	462b      	movge	r3, r5
 80050c8:	eba8 0803 	sub.w	r8, r8, r3
 80050cc:	1aed      	subs	r5, r5, r3
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	9304      	str	r3, [sp, #16]
 80050d2:	9b06      	ldr	r3, [sp, #24]
 80050d4:	b1fb      	cbz	r3, 8005116 <_dtoa_r+0x7ce>
 80050d6:	9b08      	ldr	r3, [sp, #32]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 809f 	beq.w	800521c <_dtoa_r+0x8d4>
 80050de:	2e00      	cmp	r6, #0
 80050e0:	dd11      	ble.n	8005106 <_dtoa_r+0x7be>
 80050e2:	4639      	mov	r1, r7
 80050e4:	4632      	mov	r2, r6
 80050e6:	4620      	mov	r0, r4
 80050e8:	f000 fbec 	bl	80058c4 <__pow5mult>
 80050ec:	465a      	mov	r2, fp
 80050ee:	4601      	mov	r1, r0
 80050f0:	4607      	mov	r7, r0
 80050f2:	4620      	mov	r0, r4
 80050f4:	f000 fb40 	bl	8005778 <__multiply>
 80050f8:	4659      	mov	r1, fp
 80050fa:	9007      	str	r0, [sp, #28]
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 fa69 	bl	80055d4 <_Bfree>
 8005102:	9b07      	ldr	r3, [sp, #28]
 8005104:	469b      	mov	fp, r3
 8005106:	9b06      	ldr	r3, [sp, #24]
 8005108:	1b9a      	subs	r2, r3, r6
 800510a:	d004      	beq.n	8005116 <_dtoa_r+0x7ce>
 800510c:	4659      	mov	r1, fp
 800510e:	4620      	mov	r0, r4
 8005110:	f000 fbd8 	bl	80058c4 <__pow5mult>
 8005114:	4683      	mov	fp, r0
 8005116:	2101      	movs	r1, #1
 8005118:	4620      	mov	r0, r4
 800511a:	f000 fb17 	bl	800574c <__i2b>
 800511e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005120:	2b00      	cmp	r3, #0
 8005122:	4606      	mov	r6, r0
 8005124:	dd7c      	ble.n	8005220 <_dtoa_r+0x8d8>
 8005126:	461a      	mov	r2, r3
 8005128:	4601      	mov	r1, r0
 800512a:	4620      	mov	r0, r4
 800512c:	f000 fbca 	bl	80058c4 <__pow5mult>
 8005130:	9b05      	ldr	r3, [sp, #20]
 8005132:	2b01      	cmp	r3, #1
 8005134:	4606      	mov	r6, r0
 8005136:	dd76      	ble.n	8005226 <_dtoa_r+0x8de>
 8005138:	2300      	movs	r3, #0
 800513a:	9306      	str	r3, [sp, #24]
 800513c:	6933      	ldr	r3, [r6, #16]
 800513e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005142:	6918      	ldr	r0, [r3, #16]
 8005144:	f000 fab2 	bl	80056ac <__hi0bits>
 8005148:	f1c0 0020 	rsb	r0, r0, #32
 800514c:	9b04      	ldr	r3, [sp, #16]
 800514e:	4418      	add	r0, r3
 8005150:	f010 001f 	ands.w	r0, r0, #31
 8005154:	f000 8086 	beq.w	8005264 <_dtoa_r+0x91c>
 8005158:	f1c0 0320 	rsb	r3, r0, #32
 800515c:	2b04      	cmp	r3, #4
 800515e:	dd7f      	ble.n	8005260 <_dtoa_r+0x918>
 8005160:	f1c0 001c 	rsb	r0, r0, #28
 8005164:	9b04      	ldr	r3, [sp, #16]
 8005166:	4403      	add	r3, r0
 8005168:	4480      	add	r8, r0
 800516a:	4405      	add	r5, r0
 800516c:	9304      	str	r3, [sp, #16]
 800516e:	f1b8 0f00 	cmp.w	r8, #0
 8005172:	dd05      	ble.n	8005180 <_dtoa_r+0x838>
 8005174:	4659      	mov	r1, fp
 8005176:	4642      	mov	r2, r8
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fbfd 	bl	8005978 <__lshift>
 800517e:	4683      	mov	fp, r0
 8005180:	9b04      	ldr	r3, [sp, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	dd05      	ble.n	8005192 <_dtoa_r+0x84a>
 8005186:	4631      	mov	r1, r6
 8005188:	461a      	mov	r2, r3
 800518a:	4620      	mov	r0, r4
 800518c:	f000 fbf4 	bl	8005978 <__lshift>
 8005190:	4606      	mov	r6, r0
 8005192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005194:	2b00      	cmp	r3, #0
 8005196:	d069      	beq.n	800526c <_dtoa_r+0x924>
 8005198:	4631      	mov	r1, r6
 800519a:	4658      	mov	r0, fp
 800519c:	f000 fc58 	bl	8005a50 <__mcmp>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	da63      	bge.n	800526c <_dtoa_r+0x924>
 80051a4:	2300      	movs	r3, #0
 80051a6:	4659      	mov	r1, fp
 80051a8:	220a      	movs	r2, #10
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 fa34 	bl	8005618 <__multadd>
 80051b0:	9b08      	ldr	r3, [sp, #32]
 80051b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80051b6:	4683      	mov	fp, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 818f 	beq.w	80054dc <_dtoa_r+0xb94>
 80051be:	4639      	mov	r1, r7
 80051c0:	2300      	movs	r3, #0
 80051c2:	220a      	movs	r2, #10
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 fa27 	bl	8005618 <__multadd>
 80051ca:	f1b9 0f00 	cmp.w	r9, #0
 80051ce:	4607      	mov	r7, r0
 80051d0:	f300 808e 	bgt.w	80052f0 <_dtoa_r+0x9a8>
 80051d4:	9b05      	ldr	r3, [sp, #20]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	dc50      	bgt.n	800527c <_dtoa_r+0x934>
 80051da:	e089      	b.n	80052f0 <_dtoa_r+0x9a8>
 80051dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051e2:	e75d      	b.n	80050a0 <_dtoa_r+0x758>
 80051e4:	9b01      	ldr	r3, [sp, #4]
 80051e6:	1e5e      	subs	r6, r3, #1
 80051e8:	9b06      	ldr	r3, [sp, #24]
 80051ea:	42b3      	cmp	r3, r6
 80051ec:	bfbf      	itttt	lt
 80051ee:	9b06      	ldrlt	r3, [sp, #24]
 80051f0:	9606      	strlt	r6, [sp, #24]
 80051f2:	1af2      	sublt	r2, r6, r3
 80051f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80051f6:	bfb6      	itet	lt
 80051f8:	189b      	addlt	r3, r3, r2
 80051fa:	1b9e      	subge	r6, r3, r6
 80051fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	bfb8      	it	lt
 8005202:	2600      	movlt	r6, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	bfb5      	itete	lt
 8005208:	eba8 0503 	sublt.w	r5, r8, r3
 800520c:	9b01      	ldrge	r3, [sp, #4]
 800520e:	2300      	movlt	r3, #0
 8005210:	4645      	movge	r5, r8
 8005212:	e747      	b.n	80050a4 <_dtoa_r+0x75c>
 8005214:	9e06      	ldr	r6, [sp, #24]
 8005216:	9f08      	ldr	r7, [sp, #32]
 8005218:	4645      	mov	r5, r8
 800521a:	e74c      	b.n	80050b6 <_dtoa_r+0x76e>
 800521c:	9a06      	ldr	r2, [sp, #24]
 800521e:	e775      	b.n	800510c <_dtoa_r+0x7c4>
 8005220:	9b05      	ldr	r3, [sp, #20]
 8005222:	2b01      	cmp	r3, #1
 8005224:	dc18      	bgt.n	8005258 <_dtoa_r+0x910>
 8005226:	9b02      	ldr	r3, [sp, #8]
 8005228:	b9b3      	cbnz	r3, 8005258 <_dtoa_r+0x910>
 800522a:	9b03      	ldr	r3, [sp, #12]
 800522c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005230:	b9a3      	cbnz	r3, 800525c <_dtoa_r+0x914>
 8005232:	9b03      	ldr	r3, [sp, #12]
 8005234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005238:	0d1b      	lsrs	r3, r3, #20
 800523a:	051b      	lsls	r3, r3, #20
 800523c:	b12b      	cbz	r3, 800524a <_dtoa_r+0x902>
 800523e:	9b04      	ldr	r3, [sp, #16]
 8005240:	3301      	adds	r3, #1
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	f108 0801 	add.w	r8, r8, #1
 8005248:	2301      	movs	r3, #1
 800524a:	9306      	str	r3, [sp, #24]
 800524c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800524e:	2b00      	cmp	r3, #0
 8005250:	f47f af74 	bne.w	800513c <_dtoa_r+0x7f4>
 8005254:	2001      	movs	r0, #1
 8005256:	e779      	b.n	800514c <_dtoa_r+0x804>
 8005258:	2300      	movs	r3, #0
 800525a:	e7f6      	b.n	800524a <_dtoa_r+0x902>
 800525c:	9b02      	ldr	r3, [sp, #8]
 800525e:	e7f4      	b.n	800524a <_dtoa_r+0x902>
 8005260:	d085      	beq.n	800516e <_dtoa_r+0x826>
 8005262:	4618      	mov	r0, r3
 8005264:	301c      	adds	r0, #28
 8005266:	e77d      	b.n	8005164 <_dtoa_r+0x81c>
 8005268:	40240000 	.word	0x40240000
 800526c:	9b01      	ldr	r3, [sp, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	dc38      	bgt.n	80052e4 <_dtoa_r+0x99c>
 8005272:	9b05      	ldr	r3, [sp, #20]
 8005274:	2b02      	cmp	r3, #2
 8005276:	dd35      	ble.n	80052e4 <_dtoa_r+0x99c>
 8005278:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800527c:	f1b9 0f00 	cmp.w	r9, #0
 8005280:	d10d      	bne.n	800529e <_dtoa_r+0x956>
 8005282:	4631      	mov	r1, r6
 8005284:	464b      	mov	r3, r9
 8005286:	2205      	movs	r2, #5
 8005288:	4620      	mov	r0, r4
 800528a:	f000 f9c5 	bl	8005618 <__multadd>
 800528e:	4601      	mov	r1, r0
 8005290:	4606      	mov	r6, r0
 8005292:	4658      	mov	r0, fp
 8005294:	f000 fbdc 	bl	8005a50 <__mcmp>
 8005298:	2800      	cmp	r0, #0
 800529a:	f73f adbd 	bgt.w	8004e18 <_dtoa_r+0x4d0>
 800529e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a0:	9d00      	ldr	r5, [sp, #0]
 80052a2:	ea6f 0a03 	mvn.w	sl, r3
 80052a6:	f04f 0800 	mov.w	r8, #0
 80052aa:	4631      	mov	r1, r6
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 f991 	bl	80055d4 <_Bfree>
 80052b2:	2f00      	cmp	r7, #0
 80052b4:	f43f aeb4 	beq.w	8005020 <_dtoa_r+0x6d8>
 80052b8:	f1b8 0f00 	cmp.w	r8, #0
 80052bc:	d005      	beq.n	80052ca <_dtoa_r+0x982>
 80052be:	45b8      	cmp	r8, r7
 80052c0:	d003      	beq.n	80052ca <_dtoa_r+0x982>
 80052c2:	4641      	mov	r1, r8
 80052c4:	4620      	mov	r0, r4
 80052c6:	f000 f985 	bl	80055d4 <_Bfree>
 80052ca:	4639      	mov	r1, r7
 80052cc:	4620      	mov	r0, r4
 80052ce:	f000 f981 	bl	80055d4 <_Bfree>
 80052d2:	e6a5      	b.n	8005020 <_dtoa_r+0x6d8>
 80052d4:	2600      	movs	r6, #0
 80052d6:	4637      	mov	r7, r6
 80052d8:	e7e1      	b.n	800529e <_dtoa_r+0x956>
 80052da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80052dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80052e0:	4637      	mov	r7, r6
 80052e2:	e599      	b.n	8004e18 <_dtoa_r+0x4d0>
 80052e4:	9b08      	ldr	r3, [sp, #32]
 80052e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80fd 	beq.w	80054ea <_dtoa_r+0xba2>
 80052f0:	2d00      	cmp	r5, #0
 80052f2:	dd05      	ble.n	8005300 <_dtoa_r+0x9b8>
 80052f4:	4639      	mov	r1, r7
 80052f6:	462a      	mov	r2, r5
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fb3d 	bl	8005978 <__lshift>
 80052fe:	4607      	mov	r7, r0
 8005300:	9b06      	ldr	r3, [sp, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d05c      	beq.n	80053c0 <_dtoa_r+0xa78>
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4620      	mov	r0, r4
 800530a:	f000 f923 	bl	8005554 <_Balloc>
 800530e:	4605      	mov	r5, r0
 8005310:	b928      	cbnz	r0, 800531e <_dtoa_r+0x9d6>
 8005312:	4b80      	ldr	r3, [pc, #512]	; (8005514 <_dtoa_r+0xbcc>)
 8005314:	4602      	mov	r2, r0
 8005316:	f240 21ea 	movw	r1, #746	; 0x2ea
 800531a:	f7ff bb2e 	b.w	800497a <_dtoa_r+0x32>
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	3202      	adds	r2, #2
 8005322:	0092      	lsls	r2, r2, #2
 8005324:	f107 010c 	add.w	r1, r7, #12
 8005328:	300c      	adds	r0, #12
 800532a:	f000 f905 	bl	8005538 <memcpy>
 800532e:	2201      	movs	r2, #1
 8005330:	4629      	mov	r1, r5
 8005332:	4620      	mov	r0, r4
 8005334:	f000 fb20 	bl	8005978 <__lshift>
 8005338:	9b00      	ldr	r3, [sp, #0]
 800533a:	3301      	adds	r3, #1
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	9b00      	ldr	r3, [sp, #0]
 8005340:	444b      	add	r3, r9
 8005342:	9307      	str	r3, [sp, #28]
 8005344:	9b02      	ldr	r3, [sp, #8]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	46b8      	mov	r8, r7
 800534c:	9306      	str	r3, [sp, #24]
 800534e:	4607      	mov	r7, r0
 8005350:	9b01      	ldr	r3, [sp, #4]
 8005352:	4631      	mov	r1, r6
 8005354:	3b01      	subs	r3, #1
 8005356:	4658      	mov	r0, fp
 8005358:	9302      	str	r3, [sp, #8]
 800535a:	f7ff fa69 	bl	8004830 <quorem>
 800535e:	4603      	mov	r3, r0
 8005360:	3330      	adds	r3, #48	; 0x30
 8005362:	9004      	str	r0, [sp, #16]
 8005364:	4641      	mov	r1, r8
 8005366:	4658      	mov	r0, fp
 8005368:	9308      	str	r3, [sp, #32]
 800536a:	f000 fb71 	bl	8005a50 <__mcmp>
 800536e:	463a      	mov	r2, r7
 8005370:	4681      	mov	r9, r0
 8005372:	4631      	mov	r1, r6
 8005374:	4620      	mov	r0, r4
 8005376:	f000 fb87 	bl	8005a88 <__mdiff>
 800537a:	68c2      	ldr	r2, [r0, #12]
 800537c:	9b08      	ldr	r3, [sp, #32]
 800537e:	4605      	mov	r5, r0
 8005380:	bb02      	cbnz	r2, 80053c4 <_dtoa_r+0xa7c>
 8005382:	4601      	mov	r1, r0
 8005384:	4658      	mov	r0, fp
 8005386:	f000 fb63 	bl	8005a50 <__mcmp>
 800538a:	9b08      	ldr	r3, [sp, #32]
 800538c:	4602      	mov	r2, r0
 800538e:	4629      	mov	r1, r5
 8005390:	4620      	mov	r0, r4
 8005392:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005396:	f000 f91d 	bl	80055d4 <_Bfree>
 800539a:	9b05      	ldr	r3, [sp, #20]
 800539c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800539e:	9d01      	ldr	r5, [sp, #4]
 80053a0:	ea43 0102 	orr.w	r1, r3, r2
 80053a4:	9b06      	ldr	r3, [sp, #24]
 80053a6:	430b      	orrs	r3, r1
 80053a8:	9b08      	ldr	r3, [sp, #32]
 80053aa:	d10d      	bne.n	80053c8 <_dtoa_r+0xa80>
 80053ac:	2b39      	cmp	r3, #57	; 0x39
 80053ae:	d029      	beq.n	8005404 <_dtoa_r+0xabc>
 80053b0:	f1b9 0f00 	cmp.w	r9, #0
 80053b4:	dd01      	ble.n	80053ba <_dtoa_r+0xa72>
 80053b6:	9b04      	ldr	r3, [sp, #16]
 80053b8:	3331      	adds	r3, #49	; 0x31
 80053ba:	9a02      	ldr	r2, [sp, #8]
 80053bc:	7013      	strb	r3, [r2, #0]
 80053be:	e774      	b.n	80052aa <_dtoa_r+0x962>
 80053c0:	4638      	mov	r0, r7
 80053c2:	e7b9      	b.n	8005338 <_dtoa_r+0x9f0>
 80053c4:	2201      	movs	r2, #1
 80053c6:	e7e2      	b.n	800538e <_dtoa_r+0xa46>
 80053c8:	f1b9 0f00 	cmp.w	r9, #0
 80053cc:	db06      	blt.n	80053dc <_dtoa_r+0xa94>
 80053ce:	9905      	ldr	r1, [sp, #20]
 80053d0:	ea41 0909 	orr.w	r9, r1, r9
 80053d4:	9906      	ldr	r1, [sp, #24]
 80053d6:	ea59 0101 	orrs.w	r1, r9, r1
 80053da:	d120      	bne.n	800541e <_dtoa_r+0xad6>
 80053dc:	2a00      	cmp	r2, #0
 80053de:	ddec      	ble.n	80053ba <_dtoa_r+0xa72>
 80053e0:	4659      	mov	r1, fp
 80053e2:	2201      	movs	r2, #1
 80053e4:	4620      	mov	r0, r4
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	f000 fac6 	bl	8005978 <__lshift>
 80053ec:	4631      	mov	r1, r6
 80053ee:	4683      	mov	fp, r0
 80053f0:	f000 fb2e 	bl	8005a50 <__mcmp>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	9b01      	ldr	r3, [sp, #4]
 80053f8:	dc02      	bgt.n	8005400 <_dtoa_r+0xab8>
 80053fa:	d1de      	bne.n	80053ba <_dtoa_r+0xa72>
 80053fc:	07da      	lsls	r2, r3, #31
 80053fe:	d5dc      	bpl.n	80053ba <_dtoa_r+0xa72>
 8005400:	2b39      	cmp	r3, #57	; 0x39
 8005402:	d1d8      	bne.n	80053b6 <_dtoa_r+0xa6e>
 8005404:	9a02      	ldr	r2, [sp, #8]
 8005406:	2339      	movs	r3, #57	; 0x39
 8005408:	7013      	strb	r3, [r2, #0]
 800540a:	462b      	mov	r3, r5
 800540c:	461d      	mov	r5, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005414:	2a39      	cmp	r2, #57	; 0x39
 8005416:	d050      	beq.n	80054ba <_dtoa_r+0xb72>
 8005418:	3201      	adds	r2, #1
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e745      	b.n	80052aa <_dtoa_r+0x962>
 800541e:	2a00      	cmp	r2, #0
 8005420:	dd03      	ble.n	800542a <_dtoa_r+0xae2>
 8005422:	2b39      	cmp	r3, #57	; 0x39
 8005424:	d0ee      	beq.n	8005404 <_dtoa_r+0xabc>
 8005426:	3301      	adds	r3, #1
 8005428:	e7c7      	b.n	80053ba <_dtoa_r+0xa72>
 800542a:	9a01      	ldr	r2, [sp, #4]
 800542c:	9907      	ldr	r1, [sp, #28]
 800542e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005432:	428a      	cmp	r2, r1
 8005434:	d02a      	beq.n	800548c <_dtoa_r+0xb44>
 8005436:	4659      	mov	r1, fp
 8005438:	2300      	movs	r3, #0
 800543a:	220a      	movs	r2, #10
 800543c:	4620      	mov	r0, r4
 800543e:	f000 f8eb 	bl	8005618 <__multadd>
 8005442:	45b8      	cmp	r8, r7
 8005444:	4683      	mov	fp, r0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	f04f 020a 	mov.w	r2, #10
 800544e:	4641      	mov	r1, r8
 8005450:	4620      	mov	r0, r4
 8005452:	d107      	bne.n	8005464 <_dtoa_r+0xb1c>
 8005454:	f000 f8e0 	bl	8005618 <__multadd>
 8005458:	4680      	mov	r8, r0
 800545a:	4607      	mov	r7, r0
 800545c:	9b01      	ldr	r3, [sp, #4]
 800545e:	3301      	adds	r3, #1
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	e775      	b.n	8005350 <_dtoa_r+0xa08>
 8005464:	f000 f8d8 	bl	8005618 <__multadd>
 8005468:	4639      	mov	r1, r7
 800546a:	4680      	mov	r8, r0
 800546c:	2300      	movs	r3, #0
 800546e:	220a      	movs	r2, #10
 8005470:	4620      	mov	r0, r4
 8005472:	f000 f8d1 	bl	8005618 <__multadd>
 8005476:	4607      	mov	r7, r0
 8005478:	e7f0      	b.n	800545c <_dtoa_r+0xb14>
 800547a:	f1b9 0f00 	cmp.w	r9, #0
 800547e:	9a00      	ldr	r2, [sp, #0]
 8005480:	bfcc      	ite	gt
 8005482:	464d      	movgt	r5, r9
 8005484:	2501      	movle	r5, #1
 8005486:	4415      	add	r5, r2
 8005488:	f04f 0800 	mov.w	r8, #0
 800548c:	4659      	mov	r1, fp
 800548e:	2201      	movs	r2, #1
 8005490:	4620      	mov	r0, r4
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	f000 fa70 	bl	8005978 <__lshift>
 8005498:	4631      	mov	r1, r6
 800549a:	4683      	mov	fp, r0
 800549c:	f000 fad8 	bl	8005a50 <__mcmp>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	dcb2      	bgt.n	800540a <_dtoa_r+0xac2>
 80054a4:	d102      	bne.n	80054ac <_dtoa_r+0xb64>
 80054a6:	9b01      	ldr	r3, [sp, #4]
 80054a8:	07db      	lsls	r3, r3, #31
 80054aa:	d4ae      	bmi.n	800540a <_dtoa_r+0xac2>
 80054ac:	462b      	mov	r3, r5
 80054ae:	461d      	mov	r5, r3
 80054b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054b4:	2a30      	cmp	r2, #48	; 0x30
 80054b6:	d0fa      	beq.n	80054ae <_dtoa_r+0xb66>
 80054b8:	e6f7      	b.n	80052aa <_dtoa_r+0x962>
 80054ba:	9a00      	ldr	r2, [sp, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d1a5      	bne.n	800540c <_dtoa_r+0xac4>
 80054c0:	f10a 0a01 	add.w	sl, sl, #1
 80054c4:	2331      	movs	r3, #49	; 0x31
 80054c6:	e779      	b.n	80053bc <_dtoa_r+0xa74>
 80054c8:	4b13      	ldr	r3, [pc, #76]	; (8005518 <_dtoa_r+0xbd0>)
 80054ca:	f7ff baaf 	b.w	8004a2c <_dtoa_r+0xe4>
 80054ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f47f aa86 	bne.w	80049e2 <_dtoa_r+0x9a>
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <_dtoa_r+0xbd4>)
 80054d8:	f7ff baa8 	b.w	8004a2c <_dtoa_r+0xe4>
 80054dc:	f1b9 0f00 	cmp.w	r9, #0
 80054e0:	dc03      	bgt.n	80054ea <_dtoa_r+0xba2>
 80054e2:	9b05      	ldr	r3, [sp, #20]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	f73f aec9 	bgt.w	800527c <_dtoa_r+0x934>
 80054ea:	9d00      	ldr	r5, [sp, #0]
 80054ec:	4631      	mov	r1, r6
 80054ee:	4658      	mov	r0, fp
 80054f0:	f7ff f99e 	bl	8004830 <quorem>
 80054f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80054f8:	f805 3b01 	strb.w	r3, [r5], #1
 80054fc:	9a00      	ldr	r2, [sp, #0]
 80054fe:	1aaa      	subs	r2, r5, r2
 8005500:	4591      	cmp	r9, r2
 8005502:	ddba      	ble.n	800547a <_dtoa_r+0xb32>
 8005504:	4659      	mov	r1, fp
 8005506:	2300      	movs	r3, #0
 8005508:	220a      	movs	r2, #10
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f884 	bl	8005618 <__multadd>
 8005510:	4683      	mov	fp, r0
 8005512:	e7eb      	b.n	80054ec <_dtoa_r+0xba4>
 8005514:	08006d53 	.word	0x08006d53
 8005518:	08006cac 	.word	0x08006cac
 800551c:	08006cd0 	.word	0x08006cd0

08005520 <_localeconv_r>:
 8005520:	4800      	ldr	r0, [pc, #0]	; (8005524 <_localeconv_r+0x4>)
 8005522:	4770      	bx	lr
 8005524:	20000160 	.word	0x20000160

08005528 <malloc>:
 8005528:	4b02      	ldr	r3, [pc, #8]	; (8005534 <malloc+0xc>)
 800552a:	4601      	mov	r1, r0
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	f000 bbef 	b.w	8005d10 <_malloc_r>
 8005532:	bf00      	nop
 8005534:	2000000c 	.word	0x2000000c

08005538 <memcpy>:
 8005538:	440a      	add	r2, r1
 800553a:	4291      	cmp	r1, r2
 800553c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005540:	d100      	bne.n	8005544 <memcpy+0xc>
 8005542:	4770      	bx	lr
 8005544:	b510      	push	{r4, lr}
 8005546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800554e:	4291      	cmp	r1, r2
 8005550:	d1f9      	bne.n	8005546 <memcpy+0xe>
 8005552:	bd10      	pop	{r4, pc}

08005554 <_Balloc>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005558:	4604      	mov	r4, r0
 800555a:	460d      	mov	r5, r1
 800555c:	b976      	cbnz	r6, 800557c <_Balloc+0x28>
 800555e:	2010      	movs	r0, #16
 8005560:	f7ff ffe2 	bl	8005528 <malloc>
 8005564:	4602      	mov	r2, r0
 8005566:	6260      	str	r0, [r4, #36]	; 0x24
 8005568:	b920      	cbnz	r0, 8005574 <_Balloc+0x20>
 800556a:	4b18      	ldr	r3, [pc, #96]	; (80055cc <_Balloc+0x78>)
 800556c:	4818      	ldr	r0, [pc, #96]	; (80055d0 <_Balloc+0x7c>)
 800556e:	2166      	movs	r1, #102	; 0x66
 8005570:	f000 fd94 	bl	800609c <__assert_func>
 8005574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005578:	6006      	str	r6, [r0, #0]
 800557a:	60c6      	str	r6, [r0, #12]
 800557c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800557e:	68f3      	ldr	r3, [r6, #12]
 8005580:	b183      	cbz	r3, 80055a4 <_Balloc+0x50>
 8005582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800558a:	b9b8      	cbnz	r0, 80055bc <_Balloc+0x68>
 800558c:	2101      	movs	r1, #1
 800558e:	fa01 f605 	lsl.w	r6, r1, r5
 8005592:	1d72      	adds	r2, r6, #5
 8005594:	0092      	lsls	r2, r2, #2
 8005596:	4620      	mov	r0, r4
 8005598:	f000 fb5a 	bl	8005c50 <_calloc_r>
 800559c:	b160      	cbz	r0, 80055b8 <_Balloc+0x64>
 800559e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055a2:	e00e      	b.n	80055c2 <_Balloc+0x6e>
 80055a4:	2221      	movs	r2, #33	; 0x21
 80055a6:	2104      	movs	r1, #4
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 fb51 	bl	8005c50 <_calloc_r>
 80055ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b0:	60f0      	str	r0, [r6, #12]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e4      	bne.n	8005582 <_Balloc+0x2e>
 80055b8:	2000      	movs	r0, #0
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	6802      	ldr	r2, [r0, #0]
 80055be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055c2:	2300      	movs	r3, #0
 80055c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055c8:	e7f7      	b.n	80055ba <_Balloc+0x66>
 80055ca:	bf00      	nop
 80055cc:	08006cdd 	.word	0x08006cdd
 80055d0:	08006d64 	.word	0x08006d64

080055d4 <_Bfree>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055d8:	4605      	mov	r5, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	b976      	cbnz	r6, 80055fc <_Bfree+0x28>
 80055de:	2010      	movs	r0, #16
 80055e0:	f7ff ffa2 	bl	8005528 <malloc>
 80055e4:	4602      	mov	r2, r0
 80055e6:	6268      	str	r0, [r5, #36]	; 0x24
 80055e8:	b920      	cbnz	r0, 80055f4 <_Bfree+0x20>
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <_Bfree+0x3c>)
 80055ec:	4809      	ldr	r0, [pc, #36]	; (8005614 <_Bfree+0x40>)
 80055ee:	218a      	movs	r1, #138	; 0x8a
 80055f0:	f000 fd54 	bl	800609c <__assert_func>
 80055f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055f8:	6006      	str	r6, [r0, #0]
 80055fa:	60c6      	str	r6, [r0, #12]
 80055fc:	b13c      	cbz	r4, 800560e <_Bfree+0x3a>
 80055fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005600:	6862      	ldr	r2, [r4, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005608:	6021      	str	r1, [r4, #0]
 800560a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	08006cdd 	.word	0x08006cdd
 8005614:	08006d64 	.word	0x08006d64

08005618 <__multadd>:
 8005618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561c:	690e      	ldr	r6, [r1, #16]
 800561e:	4607      	mov	r7, r0
 8005620:	4698      	mov	r8, r3
 8005622:	460c      	mov	r4, r1
 8005624:	f101 0014 	add.w	r0, r1, #20
 8005628:	2300      	movs	r3, #0
 800562a:	6805      	ldr	r5, [r0, #0]
 800562c:	b2a9      	uxth	r1, r5
 800562e:	fb02 8101 	mla	r1, r2, r1, r8
 8005632:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005636:	0c2d      	lsrs	r5, r5, #16
 8005638:	fb02 c505 	mla	r5, r2, r5, ip
 800563c:	b289      	uxth	r1, r1
 800563e:	3301      	adds	r3, #1
 8005640:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005644:	429e      	cmp	r6, r3
 8005646:	f840 1b04 	str.w	r1, [r0], #4
 800564a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800564e:	dcec      	bgt.n	800562a <__multadd+0x12>
 8005650:	f1b8 0f00 	cmp.w	r8, #0
 8005654:	d022      	beq.n	800569c <__multadd+0x84>
 8005656:	68a3      	ldr	r3, [r4, #8]
 8005658:	42b3      	cmp	r3, r6
 800565a:	dc19      	bgt.n	8005690 <__multadd+0x78>
 800565c:	6861      	ldr	r1, [r4, #4]
 800565e:	4638      	mov	r0, r7
 8005660:	3101      	adds	r1, #1
 8005662:	f7ff ff77 	bl	8005554 <_Balloc>
 8005666:	4605      	mov	r5, r0
 8005668:	b928      	cbnz	r0, 8005676 <__multadd+0x5e>
 800566a:	4602      	mov	r2, r0
 800566c:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <__multadd+0x8c>)
 800566e:	480e      	ldr	r0, [pc, #56]	; (80056a8 <__multadd+0x90>)
 8005670:	21b5      	movs	r1, #181	; 0xb5
 8005672:	f000 fd13 	bl	800609c <__assert_func>
 8005676:	6922      	ldr	r2, [r4, #16]
 8005678:	3202      	adds	r2, #2
 800567a:	f104 010c 	add.w	r1, r4, #12
 800567e:	0092      	lsls	r2, r2, #2
 8005680:	300c      	adds	r0, #12
 8005682:	f7ff ff59 	bl	8005538 <memcpy>
 8005686:	4621      	mov	r1, r4
 8005688:	4638      	mov	r0, r7
 800568a:	f7ff ffa3 	bl	80055d4 <_Bfree>
 800568e:	462c      	mov	r4, r5
 8005690:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005694:	3601      	adds	r6, #1
 8005696:	f8c3 8014 	str.w	r8, [r3, #20]
 800569a:	6126      	str	r6, [r4, #16]
 800569c:	4620      	mov	r0, r4
 800569e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a2:	bf00      	nop
 80056a4:	08006d53 	.word	0x08006d53
 80056a8:	08006d64 	.word	0x08006d64

080056ac <__hi0bits>:
 80056ac:	0c03      	lsrs	r3, r0, #16
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	b9d3      	cbnz	r3, 80056e8 <__hi0bits+0x3c>
 80056b2:	0400      	lsls	r0, r0, #16
 80056b4:	2310      	movs	r3, #16
 80056b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80056ba:	bf04      	itt	eq
 80056bc:	0200      	lsleq	r0, r0, #8
 80056be:	3308      	addeq	r3, #8
 80056c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80056c4:	bf04      	itt	eq
 80056c6:	0100      	lsleq	r0, r0, #4
 80056c8:	3304      	addeq	r3, #4
 80056ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80056ce:	bf04      	itt	eq
 80056d0:	0080      	lsleq	r0, r0, #2
 80056d2:	3302      	addeq	r3, #2
 80056d4:	2800      	cmp	r0, #0
 80056d6:	db05      	blt.n	80056e4 <__hi0bits+0x38>
 80056d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80056dc:	f103 0301 	add.w	r3, r3, #1
 80056e0:	bf08      	it	eq
 80056e2:	2320      	moveq	r3, #32
 80056e4:	4618      	mov	r0, r3
 80056e6:	4770      	bx	lr
 80056e8:	2300      	movs	r3, #0
 80056ea:	e7e4      	b.n	80056b6 <__hi0bits+0xa>

080056ec <__lo0bits>:
 80056ec:	6803      	ldr	r3, [r0, #0]
 80056ee:	f013 0207 	ands.w	r2, r3, #7
 80056f2:	4601      	mov	r1, r0
 80056f4:	d00b      	beq.n	800570e <__lo0bits+0x22>
 80056f6:	07da      	lsls	r2, r3, #31
 80056f8:	d424      	bmi.n	8005744 <__lo0bits+0x58>
 80056fa:	0798      	lsls	r0, r3, #30
 80056fc:	bf49      	itett	mi
 80056fe:	085b      	lsrmi	r3, r3, #1
 8005700:	089b      	lsrpl	r3, r3, #2
 8005702:	2001      	movmi	r0, #1
 8005704:	600b      	strmi	r3, [r1, #0]
 8005706:	bf5c      	itt	pl
 8005708:	600b      	strpl	r3, [r1, #0]
 800570a:	2002      	movpl	r0, #2
 800570c:	4770      	bx	lr
 800570e:	b298      	uxth	r0, r3
 8005710:	b9b0      	cbnz	r0, 8005740 <__lo0bits+0x54>
 8005712:	0c1b      	lsrs	r3, r3, #16
 8005714:	2010      	movs	r0, #16
 8005716:	f013 0fff 	tst.w	r3, #255	; 0xff
 800571a:	bf04      	itt	eq
 800571c:	0a1b      	lsreq	r3, r3, #8
 800571e:	3008      	addeq	r0, #8
 8005720:	071a      	lsls	r2, r3, #28
 8005722:	bf04      	itt	eq
 8005724:	091b      	lsreq	r3, r3, #4
 8005726:	3004      	addeq	r0, #4
 8005728:	079a      	lsls	r2, r3, #30
 800572a:	bf04      	itt	eq
 800572c:	089b      	lsreq	r3, r3, #2
 800572e:	3002      	addeq	r0, #2
 8005730:	07da      	lsls	r2, r3, #31
 8005732:	d403      	bmi.n	800573c <__lo0bits+0x50>
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	f100 0001 	add.w	r0, r0, #1
 800573a:	d005      	beq.n	8005748 <__lo0bits+0x5c>
 800573c:	600b      	str	r3, [r1, #0]
 800573e:	4770      	bx	lr
 8005740:	4610      	mov	r0, r2
 8005742:	e7e8      	b.n	8005716 <__lo0bits+0x2a>
 8005744:	2000      	movs	r0, #0
 8005746:	4770      	bx	lr
 8005748:	2020      	movs	r0, #32
 800574a:	4770      	bx	lr

0800574c <__i2b>:
 800574c:	b510      	push	{r4, lr}
 800574e:	460c      	mov	r4, r1
 8005750:	2101      	movs	r1, #1
 8005752:	f7ff feff 	bl	8005554 <_Balloc>
 8005756:	4602      	mov	r2, r0
 8005758:	b928      	cbnz	r0, 8005766 <__i2b+0x1a>
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <__i2b+0x24>)
 800575c:	4805      	ldr	r0, [pc, #20]	; (8005774 <__i2b+0x28>)
 800575e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005762:	f000 fc9b 	bl	800609c <__assert_func>
 8005766:	2301      	movs	r3, #1
 8005768:	6144      	str	r4, [r0, #20]
 800576a:	6103      	str	r3, [r0, #16]
 800576c:	bd10      	pop	{r4, pc}
 800576e:	bf00      	nop
 8005770:	08006d53 	.word	0x08006d53
 8005774:	08006d64 	.word	0x08006d64

08005778 <__multiply>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	4614      	mov	r4, r2
 800577e:	690a      	ldr	r2, [r1, #16]
 8005780:	6923      	ldr	r3, [r4, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	bfb8      	it	lt
 8005786:	460b      	movlt	r3, r1
 8005788:	460d      	mov	r5, r1
 800578a:	bfbc      	itt	lt
 800578c:	4625      	movlt	r5, r4
 800578e:	461c      	movlt	r4, r3
 8005790:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005794:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005798:	68ab      	ldr	r3, [r5, #8]
 800579a:	6869      	ldr	r1, [r5, #4]
 800579c:	eb0a 0709 	add.w	r7, sl, r9
 80057a0:	42bb      	cmp	r3, r7
 80057a2:	b085      	sub	sp, #20
 80057a4:	bfb8      	it	lt
 80057a6:	3101      	addlt	r1, #1
 80057a8:	f7ff fed4 	bl	8005554 <_Balloc>
 80057ac:	b930      	cbnz	r0, 80057bc <__multiply+0x44>
 80057ae:	4602      	mov	r2, r0
 80057b0:	4b42      	ldr	r3, [pc, #264]	; (80058bc <__multiply+0x144>)
 80057b2:	4843      	ldr	r0, [pc, #268]	; (80058c0 <__multiply+0x148>)
 80057b4:	f240 115d 	movw	r1, #349	; 0x15d
 80057b8:	f000 fc70 	bl	800609c <__assert_func>
 80057bc:	f100 0614 	add.w	r6, r0, #20
 80057c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80057c4:	4633      	mov	r3, r6
 80057c6:	2200      	movs	r2, #0
 80057c8:	4543      	cmp	r3, r8
 80057ca:	d31e      	bcc.n	800580a <__multiply+0x92>
 80057cc:	f105 0c14 	add.w	ip, r5, #20
 80057d0:	f104 0314 	add.w	r3, r4, #20
 80057d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80057d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80057dc:	9202      	str	r2, [sp, #8]
 80057de:	ebac 0205 	sub.w	r2, ip, r5
 80057e2:	3a15      	subs	r2, #21
 80057e4:	f022 0203 	bic.w	r2, r2, #3
 80057e8:	3204      	adds	r2, #4
 80057ea:	f105 0115 	add.w	r1, r5, #21
 80057ee:	458c      	cmp	ip, r1
 80057f0:	bf38      	it	cc
 80057f2:	2204      	movcc	r2, #4
 80057f4:	9201      	str	r2, [sp, #4]
 80057f6:	9a02      	ldr	r2, [sp, #8]
 80057f8:	9303      	str	r3, [sp, #12]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d808      	bhi.n	8005810 <__multiply+0x98>
 80057fe:	2f00      	cmp	r7, #0
 8005800:	dc55      	bgt.n	80058ae <__multiply+0x136>
 8005802:	6107      	str	r7, [r0, #16]
 8005804:	b005      	add	sp, #20
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580a:	f843 2b04 	str.w	r2, [r3], #4
 800580e:	e7db      	b.n	80057c8 <__multiply+0x50>
 8005810:	f8b3 a000 	ldrh.w	sl, [r3]
 8005814:	f1ba 0f00 	cmp.w	sl, #0
 8005818:	d020      	beq.n	800585c <__multiply+0xe4>
 800581a:	f105 0e14 	add.w	lr, r5, #20
 800581e:	46b1      	mov	r9, r6
 8005820:	2200      	movs	r2, #0
 8005822:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005826:	f8d9 b000 	ldr.w	fp, [r9]
 800582a:	b2a1      	uxth	r1, r4
 800582c:	fa1f fb8b 	uxth.w	fp, fp
 8005830:	fb0a b101 	mla	r1, sl, r1, fp
 8005834:	4411      	add	r1, r2
 8005836:	f8d9 2000 	ldr.w	r2, [r9]
 800583a:	0c24      	lsrs	r4, r4, #16
 800583c:	0c12      	lsrs	r2, r2, #16
 800583e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005842:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005846:	b289      	uxth	r1, r1
 8005848:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800584c:	45f4      	cmp	ip, lr
 800584e:	f849 1b04 	str.w	r1, [r9], #4
 8005852:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005856:	d8e4      	bhi.n	8005822 <__multiply+0xaa>
 8005858:	9901      	ldr	r1, [sp, #4]
 800585a:	5072      	str	r2, [r6, r1]
 800585c:	9a03      	ldr	r2, [sp, #12]
 800585e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005862:	3304      	adds	r3, #4
 8005864:	f1b9 0f00 	cmp.w	r9, #0
 8005868:	d01f      	beq.n	80058aa <__multiply+0x132>
 800586a:	6834      	ldr	r4, [r6, #0]
 800586c:	f105 0114 	add.w	r1, r5, #20
 8005870:	46b6      	mov	lr, r6
 8005872:	f04f 0a00 	mov.w	sl, #0
 8005876:	880a      	ldrh	r2, [r1, #0]
 8005878:	f8be b002 	ldrh.w	fp, [lr, #2]
 800587c:	fb09 b202 	mla	r2, r9, r2, fp
 8005880:	4492      	add	sl, r2
 8005882:	b2a4      	uxth	r4, r4
 8005884:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005888:	f84e 4b04 	str.w	r4, [lr], #4
 800588c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005890:	f8be 2000 	ldrh.w	r2, [lr]
 8005894:	0c24      	lsrs	r4, r4, #16
 8005896:	fb09 2404 	mla	r4, r9, r4, r2
 800589a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800589e:	458c      	cmp	ip, r1
 80058a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80058a4:	d8e7      	bhi.n	8005876 <__multiply+0xfe>
 80058a6:	9a01      	ldr	r2, [sp, #4]
 80058a8:	50b4      	str	r4, [r6, r2]
 80058aa:	3604      	adds	r6, #4
 80058ac:	e7a3      	b.n	80057f6 <__multiply+0x7e>
 80058ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1a5      	bne.n	8005802 <__multiply+0x8a>
 80058b6:	3f01      	subs	r7, #1
 80058b8:	e7a1      	b.n	80057fe <__multiply+0x86>
 80058ba:	bf00      	nop
 80058bc:	08006d53 	.word	0x08006d53
 80058c0:	08006d64 	.word	0x08006d64

080058c4 <__pow5mult>:
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c8:	4615      	mov	r5, r2
 80058ca:	f012 0203 	ands.w	r2, r2, #3
 80058ce:	4606      	mov	r6, r0
 80058d0:	460f      	mov	r7, r1
 80058d2:	d007      	beq.n	80058e4 <__pow5mult+0x20>
 80058d4:	4c25      	ldr	r4, [pc, #148]	; (800596c <__pow5mult+0xa8>)
 80058d6:	3a01      	subs	r2, #1
 80058d8:	2300      	movs	r3, #0
 80058da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058de:	f7ff fe9b 	bl	8005618 <__multadd>
 80058e2:	4607      	mov	r7, r0
 80058e4:	10ad      	asrs	r5, r5, #2
 80058e6:	d03d      	beq.n	8005964 <__pow5mult+0xa0>
 80058e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80058ea:	b97c      	cbnz	r4, 800590c <__pow5mult+0x48>
 80058ec:	2010      	movs	r0, #16
 80058ee:	f7ff fe1b 	bl	8005528 <malloc>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6270      	str	r0, [r6, #36]	; 0x24
 80058f6:	b928      	cbnz	r0, 8005904 <__pow5mult+0x40>
 80058f8:	4b1d      	ldr	r3, [pc, #116]	; (8005970 <__pow5mult+0xac>)
 80058fa:	481e      	ldr	r0, [pc, #120]	; (8005974 <__pow5mult+0xb0>)
 80058fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005900:	f000 fbcc 	bl	800609c <__assert_func>
 8005904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005908:	6004      	str	r4, [r0, #0]
 800590a:	60c4      	str	r4, [r0, #12]
 800590c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005914:	b94c      	cbnz	r4, 800592a <__pow5mult+0x66>
 8005916:	f240 2171 	movw	r1, #625	; 0x271
 800591a:	4630      	mov	r0, r6
 800591c:	f7ff ff16 	bl	800574c <__i2b>
 8005920:	2300      	movs	r3, #0
 8005922:	f8c8 0008 	str.w	r0, [r8, #8]
 8005926:	4604      	mov	r4, r0
 8005928:	6003      	str	r3, [r0, #0]
 800592a:	f04f 0900 	mov.w	r9, #0
 800592e:	07eb      	lsls	r3, r5, #31
 8005930:	d50a      	bpl.n	8005948 <__pow5mult+0x84>
 8005932:	4639      	mov	r1, r7
 8005934:	4622      	mov	r2, r4
 8005936:	4630      	mov	r0, r6
 8005938:	f7ff ff1e 	bl	8005778 <__multiply>
 800593c:	4639      	mov	r1, r7
 800593e:	4680      	mov	r8, r0
 8005940:	4630      	mov	r0, r6
 8005942:	f7ff fe47 	bl	80055d4 <_Bfree>
 8005946:	4647      	mov	r7, r8
 8005948:	106d      	asrs	r5, r5, #1
 800594a:	d00b      	beq.n	8005964 <__pow5mult+0xa0>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	b938      	cbnz	r0, 8005960 <__pow5mult+0x9c>
 8005950:	4622      	mov	r2, r4
 8005952:	4621      	mov	r1, r4
 8005954:	4630      	mov	r0, r6
 8005956:	f7ff ff0f 	bl	8005778 <__multiply>
 800595a:	6020      	str	r0, [r4, #0]
 800595c:	f8c0 9000 	str.w	r9, [r0]
 8005960:	4604      	mov	r4, r0
 8005962:	e7e4      	b.n	800592e <__pow5mult+0x6a>
 8005964:	4638      	mov	r0, r7
 8005966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596a:	bf00      	nop
 800596c:	08006eb8 	.word	0x08006eb8
 8005970:	08006cdd 	.word	0x08006cdd
 8005974:	08006d64 	.word	0x08006d64

08005978 <__lshift>:
 8005978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	460c      	mov	r4, r1
 800597e:	6849      	ldr	r1, [r1, #4]
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005986:	68a3      	ldr	r3, [r4, #8]
 8005988:	4607      	mov	r7, r0
 800598a:	4691      	mov	r9, r2
 800598c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005990:	f108 0601 	add.w	r6, r8, #1
 8005994:	42b3      	cmp	r3, r6
 8005996:	db0b      	blt.n	80059b0 <__lshift+0x38>
 8005998:	4638      	mov	r0, r7
 800599a:	f7ff fddb 	bl	8005554 <_Balloc>
 800599e:	4605      	mov	r5, r0
 80059a0:	b948      	cbnz	r0, 80059b6 <__lshift+0x3e>
 80059a2:	4602      	mov	r2, r0
 80059a4:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <__lshift+0xd0>)
 80059a6:	4829      	ldr	r0, [pc, #164]	; (8005a4c <__lshift+0xd4>)
 80059a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80059ac:	f000 fb76 	bl	800609c <__assert_func>
 80059b0:	3101      	adds	r1, #1
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	e7ee      	b.n	8005994 <__lshift+0x1c>
 80059b6:	2300      	movs	r3, #0
 80059b8:	f100 0114 	add.w	r1, r0, #20
 80059bc:	f100 0210 	add.w	r2, r0, #16
 80059c0:	4618      	mov	r0, r3
 80059c2:	4553      	cmp	r3, sl
 80059c4:	db33      	blt.n	8005a2e <__lshift+0xb6>
 80059c6:	6920      	ldr	r0, [r4, #16]
 80059c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059cc:	f104 0314 	add.w	r3, r4, #20
 80059d0:	f019 091f 	ands.w	r9, r9, #31
 80059d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059dc:	d02b      	beq.n	8005a36 <__lshift+0xbe>
 80059de:	f1c9 0e20 	rsb	lr, r9, #32
 80059e2:	468a      	mov	sl, r1
 80059e4:	2200      	movs	r2, #0
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	fa00 f009 	lsl.w	r0, r0, r9
 80059ec:	4302      	orrs	r2, r0
 80059ee:	f84a 2b04 	str.w	r2, [sl], #4
 80059f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f6:	459c      	cmp	ip, r3
 80059f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80059fc:	d8f3      	bhi.n	80059e6 <__lshift+0x6e>
 80059fe:	ebac 0304 	sub.w	r3, ip, r4
 8005a02:	3b15      	subs	r3, #21
 8005a04:	f023 0303 	bic.w	r3, r3, #3
 8005a08:	3304      	adds	r3, #4
 8005a0a:	f104 0015 	add.w	r0, r4, #21
 8005a0e:	4584      	cmp	ip, r0
 8005a10:	bf38      	it	cc
 8005a12:	2304      	movcc	r3, #4
 8005a14:	50ca      	str	r2, [r1, r3]
 8005a16:	b10a      	cbz	r2, 8005a1c <__lshift+0xa4>
 8005a18:	f108 0602 	add.w	r6, r8, #2
 8005a1c:	3e01      	subs	r6, #1
 8005a1e:	4638      	mov	r0, r7
 8005a20:	612e      	str	r6, [r5, #16]
 8005a22:	4621      	mov	r1, r4
 8005a24:	f7ff fdd6 	bl	80055d4 <_Bfree>
 8005a28:	4628      	mov	r0, r5
 8005a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a32:	3301      	adds	r3, #1
 8005a34:	e7c5      	b.n	80059c2 <__lshift+0x4a>
 8005a36:	3904      	subs	r1, #4
 8005a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a40:	459c      	cmp	ip, r3
 8005a42:	d8f9      	bhi.n	8005a38 <__lshift+0xc0>
 8005a44:	e7ea      	b.n	8005a1c <__lshift+0xa4>
 8005a46:	bf00      	nop
 8005a48:	08006d53 	.word	0x08006d53
 8005a4c:	08006d64 	.word	0x08006d64

08005a50 <__mcmp>:
 8005a50:	b530      	push	{r4, r5, lr}
 8005a52:	6902      	ldr	r2, [r0, #16]
 8005a54:	690c      	ldr	r4, [r1, #16]
 8005a56:	1b12      	subs	r2, r2, r4
 8005a58:	d10e      	bne.n	8005a78 <__mcmp+0x28>
 8005a5a:	f100 0314 	add.w	r3, r0, #20
 8005a5e:	3114      	adds	r1, #20
 8005a60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005a64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005a68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005a6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005a70:	42a5      	cmp	r5, r4
 8005a72:	d003      	beq.n	8005a7c <__mcmp+0x2c>
 8005a74:	d305      	bcc.n	8005a82 <__mcmp+0x32>
 8005a76:	2201      	movs	r2, #1
 8005a78:	4610      	mov	r0, r2
 8005a7a:	bd30      	pop	{r4, r5, pc}
 8005a7c:	4283      	cmp	r3, r0
 8005a7e:	d3f3      	bcc.n	8005a68 <__mcmp+0x18>
 8005a80:	e7fa      	b.n	8005a78 <__mcmp+0x28>
 8005a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a86:	e7f7      	b.n	8005a78 <__mcmp+0x28>

08005a88 <__mdiff>:
 8005a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	4606      	mov	r6, r0
 8005a90:	4611      	mov	r1, r2
 8005a92:	4620      	mov	r0, r4
 8005a94:	4617      	mov	r7, r2
 8005a96:	f7ff ffdb 	bl	8005a50 <__mcmp>
 8005a9a:	1e05      	subs	r5, r0, #0
 8005a9c:	d110      	bne.n	8005ac0 <__mdiff+0x38>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff fd57 	bl	8005554 <_Balloc>
 8005aa6:	b930      	cbnz	r0, 8005ab6 <__mdiff+0x2e>
 8005aa8:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <__mdiff+0x108>)
 8005aaa:	4602      	mov	r2, r0
 8005aac:	f240 2132 	movw	r1, #562	; 0x232
 8005ab0:	4838      	ldr	r0, [pc, #224]	; (8005b94 <__mdiff+0x10c>)
 8005ab2:	f000 faf3 	bl	800609c <__assert_func>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005abc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac0:	bfa4      	itt	ge
 8005ac2:	463b      	movge	r3, r7
 8005ac4:	4627      	movge	r7, r4
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	bfa6      	itte	ge
 8005acc:	461c      	movge	r4, r3
 8005ace:	2500      	movge	r5, #0
 8005ad0:	2501      	movlt	r5, #1
 8005ad2:	f7ff fd3f 	bl	8005554 <_Balloc>
 8005ad6:	b920      	cbnz	r0, 8005ae2 <__mdiff+0x5a>
 8005ad8:	4b2d      	ldr	r3, [pc, #180]	; (8005b90 <__mdiff+0x108>)
 8005ada:	4602      	mov	r2, r0
 8005adc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ae0:	e7e6      	b.n	8005ab0 <__mdiff+0x28>
 8005ae2:	693e      	ldr	r6, [r7, #16]
 8005ae4:	60c5      	str	r5, [r0, #12]
 8005ae6:	6925      	ldr	r5, [r4, #16]
 8005ae8:	f107 0114 	add.w	r1, r7, #20
 8005aec:	f104 0914 	add.w	r9, r4, #20
 8005af0:	f100 0e14 	add.w	lr, r0, #20
 8005af4:	f107 0210 	add.w	r2, r7, #16
 8005af8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005afc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005b00:	46f2      	mov	sl, lr
 8005b02:	2700      	movs	r7, #0
 8005b04:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005b0c:	fa1f f883 	uxth.w	r8, r3
 8005b10:	fa17 f78b 	uxtah	r7, r7, fp
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	eba7 0808 	sub.w	r8, r7, r8
 8005b1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b22:	fa1f f888 	uxth.w	r8, r8
 8005b26:	141f      	asrs	r7, r3, #16
 8005b28:	454d      	cmp	r5, r9
 8005b2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005b2e:	f84a 3b04 	str.w	r3, [sl], #4
 8005b32:	d8e7      	bhi.n	8005b04 <__mdiff+0x7c>
 8005b34:	1b2b      	subs	r3, r5, r4
 8005b36:	3b15      	subs	r3, #21
 8005b38:	f023 0303 	bic.w	r3, r3, #3
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	3415      	adds	r4, #21
 8005b40:	42a5      	cmp	r5, r4
 8005b42:	bf38      	it	cc
 8005b44:	2304      	movcc	r3, #4
 8005b46:	4419      	add	r1, r3
 8005b48:	4473      	add	r3, lr
 8005b4a:	469e      	mov	lr, r3
 8005b4c:	460d      	mov	r5, r1
 8005b4e:	4565      	cmp	r5, ip
 8005b50:	d30e      	bcc.n	8005b70 <__mdiff+0xe8>
 8005b52:	f10c 0203 	add.w	r2, ip, #3
 8005b56:	1a52      	subs	r2, r2, r1
 8005b58:	f022 0203 	bic.w	r2, r2, #3
 8005b5c:	3903      	subs	r1, #3
 8005b5e:	458c      	cmp	ip, r1
 8005b60:	bf38      	it	cc
 8005b62:	2200      	movcc	r2, #0
 8005b64:	441a      	add	r2, r3
 8005b66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005b6a:	b17b      	cbz	r3, 8005b8c <__mdiff+0x104>
 8005b6c:	6106      	str	r6, [r0, #16]
 8005b6e:	e7a5      	b.n	8005abc <__mdiff+0x34>
 8005b70:	f855 8b04 	ldr.w	r8, [r5], #4
 8005b74:	fa17 f488 	uxtah	r4, r7, r8
 8005b78:	1422      	asrs	r2, r4, #16
 8005b7a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005b7e:	b2a4      	uxth	r4, r4
 8005b80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005b84:	f84e 4b04 	str.w	r4, [lr], #4
 8005b88:	1417      	asrs	r7, r2, #16
 8005b8a:	e7e0      	b.n	8005b4e <__mdiff+0xc6>
 8005b8c:	3e01      	subs	r6, #1
 8005b8e:	e7ea      	b.n	8005b66 <__mdiff+0xde>
 8005b90:	08006d53 	.word	0x08006d53
 8005b94:	08006d64 	.word	0x08006d64

08005b98 <__d2b>:
 8005b98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b9c:	4689      	mov	r9, r1
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	ec57 6b10 	vmov	r6, r7, d0
 8005ba4:	4690      	mov	r8, r2
 8005ba6:	f7ff fcd5 	bl	8005554 <_Balloc>
 8005baa:	4604      	mov	r4, r0
 8005bac:	b930      	cbnz	r0, 8005bbc <__d2b+0x24>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <__d2b+0xb0>)
 8005bb2:	4826      	ldr	r0, [pc, #152]	; (8005c4c <__d2b+0xb4>)
 8005bb4:	f240 310a 	movw	r1, #778	; 0x30a
 8005bb8:	f000 fa70 	bl	800609c <__assert_func>
 8005bbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005bc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005bc4:	bb35      	cbnz	r5, 8005c14 <__d2b+0x7c>
 8005bc6:	2e00      	cmp	r6, #0
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	d028      	beq.n	8005c1e <__d2b+0x86>
 8005bcc:	4668      	mov	r0, sp
 8005bce:	9600      	str	r6, [sp, #0]
 8005bd0:	f7ff fd8c 	bl	80056ec <__lo0bits>
 8005bd4:	9900      	ldr	r1, [sp, #0]
 8005bd6:	b300      	cbz	r0, 8005c1a <__d2b+0x82>
 8005bd8:	9a01      	ldr	r2, [sp, #4]
 8005bda:	f1c0 0320 	rsb	r3, r0, #32
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	430b      	orrs	r3, r1
 8005be4:	40c2      	lsrs	r2, r0
 8005be6:	6163      	str	r3, [r4, #20]
 8005be8:	9201      	str	r2, [sp, #4]
 8005bea:	9b01      	ldr	r3, [sp, #4]
 8005bec:	61a3      	str	r3, [r4, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf14      	ite	ne
 8005bf2:	2202      	movne	r2, #2
 8005bf4:	2201      	moveq	r2, #1
 8005bf6:	6122      	str	r2, [r4, #16]
 8005bf8:	b1d5      	cbz	r5, 8005c30 <__d2b+0x98>
 8005bfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005bfe:	4405      	add	r5, r0
 8005c00:	f8c9 5000 	str.w	r5, [r9]
 8005c04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c08:	f8c8 0000 	str.w	r0, [r8]
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	b003      	add	sp, #12
 8005c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c18:	e7d5      	b.n	8005bc6 <__d2b+0x2e>
 8005c1a:	6161      	str	r1, [r4, #20]
 8005c1c:	e7e5      	b.n	8005bea <__d2b+0x52>
 8005c1e:	a801      	add	r0, sp, #4
 8005c20:	f7ff fd64 	bl	80056ec <__lo0bits>
 8005c24:	9b01      	ldr	r3, [sp, #4]
 8005c26:	6163      	str	r3, [r4, #20]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	6122      	str	r2, [r4, #16]
 8005c2c:	3020      	adds	r0, #32
 8005c2e:	e7e3      	b.n	8005bf8 <__d2b+0x60>
 8005c30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c38:	f8c9 0000 	str.w	r0, [r9]
 8005c3c:	6918      	ldr	r0, [r3, #16]
 8005c3e:	f7ff fd35 	bl	80056ac <__hi0bits>
 8005c42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c46:	e7df      	b.n	8005c08 <__d2b+0x70>
 8005c48:	08006d53 	.word	0x08006d53
 8005c4c:	08006d64 	.word	0x08006d64

08005c50 <_calloc_r>:
 8005c50:	b513      	push	{r0, r1, r4, lr}
 8005c52:	434a      	muls	r2, r1
 8005c54:	4611      	mov	r1, r2
 8005c56:	9201      	str	r2, [sp, #4]
 8005c58:	f000 f85a 	bl	8005d10 <_malloc_r>
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	b118      	cbz	r0, 8005c68 <_calloc_r+0x18>
 8005c60:	9a01      	ldr	r2, [sp, #4]
 8005c62:	2100      	movs	r1, #0
 8005c64:	f7fe f952 	bl	8003f0c <memset>
 8005c68:	4620      	mov	r0, r4
 8005c6a:	b002      	add	sp, #8
 8005c6c:	bd10      	pop	{r4, pc}
	...

08005c70 <_free_r>:
 8005c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c72:	2900      	cmp	r1, #0
 8005c74:	d048      	beq.n	8005d08 <_free_r+0x98>
 8005c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7a:	9001      	str	r0, [sp, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c82:	bfb8      	it	lt
 8005c84:	18e4      	addlt	r4, r4, r3
 8005c86:	f000 fa65 	bl	8006154 <__malloc_lock>
 8005c8a:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <_free_r+0x9c>)
 8005c8c:	9801      	ldr	r0, [sp, #4]
 8005c8e:	6813      	ldr	r3, [r2, #0]
 8005c90:	4615      	mov	r5, r2
 8005c92:	b933      	cbnz	r3, 8005ca2 <_free_r+0x32>
 8005c94:	6063      	str	r3, [r4, #4]
 8005c96:	6014      	str	r4, [r2, #0]
 8005c98:	b003      	add	sp, #12
 8005c9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c9e:	f000 ba5f 	b.w	8006160 <__malloc_unlock>
 8005ca2:	42a3      	cmp	r3, r4
 8005ca4:	d90b      	bls.n	8005cbe <_free_r+0x4e>
 8005ca6:	6821      	ldr	r1, [r4, #0]
 8005ca8:	1862      	adds	r2, r4, r1
 8005caa:	4293      	cmp	r3, r2
 8005cac:	bf04      	itt	eq
 8005cae:	681a      	ldreq	r2, [r3, #0]
 8005cb0:	685b      	ldreq	r3, [r3, #4]
 8005cb2:	6063      	str	r3, [r4, #4]
 8005cb4:	bf04      	itt	eq
 8005cb6:	1852      	addeq	r2, r2, r1
 8005cb8:	6022      	streq	r2, [r4, #0]
 8005cba:	602c      	str	r4, [r5, #0]
 8005cbc:	e7ec      	b.n	8005c98 <_free_r+0x28>
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	b10b      	cbz	r3, 8005cc8 <_free_r+0x58>
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d9fa      	bls.n	8005cbe <_free_r+0x4e>
 8005cc8:	6811      	ldr	r1, [r2, #0]
 8005cca:	1855      	adds	r5, r2, r1
 8005ccc:	42a5      	cmp	r5, r4
 8005cce:	d10b      	bne.n	8005ce8 <_free_r+0x78>
 8005cd0:	6824      	ldr	r4, [r4, #0]
 8005cd2:	4421      	add	r1, r4
 8005cd4:	1854      	adds	r4, r2, r1
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	6011      	str	r1, [r2, #0]
 8005cda:	d1dd      	bne.n	8005c98 <_free_r+0x28>
 8005cdc:	681c      	ldr	r4, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	6053      	str	r3, [r2, #4]
 8005ce2:	4421      	add	r1, r4
 8005ce4:	6011      	str	r1, [r2, #0]
 8005ce6:	e7d7      	b.n	8005c98 <_free_r+0x28>
 8005ce8:	d902      	bls.n	8005cf0 <_free_r+0x80>
 8005cea:	230c      	movs	r3, #12
 8005cec:	6003      	str	r3, [r0, #0]
 8005cee:	e7d3      	b.n	8005c98 <_free_r+0x28>
 8005cf0:	6825      	ldr	r5, [r4, #0]
 8005cf2:	1961      	adds	r1, r4, r5
 8005cf4:	428b      	cmp	r3, r1
 8005cf6:	bf04      	itt	eq
 8005cf8:	6819      	ldreq	r1, [r3, #0]
 8005cfa:	685b      	ldreq	r3, [r3, #4]
 8005cfc:	6063      	str	r3, [r4, #4]
 8005cfe:	bf04      	itt	eq
 8005d00:	1949      	addeq	r1, r1, r5
 8005d02:	6021      	streq	r1, [r4, #0]
 8005d04:	6054      	str	r4, [r2, #4]
 8005d06:	e7c7      	b.n	8005c98 <_free_r+0x28>
 8005d08:	b003      	add	sp, #12
 8005d0a:	bd30      	pop	{r4, r5, pc}
 8005d0c:	20000204 	.word	0x20000204

08005d10 <_malloc_r>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	1ccd      	adds	r5, r1, #3
 8005d14:	f025 0503 	bic.w	r5, r5, #3
 8005d18:	3508      	adds	r5, #8
 8005d1a:	2d0c      	cmp	r5, #12
 8005d1c:	bf38      	it	cc
 8005d1e:	250c      	movcc	r5, #12
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	4606      	mov	r6, r0
 8005d24:	db01      	blt.n	8005d2a <_malloc_r+0x1a>
 8005d26:	42a9      	cmp	r1, r5
 8005d28:	d903      	bls.n	8005d32 <_malloc_r+0x22>
 8005d2a:	230c      	movs	r3, #12
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	2000      	movs	r0, #0
 8005d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d32:	f000 fa0f 	bl	8006154 <__malloc_lock>
 8005d36:	4921      	ldr	r1, [pc, #132]	; (8005dbc <_malloc_r+0xac>)
 8005d38:	680a      	ldr	r2, [r1, #0]
 8005d3a:	4614      	mov	r4, r2
 8005d3c:	b99c      	cbnz	r4, 8005d66 <_malloc_r+0x56>
 8005d3e:	4f20      	ldr	r7, [pc, #128]	; (8005dc0 <_malloc_r+0xb0>)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	b923      	cbnz	r3, 8005d4e <_malloc_r+0x3e>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 f998 	bl	800607c <_sbrk_r>
 8005d4c:	6038      	str	r0, [r7, #0]
 8005d4e:	4629      	mov	r1, r5
 8005d50:	4630      	mov	r0, r6
 8005d52:	f000 f993 	bl	800607c <_sbrk_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d123      	bne.n	8005da2 <_malloc_r+0x92>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 f9fe 	bl	8006160 <__malloc_unlock>
 8005d64:	e7e3      	b.n	8005d2e <_malloc_r+0x1e>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	1b5b      	subs	r3, r3, r5
 8005d6a:	d417      	bmi.n	8005d9c <_malloc_r+0x8c>
 8005d6c:	2b0b      	cmp	r3, #11
 8005d6e:	d903      	bls.n	8005d78 <_malloc_r+0x68>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	441c      	add	r4, r3
 8005d74:	6025      	str	r5, [r4, #0]
 8005d76:	e004      	b.n	8005d82 <_malloc_r+0x72>
 8005d78:	6863      	ldr	r3, [r4, #4]
 8005d7a:	42a2      	cmp	r2, r4
 8005d7c:	bf0c      	ite	eq
 8005d7e:	600b      	streq	r3, [r1, #0]
 8005d80:	6053      	strne	r3, [r2, #4]
 8005d82:	4630      	mov	r0, r6
 8005d84:	f000 f9ec 	bl	8006160 <__malloc_unlock>
 8005d88:	f104 000b 	add.w	r0, r4, #11
 8005d8c:	1d23      	adds	r3, r4, #4
 8005d8e:	f020 0007 	bic.w	r0, r0, #7
 8005d92:	1ac2      	subs	r2, r0, r3
 8005d94:	d0cc      	beq.n	8005d30 <_malloc_r+0x20>
 8005d96:	1a1b      	subs	r3, r3, r0
 8005d98:	50a3      	str	r3, [r4, r2]
 8005d9a:	e7c9      	b.n	8005d30 <_malloc_r+0x20>
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	6864      	ldr	r4, [r4, #4]
 8005da0:	e7cc      	b.n	8005d3c <_malloc_r+0x2c>
 8005da2:	1cc4      	adds	r4, r0, #3
 8005da4:	f024 0403 	bic.w	r4, r4, #3
 8005da8:	42a0      	cmp	r0, r4
 8005daa:	d0e3      	beq.n	8005d74 <_malloc_r+0x64>
 8005dac:	1a21      	subs	r1, r4, r0
 8005dae:	4630      	mov	r0, r6
 8005db0:	f000 f964 	bl	800607c <_sbrk_r>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d1dd      	bne.n	8005d74 <_malloc_r+0x64>
 8005db8:	e7cf      	b.n	8005d5a <_malloc_r+0x4a>
 8005dba:	bf00      	nop
 8005dbc:	20000204 	.word	0x20000204
 8005dc0:	20000208 	.word	0x20000208

08005dc4 <__ssputs_r>:
 8005dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	688e      	ldr	r6, [r1, #8]
 8005dca:	429e      	cmp	r6, r3
 8005dcc:	4682      	mov	sl, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	4690      	mov	r8, r2
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	d838      	bhi.n	8005e48 <__ssputs_r+0x84>
 8005dd6:	898a      	ldrh	r2, [r1, #12]
 8005dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ddc:	d032      	beq.n	8005e44 <__ssputs_r+0x80>
 8005dde:	6825      	ldr	r5, [r4, #0]
 8005de0:	6909      	ldr	r1, [r1, #16]
 8005de2:	eba5 0901 	sub.w	r9, r5, r1
 8005de6:	6965      	ldr	r5, [r4, #20]
 8005de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005df0:	3301      	adds	r3, #1
 8005df2:	444b      	add	r3, r9
 8005df4:	106d      	asrs	r5, r5, #1
 8005df6:	429d      	cmp	r5, r3
 8005df8:	bf38      	it	cc
 8005dfa:	461d      	movcc	r5, r3
 8005dfc:	0553      	lsls	r3, r2, #21
 8005dfe:	d531      	bpl.n	8005e64 <__ssputs_r+0xa0>
 8005e00:	4629      	mov	r1, r5
 8005e02:	f7ff ff85 	bl	8005d10 <_malloc_r>
 8005e06:	4606      	mov	r6, r0
 8005e08:	b950      	cbnz	r0, 8005e20 <__ssputs_r+0x5c>
 8005e0a:	230c      	movs	r3, #12
 8005e0c:	f8ca 3000 	str.w	r3, [sl]
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e20:	6921      	ldr	r1, [r4, #16]
 8005e22:	464a      	mov	r2, r9
 8005e24:	f7ff fb88 	bl	8005538 <memcpy>
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e32:	81a3      	strh	r3, [r4, #12]
 8005e34:	6126      	str	r6, [r4, #16]
 8005e36:	6165      	str	r5, [r4, #20]
 8005e38:	444e      	add	r6, r9
 8005e3a:	eba5 0509 	sub.w	r5, r5, r9
 8005e3e:	6026      	str	r6, [r4, #0]
 8005e40:	60a5      	str	r5, [r4, #8]
 8005e42:	463e      	mov	r6, r7
 8005e44:	42be      	cmp	r6, r7
 8005e46:	d900      	bls.n	8005e4a <__ssputs_r+0x86>
 8005e48:	463e      	mov	r6, r7
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	6820      	ldr	r0, [r4, #0]
 8005e4e:	4641      	mov	r1, r8
 8005e50:	f000 f966 	bl	8006120 <memmove>
 8005e54:	68a3      	ldr	r3, [r4, #8]
 8005e56:	6822      	ldr	r2, [r4, #0]
 8005e58:	1b9b      	subs	r3, r3, r6
 8005e5a:	4432      	add	r2, r6
 8005e5c:	60a3      	str	r3, [r4, #8]
 8005e5e:	6022      	str	r2, [r4, #0]
 8005e60:	2000      	movs	r0, #0
 8005e62:	e7db      	b.n	8005e1c <__ssputs_r+0x58>
 8005e64:	462a      	mov	r2, r5
 8005e66:	f000 f981 	bl	800616c <_realloc_r>
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1e1      	bne.n	8005e34 <__ssputs_r+0x70>
 8005e70:	6921      	ldr	r1, [r4, #16]
 8005e72:	4650      	mov	r0, sl
 8005e74:	f7ff fefc 	bl	8005c70 <_free_r>
 8005e78:	e7c7      	b.n	8005e0a <__ssputs_r+0x46>
	...

08005e7c <_svfiprintf_r>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	4698      	mov	r8, r3
 8005e82:	898b      	ldrh	r3, [r1, #12]
 8005e84:	061b      	lsls	r3, r3, #24
 8005e86:	b09d      	sub	sp, #116	; 0x74
 8005e88:	4607      	mov	r7, r0
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	d50e      	bpl.n	8005eae <_svfiprintf_r+0x32>
 8005e90:	690b      	ldr	r3, [r1, #16]
 8005e92:	b963      	cbnz	r3, 8005eae <_svfiprintf_r+0x32>
 8005e94:	2140      	movs	r1, #64	; 0x40
 8005e96:	f7ff ff3b 	bl	8005d10 <_malloc_r>
 8005e9a:	6028      	str	r0, [r5, #0]
 8005e9c:	6128      	str	r0, [r5, #16]
 8005e9e:	b920      	cbnz	r0, 8005eaa <_svfiprintf_r+0x2e>
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ea8:	e0d1      	b.n	800604e <_svfiprintf_r+0x1d2>
 8005eaa:	2340      	movs	r3, #64	; 0x40
 8005eac:	616b      	str	r3, [r5, #20]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb2:	2320      	movs	r3, #32
 8005eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ebc:	2330      	movs	r3, #48	; 0x30
 8005ebe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006068 <_svfiprintf_r+0x1ec>
 8005ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ec6:	f04f 0901 	mov.w	r9, #1
 8005eca:	4623      	mov	r3, r4
 8005ecc:	469a      	mov	sl, r3
 8005ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed2:	b10a      	cbz	r2, 8005ed8 <_svfiprintf_r+0x5c>
 8005ed4:	2a25      	cmp	r2, #37	; 0x25
 8005ed6:	d1f9      	bne.n	8005ecc <_svfiprintf_r+0x50>
 8005ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8005edc:	d00b      	beq.n	8005ef6 <_svfiprintf_r+0x7a>
 8005ede:	465b      	mov	r3, fp
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff ff6d 	bl	8005dc4 <__ssputs_r>
 8005eea:	3001      	adds	r0, #1
 8005eec:	f000 80aa 	beq.w	8006044 <_svfiprintf_r+0x1c8>
 8005ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef2:	445a      	add	r2, fp
 8005ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80a2 	beq.w	8006044 <_svfiprintf_r+0x1c8>
 8005f00:	2300      	movs	r3, #0
 8005f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f0a:	f10a 0a01 	add.w	sl, sl, #1
 8005f0e:	9304      	str	r3, [sp, #16]
 8005f10:	9307      	str	r3, [sp, #28]
 8005f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f16:	931a      	str	r3, [sp, #104]	; 0x68
 8005f18:	4654      	mov	r4, sl
 8005f1a:	2205      	movs	r2, #5
 8005f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f20:	4851      	ldr	r0, [pc, #324]	; (8006068 <_svfiprintf_r+0x1ec>)
 8005f22:	f7fa f97d 	bl	8000220 <memchr>
 8005f26:	9a04      	ldr	r2, [sp, #16]
 8005f28:	b9d8      	cbnz	r0, 8005f62 <_svfiprintf_r+0xe6>
 8005f2a:	06d0      	lsls	r0, r2, #27
 8005f2c:	bf44      	itt	mi
 8005f2e:	2320      	movmi	r3, #32
 8005f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f34:	0711      	lsls	r1, r2, #28
 8005f36:	bf44      	itt	mi
 8005f38:	232b      	movmi	r3, #43	; 0x2b
 8005f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f42:	2b2a      	cmp	r3, #42	; 0x2a
 8005f44:	d015      	beq.n	8005f72 <_svfiprintf_r+0xf6>
 8005f46:	9a07      	ldr	r2, [sp, #28]
 8005f48:	4654      	mov	r4, sl
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f04f 0c0a 	mov.w	ip, #10
 8005f50:	4621      	mov	r1, r4
 8005f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f56:	3b30      	subs	r3, #48	; 0x30
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d94e      	bls.n	8005ffa <_svfiprintf_r+0x17e>
 8005f5c:	b1b0      	cbz	r0, 8005f8c <_svfiprintf_r+0x110>
 8005f5e:	9207      	str	r2, [sp, #28]
 8005f60:	e014      	b.n	8005f8c <_svfiprintf_r+0x110>
 8005f62:	eba0 0308 	sub.w	r3, r0, r8
 8005f66:	fa09 f303 	lsl.w	r3, r9, r3
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	46a2      	mov	sl, r4
 8005f70:	e7d2      	b.n	8005f18 <_svfiprintf_r+0x9c>
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	1d19      	adds	r1, r3, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	9103      	str	r1, [sp, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bfbb      	ittet	lt
 8005f7e:	425b      	neglt	r3, r3
 8005f80:	f042 0202 	orrlt.w	r2, r2, #2
 8005f84:	9307      	strge	r3, [sp, #28]
 8005f86:	9307      	strlt	r3, [sp, #28]
 8005f88:	bfb8      	it	lt
 8005f8a:	9204      	strlt	r2, [sp, #16]
 8005f8c:	7823      	ldrb	r3, [r4, #0]
 8005f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f90:	d10c      	bne.n	8005fac <_svfiprintf_r+0x130>
 8005f92:	7863      	ldrb	r3, [r4, #1]
 8005f94:	2b2a      	cmp	r3, #42	; 0x2a
 8005f96:	d135      	bne.n	8006004 <_svfiprintf_r+0x188>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	9203      	str	r2, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bfb8      	it	lt
 8005fa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005fa8:	3402      	adds	r4, #2
 8005faa:	9305      	str	r3, [sp, #20]
 8005fac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006078 <_svfiprintf_r+0x1fc>
 8005fb0:	7821      	ldrb	r1, [r4, #0]
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	4650      	mov	r0, sl
 8005fb6:	f7fa f933 	bl	8000220 <memchr>
 8005fba:	b140      	cbz	r0, 8005fce <_svfiprintf_r+0x152>
 8005fbc:	2340      	movs	r3, #64	; 0x40
 8005fbe:	eba0 000a 	sub.w	r0, r0, sl
 8005fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	4303      	orrs	r3, r0
 8005fca:	3401      	adds	r4, #1
 8005fcc:	9304      	str	r3, [sp, #16]
 8005fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd2:	4826      	ldr	r0, [pc, #152]	; (800606c <_svfiprintf_r+0x1f0>)
 8005fd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fd8:	2206      	movs	r2, #6
 8005fda:	f7fa f921 	bl	8000220 <memchr>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d038      	beq.n	8006054 <_svfiprintf_r+0x1d8>
 8005fe2:	4b23      	ldr	r3, [pc, #140]	; (8006070 <_svfiprintf_r+0x1f4>)
 8005fe4:	bb1b      	cbnz	r3, 800602e <_svfiprintf_r+0x1b2>
 8005fe6:	9b03      	ldr	r3, [sp, #12]
 8005fe8:	3307      	adds	r3, #7
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	3308      	adds	r3, #8
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff4:	4433      	add	r3, r6
 8005ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff8:	e767      	b.n	8005eca <_svfiprintf_r+0x4e>
 8005ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ffe:	460c      	mov	r4, r1
 8006000:	2001      	movs	r0, #1
 8006002:	e7a5      	b.n	8005f50 <_svfiprintf_r+0xd4>
 8006004:	2300      	movs	r3, #0
 8006006:	3401      	adds	r4, #1
 8006008:	9305      	str	r3, [sp, #20]
 800600a:	4619      	mov	r1, r3
 800600c:	f04f 0c0a 	mov.w	ip, #10
 8006010:	4620      	mov	r0, r4
 8006012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006016:	3a30      	subs	r2, #48	; 0x30
 8006018:	2a09      	cmp	r2, #9
 800601a:	d903      	bls.n	8006024 <_svfiprintf_r+0x1a8>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0c5      	beq.n	8005fac <_svfiprintf_r+0x130>
 8006020:	9105      	str	r1, [sp, #20]
 8006022:	e7c3      	b.n	8005fac <_svfiprintf_r+0x130>
 8006024:	fb0c 2101 	mla	r1, ip, r1, r2
 8006028:	4604      	mov	r4, r0
 800602a:	2301      	movs	r3, #1
 800602c:	e7f0      	b.n	8006010 <_svfiprintf_r+0x194>
 800602e:	ab03      	add	r3, sp, #12
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	462a      	mov	r2, r5
 8006034:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <_svfiprintf_r+0x1f8>)
 8006036:	a904      	add	r1, sp, #16
 8006038:	4638      	mov	r0, r7
 800603a:	f7fe f80f 	bl	800405c <_printf_float>
 800603e:	1c42      	adds	r2, r0, #1
 8006040:	4606      	mov	r6, r0
 8006042:	d1d6      	bne.n	8005ff2 <_svfiprintf_r+0x176>
 8006044:	89ab      	ldrh	r3, [r5, #12]
 8006046:	065b      	lsls	r3, r3, #25
 8006048:	f53f af2c 	bmi.w	8005ea4 <_svfiprintf_r+0x28>
 800604c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800604e:	b01d      	add	sp, #116	; 0x74
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006054:	ab03      	add	r3, sp, #12
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	462a      	mov	r2, r5
 800605a:	4b06      	ldr	r3, [pc, #24]	; (8006074 <_svfiprintf_r+0x1f8>)
 800605c:	a904      	add	r1, sp, #16
 800605e:	4638      	mov	r0, r7
 8006060:	f7fe faa0 	bl	80045a4 <_printf_i>
 8006064:	e7eb      	b.n	800603e <_svfiprintf_r+0x1c2>
 8006066:	bf00      	nop
 8006068:	08006ec4 	.word	0x08006ec4
 800606c:	08006ece 	.word	0x08006ece
 8006070:	0800405d 	.word	0x0800405d
 8006074:	08005dc5 	.word	0x08005dc5
 8006078:	08006eca 	.word	0x08006eca

0800607c <_sbrk_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4d06      	ldr	r5, [pc, #24]	; (8006098 <_sbrk_r+0x1c>)
 8006080:	2300      	movs	r3, #0
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	602b      	str	r3, [r5, #0]
 8006088:	f7fb fb5c 	bl	8001744 <_sbrk>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d102      	bne.n	8006096 <_sbrk_r+0x1a>
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	b103      	cbz	r3, 8006096 <_sbrk_r+0x1a>
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	200002a8 	.word	0x200002a8

0800609c <__assert_func>:
 800609c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800609e:	4614      	mov	r4, r2
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <__assert_func+0x2c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4605      	mov	r5, r0
 80060a8:	68d8      	ldr	r0, [r3, #12]
 80060aa:	b14c      	cbz	r4, 80060c0 <__assert_func+0x24>
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <__assert_func+0x30>)
 80060ae:	9100      	str	r1, [sp, #0]
 80060b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060b4:	4906      	ldr	r1, [pc, #24]	; (80060d0 <__assert_func+0x34>)
 80060b6:	462b      	mov	r3, r5
 80060b8:	f000 f80e 	bl	80060d8 <fiprintf>
 80060bc:	f000 faa4 	bl	8006608 <abort>
 80060c0:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <__assert_func+0x38>)
 80060c2:	461c      	mov	r4, r3
 80060c4:	e7f3      	b.n	80060ae <__assert_func+0x12>
 80060c6:	bf00      	nop
 80060c8:	2000000c 	.word	0x2000000c
 80060cc:	08006ed5 	.word	0x08006ed5
 80060d0:	08006ee2 	.word	0x08006ee2
 80060d4:	08006f10 	.word	0x08006f10

080060d8 <fiprintf>:
 80060d8:	b40e      	push	{r1, r2, r3}
 80060da:	b503      	push	{r0, r1, lr}
 80060dc:	4601      	mov	r1, r0
 80060de:	ab03      	add	r3, sp, #12
 80060e0:	4805      	ldr	r0, [pc, #20]	; (80060f8 <fiprintf+0x20>)
 80060e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060e6:	6800      	ldr	r0, [r0, #0]
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	f000 f88f 	bl	800620c <_vfiprintf_r>
 80060ee:	b002      	add	sp, #8
 80060f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060f4:	b003      	add	sp, #12
 80060f6:	4770      	bx	lr
 80060f8:	2000000c 	.word	0x2000000c

080060fc <__ascii_mbtowc>:
 80060fc:	b082      	sub	sp, #8
 80060fe:	b901      	cbnz	r1, 8006102 <__ascii_mbtowc+0x6>
 8006100:	a901      	add	r1, sp, #4
 8006102:	b142      	cbz	r2, 8006116 <__ascii_mbtowc+0x1a>
 8006104:	b14b      	cbz	r3, 800611a <__ascii_mbtowc+0x1e>
 8006106:	7813      	ldrb	r3, [r2, #0]
 8006108:	600b      	str	r3, [r1, #0]
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	1e10      	subs	r0, r2, #0
 800610e:	bf18      	it	ne
 8006110:	2001      	movne	r0, #1
 8006112:	b002      	add	sp, #8
 8006114:	4770      	bx	lr
 8006116:	4610      	mov	r0, r2
 8006118:	e7fb      	b.n	8006112 <__ascii_mbtowc+0x16>
 800611a:	f06f 0001 	mvn.w	r0, #1
 800611e:	e7f8      	b.n	8006112 <__ascii_mbtowc+0x16>

08006120 <memmove>:
 8006120:	4288      	cmp	r0, r1
 8006122:	b510      	push	{r4, lr}
 8006124:	eb01 0402 	add.w	r4, r1, r2
 8006128:	d902      	bls.n	8006130 <memmove+0x10>
 800612a:	4284      	cmp	r4, r0
 800612c:	4623      	mov	r3, r4
 800612e:	d807      	bhi.n	8006140 <memmove+0x20>
 8006130:	1e43      	subs	r3, r0, #1
 8006132:	42a1      	cmp	r1, r4
 8006134:	d008      	beq.n	8006148 <memmove+0x28>
 8006136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800613a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800613e:	e7f8      	b.n	8006132 <memmove+0x12>
 8006140:	4402      	add	r2, r0
 8006142:	4601      	mov	r1, r0
 8006144:	428a      	cmp	r2, r1
 8006146:	d100      	bne.n	800614a <memmove+0x2a>
 8006148:	bd10      	pop	{r4, pc}
 800614a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800614e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006152:	e7f7      	b.n	8006144 <memmove+0x24>

08006154 <__malloc_lock>:
 8006154:	4801      	ldr	r0, [pc, #4]	; (800615c <__malloc_lock+0x8>)
 8006156:	f000 bc17 	b.w	8006988 <__retarget_lock_acquire_recursive>
 800615a:	bf00      	nop
 800615c:	200002b0 	.word	0x200002b0

08006160 <__malloc_unlock>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__malloc_unlock+0x8>)
 8006162:	f000 bc12 	b.w	800698a <__retarget_lock_release_recursive>
 8006166:	bf00      	nop
 8006168:	200002b0 	.word	0x200002b0

0800616c <_realloc_r>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	4607      	mov	r7, r0
 8006170:	4614      	mov	r4, r2
 8006172:	460e      	mov	r6, r1
 8006174:	b921      	cbnz	r1, 8006180 <_realloc_r+0x14>
 8006176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800617a:	4611      	mov	r1, r2
 800617c:	f7ff bdc8 	b.w	8005d10 <_malloc_r>
 8006180:	b922      	cbnz	r2, 800618c <_realloc_r+0x20>
 8006182:	f7ff fd75 	bl	8005c70 <_free_r>
 8006186:	4625      	mov	r5, r4
 8006188:	4628      	mov	r0, r5
 800618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618c:	f000 fc62 	bl	8006a54 <_malloc_usable_size_r>
 8006190:	42a0      	cmp	r0, r4
 8006192:	d20f      	bcs.n	80061b4 <_realloc_r+0x48>
 8006194:	4621      	mov	r1, r4
 8006196:	4638      	mov	r0, r7
 8006198:	f7ff fdba 	bl	8005d10 <_malloc_r>
 800619c:	4605      	mov	r5, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0f2      	beq.n	8006188 <_realloc_r+0x1c>
 80061a2:	4631      	mov	r1, r6
 80061a4:	4622      	mov	r2, r4
 80061a6:	f7ff f9c7 	bl	8005538 <memcpy>
 80061aa:	4631      	mov	r1, r6
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff fd5f 	bl	8005c70 <_free_r>
 80061b2:	e7e9      	b.n	8006188 <_realloc_r+0x1c>
 80061b4:	4635      	mov	r5, r6
 80061b6:	e7e7      	b.n	8006188 <_realloc_r+0x1c>

080061b8 <__sfputc_r>:
 80061b8:	6893      	ldr	r3, [r2, #8]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	b410      	push	{r4}
 80061c0:	6093      	str	r3, [r2, #8]
 80061c2:	da08      	bge.n	80061d6 <__sfputc_r+0x1e>
 80061c4:	6994      	ldr	r4, [r2, #24]
 80061c6:	42a3      	cmp	r3, r4
 80061c8:	db01      	blt.n	80061ce <__sfputc_r+0x16>
 80061ca:	290a      	cmp	r1, #10
 80061cc:	d103      	bne.n	80061d6 <__sfputc_r+0x1e>
 80061ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061d2:	f000 b94b 	b.w	800646c <__swbuf_r>
 80061d6:	6813      	ldr	r3, [r2, #0]
 80061d8:	1c58      	adds	r0, r3, #1
 80061da:	6010      	str	r0, [r2, #0]
 80061dc:	7019      	strb	r1, [r3, #0]
 80061de:	4608      	mov	r0, r1
 80061e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <__sfputs_r>:
 80061e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e8:	4606      	mov	r6, r0
 80061ea:	460f      	mov	r7, r1
 80061ec:	4614      	mov	r4, r2
 80061ee:	18d5      	adds	r5, r2, r3
 80061f0:	42ac      	cmp	r4, r5
 80061f2:	d101      	bne.n	80061f8 <__sfputs_r+0x12>
 80061f4:	2000      	movs	r0, #0
 80061f6:	e007      	b.n	8006208 <__sfputs_r+0x22>
 80061f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061fc:	463a      	mov	r2, r7
 80061fe:	4630      	mov	r0, r6
 8006200:	f7ff ffda 	bl	80061b8 <__sfputc_r>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d1f3      	bne.n	80061f0 <__sfputs_r+0xa>
 8006208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800620c <_vfiprintf_r>:
 800620c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	460d      	mov	r5, r1
 8006212:	b09d      	sub	sp, #116	; 0x74
 8006214:	4614      	mov	r4, r2
 8006216:	4698      	mov	r8, r3
 8006218:	4606      	mov	r6, r0
 800621a:	b118      	cbz	r0, 8006224 <_vfiprintf_r+0x18>
 800621c:	6983      	ldr	r3, [r0, #24]
 800621e:	b90b      	cbnz	r3, 8006224 <_vfiprintf_r+0x18>
 8006220:	f000 fb14 	bl	800684c <__sinit>
 8006224:	4b89      	ldr	r3, [pc, #548]	; (800644c <_vfiprintf_r+0x240>)
 8006226:	429d      	cmp	r5, r3
 8006228:	d11b      	bne.n	8006262 <_vfiprintf_r+0x56>
 800622a:	6875      	ldr	r5, [r6, #4]
 800622c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800622e:	07d9      	lsls	r1, r3, #31
 8006230:	d405      	bmi.n	800623e <_vfiprintf_r+0x32>
 8006232:	89ab      	ldrh	r3, [r5, #12]
 8006234:	059a      	lsls	r2, r3, #22
 8006236:	d402      	bmi.n	800623e <_vfiprintf_r+0x32>
 8006238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800623a:	f000 fba5 	bl	8006988 <__retarget_lock_acquire_recursive>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	071b      	lsls	r3, r3, #28
 8006242:	d501      	bpl.n	8006248 <_vfiprintf_r+0x3c>
 8006244:	692b      	ldr	r3, [r5, #16]
 8006246:	b9eb      	cbnz	r3, 8006284 <_vfiprintf_r+0x78>
 8006248:	4629      	mov	r1, r5
 800624a:	4630      	mov	r0, r6
 800624c:	f000 f96e 	bl	800652c <__swsetup_r>
 8006250:	b1c0      	cbz	r0, 8006284 <_vfiprintf_r+0x78>
 8006252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006254:	07dc      	lsls	r4, r3, #31
 8006256:	d50e      	bpl.n	8006276 <_vfiprintf_r+0x6a>
 8006258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800625c:	b01d      	add	sp, #116	; 0x74
 800625e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006262:	4b7b      	ldr	r3, [pc, #492]	; (8006450 <_vfiprintf_r+0x244>)
 8006264:	429d      	cmp	r5, r3
 8006266:	d101      	bne.n	800626c <_vfiprintf_r+0x60>
 8006268:	68b5      	ldr	r5, [r6, #8]
 800626a:	e7df      	b.n	800622c <_vfiprintf_r+0x20>
 800626c:	4b79      	ldr	r3, [pc, #484]	; (8006454 <_vfiprintf_r+0x248>)
 800626e:	429d      	cmp	r5, r3
 8006270:	bf08      	it	eq
 8006272:	68f5      	ldreq	r5, [r6, #12]
 8006274:	e7da      	b.n	800622c <_vfiprintf_r+0x20>
 8006276:	89ab      	ldrh	r3, [r5, #12]
 8006278:	0598      	lsls	r0, r3, #22
 800627a:	d4ed      	bmi.n	8006258 <_vfiprintf_r+0x4c>
 800627c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800627e:	f000 fb84 	bl	800698a <__retarget_lock_release_recursive>
 8006282:	e7e9      	b.n	8006258 <_vfiprintf_r+0x4c>
 8006284:	2300      	movs	r3, #0
 8006286:	9309      	str	r3, [sp, #36]	; 0x24
 8006288:	2320      	movs	r3, #32
 800628a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800628e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006292:	2330      	movs	r3, #48	; 0x30
 8006294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006458 <_vfiprintf_r+0x24c>
 8006298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800629c:	f04f 0901 	mov.w	r9, #1
 80062a0:	4623      	mov	r3, r4
 80062a2:	469a      	mov	sl, r3
 80062a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a8:	b10a      	cbz	r2, 80062ae <_vfiprintf_r+0xa2>
 80062aa:	2a25      	cmp	r2, #37	; 0x25
 80062ac:	d1f9      	bne.n	80062a2 <_vfiprintf_r+0x96>
 80062ae:	ebba 0b04 	subs.w	fp, sl, r4
 80062b2:	d00b      	beq.n	80062cc <_vfiprintf_r+0xc0>
 80062b4:	465b      	mov	r3, fp
 80062b6:	4622      	mov	r2, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff ff93 	bl	80061e6 <__sfputs_r>
 80062c0:	3001      	adds	r0, #1
 80062c2:	f000 80aa 	beq.w	800641a <_vfiprintf_r+0x20e>
 80062c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c8:	445a      	add	r2, fp
 80062ca:	9209      	str	r2, [sp, #36]	; 0x24
 80062cc:	f89a 3000 	ldrb.w	r3, [sl]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80a2 	beq.w	800641a <_vfiprintf_r+0x20e>
 80062d6:	2300      	movs	r3, #0
 80062d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062e0:	f10a 0a01 	add.w	sl, sl, #1
 80062e4:	9304      	str	r3, [sp, #16]
 80062e6:	9307      	str	r3, [sp, #28]
 80062e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062ec:	931a      	str	r3, [sp, #104]	; 0x68
 80062ee:	4654      	mov	r4, sl
 80062f0:	2205      	movs	r2, #5
 80062f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f6:	4858      	ldr	r0, [pc, #352]	; (8006458 <_vfiprintf_r+0x24c>)
 80062f8:	f7f9 ff92 	bl	8000220 <memchr>
 80062fc:	9a04      	ldr	r2, [sp, #16]
 80062fe:	b9d8      	cbnz	r0, 8006338 <_vfiprintf_r+0x12c>
 8006300:	06d1      	lsls	r1, r2, #27
 8006302:	bf44      	itt	mi
 8006304:	2320      	movmi	r3, #32
 8006306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800630a:	0713      	lsls	r3, r2, #28
 800630c:	bf44      	itt	mi
 800630e:	232b      	movmi	r3, #43	; 0x2b
 8006310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006314:	f89a 3000 	ldrb.w	r3, [sl]
 8006318:	2b2a      	cmp	r3, #42	; 0x2a
 800631a:	d015      	beq.n	8006348 <_vfiprintf_r+0x13c>
 800631c:	9a07      	ldr	r2, [sp, #28]
 800631e:	4654      	mov	r4, sl
 8006320:	2000      	movs	r0, #0
 8006322:	f04f 0c0a 	mov.w	ip, #10
 8006326:	4621      	mov	r1, r4
 8006328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800632c:	3b30      	subs	r3, #48	; 0x30
 800632e:	2b09      	cmp	r3, #9
 8006330:	d94e      	bls.n	80063d0 <_vfiprintf_r+0x1c4>
 8006332:	b1b0      	cbz	r0, 8006362 <_vfiprintf_r+0x156>
 8006334:	9207      	str	r2, [sp, #28]
 8006336:	e014      	b.n	8006362 <_vfiprintf_r+0x156>
 8006338:	eba0 0308 	sub.w	r3, r0, r8
 800633c:	fa09 f303 	lsl.w	r3, r9, r3
 8006340:	4313      	orrs	r3, r2
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	46a2      	mov	sl, r4
 8006346:	e7d2      	b.n	80062ee <_vfiprintf_r+0xe2>
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	1d19      	adds	r1, r3, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	9103      	str	r1, [sp, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	bfbb      	ittet	lt
 8006354:	425b      	neglt	r3, r3
 8006356:	f042 0202 	orrlt.w	r2, r2, #2
 800635a:	9307      	strge	r3, [sp, #28]
 800635c:	9307      	strlt	r3, [sp, #28]
 800635e:	bfb8      	it	lt
 8006360:	9204      	strlt	r2, [sp, #16]
 8006362:	7823      	ldrb	r3, [r4, #0]
 8006364:	2b2e      	cmp	r3, #46	; 0x2e
 8006366:	d10c      	bne.n	8006382 <_vfiprintf_r+0x176>
 8006368:	7863      	ldrb	r3, [r4, #1]
 800636a:	2b2a      	cmp	r3, #42	; 0x2a
 800636c:	d135      	bne.n	80063da <_vfiprintf_r+0x1ce>
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	1d1a      	adds	r2, r3, #4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	9203      	str	r2, [sp, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	bfb8      	it	lt
 800637a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800637e:	3402      	adds	r4, #2
 8006380:	9305      	str	r3, [sp, #20]
 8006382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006468 <_vfiprintf_r+0x25c>
 8006386:	7821      	ldrb	r1, [r4, #0]
 8006388:	2203      	movs	r2, #3
 800638a:	4650      	mov	r0, sl
 800638c:	f7f9 ff48 	bl	8000220 <memchr>
 8006390:	b140      	cbz	r0, 80063a4 <_vfiprintf_r+0x198>
 8006392:	2340      	movs	r3, #64	; 0x40
 8006394:	eba0 000a 	sub.w	r0, r0, sl
 8006398:	fa03 f000 	lsl.w	r0, r3, r0
 800639c:	9b04      	ldr	r3, [sp, #16]
 800639e:	4303      	orrs	r3, r0
 80063a0:	3401      	adds	r4, #1
 80063a2:	9304      	str	r3, [sp, #16]
 80063a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a8:	482c      	ldr	r0, [pc, #176]	; (800645c <_vfiprintf_r+0x250>)
 80063aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ae:	2206      	movs	r2, #6
 80063b0:	f7f9 ff36 	bl	8000220 <memchr>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d03f      	beq.n	8006438 <_vfiprintf_r+0x22c>
 80063b8:	4b29      	ldr	r3, [pc, #164]	; (8006460 <_vfiprintf_r+0x254>)
 80063ba:	bb1b      	cbnz	r3, 8006404 <_vfiprintf_r+0x1f8>
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	3307      	adds	r3, #7
 80063c0:	f023 0307 	bic.w	r3, r3, #7
 80063c4:	3308      	adds	r3, #8
 80063c6:	9303      	str	r3, [sp, #12]
 80063c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ca:	443b      	add	r3, r7
 80063cc:	9309      	str	r3, [sp, #36]	; 0x24
 80063ce:	e767      	b.n	80062a0 <_vfiprintf_r+0x94>
 80063d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80063d4:	460c      	mov	r4, r1
 80063d6:	2001      	movs	r0, #1
 80063d8:	e7a5      	b.n	8006326 <_vfiprintf_r+0x11a>
 80063da:	2300      	movs	r3, #0
 80063dc:	3401      	adds	r4, #1
 80063de:	9305      	str	r3, [sp, #20]
 80063e0:	4619      	mov	r1, r3
 80063e2:	f04f 0c0a 	mov.w	ip, #10
 80063e6:	4620      	mov	r0, r4
 80063e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ec:	3a30      	subs	r2, #48	; 0x30
 80063ee:	2a09      	cmp	r2, #9
 80063f0:	d903      	bls.n	80063fa <_vfiprintf_r+0x1ee>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0c5      	beq.n	8006382 <_vfiprintf_r+0x176>
 80063f6:	9105      	str	r1, [sp, #20]
 80063f8:	e7c3      	b.n	8006382 <_vfiprintf_r+0x176>
 80063fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80063fe:	4604      	mov	r4, r0
 8006400:	2301      	movs	r3, #1
 8006402:	e7f0      	b.n	80063e6 <_vfiprintf_r+0x1da>
 8006404:	ab03      	add	r3, sp, #12
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	462a      	mov	r2, r5
 800640a:	4b16      	ldr	r3, [pc, #88]	; (8006464 <_vfiprintf_r+0x258>)
 800640c:	a904      	add	r1, sp, #16
 800640e:	4630      	mov	r0, r6
 8006410:	f7fd fe24 	bl	800405c <_printf_float>
 8006414:	4607      	mov	r7, r0
 8006416:	1c78      	adds	r0, r7, #1
 8006418:	d1d6      	bne.n	80063c8 <_vfiprintf_r+0x1bc>
 800641a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800641c:	07d9      	lsls	r1, r3, #31
 800641e:	d405      	bmi.n	800642c <_vfiprintf_r+0x220>
 8006420:	89ab      	ldrh	r3, [r5, #12]
 8006422:	059a      	lsls	r2, r3, #22
 8006424:	d402      	bmi.n	800642c <_vfiprintf_r+0x220>
 8006426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006428:	f000 faaf 	bl	800698a <__retarget_lock_release_recursive>
 800642c:	89ab      	ldrh	r3, [r5, #12]
 800642e:	065b      	lsls	r3, r3, #25
 8006430:	f53f af12 	bmi.w	8006258 <_vfiprintf_r+0x4c>
 8006434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006436:	e711      	b.n	800625c <_vfiprintf_r+0x50>
 8006438:	ab03      	add	r3, sp, #12
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	462a      	mov	r2, r5
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <_vfiprintf_r+0x258>)
 8006440:	a904      	add	r1, sp, #16
 8006442:	4630      	mov	r0, r6
 8006444:	f7fe f8ae 	bl	80045a4 <_printf_i>
 8006448:	e7e4      	b.n	8006414 <_vfiprintf_r+0x208>
 800644a:	bf00      	nop
 800644c:	0800703c 	.word	0x0800703c
 8006450:	0800705c 	.word	0x0800705c
 8006454:	0800701c 	.word	0x0800701c
 8006458:	08006ec4 	.word	0x08006ec4
 800645c:	08006ece 	.word	0x08006ece
 8006460:	0800405d 	.word	0x0800405d
 8006464:	080061e7 	.word	0x080061e7
 8006468:	08006eca 	.word	0x08006eca

0800646c <__swbuf_r>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	460e      	mov	r6, r1
 8006470:	4614      	mov	r4, r2
 8006472:	4605      	mov	r5, r0
 8006474:	b118      	cbz	r0, 800647e <__swbuf_r+0x12>
 8006476:	6983      	ldr	r3, [r0, #24]
 8006478:	b90b      	cbnz	r3, 800647e <__swbuf_r+0x12>
 800647a:	f000 f9e7 	bl	800684c <__sinit>
 800647e:	4b21      	ldr	r3, [pc, #132]	; (8006504 <__swbuf_r+0x98>)
 8006480:	429c      	cmp	r4, r3
 8006482:	d12b      	bne.n	80064dc <__swbuf_r+0x70>
 8006484:	686c      	ldr	r4, [r5, #4]
 8006486:	69a3      	ldr	r3, [r4, #24]
 8006488:	60a3      	str	r3, [r4, #8]
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	071a      	lsls	r2, r3, #28
 800648e:	d52f      	bpl.n	80064f0 <__swbuf_r+0x84>
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	b36b      	cbz	r3, 80064f0 <__swbuf_r+0x84>
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	6820      	ldr	r0, [r4, #0]
 8006498:	1ac0      	subs	r0, r0, r3
 800649a:	6963      	ldr	r3, [r4, #20]
 800649c:	b2f6      	uxtb	r6, r6
 800649e:	4283      	cmp	r3, r0
 80064a0:	4637      	mov	r7, r6
 80064a2:	dc04      	bgt.n	80064ae <__swbuf_r+0x42>
 80064a4:	4621      	mov	r1, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f93c 	bl	8006724 <_fflush_r>
 80064ac:	bb30      	cbnz	r0, 80064fc <__swbuf_r+0x90>
 80064ae:	68a3      	ldr	r3, [r4, #8]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	60a3      	str	r3, [r4, #8]
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	701e      	strb	r6, [r3, #0]
 80064bc:	6963      	ldr	r3, [r4, #20]
 80064be:	3001      	adds	r0, #1
 80064c0:	4283      	cmp	r3, r0
 80064c2:	d004      	beq.n	80064ce <__swbuf_r+0x62>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	07db      	lsls	r3, r3, #31
 80064c8:	d506      	bpl.n	80064d8 <__swbuf_r+0x6c>
 80064ca:	2e0a      	cmp	r6, #10
 80064cc:	d104      	bne.n	80064d8 <__swbuf_r+0x6c>
 80064ce:	4621      	mov	r1, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f927 	bl	8006724 <_fflush_r>
 80064d6:	b988      	cbnz	r0, 80064fc <__swbuf_r+0x90>
 80064d8:	4638      	mov	r0, r7
 80064da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <__swbuf_r+0x9c>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	d101      	bne.n	80064e6 <__swbuf_r+0x7a>
 80064e2:	68ac      	ldr	r4, [r5, #8]
 80064e4:	e7cf      	b.n	8006486 <__swbuf_r+0x1a>
 80064e6:	4b09      	ldr	r3, [pc, #36]	; (800650c <__swbuf_r+0xa0>)
 80064e8:	429c      	cmp	r4, r3
 80064ea:	bf08      	it	eq
 80064ec:	68ec      	ldreq	r4, [r5, #12]
 80064ee:	e7ca      	b.n	8006486 <__swbuf_r+0x1a>
 80064f0:	4621      	mov	r1, r4
 80064f2:	4628      	mov	r0, r5
 80064f4:	f000 f81a 	bl	800652c <__swsetup_r>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d0cb      	beq.n	8006494 <__swbuf_r+0x28>
 80064fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006500:	e7ea      	b.n	80064d8 <__swbuf_r+0x6c>
 8006502:	bf00      	nop
 8006504:	0800703c 	.word	0x0800703c
 8006508:	0800705c 	.word	0x0800705c
 800650c:	0800701c 	.word	0x0800701c

08006510 <__ascii_wctomb>:
 8006510:	b149      	cbz	r1, 8006526 <__ascii_wctomb+0x16>
 8006512:	2aff      	cmp	r2, #255	; 0xff
 8006514:	bf85      	ittet	hi
 8006516:	238a      	movhi	r3, #138	; 0x8a
 8006518:	6003      	strhi	r3, [r0, #0]
 800651a:	700a      	strbls	r2, [r1, #0]
 800651c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006520:	bf98      	it	ls
 8006522:	2001      	movls	r0, #1
 8006524:	4770      	bx	lr
 8006526:	4608      	mov	r0, r1
 8006528:	4770      	bx	lr
	...

0800652c <__swsetup_r>:
 800652c:	4b32      	ldr	r3, [pc, #200]	; (80065f8 <__swsetup_r+0xcc>)
 800652e:	b570      	push	{r4, r5, r6, lr}
 8006530:	681d      	ldr	r5, [r3, #0]
 8006532:	4606      	mov	r6, r0
 8006534:	460c      	mov	r4, r1
 8006536:	b125      	cbz	r5, 8006542 <__swsetup_r+0x16>
 8006538:	69ab      	ldr	r3, [r5, #24]
 800653a:	b913      	cbnz	r3, 8006542 <__swsetup_r+0x16>
 800653c:	4628      	mov	r0, r5
 800653e:	f000 f985 	bl	800684c <__sinit>
 8006542:	4b2e      	ldr	r3, [pc, #184]	; (80065fc <__swsetup_r+0xd0>)
 8006544:	429c      	cmp	r4, r3
 8006546:	d10f      	bne.n	8006568 <__swsetup_r+0x3c>
 8006548:	686c      	ldr	r4, [r5, #4]
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006550:	0719      	lsls	r1, r3, #28
 8006552:	d42c      	bmi.n	80065ae <__swsetup_r+0x82>
 8006554:	06dd      	lsls	r5, r3, #27
 8006556:	d411      	bmi.n	800657c <__swsetup_r+0x50>
 8006558:	2309      	movs	r3, #9
 800655a:	6033      	str	r3, [r6, #0]
 800655c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006560:	81a3      	strh	r3, [r4, #12]
 8006562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006566:	e03e      	b.n	80065e6 <__swsetup_r+0xba>
 8006568:	4b25      	ldr	r3, [pc, #148]	; (8006600 <__swsetup_r+0xd4>)
 800656a:	429c      	cmp	r4, r3
 800656c:	d101      	bne.n	8006572 <__swsetup_r+0x46>
 800656e:	68ac      	ldr	r4, [r5, #8]
 8006570:	e7eb      	b.n	800654a <__swsetup_r+0x1e>
 8006572:	4b24      	ldr	r3, [pc, #144]	; (8006604 <__swsetup_r+0xd8>)
 8006574:	429c      	cmp	r4, r3
 8006576:	bf08      	it	eq
 8006578:	68ec      	ldreq	r4, [r5, #12]
 800657a:	e7e6      	b.n	800654a <__swsetup_r+0x1e>
 800657c:	0758      	lsls	r0, r3, #29
 800657e:	d512      	bpl.n	80065a6 <__swsetup_r+0x7a>
 8006580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006582:	b141      	cbz	r1, 8006596 <__swsetup_r+0x6a>
 8006584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006588:	4299      	cmp	r1, r3
 800658a:	d002      	beq.n	8006592 <__swsetup_r+0x66>
 800658c:	4630      	mov	r0, r6
 800658e:	f7ff fb6f 	bl	8005c70 <_free_r>
 8006592:	2300      	movs	r3, #0
 8006594:	6363      	str	r3, [r4, #52]	; 0x34
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	2300      	movs	r3, #0
 80065a0:	6063      	str	r3, [r4, #4]
 80065a2:	6923      	ldr	r3, [r4, #16]
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	f043 0308 	orr.w	r3, r3, #8
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	b94b      	cbnz	r3, 80065c6 <__swsetup_r+0x9a>
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065bc:	d003      	beq.n	80065c6 <__swsetup_r+0x9a>
 80065be:	4621      	mov	r1, r4
 80065c0:	4630      	mov	r0, r6
 80065c2:	f000 fa07 	bl	80069d4 <__smakebuf_r>
 80065c6:	89a0      	ldrh	r0, [r4, #12]
 80065c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065cc:	f010 0301 	ands.w	r3, r0, #1
 80065d0:	d00a      	beq.n	80065e8 <__swsetup_r+0xbc>
 80065d2:	2300      	movs	r3, #0
 80065d4:	60a3      	str	r3, [r4, #8]
 80065d6:	6963      	ldr	r3, [r4, #20]
 80065d8:	425b      	negs	r3, r3
 80065da:	61a3      	str	r3, [r4, #24]
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	b943      	cbnz	r3, 80065f2 <__swsetup_r+0xc6>
 80065e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065e4:	d1ba      	bne.n	800655c <__swsetup_r+0x30>
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	0781      	lsls	r1, r0, #30
 80065ea:	bf58      	it	pl
 80065ec:	6963      	ldrpl	r3, [r4, #20]
 80065ee:	60a3      	str	r3, [r4, #8]
 80065f0:	e7f4      	b.n	80065dc <__swsetup_r+0xb0>
 80065f2:	2000      	movs	r0, #0
 80065f4:	e7f7      	b.n	80065e6 <__swsetup_r+0xba>
 80065f6:	bf00      	nop
 80065f8:	2000000c 	.word	0x2000000c
 80065fc:	0800703c 	.word	0x0800703c
 8006600:	0800705c 	.word	0x0800705c
 8006604:	0800701c 	.word	0x0800701c

08006608 <abort>:
 8006608:	b508      	push	{r3, lr}
 800660a:	2006      	movs	r0, #6
 800660c:	f000 fa52 	bl	8006ab4 <raise>
 8006610:	2001      	movs	r0, #1
 8006612:	f7fb f81f 	bl	8001654 <_exit>
	...

08006618 <__sflush_r>:
 8006618:	898a      	ldrh	r2, [r1, #12]
 800661a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	4605      	mov	r5, r0
 8006620:	0710      	lsls	r0, r2, #28
 8006622:	460c      	mov	r4, r1
 8006624:	d458      	bmi.n	80066d8 <__sflush_r+0xc0>
 8006626:	684b      	ldr	r3, [r1, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	dc05      	bgt.n	8006638 <__sflush_r+0x20>
 800662c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	dc02      	bgt.n	8006638 <__sflush_r+0x20>
 8006632:	2000      	movs	r0, #0
 8006634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800663a:	2e00      	cmp	r6, #0
 800663c:	d0f9      	beq.n	8006632 <__sflush_r+0x1a>
 800663e:	2300      	movs	r3, #0
 8006640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006644:	682f      	ldr	r7, [r5, #0]
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	d032      	beq.n	80066b0 <__sflush_r+0x98>
 800664a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	075a      	lsls	r2, r3, #29
 8006650:	d505      	bpl.n	800665e <__sflush_r+0x46>
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	1ac0      	subs	r0, r0, r3
 8006656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006658:	b10b      	cbz	r3, 800665e <__sflush_r+0x46>
 800665a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800665c:	1ac0      	subs	r0, r0, r3
 800665e:	2300      	movs	r3, #0
 8006660:	4602      	mov	r2, r0
 8006662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006664:	6a21      	ldr	r1, [r4, #32]
 8006666:	4628      	mov	r0, r5
 8006668:	47b0      	blx	r6
 800666a:	1c43      	adds	r3, r0, #1
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	d106      	bne.n	800667e <__sflush_r+0x66>
 8006670:	6829      	ldr	r1, [r5, #0]
 8006672:	291d      	cmp	r1, #29
 8006674:	d82c      	bhi.n	80066d0 <__sflush_r+0xb8>
 8006676:	4a2a      	ldr	r2, [pc, #168]	; (8006720 <__sflush_r+0x108>)
 8006678:	40ca      	lsrs	r2, r1
 800667a:	07d6      	lsls	r6, r2, #31
 800667c:	d528      	bpl.n	80066d0 <__sflush_r+0xb8>
 800667e:	2200      	movs	r2, #0
 8006680:	6062      	str	r2, [r4, #4]
 8006682:	04d9      	lsls	r1, r3, #19
 8006684:	6922      	ldr	r2, [r4, #16]
 8006686:	6022      	str	r2, [r4, #0]
 8006688:	d504      	bpl.n	8006694 <__sflush_r+0x7c>
 800668a:	1c42      	adds	r2, r0, #1
 800668c:	d101      	bne.n	8006692 <__sflush_r+0x7a>
 800668e:	682b      	ldr	r3, [r5, #0]
 8006690:	b903      	cbnz	r3, 8006694 <__sflush_r+0x7c>
 8006692:	6560      	str	r0, [r4, #84]	; 0x54
 8006694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006696:	602f      	str	r7, [r5, #0]
 8006698:	2900      	cmp	r1, #0
 800669a:	d0ca      	beq.n	8006632 <__sflush_r+0x1a>
 800669c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066a0:	4299      	cmp	r1, r3
 80066a2:	d002      	beq.n	80066aa <__sflush_r+0x92>
 80066a4:	4628      	mov	r0, r5
 80066a6:	f7ff fae3 	bl	8005c70 <_free_r>
 80066aa:	2000      	movs	r0, #0
 80066ac:	6360      	str	r0, [r4, #52]	; 0x34
 80066ae:	e7c1      	b.n	8006634 <__sflush_r+0x1c>
 80066b0:	6a21      	ldr	r1, [r4, #32]
 80066b2:	2301      	movs	r3, #1
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b0      	blx	r6
 80066b8:	1c41      	adds	r1, r0, #1
 80066ba:	d1c7      	bne.n	800664c <__sflush_r+0x34>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0c4      	beq.n	800664c <__sflush_r+0x34>
 80066c2:	2b1d      	cmp	r3, #29
 80066c4:	d001      	beq.n	80066ca <__sflush_r+0xb2>
 80066c6:	2b16      	cmp	r3, #22
 80066c8:	d101      	bne.n	80066ce <__sflush_r+0xb6>
 80066ca:	602f      	str	r7, [r5, #0]
 80066cc:	e7b1      	b.n	8006632 <__sflush_r+0x1a>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	e7ad      	b.n	8006634 <__sflush_r+0x1c>
 80066d8:	690f      	ldr	r7, [r1, #16]
 80066da:	2f00      	cmp	r7, #0
 80066dc:	d0a9      	beq.n	8006632 <__sflush_r+0x1a>
 80066de:	0793      	lsls	r3, r2, #30
 80066e0:	680e      	ldr	r6, [r1, #0]
 80066e2:	bf08      	it	eq
 80066e4:	694b      	ldreq	r3, [r1, #20]
 80066e6:	600f      	str	r7, [r1, #0]
 80066e8:	bf18      	it	ne
 80066ea:	2300      	movne	r3, #0
 80066ec:	eba6 0807 	sub.w	r8, r6, r7
 80066f0:	608b      	str	r3, [r1, #8]
 80066f2:	f1b8 0f00 	cmp.w	r8, #0
 80066f6:	dd9c      	ble.n	8006632 <__sflush_r+0x1a>
 80066f8:	6a21      	ldr	r1, [r4, #32]
 80066fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066fc:	4643      	mov	r3, r8
 80066fe:	463a      	mov	r2, r7
 8006700:	4628      	mov	r0, r5
 8006702:	47b0      	blx	r6
 8006704:	2800      	cmp	r0, #0
 8006706:	dc06      	bgt.n	8006716 <__sflush_r+0xfe>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006714:	e78e      	b.n	8006634 <__sflush_r+0x1c>
 8006716:	4407      	add	r7, r0
 8006718:	eba8 0800 	sub.w	r8, r8, r0
 800671c:	e7e9      	b.n	80066f2 <__sflush_r+0xda>
 800671e:	bf00      	nop
 8006720:	20400001 	.word	0x20400001

08006724 <_fflush_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	690b      	ldr	r3, [r1, #16]
 8006728:	4605      	mov	r5, r0
 800672a:	460c      	mov	r4, r1
 800672c:	b913      	cbnz	r3, 8006734 <_fflush_r+0x10>
 800672e:	2500      	movs	r5, #0
 8006730:	4628      	mov	r0, r5
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	b118      	cbz	r0, 800673e <_fflush_r+0x1a>
 8006736:	6983      	ldr	r3, [r0, #24]
 8006738:	b90b      	cbnz	r3, 800673e <_fflush_r+0x1a>
 800673a:	f000 f887 	bl	800684c <__sinit>
 800673e:	4b14      	ldr	r3, [pc, #80]	; (8006790 <_fflush_r+0x6c>)
 8006740:	429c      	cmp	r4, r3
 8006742:	d11b      	bne.n	800677c <_fflush_r+0x58>
 8006744:	686c      	ldr	r4, [r5, #4]
 8006746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0ef      	beq.n	800672e <_fflush_r+0xa>
 800674e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006750:	07d0      	lsls	r0, r2, #31
 8006752:	d404      	bmi.n	800675e <_fflush_r+0x3a>
 8006754:	0599      	lsls	r1, r3, #22
 8006756:	d402      	bmi.n	800675e <_fflush_r+0x3a>
 8006758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800675a:	f000 f915 	bl	8006988 <__retarget_lock_acquire_recursive>
 800675e:	4628      	mov	r0, r5
 8006760:	4621      	mov	r1, r4
 8006762:	f7ff ff59 	bl	8006618 <__sflush_r>
 8006766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006768:	07da      	lsls	r2, r3, #31
 800676a:	4605      	mov	r5, r0
 800676c:	d4e0      	bmi.n	8006730 <_fflush_r+0xc>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	059b      	lsls	r3, r3, #22
 8006772:	d4dd      	bmi.n	8006730 <_fflush_r+0xc>
 8006774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006776:	f000 f908 	bl	800698a <__retarget_lock_release_recursive>
 800677a:	e7d9      	b.n	8006730 <_fflush_r+0xc>
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <_fflush_r+0x70>)
 800677e:	429c      	cmp	r4, r3
 8006780:	d101      	bne.n	8006786 <_fflush_r+0x62>
 8006782:	68ac      	ldr	r4, [r5, #8]
 8006784:	e7df      	b.n	8006746 <_fflush_r+0x22>
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <_fflush_r+0x74>)
 8006788:	429c      	cmp	r4, r3
 800678a:	bf08      	it	eq
 800678c:	68ec      	ldreq	r4, [r5, #12]
 800678e:	e7da      	b.n	8006746 <_fflush_r+0x22>
 8006790:	0800703c 	.word	0x0800703c
 8006794:	0800705c 	.word	0x0800705c
 8006798:	0800701c 	.word	0x0800701c

0800679c <std>:
 800679c:	2300      	movs	r3, #0
 800679e:	b510      	push	{r4, lr}
 80067a0:	4604      	mov	r4, r0
 80067a2:	e9c0 3300 	strd	r3, r3, [r0]
 80067a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067aa:	6083      	str	r3, [r0, #8]
 80067ac:	8181      	strh	r1, [r0, #12]
 80067ae:	6643      	str	r3, [r0, #100]	; 0x64
 80067b0:	81c2      	strh	r2, [r0, #14]
 80067b2:	6183      	str	r3, [r0, #24]
 80067b4:	4619      	mov	r1, r3
 80067b6:	2208      	movs	r2, #8
 80067b8:	305c      	adds	r0, #92	; 0x5c
 80067ba:	f7fd fba7 	bl	8003f0c <memset>
 80067be:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <std+0x38>)
 80067c0:	6263      	str	r3, [r4, #36]	; 0x24
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <std+0x3c>)
 80067c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <std+0x40>)
 80067c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <std+0x44>)
 80067cc:	6224      	str	r4, [r4, #32]
 80067ce:	6323      	str	r3, [r4, #48]	; 0x30
 80067d0:	bd10      	pop	{r4, pc}
 80067d2:	bf00      	nop
 80067d4:	08006aed 	.word	0x08006aed
 80067d8:	08006b0f 	.word	0x08006b0f
 80067dc:	08006b47 	.word	0x08006b47
 80067e0:	08006b6b 	.word	0x08006b6b

080067e4 <_cleanup_r>:
 80067e4:	4901      	ldr	r1, [pc, #4]	; (80067ec <_cleanup_r+0x8>)
 80067e6:	f000 b8af 	b.w	8006948 <_fwalk_reent>
 80067ea:	bf00      	nop
 80067ec:	08006725 	.word	0x08006725

080067f0 <__sfmoreglue>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	1e4a      	subs	r2, r1, #1
 80067f4:	2568      	movs	r5, #104	; 0x68
 80067f6:	4355      	muls	r5, r2
 80067f8:	460e      	mov	r6, r1
 80067fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067fe:	f7ff fa87 	bl	8005d10 <_malloc_r>
 8006802:	4604      	mov	r4, r0
 8006804:	b140      	cbz	r0, 8006818 <__sfmoreglue+0x28>
 8006806:	2100      	movs	r1, #0
 8006808:	e9c0 1600 	strd	r1, r6, [r0]
 800680c:	300c      	adds	r0, #12
 800680e:	60a0      	str	r0, [r4, #8]
 8006810:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006814:	f7fd fb7a 	bl	8003f0c <memset>
 8006818:	4620      	mov	r0, r4
 800681a:	bd70      	pop	{r4, r5, r6, pc}

0800681c <__sfp_lock_acquire>:
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <__sfp_lock_acquire+0x8>)
 800681e:	f000 b8b3 	b.w	8006988 <__retarget_lock_acquire_recursive>
 8006822:	bf00      	nop
 8006824:	200002b4 	.word	0x200002b4

08006828 <__sfp_lock_release>:
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <__sfp_lock_release+0x8>)
 800682a:	f000 b8ae 	b.w	800698a <__retarget_lock_release_recursive>
 800682e:	bf00      	nop
 8006830:	200002b4 	.word	0x200002b4

08006834 <__sinit_lock_acquire>:
 8006834:	4801      	ldr	r0, [pc, #4]	; (800683c <__sinit_lock_acquire+0x8>)
 8006836:	f000 b8a7 	b.w	8006988 <__retarget_lock_acquire_recursive>
 800683a:	bf00      	nop
 800683c:	200002af 	.word	0x200002af

08006840 <__sinit_lock_release>:
 8006840:	4801      	ldr	r0, [pc, #4]	; (8006848 <__sinit_lock_release+0x8>)
 8006842:	f000 b8a2 	b.w	800698a <__retarget_lock_release_recursive>
 8006846:	bf00      	nop
 8006848:	200002af 	.word	0x200002af

0800684c <__sinit>:
 800684c:	b510      	push	{r4, lr}
 800684e:	4604      	mov	r4, r0
 8006850:	f7ff fff0 	bl	8006834 <__sinit_lock_acquire>
 8006854:	69a3      	ldr	r3, [r4, #24]
 8006856:	b11b      	cbz	r3, 8006860 <__sinit+0x14>
 8006858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685c:	f7ff bff0 	b.w	8006840 <__sinit_lock_release>
 8006860:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006864:	6523      	str	r3, [r4, #80]	; 0x50
 8006866:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <__sinit+0x68>)
 8006868:	4a13      	ldr	r2, [pc, #76]	; (80068b8 <__sinit+0x6c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	62a2      	str	r2, [r4, #40]	; 0x28
 800686e:	42a3      	cmp	r3, r4
 8006870:	bf04      	itt	eq
 8006872:	2301      	moveq	r3, #1
 8006874:	61a3      	streq	r3, [r4, #24]
 8006876:	4620      	mov	r0, r4
 8006878:	f000 f820 	bl	80068bc <__sfp>
 800687c:	6060      	str	r0, [r4, #4]
 800687e:	4620      	mov	r0, r4
 8006880:	f000 f81c 	bl	80068bc <__sfp>
 8006884:	60a0      	str	r0, [r4, #8]
 8006886:	4620      	mov	r0, r4
 8006888:	f000 f818 	bl	80068bc <__sfp>
 800688c:	2200      	movs	r2, #0
 800688e:	60e0      	str	r0, [r4, #12]
 8006890:	2104      	movs	r1, #4
 8006892:	6860      	ldr	r0, [r4, #4]
 8006894:	f7ff ff82 	bl	800679c <std>
 8006898:	68a0      	ldr	r0, [r4, #8]
 800689a:	2201      	movs	r2, #1
 800689c:	2109      	movs	r1, #9
 800689e:	f7ff ff7d 	bl	800679c <std>
 80068a2:	68e0      	ldr	r0, [r4, #12]
 80068a4:	2202      	movs	r2, #2
 80068a6:	2112      	movs	r1, #18
 80068a8:	f7ff ff78 	bl	800679c <std>
 80068ac:	2301      	movs	r3, #1
 80068ae:	61a3      	str	r3, [r4, #24]
 80068b0:	e7d2      	b.n	8006858 <__sinit+0xc>
 80068b2:	bf00      	nop
 80068b4:	08006c98 	.word	0x08006c98
 80068b8:	080067e5 	.word	0x080067e5

080068bc <__sfp>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	4607      	mov	r7, r0
 80068c0:	f7ff ffac 	bl	800681c <__sfp_lock_acquire>
 80068c4:	4b1e      	ldr	r3, [pc, #120]	; (8006940 <__sfp+0x84>)
 80068c6:	681e      	ldr	r6, [r3, #0]
 80068c8:	69b3      	ldr	r3, [r6, #24]
 80068ca:	b913      	cbnz	r3, 80068d2 <__sfp+0x16>
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7ff ffbd 	bl	800684c <__sinit>
 80068d2:	3648      	adds	r6, #72	; 0x48
 80068d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068d8:	3b01      	subs	r3, #1
 80068da:	d503      	bpl.n	80068e4 <__sfp+0x28>
 80068dc:	6833      	ldr	r3, [r6, #0]
 80068de:	b30b      	cbz	r3, 8006924 <__sfp+0x68>
 80068e0:	6836      	ldr	r6, [r6, #0]
 80068e2:	e7f7      	b.n	80068d4 <__sfp+0x18>
 80068e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068e8:	b9d5      	cbnz	r5, 8006920 <__sfp+0x64>
 80068ea:	4b16      	ldr	r3, [pc, #88]	; (8006944 <__sfp+0x88>)
 80068ec:	60e3      	str	r3, [r4, #12]
 80068ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068f2:	6665      	str	r5, [r4, #100]	; 0x64
 80068f4:	f000 f847 	bl	8006986 <__retarget_lock_init_recursive>
 80068f8:	f7ff ff96 	bl	8006828 <__sfp_lock_release>
 80068fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006900:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006904:	6025      	str	r5, [r4, #0]
 8006906:	61a5      	str	r5, [r4, #24]
 8006908:	2208      	movs	r2, #8
 800690a:	4629      	mov	r1, r5
 800690c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006910:	f7fd fafc 	bl	8003f0c <memset>
 8006914:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006918:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800691c:	4620      	mov	r0, r4
 800691e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006920:	3468      	adds	r4, #104	; 0x68
 8006922:	e7d9      	b.n	80068d8 <__sfp+0x1c>
 8006924:	2104      	movs	r1, #4
 8006926:	4638      	mov	r0, r7
 8006928:	f7ff ff62 	bl	80067f0 <__sfmoreglue>
 800692c:	4604      	mov	r4, r0
 800692e:	6030      	str	r0, [r6, #0]
 8006930:	2800      	cmp	r0, #0
 8006932:	d1d5      	bne.n	80068e0 <__sfp+0x24>
 8006934:	f7ff ff78 	bl	8006828 <__sfp_lock_release>
 8006938:	230c      	movs	r3, #12
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	e7ee      	b.n	800691c <__sfp+0x60>
 800693e:	bf00      	nop
 8006940:	08006c98 	.word	0x08006c98
 8006944:	ffff0001 	.word	0xffff0001

08006948 <_fwalk_reent>:
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	4606      	mov	r6, r0
 800694e:	4688      	mov	r8, r1
 8006950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006954:	2700      	movs	r7, #0
 8006956:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800695a:	f1b9 0901 	subs.w	r9, r9, #1
 800695e:	d505      	bpl.n	800696c <_fwalk_reent+0x24>
 8006960:	6824      	ldr	r4, [r4, #0]
 8006962:	2c00      	cmp	r4, #0
 8006964:	d1f7      	bne.n	8006956 <_fwalk_reent+0xe>
 8006966:	4638      	mov	r0, r7
 8006968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696c:	89ab      	ldrh	r3, [r5, #12]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d907      	bls.n	8006982 <_fwalk_reent+0x3a>
 8006972:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006976:	3301      	adds	r3, #1
 8006978:	d003      	beq.n	8006982 <_fwalk_reent+0x3a>
 800697a:	4629      	mov	r1, r5
 800697c:	4630      	mov	r0, r6
 800697e:	47c0      	blx	r8
 8006980:	4307      	orrs	r7, r0
 8006982:	3568      	adds	r5, #104	; 0x68
 8006984:	e7e9      	b.n	800695a <_fwalk_reent+0x12>

08006986 <__retarget_lock_init_recursive>:
 8006986:	4770      	bx	lr

08006988 <__retarget_lock_acquire_recursive>:
 8006988:	4770      	bx	lr

0800698a <__retarget_lock_release_recursive>:
 800698a:	4770      	bx	lr

0800698c <__swhatbuf_r>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	460e      	mov	r6, r1
 8006990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006994:	2900      	cmp	r1, #0
 8006996:	b096      	sub	sp, #88	; 0x58
 8006998:	4614      	mov	r4, r2
 800699a:	461d      	mov	r5, r3
 800699c:	da07      	bge.n	80069ae <__swhatbuf_r+0x22>
 800699e:	2300      	movs	r3, #0
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	89b3      	ldrh	r3, [r6, #12]
 80069a4:	061a      	lsls	r2, r3, #24
 80069a6:	d410      	bmi.n	80069ca <__swhatbuf_r+0x3e>
 80069a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ac:	e00e      	b.n	80069cc <__swhatbuf_r+0x40>
 80069ae:	466a      	mov	r2, sp
 80069b0:	f000 f902 	bl	8006bb8 <_fstat_r>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	dbf2      	blt.n	800699e <__swhatbuf_r+0x12>
 80069b8:	9a01      	ldr	r2, [sp, #4]
 80069ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069c2:	425a      	negs	r2, r3
 80069c4:	415a      	adcs	r2, r3
 80069c6:	602a      	str	r2, [r5, #0]
 80069c8:	e7ee      	b.n	80069a8 <__swhatbuf_r+0x1c>
 80069ca:	2340      	movs	r3, #64	; 0x40
 80069cc:	2000      	movs	r0, #0
 80069ce:	6023      	str	r3, [r4, #0]
 80069d0:	b016      	add	sp, #88	; 0x58
 80069d2:	bd70      	pop	{r4, r5, r6, pc}

080069d4 <__smakebuf_r>:
 80069d4:	898b      	ldrh	r3, [r1, #12]
 80069d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069d8:	079d      	lsls	r5, r3, #30
 80069da:	4606      	mov	r6, r0
 80069dc:	460c      	mov	r4, r1
 80069de:	d507      	bpl.n	80069f0 <__smakebuf_r+0x1c>
 80069e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	6123      	str	r3, [r4, #16]
 80069e8:	2301      	movs	r3, #1
 80069ea:	6163      	str	r3, [r4, #20]
 80069ec:	b002      	add	sp, #8
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	ab01      	add	r3, sp, #4
 80069f2:	466a      	mov	r2, sp
 80069f4:	f7ff ffca 	bl	800698c <__swhatbuf_r>
 80069f8:	9900      	ldr	r1, [sp, #0]
 80069fa:	4605      	mov	r5, r0
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff f987 	bl	8005d10 <_malloc_r>
 8006a02:	b948      	cbnz	r0, 8006a18 <__smakebuf_r+0x44>
 8006a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a08:	059a      	lsls	r2, r3, #22
 8006a0a:	d4ef      	bmi.n	80069ec <__smakebuf_r+0x18>
 8006a0c:	f023 0303 	bic.w	r3, r3, #3
 8006a10:	f043 0302 	orr.w	r3, r3, #2
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	e7e3      	b.n	80069e0 <__smakebuf_r+0xc>
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <__smakebuf_r+0x7c>)
 8006a1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	6020      	str	r0, [r4, #0]
 8006a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	9b00      	ldr	r3, [sp, #0]
 8006a28:	6163      	str	r3, [r4, #20]
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	6120      	str	r0, [r4, #16]
 8006a2e:	b15b      	cbz	r3, 8006a48 <__smakebuf_r+0x74>
 8006a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a34:	4630      	mov	r0, r6
 8006a36:	f000 f8d1 	bl	8006bdc <_isatty_r>
 8006a3a:	b128      	cbz	r0, 8006a48 <__smakebuf_r+0x74>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	89a0      	ldrh	r0, [r4, #12]
 8006a4a:	4305      	orrs	r5, r0
 8006a4c:	81a5      	strh	r5, [r4, #12]
 8006a4e:	e7cd      	b.n	80069ec <__smakebuf_r+0x18>
 8006a50:	080067e5 	.word	0x080067e5

08006a54 <_malloc_usable_size_r>:
 8006a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a58:	1f18      	subs	r0, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bfbc      	itt	lt
 8006a5e:	580b      	ldrlt	r3, [r1, r0]
 8006a60:	18c0      	addlt	r0, r0, r3
 8006a62:	4770      	bx	lr

08006a64 <_raise_r>:
 8006a64:	291f      	cmp	r1, #31
 8006a66:	b538      	push	{r3, r4, r5, lr}
 8006a68:	4604      	mov	r4, r0
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	d904      	bls.n	8006a78 <_raise_r+0x14>
 8006a6e:	2316      	movs	r3, #22
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a7a:	b112      	cbz	r2, 8006a82 <_raise_r+0x1e>
 8006a7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a80:	b94b      	cbnz	r3, 8006a96 <_raise_r+0x32>
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f830 	bl	8006ae8 <_getpid_r>
 8006a88:	462a      	mov	r2, r5
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a92:	f000 b817 	b.w	8006ac4 <_kill_r>
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d00a      	beq.n	8006ab0 <_raise_r+0x4c>
 8006a9a:	1c59      	adds	r1, r3, #1
 8006a9c:	d103      	bne.n	8006aa6 <_raise_r+0x42>
 8006a9e:	2316      	movs	r3, #22
 8006aa0:	6003      	str	r3, [r0, #0]
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	e7e7      	b.n	8006a76 <_raise_r+0x12>
 8006aa6:	2400      	movs	r4, #0
 8006aa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006aac:	4628      	mov	r0, r5
 8006aae:	4798      	blx	r3
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e7e0      	b.n	8006a76 <_raise_r+0x12>

08006ab4 <raise>:
 8006ab4:	4b02      	ldr	r3, [pc, #8]	; (8006ac0 <raise+0xc>)
 8006ab6:	4601      	mov	r1, r0
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	f7ff bfd3 	b.w	8006a64 <_raise_r>
 8006abe:	bf00      	nop
 8006ac0:	2000000c 	.word	0x2000000c

08006ac4 <_kill_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4d07      	ldr	r5, [pc, #28]	; (8006ae4 <_kill_r+0x20>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4604      	mov	r4, r0
 8006acc:	4608      	mov	r0, r1
 8006ace:	4611      	mov	r1, r2
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	f7fa fdaf 	bl	8001634 <_kill>
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	d102      	bne.n	8006ae0 <_kill_r+0x1c>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	b103      	cbz	r3, 8006ae0 <_kill_r+0x1c>
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200002a8 	.word	0x200002a8

08006ae8 <_getpid_r>:
 8006ae8:	f7fa bd9c 	b.w	8001624 <_getpid>

08006aec <__sread>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	460c      	mov	r4, r1
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	f000 f894 	bl	8006c20 <_read_r>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	bfab      	itete	ge
 8006afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006afe:	89a3      	ldrhlt	r3, [r4, #12]
 8006b00:	181b      	addge	r3, r3, r0
 8006b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b06:	bfac      	ite	ge
 8006b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b0a:	81a3      	strhlt	r3, [r4, #12]
 8006b0c:	bd10      	pop	{r4, pc}

08006b0e <__swrite>:
 8006b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b12:	461f      	mov	r7, r3
 8006b14:	898b      	ldrh	r3, [r1, #12]
 8006b16:	05db      	lsls	r3, r3, #23
 8006b18:	4605      	mov	r5, r0
 8006b1a:	460c      	mov	r4, r1
 8006b1c:	4616      	mov	r6, r2
 8006b1e:	d505      	bpl.n	8006b2c <__swrite+0x1e>
 8006b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b24:	2302      	movs	r3, #2
 8006b26:	2200      	movs	r2, #0
 8006b28:	f000 f868 	bl	8006bfc <_lseek_r>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	4632      	mov	r2, r6
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b42:	f000 b817 	b.w	8006b74 <_write_r>

08006b46 <__sseek>:
 8006b46:	b510      	push	{r4, lr}
 8006b48:	460c      	mov	r4, r1
 8006b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4e:	f000 f855 	bl	8006bfc <_lseek_r>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	bf15      	itete	ne
 8006b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b62:	81a3      	strheq	r3, [r4, #12]
 8006b64:	bf18      	it	ne
 8006b66:	81a3      	strhne	r3, [r4, #12]
 8006b68:	bd10      	pop	{r4, pc}

08006b6a <__sclose>:
 8006b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6e:	f000 b813 	b.w	8006b98 <_close_r>
	...

08006b74 <_write_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4d07      	ldr	r5, [pc, #28]	; (8006b94 <_write_r+0x20>)
 8006b78:	4604      	mov	r4, r0
 8006b7a:	4608      	mov	r0, r1
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	2200      	movs	r2, #0
 8006b80:	602a      	str	r2, [r5, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	f7fa fd8d 	bl	80016a2 <_write>
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	d102      	bne.n	8006b92 <_write_r+0x1e>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	b103      	cbz	r3, 8006b92 <_write_r+0x1e>
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	bd38      	pop	{r3, r4, r5, pc}
 8006b94:	200002a8 	.word	0x200002a8

08006b98 <_close_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4d06      	ldr	r5, [pc, #24]	; (8006bb4 <_close_r+0x1c>)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	f7fa fd99 	bl	80016da <_close>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_close_r+0x1a>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_close_r+0x1a>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	200002a8 	.word	0x200002a8

08006bb8 <_fstat_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d07      	ldr	r5, [pc, #28]	; (8006bd8 <_fstat_r+0x20>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	602b      	str	r3, [r5, #0]
 8006bc6:	f7fa fd94 	bl	80016f2 <_fstat>
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	d102      	bne.n	8006bd4 <_fstat_r+0x1c>
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	b103      	cbz	r3, 8006bd4 <_fstat_r+0x1c>
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	bd38      	pop	{r3, r4, r5, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200002a8 	.word	0x200002a8

08006bdc <_isatty_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d06      	ldr	r5, [pc, #24]	; (8006bf8 <_isatty_r+0x1c>)
 8006be0:	2300      	movs	r3, #0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	f7fa fd93 	bl	8001712 <_isatty>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_isatty_r+0x1a>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_isatty_r+0x1a>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	200002a8 	.word	0x200002a8

08006bfc <_lseek_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d07      	ldr	r5, [pc, #28]	; (8006c1c <_lseek_r+0x20>)
 8006c00:	4604      	mov	r4, r0
 8006c02:	4608      	mov	r0, r1
 8006c04:	4611      	mov	r1, r2
 8006c06:	2200      	movs	r2, #0
 8006c08:	602a      	str	r2, [r5, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f7fa fd8c 	bl	8001728 <_lseek>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_lseek_r+0x1e>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_lseek_r+0x1e>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	200002a8 	.word	0x200002a8

08006c20 <_read_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	; (8006c40 <_read_r+0x20>)
 8006c24:	4604      	mov	r4, r0
 8006c26:	4608      	mov	r0, r1
 8006c28:	4611      	mov	r1, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	602a      	str	r2, [r5, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f7fa fd1a 	bl	8001668 <_read>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_read_r+0x1e>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_read_r+0x1e>
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	200002a8 	.word	0x200002a8

08006c44 <_init>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr

08006c50 <_fini>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr
