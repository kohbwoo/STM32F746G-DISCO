
STM32F746G-DISC_i2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f0c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f8  080030f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003100  08003100  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003114  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003114  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1e9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206b  00000000  00000000  0002f225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00031290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00032020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024eee  00000000  00000000  00032ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010709  00000000  00000000  00057b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7332  00000000  00000000  0006829f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f5d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  0014f624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080030bc 	.word	0x080030bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080030bc 	.word	0x080030bc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x3F // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	f023 030f 	bic.w	r3, r3, #15
 8000510:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	f043 030c 	orr.w	r3, r3, #12
 800051e:	b2db      	uxtb	r3, r3
 8000520:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	f043 0308 	orr.w	r3, r3, #8
 8000528:	b2db      	uxtb	r3, r3
 800052a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	f043 030c 	orr.w	r3, r3, #12
 8000532:	b2db      	uxtb	r3, r3
 8000534:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000536:	7bbb      	ldrb	r3, [r7, #14]
 8000538:	f043 0308 	orr.w	r3, r3, #8
 800053c:	b2db      	uxtb	r3, r3
 800053e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000540:	f107 0208 	add.w	r2, r7, #8
 8000544:	2364      	movs	r3, #100	; 0x64
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2304      	movs	r3, #4
 800054a:	213f      	movs	r1, #63	; 0x3f
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <lcd_send_cmd+0x5c>)
 800054e:	f000 fed1 	bl	80012f4 <HAL_I2C_Master_Transmit>
}
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000028 	.word	0x20000028

08000560 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f043 030d 	orr.w	r3, r3, #13
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0309 	orr.w	r3, r3, #9
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	f043 030d 	orr.w	r3, r3, #13
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f043 0309 	orr.w	r3, r3, #9
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	2364      	movs	r3, #100	; 0x64
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2304      	movs	r3, #4
 80005aa:	213f      	movs	r1, #63	; 0x3f
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <lcd_send_data+0x5c>)
 80005ae:	f000 fea1 	bl	80012f4 <HAL_I2C_Master_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000028 	.word	0x20000028

080005c0 <lcd_clear>:

void lcd_clear (void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80005c6:	2080      	movs	r0, #128	; 0x80
 80005c8:	f7ff ff9a 	bl	8000500 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	e005      	b.n	80005de <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80005d2:	2020      	movs	r0, #32
 80005d4:	f7ff ffc4 	bl	8000560 <lcd_send_data>
	for (int i=0; i<70; i++)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b45      	cmp	r3, #69	; 0x45
 80005e2:	ddf6      	ble.n	80005d2 <lcd_clear+0x12>
	}
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80005f2:	2032      	movs	r0, #50	; 0x32
 80005f4:	f000 fb08 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x30);
 80005f8:	2030      	movs	r0, #48	; 0x30
 80005fa:	f7ff ff81 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80005fe:	2005      	movs	r0, #5
 8000600:	f000 fb02 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000604:	2030      	movs	r0, #48	; 0x30
 8000606:	f7ff ff7b 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800060a:	2001      	movs	r0, #1
 800060c:	f000 fafc 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000610:	2030      	movs	r0, #48	; 0x30
 8000612:	f7ff ff75 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f000 faf6 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800061c:	2020      	movs	r0, #32
 800061e:	f7ff ff6f 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(10);
 8000622:	200a      	movs	r0, #10
 8000624:	f000 faf0 	bl	8000c08 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000628:	2028      	movs	r0, #40	; 0x28
 800062a:	f7ff ff69 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 faea 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000634:	2008      	movs	r0, #8
 8000636:	f7ff ff63 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 fae4 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000640:	2001      	movs	r0, #1
 8000642:	f7ff ff5d 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fade 	bl	8000c08 <HAL_Delay>
	HAL_Delay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fadb 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000652:	2006      	movs	r0, #6
 8000654:	f7ff ff54 	bl	8000500 <lcd_send_cmd>
	HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fad5 	bl	8000c08 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800065e:	200c      	movs	r0, #12
 8000660:	f7ff ff4e 	bl	8000500 <lcd_send_cmd>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000670:	e006      	b.n	8000680 <lcd_send_string+0x18>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff70 	bl	8000560 <lcd_send_data>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f4      	bne.n	8000672 <lcd_send_string+0xa>
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fa89 	bl	8000bae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f818 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f8e6 	bl	8000870 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006a4:	f000 f8a4 	bl	80007f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80006a8:	f7ff ffa1 	bl	80005ee <lcd_init>
  lcd_clear();
 80006ac:	f7ff ff88 	bl	80005c0 <lcd_clear>

  lcd_send_string("helloworld");
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <main+0x34>)
 80006b2:	f7ff ffd9 	bl	8000668 <lcd_send_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80006b6:	2102      	movs	r1, #2
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <main+0x38>)
 80006ba:	f000 fd70 	bl	800119e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	f000 faa1 	bl	8000c08 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80006c6:	e7f6      	b.n	80006b6 <main+0x22>
 80006c8:	080030d4 	.word	0x080030d4
 80006cc:	40022000 	.word	0x40022000

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0b4      	sub	sp, #208	; 0xd0
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fce4 	bl	80030ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2284      	movs	r2, #132	; 0x84
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 fcd5 	bl	80030ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <SystemClock_Config+0x118>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	4a38      	ldr	r2, [pc, #224]	; (80007e8 <SystemClock_Config+0x118>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <SystemClock_Config+0x118>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071a:	4b34      	ldr	r3, [pc, #208]	; (80007ec <SystemClock_Config+0x11c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a33      	ldr	r2, [pc, #204]	; (80007ec <SystemClock_Config+0x11c>)
 8000720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000724:	6013      	str	r3, [r2, #0]
 8000726:	4b31      	ldr	r3, [pc, #196]	; (80007ec <SystemClock_Config+0x11c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000732:	2301      	movs	r3, #1
 8000734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800074e:	2319      	movs	r3, #25
 8000750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000754:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000762:	2309      	movs	r3, #9
 8000764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f911 	bl	8001994 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000778:	f000 f8e2 	bl	8000940 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800077c:	f001 f8ba 	bl	80018f4 <HAL_PWREx_EnableOverDrive>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000786:	f000 f8db 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007b0:	2106      	movs	r1, #6
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fb92 	bl	8001edc <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007be:	f000 f8bf 	bl	8000940 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fd77 	bl	80022c4 <HAL_RCCEx_PeriphCLKConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80007dc:	f000 f8b0 	bl	8000940 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	37d0      	adds	r7, #208	; 0xd0
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_I2C1_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_I2C1_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_I2C1_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <MX_I2C1_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_I2C1_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_I2C1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082a:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_I2C1_Init+0x74>)
 800082c:	f000 fcd2 	bl	80011d4 <HAL_I2C_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000836:	f000 f883 	bl	8000940 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083a:	2100      	movs	r1, #0
 800083c:	4809      	ldr	r0, [pc, #36]	; (8000864 <MX_I2C1_Init+0x74>)
 800083e:	f000 ffc1 	bl	80017c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 f87a 	bl	8000940 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_I2C1_Init+0x74>)
 8000850:	f001 f803 	bl	800185a <HAL_I2CEx_ConfigDigitalFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085a:	f000 f871 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000028 	.word	0x20000028
 8000868:	40005400 	.word	0x40005400
 800086c:	00c0eaff 	.word	0x00c0eaff

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_GPIO_Init+0xa4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a22      	ldr	r2, [pc, #136]	; (8000914 <MX_GPIO_Init+0xa4>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_GPIO_Init+0xa4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_GPIO_Init+0xa4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2102      	movs	r1, #2
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_GPIO_Init+0xa8>)
 80008ec:	f000 fc3e 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0xa8>)
 8000908:	f000 fa84 	bl	8000e14 <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f94b 	bl	8000bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40010000 	.word	0x40010000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x44>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x44>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x44>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x44>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x44>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x44>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_I2C_MspInit+0x7c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d128      	bne.n	8000a08 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_I2C_MspInit+0x80>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_I2C_MspInit+0x80>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_I2C_MspInit+0x80>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d4:	2312      	movs	r3, #18
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e0:	2304      	movs	r3, #4
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <HAL_I2C_MspInit+0x84>)
 80009ec:	f000 fa12 	bl	8000e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_I2C_MspInit+0x80>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_I2C_MspInit+0x80>)
 80009f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_I2C_MspInit+0x80>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40005400 	.word	0x40005400
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400

08000a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2019      	movs	r0, #25
 8000a32:	f000 f9c5 	bl	8000dc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a36:	2019      	movs	r0, #25
 8000a38:	f000 f9de 	bl	8000df8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <HAL_InitTick+0xa0>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a40:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <HAL_InitTick+0xa0>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6453      	str	r3, [r2, #68]	; 0x44
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_InitTick+0xa0>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a54:	f107 0210 	add.w	r2, r7, #16
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fbfe 	bl	8002260 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a64:	f001 fbe8 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <HAL_InitTick+0xa4>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	0c9b      	lsrs	r3, r3, #18
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <HAL_InitTick+0xac>)
 8000a80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000a9e:	f002 f801 	bl	8002aa4 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d104      	bne.n	8000ab2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aa8:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <HAL_InitTick+0xa8>)
 8000aaa:	f002 f85d 	bl	8002b68 <HAL_TIM_Base_Start_IT>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	431bde83 	.word	0x431bde83
 8000ac4:	20000074 	.word	0x20000074
 8000ac8:	40010000 	.word	0x40010000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b2a:	f002 f895 	bl	8002c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000074 	.word	0x20000074

08000b38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ffd7 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f002 fa6b 	bl	8003064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fd81 	bl	8000694 <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba0:	08003108 	.word	0x08003108
  ldr r2, =_sbss
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba8:	200000c4 	.word	0x200000c4

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>

08000bae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f000 f8f9 	bl	8000daa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb8:	200f      	movs	r0, #15
 8000bba:	f7ff ff2f 	bl	8000a1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bbe:	f7ff fec5 	bl	800094c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200000c0 	.word	0x200000c0

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200000c0 	.word	0x200000c0

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	05fa0000 	.word	0x05fa0000

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff4c 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd2:	f7ff ff61 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000dd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	6978      	ldr	r0, [r7, #20]
 8000dde:	f7ff ffb1 	bl	8000d44 <NVIC_EncodePriority>
 8000de2:	4602      	mov	r2, r0
 8000de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff80 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff54 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	e175      	b.n	8001120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	f040 8164 	bne.w	800111a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d00b      	beq.n	8000e72 <HAL_GPIO_Init+0x5e>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d007      	beq.n	8000e72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e66:	2b11      	cmp	r3, #17
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b12      	cmp	r3, #18
 8000e70:	d130      	bne.n	8000ed4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4013      	ands	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	091b      	lsrs	r3, r3, #4
 8000ebe:	f003 0201 	and.w	r2, r3, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x100>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b12      	cmp	r3, #18
 8000f12:	d123      	bne.n	8000f5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	08da      	lsrs	r2, r3, #3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3208      	adds	r2, #8
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691a      	ldr	r2, [r3, #16]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	69b9      	ldr	r1, [r7, #24]
 8000f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0203 	and.w	r2, r3, #3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f000 80be 	beq.w	800111a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b66      	ldr	r3, [pc, #408]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a65      	ldr	r2, [pc, #404]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b63      	ldr	r3, [pc, #396]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fb6:	4a61      	ldr	r2, [pc, #388]	; (800113c <HAL_GPIO_Init+0x328>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a58      	ldr	r2, [pc, #352]	; (8001140 <HAL_GPIO_Init+0x32c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d037      	beq.n	8001052 <HAL_GPIO_Init+0x23e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a57      	ldr	r2, [pc, #348]	; (8001144 <HAL_GPIO_Init+0x330>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d031      	beq.n	800104e <HAL_GPIO_Init+0x23a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a56      	ldr	r2, [pc, #344]	; (8001148 <HAL_GPIO_Init+0x334>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d02b      	beq.n	800104a <HAL_GPIO_Init+0x236>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a55      	ldr	r2, [pc, #340]	; (800114c <HAL_GPIO_Init+0x338>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d025      	beq.n	8001046 <HAL_GPIO_Init+0x232>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a54      	ldr	r2, [pc, #336]	; (8001150 <HAL_GPIO_Init+0x33c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d01f      	beq.n	8001042 <HAL_GPIO_Init+0x22e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a53      	ldr	r2, [pc, #332]	; (8001154 <HAL_GPIO_Init+0x340>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d019      	beq.n	800103e <HAL_GPIO_Init+0x22a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a52      	ldr	r2, [pc, #328]	; (8001158 <HAL_GPIO_Init+0x344>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d013      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a51      	ldr	r2, [pc, #324]	; (800115c <HAL_GPIO_Init+0x348>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a50      	ldr	r2, [pc, #320]	; (8001160 <HAL_GPIO_Init+0x34c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4f      	ldr	r2, [pc, #316]	; (8001164 <HAL_GPIO_Init+0x350>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x21a>
 800102a:	2309      	movs	r3, #9
 800102c:	e012      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800102e:	230a      	movs	r3, #10
 8001030:	e010      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001032:	2308      	movs	r3, #8
 8001034:	e00e      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001036:	2307      	movs	r3, #7
 8001038:	e00c      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800103a:	2306      	movs	r3, #6
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x240>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x240>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	; (800113c <HAL_GPIO_Init+0x328>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <HAL_GPIO_Init+0x354>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001096:	4a34      	ldr	r2, [pc, #208]	; (8001168 <HAL_GPIO_Init+0x354>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <HAL_GPIO_Init+0x354>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c0:	4a29      	ldr	r2, [pc, #164]	; (8001168 <HAL_GPIO_Init+0x354>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_GPIO_Init+0x354>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_GPIO_Init+0x354>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_GPIO_Init+0x354>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <HAL_GPIO_Init+0x354>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f ae86 	bls.w	8000e34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40022000 	.word	0x40022000
 8001164:	40022400 	.word	0x40022400
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	400b      	ands	r3, r1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e07f      	b.n	80012e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d106      	bne.n	8001200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fbca 	bl	8000994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2224      	movs	r2, #36	; 0x24
 8001204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001224:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001234:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d107      	bne.n	800124e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	e006      	b.n	800125c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800125a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d104      	bne.n	800126e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_I2C_Init+0x11c>)
 800127a:	430b      	orrs	r3, r1
 800127c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	ea42 0103 	orr.w	r1, r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	021a      	lsls	r2, r3, #8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69d9      	ldr	r1, [r3, #28]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1a      	ldr	r2, [r3, #32]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2220      	movs	r2, #32
 80012d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	02008000 	.word	0x02008000

080012f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	461a      	mov	r2, r3
 8001300:	460b      	mov	r3, r1
 8001302:	817b      	strh	r3, [r7, #10]
 8001304:	4613      	mov	r3, r2
 8001306:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b20      	cmp	r3, #32
 8001312:	f040 80da 	bne.w	80014ca <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_I2C_Master_Transmit+0x30>
 8001320:	2302      	movs	r3, #2
 8001322:	e0d3      	b.n	80014cc <HAL_I2C_Master_Transmit+0x1d8>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800132c:	f7ff fc60 	bl	8000bf0 <HAL_GetTick>
 8001330:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2319      	movs	r3, #25
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f8f0 	bl	8001524 <I2C_WaitOnFlagUntilTimeout>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0be      	b.n	80014cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2221      	movs	r2, #33	; 0x21
 8001352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2210      	movs	r2, #16
 800135a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	893a      	ldrh	r2, [r7, #8]
 800136e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137a:	b29b      	uxth	r3, r3
 800137c:	2bff      	cmp	r3, #255	; 0xff
 800137e:	d90e      	bls.n	800139e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138a:	b2da      	uxtb	r2, r3
 800138c:	8979      	ldrh	r1, [r7, #10]
 800138e:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f000 f9e6 	bl	8001768 <I2C_TransferConfig>
 800139c:	e06c      	b.n	8001478 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	8979      	ldrh	r1, [r7, #10]
 80013b0:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <HAL_I2C_Master_Transmit+0x1e0>)
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f9d5 	bl	8001768 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80013be:	e05b      	b.n	8001478 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	6a39      	ldr	r1, [r7, #32]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 f8ed 	bl	80015a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e07b      	b.n	80014cc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	781a      	ldrb	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29a      	uxth	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001408:	b29b      	uxth	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d034      	beq.n	8001478 <HAL_I2C_Master_Transmit+0x184>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001412:	2b00      	cmp	r3, #0
 8001414:	d130      	bne.n	8001478 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2200      	movs	r2, #0
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f87f 	bl	8001524 <I2C_WaitOnFlagUntilTimeout>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e04d      	b.n	80014cc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001434:	b29b      	uxth	r3, r3
 8001436:	2bff      	cmp	r3, #255	; 0xff
 8001438:	d90e      	bls.n	8001458 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	22ff      	movs	r2, #255	; 0xff
 800143e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001444:	b2da      	uxtb	r2, r3
 8001446:	8979      	ldrh	r1, [r7, #10]
 8001448:	2300      	movs	r3, #0
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 f989 	bl	8001768 <I2C_TransferConfig>
 8001456:	e00f      	b.n	8001478 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001466:	b2da      	uxtb	r2, r3
 8001468:	8979      	ldrh	r1, [r7, #10]
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f978 	bl	8001768 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147c:	b29b      	uxth	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d19e      	bne.n	80013c0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	6a39      	ldr	r1, [r7, #32]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f8cc 	bl	8001624 <I2C_WaitOnSTOPFlagUntilTimeout>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e01a      	b.n	80014cc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2220      	movs	r2, #32
 800149c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_I2C_Master_Transmit+0x1e4>)
 80014aa:	400b      	ands	r3, r1
 80014ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2220      	movs	r2, #32
 80014b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e000      	b.n	80014cc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80014ca:	2302      	movs	r3, #2
  }
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	80002000 	.word	0x80002000
 80014d8:	fe00e800 	.word	0xfe00e800

080014dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d103      	bne.n	80014fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b01      	cmp	r3, #1
 8001506:	d007      	beq.n	8001518 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	619a      	str	r2, [r3, #24]
  }
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001534:	e022      	b.n	800157c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800153c:	d01e      	beq.n	800157c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153e:	f7ff fb57 	bl	8000bf0 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d302      	bcc.n	8001554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d113      	bne.n	800157c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e00f      	b.n	800159c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	4013      	ands	r3, r2
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	429a      	cmp	r2, r3
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	429a      	cmp	r2, r3
 8001598:	d0cd      	beq.n	8001536 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015b0:	e02c      	b.n	800160c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 f870 	bl	800169c <I2C_IsAcknowledgeFailed>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e02a      	b.n	800161c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015cc:	d01e      	beq.n	800160c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ce:	f7ff fb0f 	bl	8000bf0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d302      	bcc.n	80015e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d113      	bne.n	800160c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	f043 0220 	orr.w	r2, r3, #32
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2220      	movs	r2, #32
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e007      	b.n	800161c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d1cb      	bne.n	80015b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001630:	e028      	b.n	8001684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 f830 	bl	800169c <I2C_IsAcknowledgeFailed>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e026      	b.n	8001694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001646:	f7ff fad3 	bl	8000bf0 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	429a      	cmp	r2, r3
 8001654:	d302      	bcc.n	800165c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d113      	bne.n	8001684 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f043 0220 	orr.w	r2, r3, #32
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2220      	movs	r2, #32
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e007      	b.n	8001694 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b20      	cmp	r3, #32
 8001690:	d1cf      	bne.n	8001632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d151      	bne.n	800175a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016b6:	e022      	b.n	80016fe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016be:	d01e      	beq.n	80016fe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c0:	f7ff fa96 	bl	8000bf0 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d302      	bcc.n	80016d6 <I2C_IsAcknowledgeFailed+0x3a>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d113      	bne.n	80016fe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f043 0220 	orr.w	r2, r3, #32
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e02e      	b.n	800175c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	2b20      	cmp	r3, #32
 800170a:	d1d5      	bne.n	80016b8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2210      	movs	r2, #16
 8001712:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2220      	movs	r2, #32
 800171a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff fedd 	bl	80014dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6859      	ldr	r1, [r3, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <I2C_IsAcknowledgeFailed+0xc8>)
 800172e:	400b      	ands	r3, r1
 8001730:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f043 0204 	orr.w	r2, r3, #4
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2220      	movs	r2, #32
 8001742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	fe00e800 	.word	0xfe00e800

08001768 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	817b      	strh	r3, [r7, #10]
 8001776:	4613      	mov	r3, r2
 8001778:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	0d5b      	lsrs	r3, r3, #21
 8001784:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <I2C_TransferConfig+0x58>)
 800178a:	430b      	orrs	r3, r1
 800178c:	43db      	mvns	r3, r3
 800178e:	ea02 0103 	and.w	r1, r2, r3
 8001792:	897b      	ldrh	r3, [r7, #10]
 8001794:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001798:	7a7b      	ldrb	r3, [r7, #9]
 800179a:	041b      	lsls	r3, r3, #16
 800179c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	03ff63ff 	.word	0x03ff63ff

080017c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d138      	bne.n	800184c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e032      	b.n	800184e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	; 0x24
 80017f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6819      	ldr	r1, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
  }
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b20      	cmp	r3, #32
 800186e:	d139      	bne.n	80018e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800187a:	2302      	movs	r3, #2
 800187c:	e033      	b.n	80018e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2224      	movs	r2, #36	; 0x24
 800188a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e000      	b.n	80018e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018e4:	2302      	movs	r3, #2
  }
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_PWREx_EnableOverDrive+0x98>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a22      	ldr	r2, [pc, #136]	; (800198c <HAL_PWREx_EnableOverDrive+0x98>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_PWREx_EnableOverDrive+0x98>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001922:	f7ff f965 	bl	8000bf0 <HAL_GetTick>
 8001926:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001928:	e009      	b.n	800193e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800192a:	f7ff f961 	bl	8000bf0 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001938:	d901      	bls.n	800193e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e022      	b.n	8001984 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194a:	d1ee      	bne.n	800192a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001956:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001958:	f7ff f94a 	bl	8000bf0 <HAL_GetTick>
 800195c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800195e:	e009      	b.n	8001974 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001960:	f7ff f946 	bl	8000bf0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800196e:	d901      	bls.n	8001974 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e007      	b.n	8001984 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001980:	d1ee      	bne.n	8001960 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	40007000 	.word	0x40007000

08001994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e291      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8087 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b8:	4b96      	ldr	r3, [pc, #600]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00c      	beq.n	80019de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c4:	4b93      	ldr	r3, [pc, #588]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d112      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
 80019d0:	4b90      	ldr	r3, [pc, #576]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019dc:	d10b      	bne.n	80019f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b8d      	ldr	r3, [pc, #564]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x130>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d168      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e26b      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x7a>
 8001a00:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a83      	ldr	r2, [pc, #524]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e02e      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x9c>
 8001a16:	4b7f      	ldr	r3, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7e      	ldr	r2, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b7c      	ldr	r3, [pc, #496]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7b      	ldr	r2, [pc, #492]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a75      	ldr	r2, [pc, #468]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b73      	ldr	r3, [pc, #460]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a72      	ldr	r2, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xd8>
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6b      	ldr	r2, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff f8bc 	bl	8000bf0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f8b8 	bl	8000bf0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e21f      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f8a8 	bl	8000bf0 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f8a4 	bl	8000bf0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e20b      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x110>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d069      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad2:	4b50      	ldr	r3, [pc, #320]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ade:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x190>
 8001aea:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1df      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	493d      	ldr	r1, [pc, #244]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e040      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d023      	beq.n	8001b74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f85a 	bl	8000bf0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff f856 	bl	8000bf0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e1bd      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4929      	ldr	r1, [pc, #164]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
 8001b72:	e018      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a26      	ldr	r2, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff f836 	bl	8000bf0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff f832 	bl	8000bf0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e199      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d038      	beq.n	8001c24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f813 	bl	8000bf0 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff f80f 	bl	8000bf0 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e176      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x23a>
 8001bec:	e01a      	b.n	8001c24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7fe fff9 	bl	8000bf0 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c02:	f7fe fff5 	bl	8000bf0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d903      	bls.n	8001c18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e15c      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
 8001c14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a4 	beq.w	8001d7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b8b      	ldr	r3, [pc, #556]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a87      	ldr	r2, [pc, #540]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5a:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c66:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7e      	ldr	r2, [pc, #504]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7fe ffbd 	bl	8000bf0 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7fe ffb9 	bl	8000bf0 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e120      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x4d0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x31a>
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a6e      	ldr	r2, [pc, #440]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x33c>
 8001cb6:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a69      	ldr	r2, [pc, #420]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc2:	4b67      	ldr	r3, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a66      	ldr	r2, [pc, #408]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cce:	e01c      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x35e>
 8001cd8:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	4a60      	ldr	r2, [pc, #384]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	4a5a      	ldr	r2, [pc, #360]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	4b58      	ldr	r3, [pc, #352]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a57      	ldr	r2, [pc, #348]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7fe ff6d 	bl	8000bf0 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7fe ff69 	bl	8000bf0 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0ce      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ee      	beq.n	8001d1a <HAL_RCC_OscConfig+0x386>
 8001d3c:	e014      	b.n	8001d68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7fe ff57 	bl	8000bf0 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7fe ff53 	bl	8000bf0 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e0b8      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a3b      	ldr	r2, [pc, #236]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80a4 	beq.w	8001ecc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d06b      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d149      	bne.n	8001e2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a30      	ldr	r2, [pc, #192]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7fe ff24 	bl	8000bf0 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe ff20 	bl	8000bf0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e087      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	4313      	orrs	r3, r2
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001df6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe fef4 	bl	8000bf0 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fef0 	bl	8000bf0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e057      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x478>
 8001e2a:	e04f      	b.n	8001ecc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7fe feda 	bl	8000bf0 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fed6 	bl	8000bf0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e03d      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_OscConfig+0x4cc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4ac>
 8001e5e:	e035      	b.n	8001ecc <HAL_RCC_OscConfig+0x538>
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_RCC_OscConfig+0x544>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d028      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d121      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d11a      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800

08001edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0d0      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d910      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 020f 	bic.w	r2, r3, #15
 8001f0a:	4965      	ldr	r1, [pc, #404]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0b8      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	494d      	ldr	r1, [pc, #308]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d040      	beq.n	8002000 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d115      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e07f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e073      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06b      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4936      	ldr	r1, [pc, #216]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd0:	f7fe fe0e 	bl	8000bf0 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd8:	f7fe fe0a 	bl	8000bf0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e053      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1eb      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d210      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 020f 	bic.w	r2, r3, #15
 8002016:	4922      	ldr	r1, [pc, #136]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e032      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4916      	ldr	r1, [pc, #88]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206e:	f000 f821 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490a      	ldr	r1, [pc, #40]	; (80020a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1d0>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1d4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fcc4 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023c00 	.word	0x40023c00
 80020a4:	40023800 	.word	0x40023800
 80020a8:	080030e0 	.word	0x080030e0
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020ba:	2100      	movs	r1, #0
 80020bc:	6079      	str	r1, [r7, #4]
 80020be:	2100      	movs	r1, #0
 80020c0:	60f9      	str	r1, [r7, #12]
 80020c2:	2100      	movs	r1, #0
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020c6:	2100      	movs	r1, #0
 80020c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ca:	4952      	ldr	r1, [pc, #328]	; (8002214 <HAL_RCC_GetSysClockFreq+0x160>)
 80020cc:	6889      	ldr	r1, [r1, #8]
 80020ce:	f001 010c 	and.w	r1, r1, #12
 80020d2:	2908      	cmp	r1, #8
 80020d4:	d00d      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80020d6:	2908      	cmp	r1, #8
 80020d8:	f200 8094 	bhi.w	8002204 <HAL_RCC_GetSysClockFreq+0x150>
 80020dc:	2900      	cmp	r1, #0
 80020de:	d002      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x32>
 80020e0:	2904      	cmp	r1, #4
 80020e2:	d003      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x38>
 80020e4:	e08e      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020e6:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <HAL_RCC_GetSysClockFreq+0x164>)
 80020e8:	60bb      	str	r3, [r7, #8]
      break;
 80020ea:	e08e      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <HAL_RCC_GetSysClockFreq+0x168>)
 80020ee:	60bb      	str	r3, [r7, #8]
      break;
 80020f0:	e08b      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f2:	4948      	ldr	r1, [pc, #288]	; (8002214 <HAL_RCC_GetSysClockFreq+0x160>)
 80020f4:	6849      	ldr	r1, [r1, #4]
 80020f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80020fa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020fc:	4945      	ldr	r1, [pc, #276]	; (8002214 <HAL_RCC_GetSysClockFreq+0x160>)
 80020fe:	6849      	ldr	r1, [r1, #4]
 8002100:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002104:	2900      	cmp	r1, #0
 8002106:	d024      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002108:	4942      	ldr	r1, [pc, #264]	; (8002214 <HAL_RCC_GetSysClockFreq+0x160>)
 800210a:	6849      	ldr	r1, [r1, #4]
 800210c:	0989      	lsrs	r1, r1, #6
 800210e:	4608      	mov	r0, r1
 8002110:	f04f 0100 	mov.w	r1, #0
 8002114:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002118:	f04f 0500 	mov.w	r5, #0
 800211c:	ea00 0204 	and.w	r2, r0, r4
 8002120:	ea01 0305 	and.w	r3, r1, r5
 8002124:	493d      	ldr	r1, [pc, #244]	; (800221c <HAL_RCC_GetSysClockFreq+0x168>)
 8002126:	fb01 f003 	mul.w	r0, r1, r3
 800212a:	2100      	movs	r1, #0
 800212c:	fb01 f102 	mul.w	r1, r1, r2
 8002130:	1844      	adds	r4, r0, r1
 8002132:	493a      	ldr	r1, [pc, #232]	; (800221c <HAL_RCC_GetSysClockFreq+0x168>)
 8002134:	fba2 0101 	umull	r0, r1, r2, r1
 8002138:	1863      	adds	r3, r4, r1
 800213a:	4619      	mov	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	461a      	mov	r2, r3
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	f7fe f860 	bl	8000208 <__aeabi_uldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4613      	mov	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e04a      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_GetSysClockFreq+0x160>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	461a      	mov	r2, r3
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002162:	f04f 0100 	mov.w	r1, #0
 8002166:	ea02 0400 	and.w	r4, r2, r0
 800216a:	ea03 0501 	and.w	r5, r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	014b      	lsls	r3, r1, #5
 800217c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002180:	0142      	lsls	r2, r0, #5
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	1b00      	subs	r0, r0, r4
 8002188:	eb61 0105 	sbc.w	r1, r1, r5
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	018b      	lsls	r3, r1, #6
 8002196:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800219a:	0182      	lsls	r2, r0, #6
 800219c:	1a12      	subs	r2, r2, r0
 800219e:	eb63 0301 	sbc.w	r3, r3, r1
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	00d9      	lsls	r1, r3, #3
 80021ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021b0:	00d0      	lsls	r0, r2, #3
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	1912      	adds	r2, r2, r4
 80021b8:	eb45 0303 	adc.w	r3, r5, r3
 80021bc:	f04f 0000 	mov.w	r0, #0
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	0299      	lsls	r1, r3, #10
 80021c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021ca:	0290      	lsls	r0, r2, #10
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	f7fe f814 	bl	8000208 <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4613      	mov	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_RCC_GetSysClockFreq+0x160>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	3301      	adds	r3, #1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	60bb      	str	r3, [r7, #8]
      break;
 8002202:	e002      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_RCC_GetSysClockFreq+0x164>)
 8002206:	60bb      	str	r3, [r7, #8]
      break;
 8002208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220a:	68bb      	ldr	r3, [r7, #8]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bdb0      	pop	{r4, r5, r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	00f42400 	.word	0x00f42400
 800221c:	017d7840 	.word	0x017d7840

08002220 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_RCC_GetHCLKFreq+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000000 	.word	0x20000000

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800223c:	f7ff fff0 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0b5b      	lsrs	r3, r3, #13
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCC_GetPCLK2Freq+0x24>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	080030f0 	.word	0x080030f0

08002260 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	220f      	movs	r2, #15
 800226e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_GetClockConfig+0x5c>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_RCC_GetClockConfig+0x5c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_RCC_GetClockConfig+0x5c>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_GetClockConfig+0x5c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCC_GetClockConfig+0x60>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 020f 	and.w	r2, r3, #15
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	601a      	str	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40023c00 	.word	0x40023c00

080022c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d012      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022ec:	4b69      	ldr	r3, [pc, #420]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a68      	ldr	r2, [pc, #416]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022f6:	6093      	str	r3, [r2, #8]
 80022f8:	4b66      	ldr	r3, [pc, #408]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002300:	4964      	ldr	r1, [pc, #400]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d017      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800231e:	4b5d      	ldr	r3, [pc, #372]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232c:	4959      	ldr	r1, [pc, #356]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d017      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800235a:	4b4e      	ldr	r3, [pc, #312]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002360:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	494a      	ldr	r1, [pc, #296]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002378:	d101      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002386:	2301      	movs	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 808b 	beq.w	80024be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	4a39      	ldr	r2, [pc, #228]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6413      	str	r3, [r2, #64]	; 0x40
 80023b4:	4b37      	ldr	r3, [pc, #220]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023c0:	4b35      	ldr	r3, [pc, #212]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a34      	ldr	r2, [pc, #208]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023cc:	f7fe fc10 	bl	8000bf0 <HAL_GetTick>
 80023d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7fe fc0c 	bl	8000bf0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e357      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023e6:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d035      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d02e      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002410:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002418:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002432:	4a18      	ldr	r2, [pc, #96]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d114      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fbd4 	bl	8000bf0 <HAL_GetTick>
 8002448:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7fe fbd0 	bl	8000bf0 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e319      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0ee      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800247a:	d111      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800248a:	400b      	ands	r3, r1
 800248c:	4901      	ldr	r1, [pc, #4]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
 8002492:	e00b      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002494:	40023800 	.word	0x40023800
 8002498:	40007000 	.word	0x40007000
 800249c:	0ffffcff 	.word	0x0ffffcff
 80024a0:	4bb1      	ldr	r3, [pc, #708]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4ab0      	ldr	r2, [pc, #704]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	4bae      	ldr	r3, [pc, #696]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	49ab      	ldr	r1, [pc, #684]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ca:	4ba7      	ldr	r3, [pc, #668]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d0:	4aa5      	ldr	r2, [pc, #660]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024da:	4ba3      	ldr	r3, [pc, #652]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	49a0      	ldr	r1, [pc, #640]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f8:	4b9b      	ldr	r3, [pc, #620]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002506:	4998      	ldr	r1, [pc, #608]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800251a:	4b93      	ldr	r3, [pc, #588]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002528:	498f      	ldr	r1, [pc, #572]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800253c:	4b8a      	ldr	r3, [pc, #552]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254a:	4987      	ldr	r1, [pc, #540]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800255e:	4b82      	ldr	r3, [pc, #520]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	497e      	ldr	r1, [pc, #504]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002580:	4b79      	ldr	r3, [pc, #484]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	4976      	ldr	r1, [pc, #472]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025a2:	4b71      	ldr	r3, [pc, #452]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f023 020c 	bic.w	r2, r3, #12
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b0:	496d      	ldr	r1, [pc, #436]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025c4:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	4965      	ldr	r1, [pc, #404]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025e6:	4b60      	ldr	r3, [pc, #384]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	495c      	ldr	r1, [pc, #368]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002608:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	4954      	ldr	r1, [pc, #336]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800262a:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	494b      	ldr	r1, [pc, #300]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800264c:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	4943      	ldr	r1, [pc, #268]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267c:	493a      	ldr	r1, [pc, #232]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002690:	4b35      	ldr	r3, [pc, #212]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269e:	4932      	ldr	r1, [pc, #200]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d011      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c0:	4929      	ldr	r1, [pc, #164]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002700:	4919      	ldr	r1, [pc, #100]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002724:	4910      	ldr	r1, [pc, #64]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d006      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 80d9 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002746:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800274a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7fe fa50 	bl	8000bf0 <HAL_GetTick>
 8002750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002752:	e00b      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002754:	f7fe fa4c 	bl	8000bf0 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d904      	bls.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e197      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800276c:	4b6c      	ldr	r3, [pc, #432]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ed      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d021      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11d      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800278c:	4b64      	ldr	r3, [pc, #400]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800278e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800279a:	4b61      	ldr	r3, [pc, #388]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800279c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a0:	0e1b      	lsrs	r3, r3, #24
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	019a      	lsls	r2, r3, #6
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	061b      	lsls	r3, r3, #24
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	071b      	lsls	r3, r3, #28
 80027c0:	4957      	ldr	r1, [pc, #348]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d02e      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f2:	d129      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027f4:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002808:	0f1b      	lsrs	r3, r3, #28
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	019a      	lsls	r2, r3, #6
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	071b      	lsls	r3, r3, #28
 8002828:	493d      	ldr	r1, [pc, #244]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002836:	f023 021f 	bic.w	r2, r3, #31
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	3b01      	subs	r3, #1
 8002840:	4937      	ldr	r1, [pc, #220]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01d      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285a:	0e1b      	lsrs	r3, r3, #24
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002868:	0f1b      	lsrs	r3, r3, #28
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	019a      	lsls	r2, r3, #6
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	431a      	orrs	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	071b      	lsls	r3, r3, #28
 8002888:	4925      	ldr	r1, [pc, #148]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d011      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	019a      	lsls	r2, r3, #6
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	071b      	lsls	r3, r3, #28
 80028b8:	4919      	ldr	r1, [pc, #100]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a16      	ldr	r2, [pc, #88]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe f990 	bl	8000bf0 <HAL_GetTick>
 80028d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028d4:	f7fe f98c 	bl	8000bf0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0d7      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	f040 80cd 	bne.w	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a08      	ldr	r2, [pc, #32]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002906:	f7fe f973 	bl	8000bf0 <HAL_GetTick>
 800290a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800290e:	f7fe f96f 	bl	8000bf0 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b64      	cmp	r3, #100	; 0x64
 800291a:	d903      	bls.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e0ba      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002920:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002924:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800292c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002930:	d0ed      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02e      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12a      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800295a:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002968:	4b4d      	ldr	r3, [pc, #308]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	0f1b      	lsrs	r3, r3, #28
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	019a      	lsls	r2, r3, #6
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	061b      	lsls	r3, r3, #24
 8002988:	431a      	orrs	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	071b      	lsls	r3, r3, #28
 800298e:	4944      	ldr	r1, [pc, #272]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002996:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	3b01      	subs	r3, #1
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	493d      	ldr	r1, [pc, #244]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d022      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c4:	d11d      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	0e1b      	lsrs	r3, r3, #24
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	0f1b      	lsrs	r3, r3, #28
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	019a      	lsls	r2, r3, #6
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	431a      	orrs	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	071b      	lsls	r3, r3, #28
 80029fa:	4929      	ldr	r1, [pc, #164]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d028      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	0e1b      	lsrs	r3, r3, #24
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	019a      	lsls	r2, r3, #6
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	4917      	ldr	r1, [pc, #92]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	4911      	ldr	r1, [pc, #68]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe f8c0 	bl	8000bf0 <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a74:	f7fe f8bc 	bl	8000bf0 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e007      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a92:	d1ef      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800

08002aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e049      	b.n	8002b4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f841 	bl	8002b52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 fa00 	bl	8002ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e054      	b.n	8002c2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d022      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d01d      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <HAL_TIM_Base_Start_IT+0xd4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d018      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d013      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00e      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_TIM_Base_Start_IT+0xe0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <HAL_TIM_Base_Start_IT+0xe4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x80>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_TIM_Base_Start_IT+0xe8>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d115      	bne.n	8002c14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_TIM_Base_Start_IT+0xec>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d015      	beq.n	8002c26 <HAL_TIM_Base_Start_IT+0xbe>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d011      	beq.n	8002c26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	e008      	b.n	8002c26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e000      	b.n	8002c28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40010400 	.word	0x40010400
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	40001800 	.word	0x40001800
 8002c54:	00010007 	.word	0x00010007

08002c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d122      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0202 	mvn.w	r2, #2
 8002c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f905 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002ca0:	e005      	b.n	8002cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8f7 	bl	8002e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f908 	bl	8002ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d122      	bne.n	8002d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11b      	bne.n	8002d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0204 	mvn.w	r2, #4
 8002cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8db 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f8cd 	bl	8002e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f8de 	bl	8002ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d122      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d11b      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0208 	mvn.w	r2, #8
 8002d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2204      	movs	r2, #4
 8002d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8b1 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8a3 	bl	8002e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f8b4 	bl	8002ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0210 	mvn.w	r2, #16
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2208      	movs	r2, #8
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f887 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f879 	bl	8002e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f88a 	bl	8002ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10e      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0201 	mvn.w	r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fda0 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d10e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d107      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f91a 	bl	800303c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e16:	d10e      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d107      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f90d 	bl	8003050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d10e      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d107      	bne.n	8002e62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f838 	bl	8002ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d10e      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d107      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f06f 0220 	mvn.w	r2, #32
 8002e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f8cd 	bl	8003028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a40      	ldr	r2, [pc, #256]	; (8002ffc <TIM_Base_SetConfig+0x114>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f06:	d00f      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a3d      	ldr	r2, [pc, #244]	; (8003000 <TIM_Base_SetConfig+0x118>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00b      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a3c      	ldr	r2, [pc, #240]	; (8003004 <TIM_Base_SetConfig+0x11c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d007      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3b      	ldr	r2, [pc, #236]	; (8003008 <TIM_Base_SetConfig+0x120>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d003      	beq.n	8002f28 <TIM_Base_SetConfig+0x40>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3a      	ldr	r2, [pc, #232]	; (800300c <TIM_Base_SetConfig+0x124>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d108      	bne.n	8002f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a2f      	ldr	r2, [pc, #188]	; (8002ffc <TIM_Base_SetConfig+0x114>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f48:	d027      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <TIM_Base_SetConfig+0x118>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d023      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <TIM_Base_SetConfig+0x11c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01f      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <TIM_Base_SetConfig+0x120>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01b      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a29      	ldr	r2, [pc, #164]	; (800300c <TIM_Base_SetConfig+0x124>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d017      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a28      	ldr	r2, [pc, #160]	; (8003010 <TIM_Base_SetConfig+0x128>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d013      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a27      	ldr	r2, [pc, #156]	; (8003014 <TIM_Base_SetConfig+0x12c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00f      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a26      	ldr	r2, [pc, #152]	; (8003018 <TIM_Base_SetConfig+0x130>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00b      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a25      	ldr	r2, [pc, #148]	; (800301c <TIM_Base_SetConfig+0x134>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a24      	ldr	r2, [pc, #144]	; (8003020 <TIM_Base_SetConfig+0x138>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d003      	beq.n	8002f9a <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a23      	ldr	r2, [pc, #140]	; (8003024 <TIM_Base_SetConfig+0x13c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d108      	bne.n	8002fac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <TIM_Base_SetConfig+0x114>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_Base_SetConfig+0xf8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a0c      	ldr	r2, [pc, #48]	; (800300c <TIM_Base_SetConfig+0x124>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d103      	bne.n	8002fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	615a      	str	r2, [r3, #20]
}
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40010000 	.word	0x40010000
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800
 8003008:	40000c00 	.word	0x40000c00
 800300c:	40010400 	.word	0x40010400
 8003010:	40014000 	.word	0x40014000
 8003014:	40014400 	.word	0x40014400
 8003018:	40014800 	.word	0x40014800
 800301c:	40001800 	.word	0x40001800
 8003020:	40001c00 	.word	0x40001c00
 8003024:	40002000 	.word	0x40002000

08003028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <__libc_init_array>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	4d0d      	ldr	r5, [pc, #52]	; (800309c <__libc_init_array+0x38>)
 8003068:	4c0d      	ldr	r4, [pc, #52]	; (80030a0 <__libc_init_array+0x3c>)
 800306a:	1b64      	subs	r4, r4, r5
 800306c:	10a4      	asrs	r4, r4, #2
 800306e:	2600      	movs	r6, #0
 8003070:	42a6      	cmp	r6, r4
 8003072:	d109      	bne.n	8003088 <__libc_init_array+0x24>
 8003074:	4d0b      	ldr	r5, [pc, #44]	; (80030a4 <__libc_init_array+0x40>)
 8003076:	4c0c      	ldr	r4, [pc, #48]	; (80030a8 <__libc_init_array+0x44>)
 8003078:	f000 f820 	bl	80030bc <_init>
 800307c:	1b64      	subs	r4, r4, r5
 800307e:	10a4      	asrs	r4, r4, #2
 8003080:	2600      	movs	r6, #0
 8003082:	42a6      	cmp	r6, r4
 8003084:	d105      	bne.n	8003092 <__libc_init_array+0x2e>
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	f855 3b04 	ldr.w	r3, [r5], #4
 800308c:	4798      	blx	r3
 800308e:	3601      	adds	r6, #1
 8003090:	e7ee      	b.n	8003070 <__libc_init_array+0xc>
 8003092:	f855 3b04 	ldr.w	r3, [r5], #4
 8003096:	4798      	blx	r3
 8003098:	3601      	adds	r6, #1
 800309a:	e7f2      	b.n	8003082 <__libc_init_array+0x1e>
 800309c:	08003100 	.word	0x08003100
 80030a0:	08003100 	.word	0x08003100
 80030a4:	08003100 	.word	0x08003100
 80030a8:	08003104 	.word	0x08003104

080030ac <memset>:
 80030ac:	4402      	add	r2, r0
 80030ae:	4603      	mov	r3, r0
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memset+0xa>
 80030b4:	4770      	bx	lr
 80030b6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ba:	e7f9      	b.n	80030b0 <memset+0x4>

080030bc <_init>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	bf00      	nop
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr

080030c8 <_fini>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr
